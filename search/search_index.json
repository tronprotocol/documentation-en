{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the java-tron user manual!","text":"<p>java-tron is a TRON client implemented in Java, it provides completely open source code, you can download the java-tron source code on Github. This article will introduce the knowledge related to java-tron. Through this article, you will learn how to use java-tron and how to participate in the development and maintenance of java-tron, including the following parts:</p> <ul> <li>Getting Started With java-tron</li> <li>Using java-tron</li> <li>API</li> <li>Core Protocol</li> <li>For java-tron Developers</li> <li>For Dapp Developers</li> <li>Clients</li> <li>Releases</li> </ul> <p>For other TRON related information, please visit the official website tron.network or the following resource links:</p> <ul> <li>TRON Whitepaper</li> <li>TRON Improvement Proposals (TIPs)</li> <li>TRON Developer Hub</li> </ul>"},{"location":"glossary/","title":"Glossary","text":"<p>energyUsage</p> <p>The Energy conumption of the contract caller in one contract trigger.</p> <p>energyFee</p> <p>The number of TRX burned from the contract caller for Energy conumption in one contract trigger.</p> <p>originEnergyUsage</p> <p>The total Energy conumption of the contract developer in one contract trigger.</p> <p>energyUsageTotal</p> <p>The total Energy conumption of the contract developer and the contract caller combined.</p> <p>Feelimit</p> <p>When the user triggers or create the contract, this is used to set the usage limit of the Energy consumption got from burning TRX or staking TRX, Energy got from staking TRX will be used first.</p> <p>CallValue</p> <p>When the user triggers or create the contract, this can be used to send TRX to the contract.</p> <p>consume_user_resource_percent</p> <p>For a contract, Resource consumption is composed of two parts, one part is afforded by contract developer and the other part is afforded by contract caller. This is the percentage of the two parts in the Resource consumption.</p> <p>origin_energy_limit</p> <p>The usage limit of the Energy consumption of the developer in one  contract trigger, should be greater than 0.</p> <p>net_usage</p> <p>The Bandwidth consumption in one contract trigger.  (NetFee not included)</p> <p>net_fee</p> <p>The TRX burned for Bandwidth consumption in one contract trigger.</p> <p>Bandwidth</p> <p>The Bandwidth Points consumed by a transaction is the size of the byte array in this transaction. If the byte array length of a transaction is 100, then the transaction needs to consume 100 Bandwidth Points.</p> <p>Energy</p> <p>The creation and operation of a smart contract consume CPU resources. It takes time for smart contracts to operate in virtual machines (VMs), and the time consumed in the system is calculated in microseconds. CPU resources are consumed in energy, which means 1 Energy = 1 Microsecond (\u03bcs). If a contract takes 100 \u03bcs to execute in a VM, it needs to consume 100 Energy.</p> <p>TRON Power(TP)</p> <p>1 staked TRX = 1 TP, TP can be used to vote, 1 TP = 1 vote.</p> <p>Super Representative(SR)</p> <p>The current block producing Top 27 nodes.</p>"},{"location":"api/http/","title":"HTTP API","text":"<p>This article introduces FullNode's HTTP APIs and their usage.</p> <p>Note</p> <p>Although TRON has avoided XSS by setting the Content-Type of HTTP APIs to application/json, there are a few APIs that don't have input validation. To better protect user data security, we recommend that you correctly encode any data from APIs before using it in any UI, especially when the parameter visible equals true.</p> <p>Here is a typical XSS protection method: Encode all data from the APIs in HTML. Use methods such as <code>encodeURIComponent()</code> or <code>escape()</code> to encode the data, which can convert special characters into their HTML entities and prevent them from being interpreted as HTML code by the browser.</p> <p>Please ensure that XSS protection is implemented for all data from the APIs to maintain the security of user data. We understand that you may need more information about XSS protection. It is recommended that you refer to the following resources: OWASP XSS Prevention Cheat Sheet.</p> <p>The TRON node's HTTP API supports two address formats. Developers can use the visible parameter to control the address format in both requests and responses.</p> <p>The rules for the visible parameter are as follows:</p> <ul> <li><code>\"visible\": false (default)</code>\uff1a Addresses in parameters and return values must be in HexString format. If this parameter is omitted, the default value is used.</li> <li><code>\"visible\": true</code>\uff1aAddresses in parameters and return values must be in Base58Check format.</li> </ul> <p>How to Set:\uff1a</p> <ol> <li> <p>For GET requests or queries without parameters Append <code>visible=true</code> as a URL query parameter. <pre><code>http://127.0.0.1:8090/wallet/listexchanges?visible=true\n</code></pre></p> </li> <li> <p>For POST requests Add <code>\"visible\": true</code> to the JSON request body. <pre><code>curl -X POST http://127.0.0.1:8090/wallet/createtransaction -d\n'{\n    \"owner_address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\",\n    \"to_address\": \"TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\",\n    \"amount\": 1000000,\n    \"visible\": true\n}'\n</code></pre></p> </li> </ol>"},{"location":"api/http/#fullnode-http-api","title":"Fullnode HTTP API","text":"<p>The Fullnode HTTP API is categorized as follows:</p> <ul> <li>Accounts</li> <li>Transfers and Transactions</li> <li>Account Resources</li> <li>Query the Network</li> <li>Smart Contracts</li> <li>TRC-10 Token</li> <li>Voting &amp; SRs</li> <li>Proposals</li> <li>DEX Exchange</li> <li>Pending Pool</li> </ul> <p></p>"},{"location":"api/http/#accounts","title":"Accounts","text":"<p>The following are the APIs related to on-chain accounts:</p> <ul> <li>wallet/validateaddress</li> <li>wallet/createaccount</li> <li>wallet/getaccount</li> <li>wallet/updateaccount</li> <li>wallet/accountpermissionupdate</li> <li>wallet/getaccountbalance</li> <li>wallet/setaccountid</li> <li>wallet/getaccountbyid</li> </ul>"},{"location":"api/http/#walletvalidateaddress","title":"wallet/validateaddress","text":"<p>Description: Validates if a TRON address is effective. This is useful for pre-checking user-inputted addresses in applications before sending a transaction.</p> <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/validateaddress -d '{\"address\": \"4189139CB1387AF85E3D24E212A008AC974967E561\"}'\n</code></pre> <p>Parameters:  * <code>address</code>:can be in Base58Checksum, hexString, or base64 format.</p> <p>Return Value: Indicates whether the address is valid or invalid. Example: <pre><code># Success Example\n{\n    \"result\": true,\n    \"message\": \"Hex string format\"\n}\n\n# Error Example\n{\n    \"result\": false,\n    \"message\": \"Invalid address\"\n}\n</code></pre></p>"},{"location":"api/http/#walletcreateaccount","title":"wallet/createaccount","text":"<p>Description: Activates an account. If the creator's account has enough Bandwidth from staking TRX, this only consumes Bandwidth. Otherwise, it burns 0.1 TRX for Bandwidth and an additional 1 TRX as an account creation fee. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/createaccount -d '{\"owner_address\":\"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"account_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\"}'\n</code></pre> Parameters:</p> <ul> <li><code>owner_address</code>: The creator's address, which must be an activated account.</li> <li><code>account_address</code>: The new account address to be activated, which must be generated offline beforehand.</li> <li><code>Permission_id</code> (optional): Specifies the ID of the Account Management Permission used to sign the transaction.</li> <li> <ul> <li><code>visible</code> (optional): Sets the address format. <code>true</code> for Base58Check, <code>false</code> (or omitted) for HexString.</li> </ul> </li> </ul> <p>Return Value: An unsigned transaction for activating the account.</p>"},{"location":"api/http/#walletgetaccount","title":"wallet/getaccount","text":"<p>Description: Queries and returns the complete on-chain information for a specified TRON account, including balance, resources, permissions, and assets. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getaccount -d '{\"address\": \"41E552F6487585C2B58BC2C9BB4492BC1F17132CD0\"}'\n</code></pre> \u200b\u53c2\u6570\u200b\uff1a * <code>address</code>: The account address to query. * * <code>visible</code> (optional): Sets the address format. <code>true</code> for Base58Check, <code>false</code> (or omitted) for HexString.</p> <p>Return Value: An Account object.</p>"},{"location":"api/http/#walletupdateaccount","title":"wallet/updateaccount","text":"<p>Description: Updates or sets the on-chain name (<code>account_name</code>) for a specified TRON account. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/updateaccount -d '{\"account_name\": \"0x7570646174654e616d6531353330383933343635353139\" ,\"owner_address\":\"41d1e7a6bc354106cb410e65ff8b181c600ff14292\"}'\n</code></pre> \u200b\u53c2\u6570\u200b\uff1a</p> <ul> <li><code>account_name</code>: The account name, in hexString format by default.</li> <li><code>owner_address</code>: The address of the account to be updated, in hexString format by default.</li> <li><code>Permission_id</code> (optional): Specifies the ID of the Account Management Permission used to sign the transaction.</li> <li> <ul> <li><code>visible</code> (optional): Sets the address format. <code>true</code> for Base58Check, <code>false</code> (or omitted) for HexString.</li> </ul> </li> </ul> <p>Return Value: An unsigned transaction for updating the account name.</p>"},{"location":"api/http/#walletaccountpermissionupdate","title":"wallet/accountpermissionupdate","text":"<p>Description: Modifies the permission structure of an account. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/accountpermissionupdate -d\n'{\n    \"owner_address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\",\n    \"owner\": {\n        \"type\": 0,\n        \"permission_name\": \"owner\",\n        \"threshold\": 1,\n        \"keys\": [{\n            \"address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\",\n            \"weight\": 1\n        }]\n    },\n    \"witness\": {\n        \"type\": 1,\n        \"permission_name\": \"witness\",\n        \"threshold\": 1,\n        \"keys\": [{\n            \"address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\",\n            \"weight\": 1\n        }]\n    },\n    \"actives\": [{\n        \"type\": 2,\n        \"permission_name\": \"active12323\",\n        \"threshold\": 2,\n        \"operations\": \"7fff1fc0033e0000000000000000000000000000000000000000000000000000\",\n        \"keys\": [{\n            \"address\": \"TNhXo1GbRNCuorvYu5JFWN3m2NYr9QQpVR\",\n            \"weight\": 1\n        }, {\n            \"address\": \"TKwhcDup8L2PH5r6hxp5CQvQzZqJLmKvZP\",\n            \"weight\": 1\n        }]\n    }],\n    \"visible\": true}'\n</code></pre> Parameters:</p> <ul> <li><code>owner_address</code>: The address of the account creating the contract, in hexString format by default.</li> <li><code>owner</code>: The permission details for the account's owner.</li> <li><code>witness</code>: The permission details for block production. Not required if the account is not a witness.</li> <li><code>actives</code>: The permission details for other functionalities.</li> <li><code>visible</code> (optional): Sets the address format. <code>true</code> for Base58Check, <code>false</code> (or omitted) for HexString.</li> </ul> <p>Return Value: An unsigned transaction.</p>"},{"location":"api/http/#walletgetaccountbalance","title":"wallet/getaccountbalance","text":"<p>Description: Queries the TRX balance of a TRON account at a specific historical block height. The following official nodes currently support this query:</p> <ul> <li>13.228.119.63</li> <li>18.139.193.235</li> <li>18.141.79.38</li> <li>18.139.248.26</li> </ul> <p>A local node must have <code>storage.balance.history.lookup=true</code> enabled in its configuration file. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getaccountbalance -d\n'{\n    \"account_identifier\": {\n        \"address\": \"TLLM21wteSPs4hKjbxgmH1L6poyMjeTbHm\"\n    },\n    \"block_identifier\": {\n        \"hash\": \"0000000000010c4a732d1e215e87466271e425c86945783c3d3f122bfa5affd9\",\n        \"number\": 68682\n    },\n    \"visible\": true\n}'\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>account_identifier.address</code>: The account address to query.</li> <li><code>block_identifier.hash</code>: The hash of the target block.</li> <li><code>block_identifier.number</code>: The height (block number) of the target block.</li> <li><code>visible</code>(optional): Sets the address format. true for Base58Check, false (or omitted) for HexString.</li> </ul> <p>Return Value Example: <pre><code>{\n    \"balance\": 64086449348265042,\n    \"block_identifier\": {\n        \"hash\": \"0000000000010c4a732d1e215e87466271e425c86945783c3d3f122bfa5affd9\",\n        \"number\": 68682\n    }\n}\n</code></pre></p>"},{"location":"api/http/#walletsetaccountid","title":"wallet/setaccountid","text":"<p>Description: Sets or updates a custom Account ID (<code>account_id</code>) for a specified TRON account. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/setaccountid -d '{\n\"owner_address\":\"41a7d8a35b260395c14aa456297662092ba3b76fc0\",\"account_id\":\"6161616162626262\"}'\n</code></pre> Parameters:</p> <ul> <li><code>owner_address</code>: The address of the transaction creator, in hexString format by default.</li> <li><code>account_id</code>: The account ID, in hexString format by default.</li> <li> <ul> <li><code>visible</code> (optional): Sets the address format. <code>true</code> for Base58Check, <code>false</code> (or omitted) for HexString.</li> </ul> </li> </ul> <p>Return Value: An unsigned transaction for set the Account ID.</p>"},{"location":"api/http/#walletgetaccountbyid","title":"wallet/getaccountbyid","text":"<p>Description: Queries account information by its <code>account_id</code>. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getaccountbyid -d\n'{\"account_id\":\"6161616162626262\"}'\n</code></pre> Parameter: <code>account_id</code> in hexString format by default.</p> <p>Return Value: An Account object.</p> <p></p>"},{"location":"api/http/#transfers-and-transactions","title":"Transfers and transactions","text":"<p>The following are transfer and transaction related APIs:</p> <ul> <li>wallet/createtransaction</li> <li>wallet/broadcasttransaction</li> <li>wallet/broadcasthex</li> <li>wallet/getsignweight</li> <li>wallet/getapprovedlist</li> </ul>"},{"location":"api/http/#walletcreatetransaction","title":"wallet/createtransaction","text":"<p>Description: Creates a TRX transfer transaction. If the to_address does not exist, this transaction will also create the account on the blockchain <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/createtransaction -d '{\"to_address\": \"41e9d79cc47518930bc322d9bf7cddd260a0260a8d\", \"owner_address\": \"41D1E7A6BC354106CB410E65FF8B181C600FF14292\", \"amount\": 1000 }'\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>to_address</code>: The recipient's address.</li> <li><code>owner_address</code>: The sender's address.</li> <li><code>amount</code>: The transfer amount, in sun (1 TRX = 1,000,000 sun).</li> <li><code>Permission_id</code> (optional): Specifies the ID of the Account Management Permission used to sign the transaction.</li> <li><code>visible</code> (optional): Sets the address format. <code>true</code> for Base58Check, <code>false</code> (or omitted) for HexString.</li> </ul> <p>Return Value: An unsigned TRX transfer transaction.</p>"},{"location":"api/http/#walletbroadcasttransaction","title":"wallet/broadcasttransaction","text":"<p>Description: Broadcasts a signed transaction to the TRON network. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/broadcasttransaction -d '{\"signature\":[\"97c825b41c77de2a8bd65b3df55cd4c0df59c307c0187e42321dcc1cc455ddba583dd9502e17cfec5945b34cad0511985a6165999092a6dec84c2bdd97e649fc01\"],\"txID\":\"454f156bf1256587ff6ccdbc56e64ad0c51e4f8efea5490dcbc720ee606bc7b8\",\"raw_data\":{\"contract\":[{\"parameter\":{\"value\":{\"amount\":1000,\"owner_address\":\"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\",\"to_address\":\"41d1e7a6bc354106cb410e65ff8b181c600ff14292\"},\"type_url\":\"type.googleapis.com/protocol.TransferContract\"},\"type\":\"TransferContract\"}],\"ref_block_bytes\":\"267e\",\"ref_block_hash\":\"9a447d222e8de9f2\",\"expiration\":1530893064000,\"timestamp\":1530893006233}}'\n</code></pre> Parameter:</p> <ul> <li>A complete signed transaction object. This is created by adding a signature field to the unsigned transaction returned by a creation API (e.g., wallet/createtransaction).</li> </ul> <p>Return Value: * A JSON object with the broadcast result. * A successful response typically includes <code>\"result\": true</code>, indicating the node has received the transaction and started broadcasting it.</p> <p>Important Note: <code>\"result\": true</code> does not mean the transaction has been confirmed on the blockchain. It only means <code>\"successfully broadcast.\"</code> You must use the txID with the <code>wallet/gettransactioninfobyid</code> or <code>wallet/gettransactionbyid</code> endpoints to check the final on-chain status.</p>"},{"location":"api/http/#walletbroadcasthex","title":"wallet/broadcasthex","text":"<p>Description: Broadcasts a transaction that has been signed and serialized into a hexadecimal string. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/broadcasthex -d '{\"transaction\":\"0A8A010A0202DB2208C89D4811359A28004098A4E0A6B52D5A730802126F0A32747970652E676F6F676C65617069732E636F6D2F70726F746F636F6C2E5472616E736665724173736574436F6E747261637412390A07313030303030311215415A523B449890854C8FC460AB602DF9F31FE4293F1A15416B0580DA195542DDABE288FEC436C7D5AF769D24206412418BF3F2E492ED443607910EA9EF0A7EF79728DAAAAC0EE2BA6CB87DA38366DF9AC4ADE54B2912C1DEB0EE6666B86A07A6C7DF68F1F9DA171EEE6A370B3CA9CBBB00\"}'\n</code></pre> Parameters:</p> <ul> <li><code>transaction</code>: A complete transaction, including all data and signatures, serialized into a single hex string.</li> </ul> <p>Return Value:</p> <ul> <li>A JSON object with the broadcast result.</li> <li>A successful response typically includes <code>\"result\": true</code>, indicating the node has received the transaction and started broadcasting it.</li> </ul> <p>Important Note: <code>\"result\": true</code> does not mean the transaction has been confirmed on the blockchain. It only means <code>\"successfully broadcast.\"</code> You must use the txID with the <code>wallet/gettransactioninfobyid</code> or <code>wallet/gettransactionbyid</code> endpoints to check the final on-chain status.</p>"},{"location":"api/http/#walletgetsignweight","title":"wallet/getsignweight","text":"<p>Description: Checks the current signature status of a transaction requiring Account Management Permission. This is a key pre-broadcast check in the workflow for an Account Management Permission to see if the collected signature weight has met the required threshold.</p> <p>In a scenario involving an Account Management Permission, a transaction may require multiple private key signatures. This API is used to check whether the currently collected signature weight has reached the set threshold before all signatures are collected. It is a key pre-broadcast check tool in the signing process for an Account Management Permission.</p> <p><pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getsignweight -d '{\n    \"signature\": [\n        \"e0bd4a60f1b3c89d4da3894d400e7e32385f6dd690aee17fdac4e016cdb294c5128b66f62f3947a7182c015547496eba95510c113bda2a361d811b829343c36501\",\n        \"596ead6439d0f381e67f30b1ed6b3687f2bd53ce5140cdb126cfe4183235804741eeaf79b4e91f251fd7042380a9485d4d29d67f112d5387bc7457b355cd3c4200\"\n    ],\n    \"txID\": \"0ae84a8439f5aa8fd2c458879a4031a7452aebed8e6e99ffbccd26842d4323c4\",\n    \"raw_data\": {\n        \"contract\": [{\n            \"parameter\": {\n                \"value\": {\n                    \"amount\": 1000000,\n                    \"owner_address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\",\n                    \"to_address\": \"TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\"\n                },\n                \"type_url\": \"type.googleapis.com/protocol.TransferContract\"\n            },\n            \"type\": \"TransferContract\"\n        }],\n        \"ref_block_bytes\": \"163d\",\n        \"ref_block_hash\": \"77ef4ace148b05ba\",\n        \"expiration\": 1555664823000,\n        \"timestamp\": 1555664763418\n    },\n    \"raw_data_hex\": \"0a02163d220877ef4ace148b05ba40d8c5e5a6a32d5a69080112630a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412320a1541a7d8a35b260395c14aa456297662092ba3b76fc01215415a523b449890854c8fc460ab602df9f31fe4293f18c0843d2802709af4e1a6a32d\",\n    \"visible\": true}'\n</code></pre> Parameter:</p> <ul> <li>A complete transaction object that includes o<code>ne or more signatures</code>.</li> </ul> <p>Return Value: </p> <ul> <li>A JSON object detailing the signature status, including whether the weight threshold has been met, a list of signing addresses, permission details, the current signed weight, and the transaction itself.</li> </ul>"},{"location":"api/http/#walletgetapprovedlist","title":"wallet/getapprovedlist","text":"<p>Description: In the workflow of an Account Management Permission, this queries and returns the list of addresses that have already signed a transaction. It is similar to wallet/getsignweight but focuses on tracking progress.</p> <p>This interface is similar to wallet/getsignweight, but its main Description is to quickly obtain a list of parties that have provided valid signatures to track the progress for an Account Management Permission.</p> <p><pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getapprovedlist -d '{\n    \"signature\": [\n        \"e0bd4a60f1b3c89d4da3894d400e7e32385f6dd690aee17fdac4e016cdb294c5128b66f62f3947a7182c015547496eba95510c113bda2a361d811b829343c36501\",\n        \"596ead6439d0f381e67f30b1ed6b3687f2bd53ce5140cdb126cfe4183235804741eeaf79b4e91f251fd7042380a9485d4d29d67f112d5387bc7457b355cd3c4200\"\n    ],\n    \"txID\": \"0ae84a8439f5aa8fd2c458879a4031a7452aebed8e6e99ffbccd26842d4323c4\",\n    \"raw_data\": {\n        \"contract\": [{\n            \"parameter\": {\n                \"value\": {\n                    \"amount\": 1000000,\n                    \"owner_address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\",\n                    \"to_address\": \"TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\"\n                },\n                \"type_url\": \"type.googleapis.com/protocol.TransferContract\"\n            },\n            \"type\": \"TransferContract\"\n        }],\n        \"ref_block_bytes\": \"163d\",\n        \"ref_block_hash\": \"77ef4ace148b05ba\",\n        \"expiration\": 1555664823000,\n        \"timestamp\": 1555664763418\n    },\n    \"raw_data_hex\": \"0a02163d220877ef4ace148b05ba40d8c5e5a6a32d5a69080112630a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412320a1541a7d8a35b260395c14aa456297662092ba3b76fc01215415a523b449890854c8fc460ab602df9f31fe4293f18c0843d2802709af4e1a6a32d\",\n    \"visible\": true}'\n</code></pre> Parameters: * A complete transaction object with one or more signatures.</p> <p>Return Value:  * A JSON object containing the list of approved addresses and the overall signature status of the transaction.</p> <p></p>"},{"location":"api/http/#resources","title":"Resources","text":"<p>The following are the APIs related to on-chain resources:</p> <ul> <li>wallet/getaccountresource</li> <li>wallet/getaccountnet</li> <li>wallet/unfreezebalance</li> <li>wallet/getdelegatedresource</li> <li>wallet/getdelegatedresourceaccountindex</li> <li>wallet/freezebalancev2</li> <li>wallet/unfreezebalancev2</li> <li>wallet/cancelallunfreezev2</li> <li>wallet/delegateresource</li> <li>wallet/undelegateresource</li> <li>wallet/withdrawexpireunfreeze</li> <li>wallet/getavailableunfreezecount</li> <li>wallet/getcanwithdrawunfreezeamount</li> <li>wallet/getcandelegatedmaxsize</li> <li>wallet/getdelegatedresourcev2</li> <li>wallet/getdelegatedresourceaccountindexv2</li> </ul>"},{"location":"api/http/#walletgetaccountresource","title":"wallet/getaccountresource","text":"<p>Description: Queries the resource overview for a specified TRON account, including Bandwidth, Energy, TRON Power, and related staking information. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getaccountresource -d {\"address\" : \"419844f7600e018fd0d710e2145351d607b3316ce9\"}\n</code></pre> Parameters:</p> <ul> <li>address: The account address to query.</li> <li>visible (optional): Sets the address format.</li> </ul> <p>Return Value:  * A JSON object containing all resource-related information for the account.</p>"},{"location":"api/http/#walletgetaccountnet","title":"wallet/getaccountnet","text":"<p>Description: Queries the Bandwidth resource details for a specified TRON account.</p> <p><pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getaccountnet -d '{\"address\": \"4112E621D5577311998708F4D7B9F71F86DAE138B5\"}'\n</code></pre> Parameters:</p> <ul> <li><code>address</code>: The account address to query.</li> <li><code>visible</code> (optional): Sets the address format. <code>true</code> for Base58Check, <code>false</code> (or omitted) for HexString.</li> </ul> <p>Return Value:</p> <ul> <li>A JSON object containing all Bandwidth-related information for the account.</li> </ul>"},{"location":"api/http/#walletfreezebalance","title":"wallet/freezebalance","text":"<p>Description: [Deprecated] This API is from the TRON Stake 1.0 era and has been officially deprecated. Please use <code>freezebalancev2</code> for all new staking operations.</p>"},{"location":"api/http/#walletunfreezebalance","title":"wallet/unfreezebalance","text":"<p>Description: Unstakes TRX that was staked during the Stake 1.0 phase and has completed its freezing period. This will also cause the loss of the Bandwidth and TRON Power associated with this stake. <pre><code>curl -X POST http://127.0.0.1:8090/wallet/unfreezebalance -d '{\n\"owner_address\":\"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\",\n\"resource\": \"BANDWIDTH\",\n\"receiver_address\":\"414332f387585c2b58bc2c9bb4492bc1f17342cd1\"\n}'\n</code></pre> Parameters:</p> <ul> <li><code>owner_address</code>: The address of the account unstaking TRX.</li> <li><code>resource</code>: Can be Bandwidth or Energy.</li> <li><code>receiverAddress</code>: The address of the delegated account.</li> <li><code>Permission_id</code> (optional): Specifies the ID of the Account Management Permission used to sign the transaction.</li> <li><code>visible</code> (optional): Sets the address format. <code>true</code> for Base58Check, <code>false</code> (or omitted) for HexString.</li> </ul> <p>Return Value: * An unsigned unstaking transaction object.</p>"},{"location":"api/http/#walletgetdelegatedresource","title":"wallet/getdelegatedresource","text":"<p>Description: In Stake 1.0, queries the resources (Energy or Bandwidth) delegated from one account to another. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getdelegatedresource -d '\n{\n\"fromAddress\": \"419844f7600e018fd0d710e2145351d607b3316ce9\",\n\"toAddress\": \"41c6600433381c731f22fc2b9f864b14fe518b322f\"\n}'\n</code></pre> Parameters: * <code>fromAddress</code>: The address of the delegating account. * <code>toAddress</code>: The address of the recipient account. * <code>visible</code> (optional): Sets the address format. <code>true</code> for Base58Check, <code>false</code> (or omitted) for HexString.</p> <p>Return Value:  * A list of <code>DelegatedResource</code> objects.</p>"},{"location":"api/http/#walletgetdelegatedresourceaccountindex","title":"wallet/getdelegatedresourceaccountindex","text":"<p>Description: In Stake 1.0, queries the list of accounts that have delegated resources to or received resources from a specified account. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getdelegatedresourceaccountindex -d '\n{\n\"value\": \"419844f7600e018fd0d710e2145351d607b3316ce9\",\n}'\n</code></pre> Parameters:</p> <ul> <li><code>value</code>: The account address to query.</li> <li><code>visible</code> (optional): Sets the address format. true for Base58Check, false (or omitted) for HexString.</li> </ul> <p>Return Value:  * A <code>DelegatedResourceAccountIndex</code> object showing the account's delegation overview.</p>"},{"location":"api/http/#walletfreezebalancev2","title":"wallet/freezebalancev2","text":"<p>Description: Stakes TRX under the Stake 2.0 mechanism. This operation allows the staker to obtain a specified network resource (Energy or Bandwidth) and will simultaneously grant an equivalent amount of TRON Power (TP) at a 1:1 ratio with the staked TRX. <pre><code>curl -X POST http://127.0.0.1:8090/wallet/freezebalancev2 -d\n'{\n    \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\",\n    \"frozen_balance\": 10000,\n    \"resource\": \"BANDWIDTH\"\n}'\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>owner_address</code>: The address of the account staking TRX.</li> <li><code>frozen_balance</code>: The amount of TRX to stake, in sun.</li> <li><code>resource</code>: The type of resource to obtain, can be <code>BANDWIDTH</code> or <code>ENERGY</code>.</li> <li><code>Permission_id</code> (optional): Specifies the ID of the Account Management Permission used to sign the transaction.</li> <li><code>visible</code> (optional): Sets the address format. true for Base58Check, false (or omitted) for HexString.</li> </ul> <p>Return Value:  * An unsigned staking transaction object.</p>"},{"location":"api/http/#walletunfreezebalancev2","title":"wallet/unfreezebalancev2","text":"<p>Description: Unstakes TRX staked via the Stake 2.0 mechanism. This releases the corresponding amount of Bandwidth or Energy and reclaims the equivalent amount of TRON Power (TP). <pre><code>curl -X POST http://127.0.0.1:8090/wallet/unfreezebalancev2 -d\n'{\n    \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\",\n    \"unfreeze_balance\": 1000000,\n    \"resource\": \"BANDWIDTH\"\n}'\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>owner_address</code>: The address of the account unstaking TRX.</li> <li><code>resource</code>: The type of resource being unstaked, BANDWIDTH or ENERGY.</li> <li><code>unfreeze_balance</code>: The amount of TRX to unstake, in sun.</li> <li><code>Permission_id</code> (optional): Specifies the ID of the Account Management Permission used to sign the transaction.</li> <li><code>visible</code> (optional): Sets the address format. <code>true</code> for Base58Check, <code>false</code> (or omitted) for HexString.</li> </ul> <p>Return Value: </p> <ul> <li>An unsigned unstaking transaction object.</li> </ul>"},{"location":"api/http/#walletcancelallunfreezev2","title":"wallet/cancelallunfreezev2","text":"<p>Description: Immediately cancels all pending (not yet unlocked) unfreeze requests for an account. This has a dual effect:</p> <ul> <li>Restakes: All TRX from the canceled unfreezing requests are immediately restaked for the same resource type.</li> <li>Withdraws: Any TRX from unfreeze requests that have already completed their 14-day pending period is automatically withdrawn to the account's balance.</li> </ul> <pre><code>curl -X POST http://127.0.0.1:8090/wallet/cancelallunfreezev2 -d\n'{\n    \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\"\n}'\n</code></pre> <p>Parameters:</p> <ul> <li><code>owner_address</code>: The account address.</li> <li><code>Permission_id</code> (optional): Specifies the ID of the Account Management Permission used to sign the transaction.</li> <li><code>visible</code> (optional): Sets the address format. <code>true</code> for Base58Check, <code>false</code> (or omitted) for HexString.</li> </ul> <p>Return Value: </p> <ul> <li>An unsigned cancel unfreeze transaction object.</li> </ul>"},{"location":"api/http/#walletdelegateresource","title":"wallet/delegateresource","text":"<p>Description: Delegates <code>Energy</code> or <code>Bandwidth</code> obtained from staking TRX to another TRON account. TRON Power (TP) cannot be delegated.</p> <pre><code>curl -X POST http://127.0.0.1:8090/wallet/delegateresource -d\n'{\n    \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\",\n    \"receiver_address\": \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\",\n    \"balance\": 1000000,\n    \"resource\": \"BANDWIDTH\",\n    \"lock\": false\n}'\n</code></pre> <p>Parameters:</p> <ul> <li><code>owner_address</code>: The address of the transaction initiator.</li> <li><code>receiver_address</code>: The recipient account address.</li> <li><code>balance</code>: The amount of TRX whose corresponding resource share will be delegated, in sun.</li> <li><code>resource</code>: The type of resource to delegate, <code>BANDWIDTH</code> or <code>ENERGY</code>.</li> <li><code>lock</code>: true sets a 3-day lock on the delegation, during which it cannot be canceled. If resources are delegated again to the same address during the lock period, the 3-day timer resets. false means no lock period.</li> <li><code>lock_period</code>: A custom lock period in units of blocks (1 block \u2248 3s). Only effective when lock is true. For a 1-day lock, lock_period would be 28800.</li> <li><code>Permission_id</code> (optional): Specifies the ID of the Account Management Permission used to sign the transaction.</li> <li><code>visible</code> (optional): Sets the address format. <code>true</code> for Base58Check, <code>false</code> (or omitted) for HexString.</li> </ul> <p>Return Value: * An unsigned delegate resource transaction object.</p>"},{"location":"api/http/#walletundelegateresource","title":"wallet/undelegateresource","text":"<p>Description: Cancels (reclaims) previously delegated Energy or Bandwidth from another account.</p> <p>Important Note: If a resource delegation was made with a time lock (lock: true) that has not yet expired, this call will fail. You must wait for the lock period to end.</p> <pre><code>curl -X POST http://127.0.0.1:8090/wallet/undelegateresource -d\n'{\n    \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\",\n    \"receiver_address\": \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\",\n    \"balance\": 1000000,\n    \"resource\": \"BANDWIDTH\"\n}'\n</code></pre> <p>Parameters:</p> <ul> <li><code>owner_address</code>: The address of the transaction initiator.</li> <li><code>receiver_address</code>: The recipient account from which resources are being reclaimed.</li> <li><code>balance</code>: The amount of TRX whose corresponding resource share will be undelegated, in sun.</li> <li><code>resource</code>: The type of resource to undelegate, <code>BANDWIDTH</code> or <code>ENERGY</code>.</li> <li><code>Permission_id</code> (optional): Specifies the ID of the Account Management Permission used to sign the transaction.</li> <li><code>visible</code> (optional): Sets the address format. <code>true</code> for Base58Check, <code>false</code> (or omitted) for HexString.</li> </ul> <p>Return Value:  * An unsigned undelegate resource transaction object.</p>"},{"location":"api/http/#walletwithdrawexpireunfreeze","title":"wallet/withdrawexpireunfreeze","text":"<p>Description: Withdraws all unstaked TRX that have completed their lock period. <pre><code>curl -X POST http://127.0.0.1:8090/wallet/withdrawexpireunfreeze -d\n'{\n    \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\",\n}'\n</code></pre></p> <p>Parameters: * <code>owner_address</code>: The address of the transaction initiator. * <code>Permission_id</code> (optional): Specifies the ID of the Account Management Permission used to sign the transaction. * <code>visible</code> (optional): Sets the address format. <code>true</code> for Base58Check, <code>false</code> (or omitted) for HexString.</p> <p>Return Value: An unsigned withdraw expired unfreeze transaction object.</p>"},{"location":"api/http/#walletgetavailableunfreezecount","title":"wallet/getavailableunfreezecount","text":"<p>Description: Queries the remaining number of unstake operations an account can initiate. The TRON network limits each account to a maximum of 32 concurrent unstaking operations within the 14-day lock period. This API can be used to pre-check whether there is an available \"unstaking quota\" before calling <code>unfreezebalancev2</code>.</p> <pre><code>curl -X POST http://127.0.0.1:8090/wallet/getavailableunfreezecount -d\n'{\n  \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\",\n  \"visible\": true\n}\n'\n</code></pre> <p>Parameters:</p> <ul> <li><code>owner_address</code>: The account address to query.</li> <li><code>visible</code> (optional): Sets the address format.</li> </ul> <p>Return Value: A JSON object containing the remaining count.</p>"},{"location":"api/http/#walletgetcanwithdrawunfreezeamount","title":"wallet/getcanwithdrawunfreezeamount","text":"<p>Description: Queries the total amount of unstaked principal that can be withdrawn at a specific point in time. <pre><code>curl -X POST http://127.0.0.1:8090/wallet/getcanwithdrawunfreezeamount -d\n'{\n  \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\",\n  \"timestamp\": 1667977444000,\n  \"visible\": true\n}\n'\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>owner_address</code>: The address of the transaction initiator.</li> <li><code>timestamp</code>: The timestamp (in milliseconds) at which to query the withdrawable amount.</li> <li><code>visible</code>(optional): Sets the address format.</li> </ul> <p>Return Value: A JSON object containing the withdrawable amount.</p>"},{"location":"api/http/#walletgetcandelegatedmaxsize","title":"wallet/getcandelegatedmaxsize","text":"<p>Description: Queries the maximum amount of a specified resource type that a target address can delegate, in sun. <pre><code>curl -X POST http://127.0.0.1:8090/wallet/getcandelegatedmaxsize -d\n'{\n  \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\",\n  \"type\": 0,\n  \"visible\": true\n}\n'\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>owner_address</code>: The account address to query.</li> <li><code>type</code>: The resource type, <code>0</code> for Bandwidth, <code>1</code> for Energy.</li> <li><code>visible</code> (optional): Sets the address format. <code>true</code> for Base58Check, <code>false</code> (or omitted) for HexString.</li> </ul> <p>Return Value: A JSON object containing the maximum delegatable share.</p>"},{"location":"api/http/#walletgetdelegatedresourcev2","title":"wallet/getdelegatedresourcev2","text":"<p>Description: Queries the resource details delegated from one address to a target address under the Stake 2.0 mechanism. <pre><code>curl -X POST http://127.0.0.1:8090/wallet/getdelegatedresourcev2 -d\n'{\n  \"fromAddress\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\",\n  \"toAddress\": \"TPswDDCAWhJAZGdHPidFg5nEf8TkNToDX1\",\n  \"visible\": true\n}\n'\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>fromAddress</code>: The delegating account address.</li> <li><code>toAddress</code>: The recipient account address.</li> <li><code>visible</code> (optional): Sets the address format.</li> </ul> <p>Return Value: An array of delegatedResource objects, containing all delegation records between the two addresses under Stake 2.0.</p>"},{"location":"api/http/#walletgetdelegatedresourceaccountindexv2","title":"wallet/getdelegatedresourceaccountindexv2","text":"<p>Description: Queries the resource delegation index for an address under the Stake 2.0 mechanism. It returns two lists: one of addresses to which the account has delegated resources (toAccounts), and one of addresses that have delegated resources to this account (fromAccounts). <pre><code>curl -X POST http://127.0.0.1:8090/wallet/getdelegatedresourceaccountindexv2 -d\n'{\n  \"value\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\",\n  \"visible\": true\n}\n'\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>value</code>: The account address.</li> <li><code>visible</code> (optional): Sets the address format. <code>true</code> for Base58Check, <code>false</code> (or omitted) for HexString.</li> </ul> <p>Return Value: This interface returns a JSON object containing a list of bidirectional proxy relationships. It contains two lists: one for the addresses to which the account delegates resources (toAddress), and one for the addresses that delegate resources to the account (fromAddress).</p> <p></p>"},{"location":"api/http/#query-the-network","title":"Query the Network","text":"<p>The following is the API for querying data on the chain:</p> <ul> <li>wallet/getnowblock</li> <li>wallet/getblock</li> <li>wallet/getblockbynum</li> <li>wallet/getblockbyid</li> <li>wallet/getblockbylatestnum</li> <li>wallet/getblockbylimitnext</li> <li>wallet/getblockbalance</li> <li>wallet/gettransactionbyid</li> <li>wallet/gettransactioninfobyid</li> <li>wallet/gettransactioncountbyblocknum</li> <li>wallet/gettransactioninfobyblocknum</li> <li>wallet/listnodes</li> <li>wallet/getnodeinfo</li> <li>wallet/getchainparameters</li> <li>wallet/getenergyprices</li> <li>wallet/getbandwidthprices</li> <li>wallet/getmemofee</li> <li>wallet/getburntrx</li> </ul>"},{"location":"api/http/#walletgetnowblock","title":"wallet/getnowblock","text":"<p>Description: Query the latest block. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getnowblock\n</code></pre> Parameter: None</p> <p>Return Value: The latest Block object.</p>"},{"location":"api/http/#walletgetblock","title":"wallet/getblock","text":"<p>Description: Query block information based on block height or block hash. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getblock -d '{\"detail\":false}'\n</code></pre> Parameters:</p> <ul> <li><code>id_or_num</code>: Block height or block hash. If not set, queries the latest block.</li> <li><code>detail</code>: Defaults to false, meaning only the block header information is queried. If <code>true</code>, the entire block is queried.</li> </ul> <p>Return Value: A Block object or an object containing only block header information.</p>"},{"location":"api/http/#walletgetblockbynum","title":"wallet/getblockbynum","text":"<p>Description: Query complete block information by a specified block height. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getblockbynum -d '{\"num\": 1}'\n</code></pre> Parameter: <code>num</code>: Block height (integer).</p> <p>Return Value: The Block object at the specified height.</p>"},{"location":"api/http/#walletgetblockbyid","title":"wallet/getblockbyid","text":"<p>Description: Query complete block information by a specified Block ID (hash). <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getblockbyid -d '{\"value\": \"0000000000038809c59ee8409a3b6c051e369ef1096603c7ee723c16e2376c73\"}'\n</code></pre> Parameter: <code>value</code>: The Block ID (hash).</p> <p>Return Value: The Block object with the specified ID.</p>"},{"location":"api/http/#walletgetblockbylatestnum","title":"wallet/getblockbylatestnum","text":"<p>Description: Query the latest N blocks in descending order. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getblockbylatestnum -d '{\"num\": 5}'\n</code></pre> Parameter: <code>num</code>: The number of blocks to query.</p> <p>Return Value: An array containing multiple Block objects (Block[]).</p>"},{"location":"api/http/#walletgetblockbylimitnext","title":"wallet/getblockbylimitnext","text":"<p>Description: Paginate and query a list of blocks within a specified height range. code</p> <p><pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getblockbylimitnext -d '{\"startNum\": 1, \"endNum\": 2}'\n</code></pre> Parameters:</p> <ul> <li><code>startNum</code>: Starting block height (inclusive).</li> <li><code>endNum</code>: Ending block height (exclusive).</li> </ul> <p>Return Value: An array containing multiple Block objects (Block[]).</p>"},{"location":"api/http/#walletgetblockbalance","title":"wallet/getblockbalance","text":"<p>Description: Get the details of TRX balance changes caused by all transactions in a specified block. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getblockbalance -d\n'{\n    \"hash\": \"000000000000dc2a3731e28a75b49ac1379bcc425afc95f6ab3916689fbb0189\",\n    \"number\": 56362,\n    \"visible\": true\n}'\n</code></pre> Parameters:</p> <ul> <li><code>hash</code>: The hash value of the block.</li> <li><code>number</code>: The height of the block. Must exactly match the block hash.</li> <li><code>visible</code>: Whether to display addresses in Base58Check format (<code>true</code>) or HexString format (<code>false</code> or omitted).</li> </ul> <p>Return Value: An object containing all balance change tracing information for the block, for example: <pre><code>{\n    \"block_identifier\": {\n        \"hash\": \"000000000000dc2a3731e28a75b49ac1379bcc425afc95f6ab3916689fbb0189\",\n        \"number\": 56362\n    },\n    \"timestamp\": 1530060672000,\n    \"transaction_balance_trace\": [\n        {\n            \"transaction_identifier\": \"e6cabb1833cd1f795eed39d8dd7689eaa70e5bb217611766c74c7aa9feea80df\",\n            \"operation\": [\n                {\n                    \"operation_identifier\": 0,\n                    \"address\": \"TPttBLmFuykRi83y9HxDoEWxTQw6CCcQ4p\",\n                    \"amount\": -100000\n                },\n                {\n                    \"operation_identifier\": 1,\n                    \"address\": \"TLsV52sRDL79HXGGm9yzwKibb6BeruhUzy\",\n                    \"amount\": 100000\n                },\n                {\n                    \"operation_identifier\": 2,\n                    \"address\": \"TPttBLmFuykRi83y9HxDoEWxTQw6CCcQ4p\",\n                    \"amount\": -10000000\n                },\n                {\n                    \"operation_identifier\": 3,\n                    \"address\": \"TMrysg7DbwR1M8xqhpaPdVCHCuWFhw7uk1\",\n                    \"amount\": 10000000\n                }\n            ],\n            \"type\": \"TransferContract\",\n            \"status\": \"SUCCESS\"\n        }\n    ]\n}\n</code></pre></p>"},{"location":"api/http/#walletgettransactionbyid","title":"wallet/gettransactionbyid","text":"<p>Description: Query the complete information of an on-chain transaction by its Transaction ID (hash). <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/gettransactionbyid -d '{\"value\": \"d5ec749ecc2a615399d8a6c864ea4c74ff9f523c2be0e341ac9be5d47d7c2d62\"}'\n</code></pre> Parameter: <code>value</code>: Transaction ID (hash).</p> <p>Return Value: The complete Transaction object. Returns an empty object if the transaction does not exist.</p>"},{"location":"api/http/#walletgettransactioninfobyid","title":"wallet/gettransactioninfobyid","text":"<p>Description: Query the summary information of a transaction, such as fees and block location, based on its Transaction ID (hash). <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/gettransactioninfobyid -d '{\"value\" : \"309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2\"}'\n</code></pre> Parameter: <code>value</code>: Transaction ID (hash).</p> <p>Return Value: A TransactionInfo object containing transaction fees, block height, block timestamp, contract execution results, etc.</p>"},{"location":"api/http/#walletgettransactioncountbyblocknum","title":"wallet/gettransactioncountbyblocknum","text":"<p>Description: Query the total number of transactions contained in a specified block height. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/gettransactioncountbyblocknum -d '{\"num\" : 100}'\n</code></pre> Parameter: <code>num</code>: Block height.</p> <p>Return Value: An object containing the transaction count, such as {\"count\": 50}.</p>"},{"location":"api/http/#walletgettransactioninfobyblocknum","title":"wallet/gettransactioninfobyblocknum","text":"<p>Description: Get a list of summary information for all transactions at a specified block height. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/gettransactioninfobyblocknum -d '{\"num\" : 100}'\n</code></pre> Parameter: <code>num</code>: Block height.</p> <p>Return Value: A list containing multiple <code>TransactionInfo</code> objects.</p>"},{"location":"api/http/#walletlistnodes","title":"wallet/listnodes","text":"<p>Description: Query other nodes discovered by the current node's node discovery feature. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/listnodes\n</code></pre> Parameter: None</p> <p>Return Value: An array containing information for multiple nodes, each including an IP address and port.</p>"},{"location":"api/http/#walletgetnodeinfo","title":"wallet/getnodeinfo","text":"<p>Description: View the current node's own operating status and information. <pre><code>curl  http://127.0.0.1:8090/wallet/getnodeinfo\n</code></pre> Return Value: An object containing information such as node version, network status, block synchronization status, etc.</p>"},{"location":"api/http/#walletgetchainparameters","title":"wallet/getchainparameters","text":"<p>Description: Query all dynamic parameters of the current TRON network. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getchainparameters\n</code></pre> Return Value: A list containing all on-chain parameters and their current values.</p>"},{"location":"api/http/#walletgetenergyprices","title":"wallet/getenergyprices","text":"<p>Description: Query the historical record of Energy unit price changes. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getenergyprices\n</code></pre> Return Value: All historical Energy unit price information. Each price change is separated by a comma, with the millisecond timestamp before the colon and the Energy unit price in sun after the colon.</p>"},{"location":"api/http/#walletgetbandwidthprices","title":"wallet/getbandwidthprices","text":"<p>Description: Query the historical record of Bandwidth unit price changes. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getbandwidthprices\n</code></pre> Return Value: All historical Bandwidth unit price information. Each price change is separated by a comma, with the millisecond timestamp before the colon and the Bandwidth unit price in sun after the colon.</p>"},{"location":"api/http/#walletgetmemofee","title":"wallet/getmemofee","text":"<p>Description: Query the historical record of memo price changes. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getmemofee\n</code></pre> Return Value: All historical memo price information. Each price change is separated by a comma, with the millisecond timestamp before the colon and the memo price in sun after the colon.</p>"},{"location":"api/http/#walletgetburntrx","title":"wallet/getburntrx","text":"<p>Description: Query the total amount of TRX burned since the TRON network's genesis. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getburntrx\n</code></pre> Return Value: The amount of TRX burned, in sun.</p> <p></p>"},{"location":"api/http/#smart-contracts","title":"Smart Contracts","text":"<p>The following are smart contract related APIs:</p> <ul> <li>wallet/getcontract</li> <li>wallet/getcontractinfo</li> <li>wallet/deploycontract</li> <li>wallet/triggersmartcontract</li> <li>wallet/triggerconstantcontract</li> <li>wallet/updatesetting</li> <li>wallet/updateenergylimit</li> <li>wallet/clearabi</li> <li>wallet/estimateenergy</li> </ul>"},{"location":"api/http/#walletgetcontract","title":"wallet/getcontract","text":"<p>Description: Get a contract's static information, such as ABI and bytecode, via its contract address. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getcontract -d '{\"value\":\"4189139CB1387AF85E3D24E212A008AC974967E561\"}'\n</code></pre> Parameters:</p> <ul> <li><code>value</code>: Contract address, defaults to HexString format.</li> <li><code>visible</code>: Sets the address format. <code>true</code> for Base58Check, <code>false</code> or omitted for HexString.</li> </ul> <p>Return Value: A SmartContract object, containing ABI, deployment bytecode, name, etc.</p>"},{"location":"api/http/#walletgetcontractinfo","title":"wallet/getcontractinfo","text":"<p>Description: Get a contract's runtime information via its contract address. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getcontractinfo -d '{\"value\":\"4189139CB1387AF85E3D24E212A008AC974967E561\"}'\n</code></pre> Parameters:</p> <ul> <li><code>value</code>: Contract address, defaults to HexString format.</li> <li><code>visible</code>: Sets the address format. <code>true</code> for Base58Check, <code>false</code> or omitted for HexString.</li> </ul> <p>Return Value: Queries on-chain contract information. Unlike the <code>wallet/getcontract</code> interface, this interface returns not only bytecode but also the contract's runtime bytecode. Runtime bytecode, compared to bytecode, does not include constructor functions and constructor parameter information.</p>"},{"location":"api/http/#walletdeploycontract","title":"wallet/deploycontract","text":"<p>Description: Create a transaction to deploy a smart contract. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/deploycontract -d '{\"abi\":\"[{\\\"constant\\\":false,\\\"inputs\\\":[{\\\"name\\\":\\\"key\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"set\\\",\\\"outputs\\\":[],\\\"payable\\\":false,\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"constant\\\":true,\\\"inputs\\\":[{\\\"name\\\":\\\"key\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"get\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"payable\\\":false,\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"}]\",\"bytecode\":\"608060405234801561001057600080fd5b5060de8061001f6000396000f30060806040526004361060485763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631ab06ee58114604d5780639507d39a146067575b600080fd5b348015605857600080fd5b506065600435602435608e565b005b348015607257600080fd5b50607c60043560a0565b60408051918252519081900360200190f35b60009182526020829052604090912055565b600090815260208190526040902054905600a165627a7a72305820fdfe832221d60dd582b4526afa20518b98c2e1cb0054653053a844cf265b25040029\",\"parameter\":\"\",\"call_value\":100,\"name\":\"SomeContract\",\"consume_user_resource_percent\":30,\"fee_limit\":10,\"origin_energy_limit\": 10,\"owner_address\":\"41D1E7A6BC354106CB410E65FF8B181C600FF14292\"}'\n</code></pre> Parameters:</p> <ul> <li><code>abi</code>\uff1aabi.</li> <li><code>bytecode</code>: The bytecode of the contract, must be in HexString format.</li> <li><code>parameter</code>: The parameter list for the constructor needs to be ABI encoded and then converted to HexString format. If the constructor has no parameters, this parameter can be omitted.</li> <li><code>consume_user_resource_percent</code>: The percentage of resources used by users calling this contract, an integer between. If 0, users will not consume resources. If the developer's resources are exhausted, then user resources will be fully consumed.</li> <li><code>fee_limit</code>\uff1aMaximum sun to be consumed (1 TRX = 1,000,000 sun).</li> <li><code>call_value</code>: The amount of sun (1 TRX = 1,000,000 sun) to transfer to the contract during this call.</li> <li><code>owner_address</code>: The account address initiating the <code>deploycontract</code>, defaults to HexString format. name: The contract name.</li> <li><code>name</code>: The contract name.</li> <li><code>origin_energy_limit</code>: The maximum energy that the creator is willing to consume for themselves during a single contract execution or creation, an integer greater than 0.</li> <li><code>call_token_value</code>: The amount of TRC-10 tokens to transfer to the contract during this call. If <code>token_id</code> is not set, this should be <code>0</code> or not set.</li> <li><code>token_id</code>: The ID of the TRC-10 token to transfer to the contract during this call. If none, do not set.</li> <li><code>Permission_id</code> (optional): Specifies the ID of the Account Management Permission used to sign the transaction.</li> <li><code>visible</code>: sets the address format. <code>true</code> for Base58Check, <code>false</code> or omitted for HexString.</li> </ul> <p>Return Value: This interface returns an object containing an unsigned deployment transaction.</p>"},{"location":"api/http/#wallettriggersmartcontract","title":"wallet/triggersmartcontract","text":"<p>Description: Create a transaction to call a smart contract function. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/triggersmartcontract -d '{\"contract_address\":\"4189139CB1387AF85E3D24E212A008AC974967E561\",\"function_selector\":\"set(uint256,uint256)\",\"parameter\":\"00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002\",\"fee_limit\":10,\"call_value\":100,\"owner_address\":\"41D1E7A6BC354106CB410E65FF8B181C600FF14292\"}'\n</code></pre> Parameters\uff1a</p> <ul> <li><code>contract_address</code>\uff1aThe address of the callee contract, defaults to HexString format.</li> <li><code>function_selector</code>\uff1aThe function signature, no spaces allowed.</li> <li><code>parameter</code>\uff1aThe virtual machine format of the call parameters. Use the JS tool provided by Remix to convert the contract caller's parameter array into the format required by the virtual machine.</li> <li><code>data</code>\uff1aData for interacting with the smart contract, including the called contract function and parameters. You can choose to interact through this field, or through <code>function_selector</code> and <code>parameter</code>. If <code>data</code> and <code>function_selector</code> exist simultaneously, <code>function_selector</code> will be used for contract interaction.</li> <li><code>fee_limit</code>\uff1aMaximum sun to be consumed (1 TRX = 1,000,000 sun).</li> <li><code>call_value</code>\uff1aThe amount of sun (1 TRX = 1,000,000 sun) to transfer to the contract during this call.</li> <li><code>owner_address</code>\uff1aThe account address initiating the <code>triggercontract</code>, defaults to HexString format.</li> <li><code>call_token_value</code>:The amount of TRC-10 tokens to transfer to the contract during this call. If <code>token_id</code> is not set, this should be <code>0</code> or not set.</li> <li><code>token_id</code>:The ID of the TRC-10 token to transfer to the contract during this call. If none, do not set.</li> <li><code>Permission_id</code> (optional): Specifies the ID of the Account Management Permission used to sign the transaction.</li> <li><code>visible</code> :Sets the address format. <code>true</code> for Base58Check, <code>false</code> or omitted for HexString.</li> </ul> <p>Return Value: This interface returns an object containing an unsigned deployment transaction.</p>"},{"location":"api/http/#wallettriggerconstantcontract","title":"wallet/triggerconstantcontract","text":"<p>Description: Simulate contract execution on the local node for data querying, transaction pre-execution, or energy consumption estimation. This operation is off-chain and does not consume resources. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/triggerconstantcontract -d '{\"contract_address\":\"4189139CB1387AF85E3D24E212A008AC974967E561\",\"function_selector\":\"set(uint256,uint256)\",\"parameter\":\"00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002\",\"call_value\":100,\"owner_address\":\"41D1E7A6BC354106CB410E65FF8B181C600FF14292\"}'\n</code></pre> Parameters\uff1a</p> <ul> <li><code>contract_address</code>\uff1aThe address of the callee contract, defaults to HexString format.</li> <li><code>function_selector</code>: The function signature, no spaces allowed.</li> <li><code>parameter</code>\uff1aThe virtual machine format of the call parameters. Use the JS tool provided by Remix to convert the contract caller's parameter array into the format required by the virtual machine.</li> <li><code>data</code>\uff1aContract bytecode or data for interacting with the smart contract, including the called contract function and parameters. You can choose to interact through this field or through <code>function_selector</code> and parameter. If <code>data</code> and <code>function_selector</code> exist simultaneously, function_selector will be prioritized.</li> <li><code>owner_address</code>\uff1aThe account address initiating the <code>triggercontract</code>, defaults to HexString format.</li> <li><code>call_value</code>\uff1aThe amount of sun (1 TRX = 1,000,000 sun) to transfer to the contract during this call.</li> <li><code>call_token_value</code>:The amount of TRC-10 tokens to transfer to the contract during this call. If <code>token_id</code> is not set, this should be <code>0</code> or not set.</li> <li><code>token_id</code>:The ID of the TRC-10 token to transfer to the contract during this call. If none, do not set.</li> <li><code>visible</code> Sets the address format. <code>true</code> for Base58Check, <code>false</code> or omitted for HexString.</li> </ul> <p>Return Value: The return value of the contract function, encoded in ABI format.</p>"},{"location":"api/http/#walletupdatesetting","title":"wallet/updatesetting","text":"<p>Description: Update the consume_user_resource_percent (user energy consumption ratio) of a deployed contract. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/updatesetting -d '{\"owner_address\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", \"contract_address\": \"41c6600433381c731f22fc2b9f864b14fe518b322f\", \"consume_user_resource_percent\": 7}'\n</code></pre> Parameters\uff1a</p> <ul> <li><code>owner_address</code>\uff1aThe owner address of the contract, defaults to HexString format.</li> <li><code>contract_address</code>\uff1aThe address of the contract to be modified, defaults to HexString format.</li> <li><code>consume_user_resource_percent</code>\uff1aThe specified percentage of resources consumed by users calling this contract.</li> <li><code>Permission_id</code> (optional): Specifies the ID of the Account Management Permission used to sign the transaction.</li> <li><code>visible</code>:Sets the address format. <code>true</code> for Base58Check, <code>false</code> or omitted for HexString.</li> </ul> <p>Return Value: This interface returns an object containing an unsigned update transaction.</p>"},{"location":"api/http/#walletupdateenergylimit","title":"wallet/updateenergylimit","text":"<p>Description: Update the origin_energy_limit (developer's maximum energy provided for a single call) of a deployed contract. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/updateenergylimit -d '{\"owner_address\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", \"contract_address\": \"41c6600433381c731f22fc2b9f864b14fe518b322f\", \"origin_energy_limit\": 7}'\n</code></pre> Parameters\uff1a</p> <ul> <li><code>owner_address</code>: The owner address of the contract, defaults to HexString format.</li> <li><code>contract_address</code>: The address of the contract to be modified, defaults to HexString format.</li> <li><code>origin_energy_limit</code>: The maximum energy that the creator is willing to consume for themselves during a single contract execution or creation.</li> <li><code>Permission_id</code> (optional): Used to specify the permission ID when signing with a permission other than the default owner permission.</li> <li><code>visible</code>: Sets the address format. <code>true</code> for Base58Check, <code>false</code> or omitted for HexString.</li> </ul> <p>Return Value: This interface returns an object containing an unsigned update transaction.</p>"},{"location":"api/http/#walletclearabi","title":"wallet/clearabi","text":"<p>Description: Create a transaction to clear the ABI of a smart contract. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/clearabi -d '{\n\"owner_address\":\"41a7d8a35b260395c14aa456297662092ba3b76fc0\",\n\"contract_address\":\"417bcb781f4743afaacf9f9528f3ea903b3782339f\"}'\n</code></pre> Parameters\uff1a</p> <ul> <li><code>owner_address</code>: The account address that created the contract, defaults to HexString format.</li> <li><code>contract_address</code>: The contract address, defaults to HexString format.</li> <li><code>visible</code>: Sets the address format. <code>true</code> for Base58Check, <code>false</code> or omitted for HexString.</li> </ul> <p>Return Value: This interface returns an unsigned transaction object.</p>"},{"location":"api/http/#walletestimateenergy","title":"wallet/estimateenergy","text":"<p>Description: Estimate the energy required for a smart contract call. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/estimateenergy -d '{\n  \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\",\n  \"contract_address\": \"TG3XXyExBkPp9nzdajDZsozEu4BkaSJozs\",\n  \"function_selector\": \"transfer(address,uint256)\",\n  \"parameter\": \"00000000000000000000004115208EF33A926919ED270E2FA61367B2DA3753DA0000000000000000000000000000000000000000000000000000000000000032\",\n  \"visible\": true\n}'\n</code></pre></p> <p>Parameters\uff1a</p> <ul> <li><code>contract_address</code>: The address of the callee contract, defaults to HexString format.</li> <li><code>function_selector</code>: The function signature, no spaces allowed.</li> <li><code>parameter</code>: The virtual machine format of the call parameters. Use the JS tool provided by Remix to convert the contract caller's parameter array into the format required by the virtual machine.</li> <li><code>data</code>: Contract bytecode or data for interacting with the smart contract, including the called contract function and parameters. You can choose to interact through this field, or through <code>function_selector</code> and parameter. If <code>data</code> and <code>function_selector</code> exist simultaneously, <code>function_selector</code> will be prioritized.</li> <li><code>owner_address</code>: The account address initiating the <code>triggercontract</code>, defaults to HexString format.</li> <li><code>call_value</code>: The amount of sun (1 TRX = 1,000,000 sun) to transfer to the contract during this call.</li> <li><code>call_token_value</code>: The amount of TRC-10 tokens to transfer to the contract during this call. If <code>token_id</code> is not set, this should be <code>0</code> or not set.</li> <li><code>token_id</code>: The ID of the TRC-10 token to transfer to the contract during this call. If none, do not set.</li> <li><code>visible</code> Sets the address format. <code>true</code> for Base58Check, <code>false</code> or omitted for HexString.</li> </ul> <p>Return Value: This interface returns an object containing the estimated energy value.</p> <p></p>"},{"location":"api/http/#trc-10-token","title":"TRC-10 token","text":"<p>The following are TRC-10 token-related APIs:</p> <ul> <li>wallet/getassetissuebyaccount</li> <li>wallet/getassetissuebyname</li> <li>wallet/getassetissuelistbyname</li> <li>wallet/getassetissuebyid</li> <li>wallet/getassetissuelist</li> <li>wallet/getpaginatedassetissuelist</li> <li>wallet/transferasset</li> <li>wallet/participateassetissue</li> <li>wallet/createassetissue</li> <li>wallet/unfreezeasset</li> <li>wallet/updateasset</li> </ul>"},{"location":"api/http/#walletgetassetissuebyaccount","title":"wallet/getassetissuebyaccount","text":"<p>Description: Query all TRC-10 tokens issued by a specified account. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getassetissuebyaccount -d '{\"address\": \"41F9395ED64A6E1D4ED37CD17C75A1D247223CAF2D\"}'\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>address</code>: The issuer account address, defaults to HexString format.</li> <li><code>visible</code>: Sets the address format. <code>true</code> for Base58Check, <code>false</code> or omitted for HexString.</li> </ul> <p>Return Value: This interface returns an object containing a list of TRC-10 tokens issued by the address.</p>"},{"location":"api/http/#walletgetassetissuebyname","title":"wallet/getassetissuebyname","text":"<p>Description: Query TRC-10 tokens by name. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getassetissuebyname -d '{\"value\": \"44756354616E\"}'\n</code></pre> Parameter: <code>value</code>\uff1aToken name, defaults to HexString format.</p> <p>Return Value: A TRC-10 token object.</p> <p>Note: Starting from Odyssey-v3.2, it is recommended to use getassetissuebyid or getassetissuelistbyname to replace this interface, because starting from 3.2, tokens are allowed to have the same name. If identical token names exist, this interface will report an error.</p>"},{"location":"api/http/#walletgetassetissuelistbyname","title":"wallet/getassetissuelistbyname","text":"<p>Description: Query all matching TRC-10 token lists by name. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getassetissuelistbyname -d '{\"value\": \"44756354616E\"}'\n</code></pre> Parameters:  - <code>value</code>\uff1aToken name, defaults to HexString format.</p> <p>Return Value: An array containing all TRC-10 token objects with the same name.</p>"},{"location":"api/http/#walletgetassetissuebyid","title":"wallet/getassetissuebyid","text":"<p>Description: Query TRC-10 token by ID. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getassetissuebyid -d '{\"value\": \"1000001\"}'\n</code></pre> Parameters\uff1a * <code>value</code>: The ID of the TRC-10 token.</p> <p>Return Value: The specified TRC-10 token object.</p>"},{"location":"api/http/#walletgetassetissuelist","title":"wallet/getassetissuelist","text":"<p>Description: Query a list of all TRC-10 tokens on the entire network. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getassetissuelist\n</code></pre> Parameters: None</p> <p>Return Value: An array containing objects for all TRC-10 tokens on the network.</p>"},{"location":"api/http/#walletgetpaginatedassetissuelist","title":"wallet/getpaginatedassetissuelist","text":"<p>Description:Paginate and query a list of TRC-10 tokens on the entire network. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getpaginatedassetissuelist -d '{\"offset\": 0, \"limit\": 10}'\n</code></pre> Parameters:</p> <ul> <li><code>offset</code>: The starting index for pagination.</li> <li><code>limit</code>: The desired number of tokens to return in this query.</li> </ul> <p>Return Value: An array containing TRC-10 token objects for the paginated results.</p>"},{"location":"api/http/#wallettransferasset","title":"wallet/transferasset","text":"<p>Description: Create a TRC-10 token transfer transaction. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/transferasset -d '{\"owner_address\":\"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"to_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"asset_name\": \"0x6173736574497373756531353330383934333132313538\", \"amount\": 100}'\n</code></pre> Parameters:</p> <ul> <li><code>owner_address</code>: The sender's address, defaults to HexString format.</li> <li><code>to_address</code>: The recipient's address, defaults to HexString format.</li> <li><code>asset_name</code>: The TRC-10 token ID, defaults to HexString format.</li> <li><code>amount</code>: The amount of tokens to transfer.</li> <li><code>Permission_id</code> (optional): Used to specify the permission ID when signing with a permission other than the default owner permission.</li> <li><code>visible</code>: Sets the address format. <code>true</code> for Base58Check, <code>false</code> or omitted for HexString.</li> </ul> <p>Return Value: An unsigned TRC-10 transfer transaction object.</p>"},{"location":"api/http/#walletparticipateassetissue","title":"wallet/participateassetissue","text":"<p>Description: Create a transaction to participate in a TRC-10 token crowdsale.</p> <p><pre><code>curl -X POST http://127.0.0.1:8090/wallet/participateassetissue -d '{\n\"to_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\",\n\"owner_address\":\"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\",\n\"amount\":100,\n\"asset_name\":\"3230313271756265696a696e67\"\n}'\n</code></pre> Parameters:</p> <ul> <li><code>to_address</code>: The token issuer's address, defaults to HexString format.</li> <li><code>owner_address</code>: The participant's address (buyer), defaults to HexString format.</li> <li><code>amount</code>: The amount of tokens to participate with.</li> <li><code>asset_name</code>: The ID of the token to participate in, defaults to HexString format.</li> <li><code>Permission_id</code> (optional): Used to specify the permission ID when signing with a permission other than the default owner permission.</li> <li><code>visible</code>: Sets the address format. <code>true</code> for Base58Check, <code>false</code> or omitted for HexString.</li> </ul> <p>Return Value: An unsigned participate in crowdsale transaction object.</p> <p>Note: The current <code>asset_name</code> is the token name. After the committee passes the <code>AllowSameTokenName</code> proposal, <code>asset_name</code> will be changed to the String type of the token ID.</p>"},{"location":"api/http/#walletcreateassetissue","title":"wallet/createassetissue","text":"<p>Description: Create a transaction to issue TRC-10 tokens (costing 1024 TRX). <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/createassetissue -d '{\n\"owner_address\":\"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\",\n\"name\":\"0x6173736574497373756531353330383934333132313538\",\n\"abbr\": \"0x6162627231353330383934333132313538\",\n\"total_supply\" :4321,\n\"trx_num\":1,\n\"num\":1,\n\"start_time\" :\u00a01530894315158,\n\"end_time\":1533894312158,\n\"description\":\"007570646174654e616d6531353330363038383733343633\",\n\"url\":\"007570646174654e616d6531353330363038383733343633\",\n\"free_asset_net_limit\":10000,\n\"public_free_asset_net_limit\":10000,\n\"frozen_supply\":{\"frozen_amount\":1, \"frozen_days\":2}\n}'\n</code></pre> Parameters:</p> <ul> <li><code>owner_address</code>: The issuer's address, defaults to HexString format.</li> <li><code>name</code>: The token name, defaults to HexString format.</li> <li><code>abbr</code>: The token abbreviation, defaults to HexString format.</li> <li><code>total_supply</code>: The total supply to be issued.</li> <li><code>trx_num</code> and <code>num</code>: The minimum exchange ratio between token and TRX.</li> <li><code>start_time</code> and <code>end_time</code>: The start and end times for token issuance.</li> <li><code>description</code>: The token description, defaults to HexString format.</li> <li><code>url</code>: The official website of the token issuer, defaults to HexString format.</li> <li><code>free_asset_net_limit</code>: The total free bandwidth for the Token.</li> <li><code>public_free_asset_net_limit</code>: The free bandwidth that each token holder can use for this token.</li> <li><code>frozen_supply</code>: Tokens that the issuer can pledge at the time of issuance.</li> <li><code>Permission_id</code> (optional): Used to specify the permission ID when signing with a permission other than the default owner permission.</li> <li><code>visible</code>: Sets the address format. <code>true</code> for Base58Check, <code>false</code> or omitted for HexString.</li> </ul> <p>Return Value: An unsigned TRC-10 token issuance transaction object.</p>"},{"location":"api/http/#walletunfreezeasset","title":"wallet/unfreezeasset","text":"<p>Description: Unfreeze tokens whose freezing period has ended. <pre><code>curl -X POST http://127.0.0.1:8090/wallet/unfreezeasset -d '{\n\"owner_address\":\"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\",\n}'\n</code></pre> Parameters:</p> <ul> <li><code>owner_address</code>: The address of the account unfreezing tokens, defaults to HexString format.</li> <li><code>Permission_id</code> (optional): Specifies the ID of the Account Management Permission used to sign the transaction.</li> <li><code>visible</code>: Sets the address format. <code>true</code> for Base58Check, <code>false</code> or omitted for HexString.</li> </ul> <p>Return Value: An unsigned unfreeze token transaction object.</p>"},{"location":"api/http/#walletupdateasset","title":"wallet/updateasset","text":"<p>Description: Update the information of an issued TRC-10 token. <pre><code>curl -X POST http://127.0.0.1:8090/wallet/updateasset -d '{\n\"owner_address\":\"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\",\n\"description\": \"\"\uff0c\n\"url\": \"\",\n\"new_limit\" : 1000000,\n\"new_public_limit\" : 100\n}'\n</code></pre> Parameters:</p> <ul> <li><code>owner_address</code>: The token issuer's address, defaults to HexString format.</li> <li><code>description</code>: The token's description, defaults to HexString format.</li> <li><code>url</code>: The token issuer's official website address, defaults to HexString format.</li> <li><code>new_limit</code>: The free bandwidth each token holder can use.</li> <li><code>new_public_limit</code>: The total free bandwidth for this token.</li> <li><code>Permission_id</code> (optional): Specifies the ID of the Account Management Permission used to sign the transaction.</li> <li><code>visible</code>: Sets the address format. <code>true</code> for Base58Check, <code>false</code> or omitted for HexString.</li> </ul> <p>Return Value: An unsigned update token information transaction object.</p> <p></p>"},{"location":"api/http/#vote-and-super-representative","title":"Vote and Super Representative","text":"<p>The following are voting and SR related APIs:</p> <ul> <li>wallet/createwitness</li> <li>wallet/updatewitness</li> <li>wallet/listwitnesses</li> <li>wallet/withdrawbalance</li> <li>wallet/votewitnessaccount</li> <li>wallet/getBrokerage</li> <li>wallet/updateBrokerage</li> <li>wallet/getReward</li> <li>wallet/getnextmaintenancetime</li> </ul>"},{"location":"api/http/#walletcreatewitness","title":"wallet/createwitness","text":"<p>Description: Create a transaction to apply to become a Super Representative. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/createwitness -d '{\"owner_address\":\"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"url\": \"007570646174654e616d6531353330363038383733343633\"}'\n</code></pre> Parameters:</p> <ul> <li><code>owner_address</code>: The account address applying to become a Super Representative, defaults to HexString format.</li> <li><code>url</code>: The official website address, defaults to HexString format.</li> <li><code>Permission_id</code> (optional): Specifies the ID of the Account Management Permission used to sign the transaction.</li> <li><code>visible</code>: Sets the address format. <code>true</code> for Base58Check, <code>false</code> or omitted for HexString.</li> </ul> <p>Return Value: An unsigned apply for SR transaction object.</p>"},{"location":"api/http/#walletupdatewitness","title":"wallet/updatewitness","text":"<p>Description: Update a Super Representative's website URL. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/updatewitness -d '{\n\"owner_address\":\"41d1e7a6bc354106cb410e65ff8b181c600ff14292\",\n\"update_url\": \"007570646174654e616d6531353330363038383733343633\"\n}'\n</code></pre> Parameters:</p> <ul> <li><code>owner_address</code>: The creator's address, defaults to HexString format.</li> <li><code>update_url</code>: The updated official website URL, defaults to HexString format.</li> <li><code>Permission_id</code> (optional): Specifies the ID of the Account Management Permission used to sign the transaction.</li> <li><code>visible</code>: Sets the address format. <code>true</code> for Base58Check, <code>false</code> or omitted for HexString.</li> </ul> <p>Return Value: An unsigned update URL transaction object.</p>"},{"location":"api/http/#walletlistwitnesses","title":"wallet/listwitnesses","text":"<p>Description: Query the current list of all Super Representatives. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/listwitnesses\n</code></pre> Parameter: None</p> <p>Return Value: A list of all Super Representative information.</p>"},{"location":"api/http/#walletwithdrawbalance","title":"wallet/withdrawbalance","text":"<p>Description:** SR or users withdraw rewards to their balance. This can be done once every 24 hours.</p> <p><pre><code>curl -X POST http://127.0.0.1:8090/wallet/withdrawbalance -d '{\n\"owner_address\":\"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\",\n}'\n</code></pre> Parameters:</p> <ul> <li><code>owner_address</code>: The address of the account to withdraw from, defaults to HexString format.</li> <li><code>Permission_id</code> (optional): Specifies the ID of the Account Management Permission used to sign the transaction.</li> <li><code>visible</code>: Sets the address format. <code>true</code> for Base58Check, <code>false</code> or omitted for HexString.</li> </ul> <p>Return Value: An unsigned withdraw reward transaction object.</p>"},{"location":"api/http/#walletvotewitnessaccount","title":"wallet/votewitnessaccount","text":"<p>Description: Vote for a Super Representative. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/votewitnessaccount -d '{\n\"owner_address\":\"41d1e7a6bc354106cb410e65ff8b181c600ff14292\",\n\"votes\": [{\"vote_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"vote_count\": 5}]\n}'\n</code></pre> Parameters:</p> <ul> <li><code>owner_address</code>: The voter's address, defaults to HexString format.</li> <li><code>votes.vote_address</code>: The address of the Super Representative being voted for, defaults to HexString format.</li> <li><code>vote_count</code>: The number of votes.</li> <li><code>Permission_id</code> (optional): Specifies the ID of the Account Management Permission used to sign the transaction.</li> <li><code>visible</code>: Sets the address format. <code>true</code> for Base58Check, <code>false</code> or omitted for HexString.</li> </ul> <p>Return Value: An unsigned vote transaction object.</p>"},{"location":"api/http/#walletgetbrokerage","title":"wallet/getBrokerage","text":"<p>Description: Query the brokerage ratio set by a specified SR. <pre><code>curl -X GET  http://127.0.0.1:8090/wallet/getBrokerage -d '{\n\"address\":\"41E552F6487585C2B58BC2C9BB4492BC1F17132CD0\"}'\n</code></pre> Parameters:</p> <ul> <li><code>address</code>: The address of the Super Representative being voted for, defaults to HexString format.</li> <li><code>visible</code>: Sets the address format. <code>true</code> for Base58Check, <code>false</code> or omitted for HexString.</li> </ul> <p>Return Value: The current brokerage ratio of the Super Representative.</p>"},{"location":"api/http/#walletupdatebrokerage","title":"wallet/updateBrokerage","text":"<p>Description: Update a Super Representative's current brokerage ratio. <pre><code>curl -X POST  http://47.252.81.126:8090/wallet/updateBrokerage  -d '{\n\"owner_address\":\"41E552F6487585C2B58BC2C9BB4492BC1F17132CD0\",\n\"brokerage\":30}'\n</code></pre> Parameters:</p> <ul> <li><code>owner_address</code>: The address of the SR being voted for, defaults to HexString format.</li> <li><code>brokerage</code>: The brokerage ratio the SR wants to update to.</li> <li><code>visible</code>: Sets the address format. <code>true</code> for Base58Check, <code>false</code> or omitted for HexString.</li> </ul> <p>Return Value: An unsigned update brokerage transaction object.</p>"},{"location":"api/http/#walletgetreward","title":"wallet/getReward","text":"<p>Description: Query the total unclaimed voting rewards for a voter account. <pre><code>curl -X GET\nhttp://127.0.0.1:8090/wallet/getReward -d '{\n\"address\":\"41E552F6487585C2B58BC2C9BB4492BC1F17132CD0\"}'\n</code></pre> Parameters:</p> <ul> <li><code>address</code>: The voter's address, defaults to HexString format.</li> <li><code>visible</code>: Sets the address format. <code>true</code> for Base58Check, <code>false</code> or omitted for HexString.</li> </ul> <p>Return Value: An object containing the unclaimed reward amount (in sun).</p>"},{"location":"api/http/#walletgetnextmaintenancetime","title":"wallet/getnextmaintenancetime","text":"<p>Description: Get the time of the next vote count. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getnextmaintenancetime\n</code></pre> Parameter: None</p> <p>Return Value: The millisecond timestamp of the next vote count.</p> <p></p>"},{"location":"api/http/#proposals","title":"Proposals","text":"<p>The following are proposal-related APIs:</p> <ul> <li>wallet/proposalcreate</li> <li>wallet/getproposalbyid</li> <li>wallet/listproposals</li> <li>wallet/proposalapprove</li> <li>wallet/proposaldelete</li> <li>wallet/getpaginatedproposallist</li> </ul>"},{"location":"api/http/#walletproposalcreate","title":"wallet/proposalcreate","text":"<p>Description: Create a proposal transaction to modify dynamic network parameters. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/proposalcreate -d {\"owner_address\" : \"419844F7600E018FD0D710E2145351D607B3316CE9\",\"parameters\":[{\"key\": 0,\"value\": 100000},{\"key\": 1,\"value\": 2}] }\n</code></pre> Parameters:</p> <ul> <li><code>owner_address</code>: The creator's address.</li> <li><code>parameters</code>: Proposal parameters.</li> <li><code>Permission_id</code> (optional): Specifies the ID of the Account Management Permission used to sign the transaction.</li> <li><code>visible</code>: Sets the address format. <code>true</code> for Base58Check, <code>false</code> or omitted for HexString.</li> </ul> <p>Return Value: An unsigned create proposal transaction object.</p>"},{"location":"api/http/#walletgetproposalbyid","title":"wallet/getproposalbyid","text":"<p>Description: Query detailed proposal information by ID. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getproposalbyid -d {\"id\":1}\n</code></pre> Parameter: <code>id</code>: Proposal ID.</p> <p>Return Value: The detailed information of the specified proposal.</p>"},{"location":"api/http/#walletlistproposals","title":"wallet/listproposals","text":"<p>Description: Query a list of all current proposals on the network. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/listproposals\n</code></pre> Parameter: None</p> <p>Return Value: An array containing all proposal objects.</p>"},{"location":"api/http/#walletproposalapprove","title":"wallet/proposalapprove","text":"<p>Description: Approve a proposal. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/proposalapprove -d {\"owner_address\" : \"419844F7600E018FD0D710E2145351D607B3316CE9\", \"proposal_id\":1, \"is_add_approval\":true}\n</code></pre> Parameters:</p> <ul> <li><code>owner_address</code>: The approver's address, defaults to HexString format.</li> <li><code>proposal_id</code>: Proposal ID.</li> <li><code>is_add_approval</code>: Whether to approve (add approval) or not.</li> <li><code>Permission_id</code> (optional): Specifies the ID of the Account Management Permission used to sign the transaction.</li> <li><code>visible</code>: Sets the address format. <code>true</code> for Base58Check, <code>false</code> or omitted for HexString.</li> </ul> <p>Return Value: An unsigned approve proposal transaction object.</p>"},{"location":"api/http/#walletproposaldelete","title":"wallet/proposaldelete","text":"<p>Description: Delete a proposal. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/proposaldelete -d {\"owner_address\" : \"419844F7600E018FD0D710E2145351D607B3316CE9\", \"proposal_id\":1}\n</code></pre> Parameters:</p> <ul> <li><code>owner_address</code>: The address of the deleter. Only the proposal owner is allowed to delete proposals, defaults to HexString format.</li> <li><code>proposal_id</code>: Proposal ID.</li> <li><code>Permission_id</code> (optional): Specifies the ID of the Account Management Permission used to sign the transaction.</li> <li><code>visible</code>: Sets the address format. <code>true</code> for Base58Check, <code>false</code> or omitted for HexString.</li> </ul> <p>Return Value: An unsigned delete proposal transaction object.</p>"},{"location":"api/http/#walletgetpaginatedproposallist","title":"wallet/getpaginatedproposallist","text":"<p>Description: Query the list of all the proposals by pagination <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getpaginatedproposallist -d '{\"offset\": 0, \"limit\": 10}'\n</code></pre> Parameters:</p> <ul> <li><code>offset</code>: The starting index for pagination.</li> <li><code>limit</code>: The desired number of proposals to return in this query.</li> </ul> <p>Return Value: An array containing proposal objects for the paginated results.</p> <p></p>"},{"location":"api/http/#dex-exchange","title":"DEX Exchange","text":"<p>The following are the APIs related to decentralized exchanges:</p> <ul> <li>wallet/exchangecreate</li> <li>wallet/exchangeinject</li> <li>wallet/exchangewithdraw</li> <li>wallet/exchangetransaction</li> <li>wallet/getexchangebyid</li> <li>wallet/listexchanges</li> <li>wallet/getpaginatedexchangelist</li> <li>wallet/marketsellasset</li> <li>wallet/marketcancelorder</li> <li>wallet/getmarketorderbyaccount</li> <li>wallet/getmarketpairlist</li> <li>wallet/getmarketorderlistbypair</li> <li>wallet/getmarketpricebypair</li> <li>wallet/getmarketorderbyid</li> </ul>"},{"location":"api/http/#walletexchangecreate","title":"wallet/exchangecreate","text":"<p>Description: Create an exchange pair <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/exchangecreate -d {\"owner_address\":\"419844f7600e018fd0d710e2145351d607b3316ce9\", \u3001\n\"first_token_id\":token_a, \"first_token_balance\":100, \"second_token_id\":token_b,\"second_token_balance\":200}\n</code></pre> Parameters:</p> <ul> <li><code>owner_address</code>: The address of the exchange creator, defaults to HexString format.</li> <li><code>first_token_id</code>: The ID of the first token, defaults to HexString format.</li> <li><code>first_token_balance</code>: The balance of the first token.</li> <li><code>second_token_id</code>: The ID of the second token, defaults to HexString format.</li> <li><code>second_token_balance</code>: The balance of the second token.</li> <li><code>Permission_id</code> (optional): Specifies the ID of the Account Management Permission used to sign the transaction.</li> </ul> <p>Return Value: An unsigned create trading pair transaction object.</p>"},{"location":"api/http/#walletexchangeinject","title":"wallet/exchangeinject","text":"<p>Description: Inject capital into a trading pair. This can prevent large price fluctuations in the trading pair. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/exchangeinject -d {\"owner_address\":\"419844f7600e018fd0d710e2145351d607b3316ce9\", \"exchange_id\":1, \"token_id\":\"74726f6e6e616d65\", \"quant\":100}\n</code></pre> Parameters:</p> <ul> <li><code>owner_address</code>: The address of the trading pair creator, defaults to HexString format.</li> <li><code>exchange_id</code>: The trading pair ID.</li> <li><code>token_id</code>: The token ID, typically the token name, defaults to HexString format.</li> <li><code>quant</code>: The quantity of tokens to inject.</li> <li><code>Permission_id</code> (optional): Specifies the ID of the Account Management Permission used to sign the transaction.</li> <li><code>visible</code>: Sets the address format. <code>true</code> for Base58Check, <code>false</code> or omitted for HexString.</li> </ul> <p>Return Value: An unsigned inject capital transaction object.</p>"},{"location":"api/http/#walletexchangewithdraw","title":"wallet/exchangewithdraw","text":"<p>Description: Withdraw capital from a trading pair. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/exchangewithdraw -d {\"owner_address\":\"419844f7600e018fd0d710e2145351d607b3316ce9\", \"exchange_id\":1, \"token_id\":\"74726f6e6e616d65\", \"quant\":100}\n</code></pre> Parameters:</p> <ul> <li><code>owner_address</code>: The address of the trading pair creator, defaults to HexString format.</li> <li><code>exchange_id</code>: The trading pair ID.</li> <li><code>token_id</code>: The token ID, typically the token name, must be in HexString format.</li> <li><code>quant</code>: The quantity of tokens to withdraw.</li> <li><code>Permission_id</code> (optional): Specifies the ID of the Account Management Permission used to sign the transaction.</li> <li><code>visible</code>: Sets the address format. <code>true</code> for Base58Check, <code>false</code> or omitted for HexString.</li> </ul> <p>Return Value: An unsigned capital withdrawal transaction object.</p>"},{"location":"api/http/#walletexchangetransaction","title":"wallet/exchangetransaction","text":"<p>Description: Participate in a trading pair transaction. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/exchangetransaction -d {\"owner_address\":\"419844f7600e018fd0d710e2145351d607b3316ce9\", \"exchange_id\":1, \"token_id\":\"74726f6e6e616d65\", \"quant\":100,\"expected\":10}\n</code></pre> Parameters:</p> <ul> <li><code>owner_address</code>: The address of the trading pair creator, defaults to HexString format.</li> <li><code>exchange_id</code>: The trading pair ID.</li> <li><code>token_id</code>: The ID of the token to sell, typically the token name, defaults to HexString format.</li> <li><code>quant</code>: The quantity of tokens to sell.</li> <li><code>expected</code>: The expected quantity of tokens to buy.</li> <li><code>Permission_id</code> (optional): Specifies the ID of the Account Management Permission used to sign the transaction.</li> <li><code>visible</code>: Sets the address format. <code>true</code> for Base58Check, <code>false</code> or omitted for HexString.</li> </ul> <p>Return Value: An unsigned exchange transaction object.</p>"},{"location":"api/http/#walletgetexchangebyid","title":"wallet/getexchangebyid","text":"<p>Description: Query a trading pair by ID. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getexchangebyid -d {\"id\":1}\n</code></pre> Parameter: <code>id</code>: The trading pair ID.</p> <p>Return Value: The specified trading pair object.</p>"},{"location":"api/http/#walletlistexchanges","title":"wallet/listexchanges","text":"<p>Description: Query all trading pairs. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/listexchanges\n</code></pre> Parameter: None</p> <p>Return Value: An array containing all trading pair objects.</p>"},{"location":"api/http/#walletgetpaginatedexchangelist","title":"wallet/getpaginatedexchangelist","text":"<p>Description: Query the list of all the exchange pairs by pagination <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getpaginatedexchangelist -d '{\"offset\": 0, \"limit\":10}'\n</code></pre> Parameters:</p> <ul> <li><code>offset</code>: The starting index for pagination.</li> <li><code>limit</code>: The desired number of trading pairs to return in this query.</li> </ul> <p>Return Value: An array containing trading pair objects for the paginated results.</p>"},{"location":"api/http/#walletmarketsellasset","title":"wallet/marketsellasset","text":"<p>Description: Create an order. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/marketsellasset -d\n'{\n    \"owner_address\": \"4184894b42f66dce8cb84aec2ed11604c991351ac8\",\n    \"sell_token_id\": \"5f\",\n    \"sell_token_quantity\": 100,\n    \"buy_token_id\": \"31303030303031\",\n    \"buy_token_quantity\": 200\n}'\n</code></pre> Parameters:</p> <ul> <li><code>owner_address</code>: The order initiator's address, defaults to HexString format.</li> <li><code>sell_token_id</code>: The ID of the asset to sell, defaults to HexString format.</li> <li><code>sell_token_quantity</code>: The quantity of the asset to sell.</li> <li><code>buy_token_id</code>: The ID of the asset to buy, defaults to HexString format.</li> <li><code>buy_token_quantity</code>: The minimum quantity of the asset to buy.</li> <li><code>visible</code>: Sets the address format. <code>true</code> for Base58Check, <code>false</code> or omitted for HexString.</li> </ul> <p>Return Value: An unsigned order placement transaction object.</p>"},{"location":"api/http/#walletmarketcancelorder","title":"wallet/marketcancelorder","text":"<p>Description: Cancel an order. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/marketcancelorder -d\n'{\n    \"owner_address\": \"4184894b42f66dce8cb84aec2ed11604c991351ac8\",\n    \"order_id\": \"0a7af584a53b612bcff1d0fc86feab05f69bc4528f26a4433bb344d453bd6eeb\"\n}'\n</code></pre> Parameters:</p> <ul> <li><code>owner_address</code>: The order initiator's address, defaults to HexString format.</li> <li><code>order_id</code>: The ID of the order to cancel.</li> <li><code>visible</code>: Sets the address format. <code>true</code> for Base58Check, <code>false</code> or omitted for HexString.</li> </ul> <p>Return Value: An unsigned cancel order transaction object.</p>"},{"location":"api/http/#walletgetmarketorderbyaccount","title":"wallet/getmarketorderbyaccount","text":"<p>Description: Query orders owned by an account. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getmarketorderbyaccount -d\n'{\n    \"value\": \"4184894b42f66dce8cb84aec2ed11604c991351ac8\"\n}'\n</code></pre> Parameters:</p> <ul> <li><code>value</code>: The address, defaults to HexString format.</li> <li><code>visible</code>: Sets the address format. <code>true</code> for Base58Check, <code>false</code> or omitted for HexString.</li> </ul> <p>Return Value: An array containing all order objects for the account.</p>"},{"location":"api/http/#walletgetmarketpairlist","title":"wallet/getmarketpairlist","text":"<p>Description: Query all existing trading pairs. <pre><code>curl -X get  http://127.0.0.1:8090/wallet/getmarketpairlist\n</code></pre> Parameter: None</p> <p>Return Value: An array containing information for all trading pairs.</p>"},{"location":"api/http/#walletgetmarketorderlistbypair","title":"wallet/getmarketorderlistbypair","text":"<p>Description: Query all orders for a specific trading pair. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getmarketorderlistbypair -d\n'{\n    \"sell_token_id\": \"5f\" ,\n    \"buy_token_id\": \"31303030303031\"\n}'\n</code></pre> Parameters:</p> <ul> <li><code>sell_token_id</code>: The ID of the asset to sell, defaults to HexString format.</li> <li><code>buy_token_id</code>: The ID of the asset to buy, defaults to HexString format.</li> </ul> <p>Return Value: An array containing all order objects for the trading pair.</p>"},{"location":"api/http/#walletgetmarketpricebypair","title":"wallet/getmarketpricebypair","text":"<p>Description: Query all prices for a specific trading pair. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getmarketpricebypair -d\n'{\n    \"sell_token_id\": \"5f\"\n    \"buy_token_id\": \"31303030303031\"\n}'\n</code></pre> Parameters:</p> <ul> <li><code>sell_token_id</code>: The ID of the asset to sell, defaults to HexString format.</li> <li><code>buy_token_id</code>: The ID of the asset to buy, defaults to HexString format.</li> </ul> <p>Return Value: An array containing all price point objects for the trading pair.</p>"},{"location":"api/http/#walletgetmarketorderbyid","title":"wallet/getmarketorderbyid","text":"<p>Description: Query an order. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/getmarketorderbyid -d\n'{\n   \"value\": \"orderid\"\n}'\n</code></pre> Parameter: <code>value</code>: The order ID, defaults to HexString format.</p> <p>Return Value: The specified order object.</p> <p></p>"},{"location":"api/http/#pending-pool","title":"Pending Pool","text":"<p>The following are the APIs related to the Pending Pool:</p> <ul> <li>wallet/gettransactionfrompending</li> <li>wallet/gettransactionlistfrompending</li> <li>wallet/getpendingsize</li> </ul>"},{"location":"api/http/#walletgettransactionfrompending","title":"wallet/gettransactionfrompending","text":"<p>Description: Queries information for a transaction in the pending pool. <pre><code>curl -X POST  http://127.0.0.1:8090/wallet/gettransactionfrompending -d\n'{\n  \"value\": \"txId\"\n}'\n</code></pre> Parameter: <code>value</code>: The transaction ID, in hexString format by default.</p> <p>Return Value: A complete transaction object. Returns an empty object if the transaction is not in the pending pool.</p>"},{"location":"api/http/#walletgettransactionlistfrompending","title":"wallet/gettransactionlistfrompending","text":"<p>Description: Retrieves a list of all transaction IDs currently in the pending pool. <pre><code>curl -X get  http://127.0.0.1:8090/wallet/gettransactionlistfrompending\n</code></pre> Parameter: None</p> <p>Return Value: An array containing all pending transaction IDs.</p>"},{"location":"api/http/#walletgetpendingsize","title":"wallet/getpendingsize","text":"<p>Description: Queries the number of transactions currently in the pending pool. <pre><code>curl -X get  http://127.0.0.1:8090/wallet/getpendingsize\n</code></pre> Parameter: None</p> <p>Return Value: An object containing the size of the pending pool.</p>"},{"location":"api/http/#fullnode-solidity-http-api","title":"FullNode Solidity HTTP API","text":""},{"location":"api/http/#account-resources","title":"Account Resources","text":""},{"location":"api/http/#walletsoliditygetaccount","title":"walletsolidity/getaccount","text":"<p>Description: Queries and returns the complete on-chain information for a specified TRON account (including balance, resources, permissions, and assets).</p> <p><pre><code>curl -X POST  http://127.0.0.1:8091/walletsolidity/getaccount -d '{\"address\": \"41E552F6487585C2B58BC2C9BB4492BC1F17132CD0\"}'\n</code></pre> Parameters:</p> <ul> <li><code>address</code>: The account address to query.</li> <li><code>visible</code> (optional): Sets the address format. <code>true</code> for Base58Check, <code>false</code> (or omitted) for HexString.</li> </ul> <p>Return Value: An <code>Account</code> object.</p>"},{"location":"api/http/#walletsoliditygetdelegatedresource","title":"walletsolidity/getdelegatedresource","text":"<p>Description: In Stake 1.0, queries the resources (Energy or Bandwidth) delegated from one account to another. <pre><code>curl -X POST  http://127.0.0.1:8091/walletsolidity/getdelegatedresource -d '\n{\n\"fromAddress\": \"419844f7600e018fd0d710e2145351d607b3316ce9\",\n\"toAddress\": \"41c6600433381c731f22fc2b9f864b14fe518b322f\"\n}'\n</code></pre> Parameters:</p> <ul> <li><code>fromAddress</code>: The address of the delegating account.</li> <li><code>toAddress</code>: The address of the recipient account.</li> <li><code>visible</code> (optional): Sets the address format. true for Base58Check, false (or omitted) for HexString.</li> </ul> <p>Return Value: A list of <code>DelegatedResource</code> objects.</p>"},{"location":"api/http/#walletsoliditygetdelegatedresourceaccountindex","title":"walletsolidity/getdelegatedresourceaccountindex","text":"<p>Description: In Stake 1.0, queries the delegation relationships for a specified account. <pre><code>curl -X POST  http://127.0.0.1:8091/walletsolidity/getdelegatedresourceaccountindex -d '\n{\n\"value\": \"419844f7600e018fd0d710e2145351d607b3316ce9\",\n}'\n</code></pre> Parameters:</p> <ul> <li><code>value</code>: The account address to query.</li> <li><code>visible</code> (optional): Sets the address format. <code>true</code> for Base58Check, <code>false</code> (or omitted) for HexString.</li> </ul> <p>Return Value: A <code>DelegatedResourceAccountIndex</code> object showing the account's delegation overview.</p>"},{"location":"api/http/#walletsoliditygetaccountbyid","title":"walletsolidity/getaccountbyid","text":"<p>Description: Queries account information by its <code>account_id</code>. <pre><code>curl -X POST  http://127.0.0.1:8091/walletsolidity/getaccountbyid -d '{\"account_id\":\"6161616162626262\"}'\n</code></pre> Parameter: <code>account_id</code> in hexString format by default.</p> <p>Return Value: An Account object.</p>"},{"location":"api/http/#walletsoliditygetavailableunfreezecount","title":"walletsolidity/getavailableunfreezecount","text":"<p>Description: Queries the remaining number of unstake operations an account can initiate. The TRON network limits each account to a maximum of 32 concurrent unstaking operations within the 14-day lock period. This API can be used to pre-check whether there is an available \"unstaking quota\" before calling <code>unfreezebalancev2</code>.</p> <pre><code>curl -X POST http://127.0.0.1:8090/walletsolidity/getavailableunfreezecount -d\n'{\n  \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\",\n  \"visible\": true\n}\n'\n</code></pre> <p>Parameters:</p> <ul> <li><code>owner_address</code>: The account address to query.</li> <li><code>visible</code> (optional): Sets the address format. <code>true</code> for Base58Check, <code>false</code> (or omitted) for HexString.</li> </ul> <p>Return Value: A JSON object containing the remaining count.</p>"},{"location":"api/http/#walletsoliditygetcanwithdrawunfreezeamount","title":"walletsolidity/getcanwithdrawunfreezeamount","text":"<p>Description: Queries the total amount of unstaked principal that can be withdrawn at a specific point in time.</p> <pre><code>curl -X POST http://127.0.0.1:8090/walletsolidity/getcanwithdrawunfreezeamount -d\n'{\n  \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\",\n  \"timestamp\": 1667977444000,\n  \"visible\": true\n}\n'\n</code></pre> <p>Parameters:</p> <ul> <li><code>owner_address</code>: The address of the transaction initiator.</li> <li><code>timestamp</code>: The timestamp (in milliseconds) at which to query the withdrawable amount.</li> <li><code>visible</code> (optional): Sets the address format. <code>true</code> for Base58Check, <code>false</code> (or omitted) for HexString.</li> </ul> <p>Return Value: A JSON object containing the withdrawable amount.</p>"},{"location":"api/http/#walletsoliditygetcandelegatedmaxsize","title":"walletsolidity/getcandelegatedmaxsize","text":"<p>Description: Queries the maximum amount of a specified resource type that a target address can delegate, in sun. <pre><code>curl -X POST http://127.0.0.1:8090/walletsolidity/getcandelegatedmaxsize -d\n'{\n  \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\",\n  \"type\": 0,\n  \"visible\": true\n}\n'\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>owner_address</code>: The account address to query.</li> <li><code>type</code>: The resource type, <code>0</code> for Bandwidth, <code>1</code> for Energy.</li> <li><code>visible</code> (optional): Sets the address format. true for Base58Check, false (or omitted) for HexString.</li> </ul> <p>Return Value: </p> <ul> <li>A JSON object containing the maximum delegatable share.</li> </ul>"},{"location":"api/http/#walletsoliditygetdelegatedresourcev2","title":"walletsolidity/getdelegatedresourcev2","text":"<p>Description: Queries the resource details delegated from one address to a target address under the Stake 2.0 mechanism. <pre><code>curl -X POST http://127.0.0.1:8090/walletsolidity/getdelegatedresourcev2 -d\n'{\n  \"fromAddress\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\",\n  \"toAddress\": \"TPswDDCAWhJAZGdHPidFg5nEf8TkNToDX1\",\n  \"visible\": true\n}\n'\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>fromAddress</code>: The delegating account address.</li> <li><code>toAddress</code>: The recipient account address.</li> <li><code>visible</code>(optional): Sets the address format. <code>true</code> for Base58Check, <code>false</code> (or omitted) for HexString.</li> </ul> <p>Return Value: </p> <ul> <li>An array of <code>delegatedResource</code> objects, containing all delegation records between the two addresses under Stake 2.0.</li> </ul>"},{"location":"api/http/#walletsoliditygetdelegatedresourceaccountindexv2","title":"walletsolidity/getdelegatedresourceaccountindexv2","text":"<p>Description: Queries the resource delegation index for an address under the Stake 2.0 mechanism. It returns two lists: one of addresses to which the account has delegated resources (<code>toAccounts</code>), and one of addresses that have delegated resources to this account (<code>fromAccounts</code>).</p> <pre><code>curl -X POST http://127.0.0.1:8090/walletsolidity/getdelegatedresourceaccountindexv2 -d\n'{\n  \"value\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\",\n  \"visible\": true\n}\n'\n</code></pre> <p>Parameters:</p> <ul> <li><code>value</code>: The account address.</li> <li><code>visible</code> (optional): Sets the address format. <code>true</code> for Base58Check, <code>false</code> (or omitted) for HexString.</li> </ul> <p>Return Value:</p> <ul> <li>This interface returns a JSON object containing a list of bidirectional proxy relationships. It contains two lists: one for the addresses to which the account delegates resources (<code>toAddress</code>), and one for the addresses that delegate resources to the account (<code>fromAddress</code>).</li> </ul>"},{"location":"api/http/#voting-srs","title":"Voting &amp; SRs","text":""},{"location":"api/http/#walletsoliditylistwitnesses","title":"walletsolidity/listwitnesses","text":"<p>Description: Query the current list of all Super Representatives (SRs). <pre><code>curl -X POST  http://127.0.0.1:8091/walletsolidity/listwitnesses\n</code></pre> Parameter: None</p> <p>Return Value: A list of all witness information.</p>"},{"location":"api/http/#trc-10-token_1","title":"TRC-10 Token","text":""},{"location":"api/http/#walletsoliditygetassetissuelist","title":"walletsolidity/getassetissuelist","text":"<p>Description: Query a list of all TRC-10 tokens on the entire network. <pre><code>curl -X POST  http://127.0.0.1:8091/walletsolidity/getassetissuelist\n</code></pre> Parameter: None</p> <p>Return Value: An array containing objects for all TRC-10 tokens on the network.</p>"},{"location":"api/http/#walletsoliditygetpaginatedassetissuelist","title":"walletsolidity/getpaginatedassetissuelist","text":"<p>Description: Paginate and query a list of TRC-10 tokens on the entire network. <pre><code>curl -X POST  http://127.0.0.1:8091/walletsolidity/getpaginatedassetissuelist -d '{\"offset\": 0, \"limit\":10}'\n</code></pre> Parameters:</p> <ul> <li><code>offset</code>: The starting index for pagination.</li> <li><code>limit</code>: The desired number of tokens to return in this query.</li> </ul> <p>Return Value: An array containing TRC-10 token objects for the paginated results.</p>"},{"location":"api/http/#walletsoliditygetassetissuebyname","title":"walletsolidity/getassetissuebyname","text":"<p>Description: Query TRC-10 tokens by name. <pre><code>curl -X POST  http://127.0.0.1:8091/walletsolidity/getassetissuebyname -d '{\"value\": \"44756354616E\"}'\n</code></pre> Parameter: <code>value</code>\uff1aToken name, defaults to HexString format.</p> <p>Return Value: A TRC-10 token object.</p> <p>Note: Starting from Odyssey-v3.2, it is recommended to use getassetissuebyid or getassetissuelistbyname to replace this interface, because starting from 3.2, tokens are allowed to have the same name. If identical token names exist, this interface will report an error.</p>"},{"location":"api/http/#walletsoliditygetassetissuelistbyname","title":"walletsolidity/getassetissuelistbyname","text":"<p>Description: Query all matching TRC-10 token lists by name. <pre><code>curl -X POST  http://127.0.0.1:8091/walletsolidity/getassetissuelistbyname -d '{\"value\": \"44756354616E\"}'\n</code></pre> Parameter: <code>value</code>\uff1aToken name, defaults to HexString format.</p> <p>Return Value: An array containing all TRC-10 token objects with the same name.</p>"},{"location":"api/http/#walletsoliditygetassetissuebyid","title":"walletsolidity/getassetissuebyid","text":"<p>Description: Query TRC-10 token by ID. <pre><code>curl -X POST  http://127.0.0.1:8091/walletsolidity/getassetissuebyid -d '{\"value\": \"1000001\"}'\n</code></pre> Parameter\uff1a<code>value</code>: The ID of the TRC-10 token.</p> <p>Return Value: The specified TRC-10 token object.</p>"},{"location":"api/http/#blocks","title":"Blocks","text":""},{"location":"api/http/#walletsoliditygetnowblock","title":"walletsolidity/getnowblock","text":"<p>Description: Query the latest block. <pre><code>curl -X POST  http://127.0.0.1:8091/walletsolidity/getnowblock\n</code></pre> Parameter: None</p> <p>Return Value: The latest block object on the SolidityNode.</p>"},{"location":"api/http/#walletsoliditygetblockbynum","title":"walletsolidity/getblockbynum","text":"<p>Description: Query complete block information by a specified block height. <pre><code>curl -X POST  http://127.0.0.1:8091/walletsolidity/getblockbynum -d '{\"num\" : 100}'\n</code></pre> Parameter: <code>num</code>: Block height (integer).</p> <p>Return Value: The Block object at the specified height.</p>"},{"location":"api/http/#walletsoliditygetblockbyid","title":"walletsolidity/getblockbyid","text":"<p>Description: Query complete block information by a specified Block ID (hash). <pre><code>curl -X POST  http://127.0.0.1:8091/walletsolidity/getblockbyid-d '{\"value\":\n\"0000000000038809c59ee8409a3b6c051e369ef1096603c7ee723c16e2376c73\"}'\n</code></pre> Parameter: <code>value</code>: The Block ID (hash).</p> <p>Return Value: The Block object with the specified ID.</p>"},{"location":"api/http/#walletsoliditygetblockbylimitnext","title":"walletsolidity/getblockbylimitnext","text":"<p>Description: Paginate and query a list of blocks within a specified height range. <pre><code>curl -X POST  http://127.0.0.1:8091/walletsolidity/getblockbylimitnext -d '{\"startNum\": 1, \"endNum\": 2}'\n</code></pre> Parameters:</p> <ul> <li><code>startNum</code>: Starting block height (inclusive).</li> <li><code>endNum</code>: Ending block height (exclusive).</li> </ul> <p>Return Value: An array containing multiple Block objects (Block[]).</p>"},{"location":"api/http/#walletsoliditygetblockbylatestnum","title":"walletsolidity/getblockbylatestnum","text":"<p>Description: Queries the last N blocks from the SolidityNode, starting from the latest block. <pre><code>curl -X POST  http://127.0.0.1:8091/walletsolidity/getblockbylatestnum -d '{\"num\": 5}'\n</code></pre> Parameter: <code>num</code>: The number of blocks to query.</p> <p>Return Value: An array containing multiple Block objects (<code>Block[]</code>).</p>"},{"location":"api/http/#walletgetnodeinfo_1","title":"wallet/getnodeinfo","text":"<p>Description: View the current node's own operating status and information. <pre><code>curl -X GET http://127.0.0.1:8091/wallet/getnodeinfo\n</code></pre> Parameter: None</p> <p>Return Value: An object containing information such as node version, network status, block synchronization status, etc.</p>"},{"location":"api/http/#transactions","title":"Transactions","text":""},{"location":"api/http/#walletsoliditygettransactionbyid","title":"walletsolidity/gettransactionbyid","text":"<p>Description: Queries the complete information of a confirmed transaction by its ID (hash). <pre><code>curl -X POST  http://127.0.0.1:8091/walletsolidity/gettransactionbyid -d '{\"value\" : \"309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2\"}'\n</code></pre> Parameter: <code>value</code>: Transaction ID (hash).</p> <p>Return Value: The complete Transaction object. Returns an empty object if the transaction does not exist or is unconfirmed.</p>"},{"location":"api/http/#walletsoliditygettransactioncountbyblocknum","title":"walletsolidity/gettransactioncountbyblocknum","text":"<p>Description: Query the total number of transactions contained in a specified block height. <pre><code>curl -X POST  http://127.0.0.1:8091/walletsolidity/gettransactioncountbyblocknum -d '{\"num\" : 100}'\n</code></pre> Parameter: <code>num</code>: Block height.</p> <p>Return Value: An object containing the transaction count, such as <code>{\"count\": 50}</code>.</p>"},{"location":"api/http/#walletsoliditygettransactioninfobyid","title":"walletsolidity/gettransactioninfobyid","text":"<p>Description: Query the summary information of a transaction, such as fees and block location, based on its Transaction ID (hash). <pre><code>curl -X POST  http://127.0.0.1:8091/walletsolidity/gettransactioninfobyid -d '{\"value\" : \"309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2\"}'\n</code></pre> Parameter: <code>value</code>: Transaction ID (hash).</p> <p>Return Value: A TransactionInfo object containing transaction fees, block height, block timestamp, contract execution results, etc.</p>"},{"location":"api/http/#walletsoliditygettransactioninfobyblocknum","title":"walletsolidity/gettransactioninfobyblocknum","text":"<p>Description: Get a list of summary information for all transactions at a specified block height. <pre><code>curl -X POST  http://127.0.0.1:8091/walletsolidity/gettransactioninfobyblocknum -d '{\"num\" : 100}'\n</code></pre> Parameter: <code>num</code>: Block height.</p> <p>Return Value: A list containing multiple TransactionInfo objects.</p>"},{"location":"api/http/#dex-exchanges","title":"DEX Exchanges","text":""},{"location":"api/http/#walletsoliditygetexchangebyid","title":"walletsolidity/getexchangebyid","text":"<p>Description: Query a trading pair by ID. <pre><code>curl -X POST  http://127.0.0.1:8091/walletsolidity/getexchangebyid -d {\"id\":1}\n</code></pre> Parameter: <code>id</code>: The trading pair ID.</p> <p>Return Value: The specified trading pair object.</p>"},{"location":"api/http/#walletsoliditylistexchanges","title":"walletsolidity/listexchanges","text":"<p>Description: Query all trading pairs. <pre><code>curl -X POST  http://127.0.0.1:8091/walletsolidity/listexchanges\n</code></pre> Parameter: None</p> <p>Return Value: An array containing all trading pair objects.</p>"},{"location":"api/json-rpc/","title":"jsonRPC API","text":""},{"location":"api/json-rpc/#overview","title":"Overview","text":"<p>JSON-RPC is a stateless, lightweight remote procedure call (RPC) protocol. The JSON-RPC interface supported by the TRON network is compatible with Ethereum's. However, due to the difference in chain mechanism and design, TRON cannot support some interfaces on Ethereum. At the same time, TRON also provides dedicated APIs to create different types of transactions.</p> <p>Please pay attention</p> <ul> <li>The JSON-RPC service needs to be enabled and set the port in the node configuration file. If not configured, the service is disable by default. </li> </ul>"},{"location":"api/json-rpc/#how-to-enable-or-disable-json-rpc-service-of-a-node","title":"How to enable or disable JSON-RPC service of a node","text":"<p>Add below items in node's configuration file, then enable or disable it: <pre><code>node.jsonrpc {  \n    httpFullNodeEnable = true  \n    httpFullNodePort = 50545  \n    httpSolidityEnable = true  \n    httpSolidityPort = 50555  \n}\n</code></pre></p>"},{"location":"api/json-rpc/#hex-value-encoding","title":"HEX value encoding","text":"<p>At present there are two key data types that are passed over JSON: unformatted byte arrays and quantities. Both are passed with a hex encoding, however with different requirements to formatting:</p> <p>When encoding QUANTITIES (integers, numbers): encode as hex, prefix with \u201c0x\u201d, the most compact representation (slight exception: zero should be represented as \u201c0x0\u201d). Examples:</p> <ul> <li>0x41 (65 in decimal)</li> <li>0x400 (1024 in decimal)</li> <li>WRONG: 0x (should always have at least one digit - zero is \u201c0x0\u201d)</li> <li>WRONG: 0x0400 (no leading zeros allowed)</li> <li>WRONG: ff (must be prefixed 0x)</li> </ul> <p>When encoding UNFORMATTED DATA (byte arrays, account addresses, hashes, bytecode arrays): encode as hex, prefix with \u201c0x\u201d, two hex digits per byte. Examples:</p> <ul> <li>0x41 (size 1, \u201cA\u201d)</li> <li>0x004200 (size 3, \u201c\\0B\\0\u201d)</li> <li>0x (size 0, \u201c\u201d)</li> <li>WRONG: 0xf0f0f (must be even number of digits)</li> <li>WRONG: 004200 (must be prefixed 0x)</li> </ul>"},{"location":"api/json-rpc/#eth","title":"eth","text":""},{"location":"api/json-rpc/#eth_accounts","title":"eth_accounts","text":"<p>Returns a list of addresses owned by the client.</p> <p>Parameters </p> <p>None</p> <p>Returns </p> <p>Empty List</p> <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '\n\n{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_accounts\", \"params\": []}'\n</code></pre> <pre><code>{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":[]}\n</code></pre>"},{"location":"api/json-rpc/#eth_blocknumber","title":"eth_blockNumber","text":"<p>Returns the number of the most recent block.</p> <p>Parameters </p> <p>None</p> <p>Returns </p> <p>The latest block number.</p> <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":64}'\n</code></pre> <pre><code>{\"jsonrpc\":\"2.0\",\"id\":64,\"result\":\"0x20e0cf0\"}\n</code></pre>"},{"location":"api/json-rpc/#eth_call","title":"eth_call","text":"<p>Executes a message call immediately without creating a transaction on the block chain.</p> <p>Parameters</p> <p>1. Object - The transaction call object, the items in it as below.</p> Item Name Data Type Description from DATA, 20 Bytes Caller address. Hex format address, remove the prefix \"41\" to DATA, 20 Bytes Contract address.  Hex format address, remove the prefix \"41\" gas QUANTITY Not supported. The value is 0x0 gasPrice QUANTITY Not supported. The value is 0x0 value QUANTITY Not supported. The value is 0x0 data DATA Hash of the method signature and encoded parameters. <p>2. QUANTITY|TAG - currently, only \"latest\" is available. </p> <p>Returns</p> <p>DATA - the return value of executed contract function.</p> <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\n\n    \"jsonrpc\": \"2.0\",\n\n    \"method\": \"eth_call\",\n\n    \"params\": [{\n\n        \"from\": \"0xF0CC5A2A84CD0F68ED1667070934542D673ACBD8\",\n\n        \"to\": \"0x70082243784DCDF3042034E7B044D6D342A91360\",\n\n        \"gas\": \"0x0\",\n\n        \"gasPrice\": \"0x0\",\n\n        \"value\": \"0x0\",\n\n        \"data\": \"0x70a08231000000000000000000000041f0cc5a2a84cd0f68ed1667070934542d673acbd8\"\n\n    }, \"latest\"],\n\n    \"id\": 1\n\n}'\n</code></pre> <p>Result</p> <pre><code>{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":\"0x\"}\n</code></pre> <pre><code>### eth_chainId\n\n*Returns the chainId of the TRON network which is the last four bytes of the genesis block hash*\n\n**Parameters**  \n\nNone\n\n**Returns**  \n\nDATA - The chainId of the TRON network\n\n**Example**\n\n```curl\n\ncurl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_chainId\",\"params\":[],\"id\":79}'\n</code></pre> <p>Result</p> <pre><code>{\"jsonrpc\":\"2.0\",\"id\":79,\"result\":\"0x2b6653dc\"}\n</code></pre>"},{"location":"api/json-rpc/#eth_coinbase","title":"eth_coinbase","text":"<p>Returns the super representative address of the current node.</p> <p>Parameters </p> <p>None</p> <p>Returns </p> <p>DATA - The super representative address of the node.   (Note: Return the first address If more than one super representative address is configured, return error if there is no valid address or the address did not generate any block, the error will be \u201cetherbase must be explicitly specified\u201d . )</p> <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_coinbase\", \"params\": []}'\n</code></pre> <p>Result</p> <pre><code>{\"jsonrpc\":\"2.0\",\"id\":1,\"error\":{\"code\":-32000,\"message\":\"etherbase must be explicitly specified\",\"data\":\"{}\"}}\n</code></pre>"},{"location":"api/json-rpc/#eth_estimategas","title":"eth_estimateGas","text":"<p>Get the required energy through triggerConstantContract.</p> <p>Parameters </p> <p>object - The transaction call object, the items in it as below</p> Item Name Data Type Description from DATA, 20 Bytes address of the sender to DATA, 20 Bytes address of the receiver gas QUANTITY unused. gasPrice QUANTITY unused. value QUANTITY Integer of the value sent with this transaction data DATA Hash of the method signature and encoded parameters. <p>Returns </p> <p>The amount of energy used.</p> <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\n\n    \"jsonrpc\": \"2.0\",\n\n    \"id\": 1,\n\n    \"method\": \"eth_estimateGas\",\n\n    \"params\": [{\n\n        \"from\": \"0x41F0CC5A2A84CD0F68ED1667070934542D673ACBD8\",\n\n        \"to\": \"0x4170082243784DCDF3042034E7B044D6D342A91360\",\n\n        \"gas\": \"0x01\",\n\n        \"gasPrice\": \"0x8c\",\n\n        \"value\": \"0x01\",\n\n        \"data\": \"0x70a08231000000000000000000000041f0cc5a2a84cd0f68ed1667070934542d673acbd8\"\n\n    }]\n\n}'\n</code></pre> <p>Result</p> <pre><code>{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":\"0x0\"}\n</code></pre>"},{"location":"api/json-rpc/#eth_gasprice","title":"eth_gasPrice","text":"<p>Returns the current energy price in sun.</p> <p>Parameters </p> <p>None</p> <p>Returns </p> <p>Integer of the current energy price in sun.</p> <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_gasPrice\", \"params\": []}'\n</code></pre> <p>Result</p> <pre><code>{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":\"0x8c\"}\n</code></pre>"},{"location":"api/json-rpc/#eth_getbalance","title":"eth_getBalance","text":"<p>Returns the balance of the account of the given address.</p> <p>Parameters</p> Index Data Type Description 1 DATA, 20 Bytes address to check for balance. 2 QUANTITY only \"latest\" is available now <p>Returns</p> <p>QUANTITY - integer of the current balance in sun.</p> <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\n\n    \"jsonrpc\": \"2.0\",\n\n    \"method\": \"eth_getBalance\",\n\n    \"params\": [\"0x41f0cc5a2a84cd0f68ed1667070934542d673acbd8\", \"latest\"],\n\n    \"id\": 64\n\n}'\n</code></pre> <p>Result</p> <pre><code>{\"jsonrpc\":\"2.0\",\"id\":64,\"result\":\"0x492780\"}\n</code></pre>"},{"location":"api/json-rpc/#eth_getblockbyhash","title":"eth_getBlockByHash","text":"<p>Returns information about a block by hash.</p> <p>Parameters</p> Index Data Type Description 1 DATA, 32 Bytes hash of a block 2 Boolean If true it returns the full transaction objects, if false only the hashes of the transactions. <p>Returns</p> <p>object - a block object  or null when no block was found. The block includes items as below.</p> Item Name Data Type Description number QUANTITY block number hash DATA, 32 Bytes hash of the block parentHash DATA, 32 Bytes hash of the parent block nonce QUANTITY unused sha3Uncles DATA, 32 Bytes SHA3 of the uncles data in the block logsBloom DATA, 256 Bytes the bloom filter for the logs of the block. transactionsRoot DATA, 32 Bytes the root of the transaction trie of the block stateRoot DATA, 32 Bytes the root of the final state trie of the block receiptsRoot DATA, 32 Bytes the root of the receipts trie of the block miner DATA, 20 Bytes the address of the beneficiary to whom the mining rewards were given difficulty QUANTITY integer of the difficulty for this block totalDifficulty QUANTITY integer of the total difficulty of the chain until this block extraData DATA the \u201cextra data\u201d field of this block size QUANTITY integer the size of this block in bytes gasLimit QUANTITY the maximum gas allowed in this block gasUsed QUANTITY the total used gas by all transactions in this block timestamp QUANTITY the unix timestamp for when the block was created, the unit is second. transactions Array Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter. uncles Array Array of uncle hashes <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\n\n    \"jsonrpc\": \"2.0\",\n\n    \"method\": \"eth_getBlockByHash\",\n\n    \"params\": [\"0x0000000000f9cc56243898cbe88685678855e07f51c5af91322c225ce3693868\", false],\n\n    \"id\": 1\n\n}'\n</code></pre> <p>Result</p> <pre><code>{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":null}\n</code></pre>"},{"location":"api/json-rpc/#eth_getblockbynumber","title":"eth_getBlockByNumber","text":"<p>Returns information about a block by hash.</p> <p>Parameters</p> Index Data Type Description 1 QUANTITY|TAG Integer of a block number, or the string \"earliest\", \"latest\" 2 Boolean If true it returns the full transaction objects, if false only the hashes of the transactions. <p>Returns</p> <p>object - a block object  or null when no block was found. See eth_getBlockByHash</p> <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\n\n    \"jsonrpc\": \"2.0\",\n\n    \"method\": \"eth_getBlockByNumber\",\n\n    \"params\": [\"0xF9CC56\", true],\n\n    \"id\": 1\n\n}'\n</code></pre> <p>Result</p> <pre><code>{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":null}\n</code></pre>"},{"location":"api/json-rpc/#eth_getblocktransactioncountbyhash","title":"eth_getBlockTransactionCountByHash","text":"<p>Returns the number of transactions in a block from a block matching the given block hash.</p> <p>Parameters</p> <p>DATA, 32 Bytes - hash of a block</p> <p>Returns</p> <p>QUANTITY - integer of the number of transactions in this block.</p> <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\n\n    \"jsonrpc\": \"2.0\",\n\n    \"id\": 1,\n\n    \"method\": \"eth_getBlockTransactionCountByHash\",\n\n    \"params\": [\"0x00000000020ef11c87517739090601aa0a7be1de6faebf35ddb14e7ab7d1cc5b\"]\n\n}'\n</code></pre> <p>Result</p> <pre><code>{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":\"0x39\"}\n</code></pre>"},{"location":"api/json-rpc/#eth_getblocktransactioncountbynumber","title":"eth_getBlockTransactionCountByNumber","text":"<p>Returns the number of transactions in a block matching the given block number.</p> <p>Parameters</p> <p>QUANTITY|TAG - integer of a block number, or the string \"earliest\" or \"latest\".  </p> <p>Returns</p> <p>QUANTITY - integer of the number of transactions in this block.</p> <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\n\n    \"jsonrpc\": \"2.0\",\n\n    \"method\": \"eth_getBlockTransactionCountByNumber\",\n\n    \"params\": [\"0xF96B0F\"],\n\n    \"id\": 1\n\n}'\n</code></pre> <p>Result</p> <pre><code>{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":\"0x23\"}\n</code></pre>"},{"location":"api/json-rpc/#eth_getcode","title":"eth_getCode","text":"<p>Returns runtime code of a given smart contract address.</p> <p>Parameters</p> Index Data Type Description 1 DATA, 20 Bytes contract address 2 QUANTITY|TAG currently, only \"latest\" is available <p>Returns</p> <p>DATA - the runtime code from the given address.</p> <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\n\n    \"jsonrpc\": \"2.0\",\n\n    \"method\": \"eth_getCode\",\n\n    \"params\": [\"0x4170082243784DCDF3042034E7B044D6D342A91360\", \"latest\"],\n\n    \"id\": 64\n\n}'\n</code></pre> <p>Result</p> <pre><code>{\"jsonrpc\":\"2.0\",\"id\":64,\"result\":\"0x\"}\n</code></pre>"},{"location":"api/json-rpc/#eth_getstorageat","title":"eth_getStorageAt","text":"<p>Returns the value from a storage position at a given address. It can be used to get the value of a variable in a contract.</p> <p>Parameters</p> Index Data Type Description 1 DATA, 20 Bytes address 2 QUANTITY integer of the position in the storage 3 QUANTITY|TAG currently only support \"latest\" <p>Returns</p> <p>DATA - the value at this storage position.</p> <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\n\n    \"jsonrpc\": \"2.0\",\n\n    \"method\": \"eth_getStorageAt\",\n\n    \"params\": [\"0xE94EAD5F4CA072A25B2E5500934709F1AEE3C64B\", \"0x29313b34b1b4beab0d3bad2b8824e9e6317c8625dd4d9e9e0f8f61d7b69d1f26\", \"latest\"],\n\n    \"id\": 1\n\n}'\n</code></pre> <p>Result</p> <pre><code>{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":\"0x0000000000000000000000000000000000000000000000000000000000000000\"}\n</code></pre>"},{"location":"api/json-rpc/#eth_gettransactionbyblockhashandindex","title":"eth_getTransactionByBlockHashAndIndex","text":"<p>Returns information about a transaction by block hash and transaction index position.</p> <p>Parameters</p> Index Data Type Description 1 DATA, 32 Bytes hash of a block 2 QUANTITY the transaction index position <p>Returns</p> <p>object - a transaction object  or null when no transaction was found. The transaction includes items as below.</p> Item Name Data Type Description blockHash DATA, 32 Bytes hash of the block where this transaction was in. blockNumber QUANTITY block number where this transaction was in. from DATA, 20 Bytes address of the sender gas QUANTITY unused. gasPrice QUANTITY energy price hash DATA, 32 Bytes hash of the transaction input DATA the data sent along with the transaction nonce QUANTITY unused to DATA, 20 Bytes address of the receiver transactionIndex QUANTITY integer of the transactions index position in the block value QUANTITY value transferred in sun v QUANTITY ECDSA recovery id r DATA, 32 Bytes ECDSA signature r s DATA, 32 Bytes ECDSA signature s <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\n\n    \"jsonrpc\": \"2.0\",\n\n    \"method\": \"eth_getTransactionByBlockHashAndIndex\",\n\n    \"params\": [\"00000000020ef11c87517739090601aa0a7be1de6faebf35ddb14e7ab7d1cc5b\", \"0x0\"],\n\n    \"id\": 64\n\n}'\n</code></pre> <p>Result</p> <pre><code>{\n\n    \"jsonrpc\": \"2.0\",\n\n    \"id\": 64,\n\n    \"result\": {\n\n        \"blockHash\": \"0x00000000020ef11c87517739090601aa0a7be1de6faebf35ddb14e7ab7d1cc5b\",\n\n        \"blockNumber\": \"0x20ef11c\",\n\n        \"from\": \"0xb4f1b6e3a1461266b01c2c4ff9237191d5c3d5ce\",\n\n        \"gas\": \"0x0\",\n\n        \"gasPrice\": \"0x8c\",\n\n        \"hash\": \"0x8dd26d1772231569f022adb42f7d7161dee88b97b4b35eeef6ce73fcd6613bc2\",\n\n        \"input\": \"0x\",\n\n        \"nonce\": null,\n\n        \"r\": \"0x6212a53b962345fb8ab02215879a2de05f32e822c54e257498f0b70d33825cc5\",\n\n        \"s\": \"0x6e04221f5311cf2b70d3aacfc444e43a5cf14d0bf31d9227218efaabd9b5a812\",\n\n        \"to\": \"0x047d4a0a1b7a9d495d6503536e2a49bb5cc72cfe\",\n\n        \"transactionIndex\": \"0x0\",\n\n        \"type\": \"0x0\",\n\n        \"v\": \"0x1b\",\n\n        \"value\": \"0x203226\"\n\n    }\n\n}\n</code></pre>"},{"location":"api/json-rpc/#eth_gettransactionbyblocknumberandindex","title":"eth_getTransactionByBlockNumberAndIndex","text":"<p>Returns information about a transaction by block number and transaction index position.</p> <p>Parameters</p> Index Data Type Description 1 QUANTITY|TAG a block number, or the string \"earliest\", \"latest\", 2 QUANTITY the transaction index position <p>Returns</p> <p>object - a transaction object  or null when no transaction was found. See eth_getTransactionByBlockHashAndIndex</p> <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\n\n    \"jsonrpc\": \"2.0\",\n\n    \"method\": \"eth_getTransactionByBlockNumberAndIndex\",\n\n    \"params\": [\"0xfb82f0\", \"0x0\"],\n\n    \"id\": 64\n\n}'\n</code></pre> <p>Result</p> <pre><code>{\"jsonrpc\":\"2.0\",\"id\":64,\"result\":null}\n</code></pre>"},{"location":"api/json-rpc/#eth_gettransactionbyhash","title":"eth_getTransactionByHash","text":"<p>Returns the information about a transaction requested by transaction hash.</p> <p>Parameters</p> <p>DATA, 32 Bytes - hash of a transaction</p> <p>Returns</p> <p>object - a transaction object  or null when no transaction was found. See eth_getTransactionByBlockHashAndIndex</p> <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\n\n    \"jsonrpc\": \"2.0\",\n\n    \"method\": \"eth_getTransactionByHash\",\n\n    \"params\": [\"c9af231ad59bcd7e8dcf827afd45020a02112704dce74ec5f72cb090aa07eef0\"],\n\n    \"id\": 64\n\n}'\n</code></pre> <p>Result</p> <pre><code>{\n\n    \"jsonrpc\": \"2.0\",\n\n    \"id\": 64,\n\n    \"result\": {\n\n        \"blockHash\": \"0x00000000020ef11c87517739090601aa0a7be1de6faebf35ddb14e7ab7d1cc5b\",\n\n        \"blockNumber\": \"0x20ef11c\",\n\n        \"from\": \"0x6eced5214d62c3bc9eaa742e2f86d5c516785e14\",\n\n        \"gas\": \"0x0\",\n\n        \"gasPrice\": \"0x8c\",\n\n        \"hash\": \"0xc9af231ad59bcd7e8dcf827afd45020a02112704dce74ec5f72cb090aa07eef0\",\n\n        \"input\": \"0x\",\n\n        \"nonce\": null,\n\n        \"r\": \"0x433eaf0a7df3a08c8828a2180987146d39d44de4ac327c4447d0eeda42230ea8\",\n\n        \"s\": \"0x6f91f63b37f4d1cd9342f570205beefaa5b5ba18d616fec643107f8c1ae1339d\",\n\n        \"to\": \"0x0697250b9d73b460a9d2bbfd8c4cacebb05dd1f1\",\n\n        \"transactionIndex\": \"0x6\",\n\n        \"type\": \"0x0\",\n\n        \"v\": \"0x1b\",\n\n        \"value\": \"0x1cb2310\"\n\n    }\n\n}\n</code></pre>"},{"location":"api/json-rpc/#eth_gettransactionreceipt","title":"eth_getTransactionReceipt","text":"<p>Returns the  transaction info: receipt, transaction fee, block height ... by transaction hash. Please refer to http api: wallet/gettransactioninfobyid</p> <p>Parameters</p> <p>DATA, 32 Bytes - hash of a transaction</p> <p>Returns</p> <p>object - A transaction receipt object, or null when no receipt was found. The items in transaction receipt as below.</p> Item Name Data Type Description transactionHash DATA, 32 Bytes hash of the transaction transactionIndex QUANTITY integer of the transactions index position in the block blockHash DATA, 32 Bytes hash of the block where this transaction was in. blockNumber QUANTITY block number where this transaction was in. from DATA, 20 Bytes address of the sender to DATA, 20 Bytes address of the receiver cumulativeGasUsed QUANTITY The total amount of gas used when this transaction was executed in the block. gasUsed QUANTITY The amount of gas used by this specific transaction alone. contractAddress DATA, 20 Bytes The contract address created, if the transaction was a contract creation, otherwise null. logs Array Array of log objects, which this transaction generated. logsBloom DATA, 256 Bytes Bloom filter for light clients to quickly retrieve related logs. root DATA 32 bytes of post-transaction stateroot (pre Byzantium) status QUANTITY either 1 (success) or 0 (failure) <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\n\n    \"jsonrpc\": \"2.0\",\n\n    \"method\": \"eth_getTransactionReceipt\",\n\n    \"params\": [\"c9af231ad59bcd7e8dcf827afd45020a02112704dce74ec5f72cb090aa07eef0\"],\n\n    \"id\": 64\n\n}'\n</code></pre> <p>Result</p> <pre><code>{\n\n    \"jsonrpc\": \"2.0\",\n\n    \"id\": 64,\n\n    \"result\": {\n\n        \"blockHash\": \"0x00000000020ef11c87517739090601aa0a7be1de6faebf35ddb14e7ab7d1cc5b\",\n\n        \"blockNumber\": \"0x20ef11c\",\n\n        \"contractAddress\": null,\n\n        \"cumulativeGasUsed\": \"0x646e2\",\n\n        \"effectiveGasPrice\": \"0x8c\",\n\n        \"from\": \"0x6eced5214d62c3bc9eaa742e2f86d5c516785e14\",\n\n        \"gasUsed\": \"0x0\",\n\n        \"logs\": [],\n\n        \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n\n        \"status\": \"0x1\",\n\n        \"to\": \"0x0697250b9d73b460a9d2bbfd8c4cacebb05dd1f1\",\n\n        \"transactionHash\": \"0xc9af231ad59bcd7e8dcf827afd45020a02112704dce74ec5f72cb090aa07eef0\",\n\n        \"transactionIndex\": \"0x6\",\n\n        \"type\": \"0x0\"\n\n    }\n\n}\n</code></pre>"},{"location":"api/json-rpc/#eth_getwork","title":"eth_getWork","text":"<p>Returns the hash of the current block</p> <p>Parameters </p> <p>None</p> <p>Returns </p> <p>Array - Array with the following properties:</p> Index Data Type Description 1 DATA, 32 Bytes hash of the block 2 DATA unused 3 DATA unused <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\n\n    \"jsonrpc\": \"2.0\",\n\n    \"method\": \"eth_getWork\",\n\n    \"params\": [],\n\n    \"id\": 73\n\n}'\n</code></pre> <p>Result</p> <pre><code>{\n\n    \"jsonrpc\": \"2.0\",\n\n    \"id\": 73,\n\n    \"result\": [\"0x00000000020e73915413df0c816e327dc4b9d17069887aef1fff0e854f8d9ad0\", null, null]\n\n}\n</code></pre>"},{"location":"api/json-rpc/#eth_protocolversion","title":"eth_protocolVersion","text":"<p>Returns the java-tron block version</p> <p>Parameters </p> <p>None</p> <p>Returns </p> <p>String - The current java-tron block version</p> <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_protocolVersion\",\"params\":[],\"id\":64}'\n</code></pre> <p>Result</p> <pre><code>{\"jsonrpc\":\"2.0\",\"id\":64,\"result\":\"0x16\"}\n</code></pre>"},{"location":"api/json-rpc/#eth_syncing","title":"eth_syncing","text":"<p>Returns an object with data about the sync status of the node</p> <p>Parameters </p> <p>None</p> <p>Returns </p> <p>Object|Boolean, An object with sync status data or FALSE, when not syncing, the items in object includes:</p> startingBlock QUANTITY The block at which the import started (will only be reset, after the sync reached his head) currentBlock QUANTITY The current block highestBlock QUANTITY The estimated highest block <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_syncing\",\"params\":[],\"id\":64}'\n</code></pre> <p>Result</p> <pre><code>{\n\n    \"jsonrpc\": \"2.0\",\n\n    \"id\": 64,\n\n    \"result\": {\n\n        \"startingBlock\": \"0x20e76cc\",\n\n        \"currentBlock\": \"0x20e76df\",\n\n        \"highestBlock\": \"0x20e76e0\"\n\n    }\n\n}\n</code></pre>"},{"location":"api/json-rpc/#eth_newfilter","title":"eth_newFilter","text":"<p>Creates a filter object, based on filter options, to notify when the state changes (logs).</p> <p>Parameters </p> <p>Object - The filter options:</p> Field Type Description fromBlock QUANTITY|TAG Integer block number, or \"latest\" toBlock QUANTITY|TAG Integer block number, or \"latest\" address DATA|Array, 20 Bytes Contract address or a list of addresses from which logs should originate. topics Array of DATA Topics <p>Returns </p> <p>QUANTITY - A filter id.</p> <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_newFilter\",\"params\":[{\"address\":[\"cc2e32f2388f0096fae9b055acffd76d4b3e5532\",\"E518C608A37E2A262050E10BE0C9D03C7A0877F3\"],\"fromBlock\":\"0x989680\",\"toBlock\":\"0x9959d0\",\"topics\":[\"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",null,[\"0x0000000000000000000000001806c11be0f9b9af9e626a58904f3e5827b67be7\",\"0x0000000000000000000000003c8fb6d064ceffc0f045f7b4aee6b3a4cefb4758\"]]}],\"id\":1}'\n</code></pre> <p>Result</p> <pre><code>{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":\"0x2bab51aee6345d2748e0a4a3f4569d80\"}\n</code></pre>"},{"location":"api/json-rpc/#eth_newblockfilter","title":"eth_newBlockFilter","text":"<p>Creates a filter in the node, to notify when a new block arrives.</p> <p>Parameters </p> <p>None.</p> <p>Returns </p> <p>QUANTITY - A filter id.</p> <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_newBlockFilter\",\"params\":[],\"id\":1}'\n</code></pre> <p>Result</p> <pre><code>{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":\"0x2bab51aee6345d2748e0a4a3f4569d80\"}\n</code></pre>"},{"location":"api/json-rpc/#eth_getfilterchanges","title":"eth_getFilterChanges","text":"<p>Polling method for a filter, which returns an array of logs which occurred since last poll.</p> <p>Parameters </p> <p>QUANTITY - the filter id.</p> <p>Returns</p> <ul> <li>For filters created with eth_newFilte, return logs object list, each log object with following params:</li> </ul> Field Type Description removed TAG true when the log was removed, due to a chain reorganization. false if its a valid log. logIndex QUANTITY Integer of the log index position in the block. null when its pending log. transactionIndex QUANTITY Integer of the transactions index position log was created from. null when its pending log. transactionHash DATA, 32Bytes Hash of the transactions this log was created from. blockHash DATA, 32 Bytes Hash of the block where this log was in. null when its pending. blockNumber QUANTITY The block number where this log was in. address DATA, 32 Bytes Address from which this log originated. data DATA Contains one or more 32 Bytes non-indexed arguments of the log. topics DATA[] Event topic and indexed arguments. <ul> <li>For filters created with eth_newBlockFilter the return are block hashes (DATA, 32 Bytes).</li> </ul> <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\n\n    \"jsonrpc\": \"2.0\",\n\n    \"method\": \"eth_getFilterChanges\",\n\n    \"params\": [\n\n        \"0xc11a84d5e906ecb9f5c1eb65ee940b154ad37dce8f5ac29c80764508b901d996\"\n\n    ],\n\n    \"id\": 71\n\n}'\n</code></pre> <p>Result</p> <pre><code>{\n\n    \"jsonrpc\": \"2.0\",\n\n    \"id\": 71,\n\n    \"error\": {\n\n        \"code\": -32000,\n\n        \"message\": \"filter not found\",\n\n        \"data\": \"{}\"\n\n    }\n\n}\n</code></pre>"},{"location":"api/json-rpc/#eth_getfilterlogs","title":"eth_getFilterLogs","text":"<p>Returns an array of all logs matching filter with given id.</p> <p>Parameters </p> <p>QUANTITY - the filter id.</p> <p>Returns</p> <p>See eth_getFilterChanges\u3002</p> <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\n\n    \"jsonrpc\": \"2.0\",\n\n    \"method\": \"eth_getFilterLogs\",\n\n    \"params\": [\n\n        \"0xc11a84d5e906ecb9f5c1eb65ee940b154ad37dce8f5ac29c80764508b901d996\"\n\n    ],\n\n    \"id\": 71\n\n}'\n</code></pre> <p>Result</p> <pre><code>{\n\n    \"jsonrpc\": \"2.0\",\n\n    \"id\": 71,\n\n    \"error\": {\n\n        \"code\": -32000,\n\n        \"message\": \"filter not found\",\n\n        \"data\": \"{}\"\n\n    }\n\n}\n</code></pre>"},{"location":"api/json-rpc/#eth_uninstallfilter","title":"eth_uninstallFilter","text":"<p>Uninstalls a filter with given id. Should always be called when watch is no longer needed. Additionally Filters timeout when they aren't requested with eth_getFilterChanges for a period of time.</p> <p>Parameters </p> <p>QUANTITY - the filter id.</p> <p>Returns</p> <p>Boolean - true if the filter was successfully uninstalled, otherwise false.</p> <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\n\n    \"jsonrpc\": \"2.0\",\n\n    \"method\": \"eth_uninstallFilter\",\n\n    \"params\": [\n\n        \"0xc11a84d5e906ecb9f5c1eb65ee940b154ad37dce8f5ac29c80764508b901d996\"\n\n    ],\n\n    \"id\": 71\n\n}'\n</code></pre> <p>Result</p> <pre><code>{\n\n    \"jsonrpc\": \"2.0\",\n\n    \"id\": 71,\n\n    \"result\": true\n\n}\n</code></pre>"},{"location":"api/json-rpc/#eth_getlogs","title":"eth_getLogs","text":"<p>Returns an array of all logs matching a given filter object.</p> <p>Parameters </p> <p>Object - The filter options which include below fields:</p> Field Type Description fromBlock QUANTITY|TAG (optional, default: \"latest\") Integer block number, or \"latest\" for the last mined block toBlock QUANTITY|TAG (optional, default: \"latest\") Integer block number, or \"latest\" for the last mined block address DATA|Array, 20 Bytes (optional) Contract address or a list of addresses from which logs should originate. topics Array of DATA (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with \"or\" options. blockhash DATA, 32 Bytes (optional) Block hash <p>Returns</p> <p>See eth_getFilterChanges.</p> <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_getLogs\",\"params\":[{\"address\":[\"cc2e32f2388f0096fae9b055acffd76d4b3e5532\",\"E518C608A37E2A262050E10BE0C9D03C7A0877F3\"],\"fromBlock\":\"0x989680\",\"toBlock\":\"0x9959d0\",\"topics\":[\"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",null,[\"0x0000000000000000000000001806c11be0f9b9af9e626a58904f3e5827b67be7\",\"0x0000000000000000000000003c8fb6d064ceffc0f045f7b4aee6b3a4cefb4758\"]]}],\"id\":1}'\n</code></pre> <p>Result</p> <pre><code>{\n\n    \"jsonrpc\": \"2.0\",\n\n    \"id\": 71,\n\n    \"result\": []\n\n}\n</code></pre>"},{"location":"api/json-rpc/#net","title":"net","text":""},{"location":"api/json-rpc/#net_listening","title":"net_listening","text":"<p>Returns true if the client is actively listening for network connections.</p> <p>Parameters </p> <p>None</p> <p>Returns </p> <p>Boolean - true when listening, otherwise false.</p> <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\"jsonrpc\":\"2.0\",\"method\":\"net_listening\",\"params\":[],\"id\":64}'\n</code></pre> <p>Result</p> <pre><code>{\"jsonrpc\":\"2.0\",\"id\":64,\"result\":true}\n</code></pre>"},{"location":"api/json-rpc/#net_peercount","title":"net_peerCount","text":"<p>Returns number of peers currently connected to the client.</p> <p>Parameters </p> <p>None</p> <p>Returns </p> <p>QUANTITY - integer of the number of connected peers.</p> <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\"jsonrpc\":\"2.0\",\"method\":\"net_peerCount\",\"params\":[],\"id\":64}'\n</code></pre> <p>Result</p> <pre><code>{\"jsonrpc\":\"2.0\",\"id\":64,\"result\":\"0x9\"}\n</code></pre>"},{"location":"api/json-rpc/#net_version","title":"net_version","text":"<p>Returns the hash of the genesis block.</p> <p>Parameters </p> <p>None</p> <p>Returns </p> <p>String - The hash of genesis block</p> <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\"jsonrpc\":\"2.0\",\"method\":\"net_version\",\"params\":[],\"id\":64}'\n</code></pre> <p>Result</p> <pre><code>{\"jsonrpc\":\"2.0\",\"id\":64,\"result\":\"0x2b6653dc\"}\n</code></pre>"},{"location":"api/json-rpc/#web3","title":"web3","text":""},{"location":"api/json-rpc/#web3_clientversion","title":"web3_clientVersion","text":"<p>Returns the current client version.</p> <p>Parameters </p> <p>None</p> <p>Returns </p> <p>String - The current client version</p> <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"web3_clientVersion\", \"params\": []}'\n</code></pre> <p>Result</p> <pre><code>{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":\"TRON/v4.3.0/Linux/Java1.8/GreatVoyage-v4.2.2.1-281-gc1d9dfd6c\"}\n</code></pre>"},{"location":"api/json-rpc/#web3_sha3","title":"web3_sha3","text":"<p>Returns Keccak-256 (not the standardized SHA3-256) of the given data.</p> <p>Parameters </p> <p>DATA - the data to convert into a SHA3 hash</p> <p>Returns </p> <p>DATA - The SHA3 result of the given string.</p> <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"web3_sha3\", \"params\": [\"0x68656c6c6f20776f726c64\"]}'\n</code></pre> <p>Result</p> <pre><code>{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":\"0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad\"}\n</code></pre>"},{"location":"api/json-rpc/#buildtransaction","title":"buildTransaction","text":"<p>Create a transaction, different transaction types have different parameters</p>"},{"location":"api/json-rpc/#transfercontract","title":"TransferContract","text":"<p>Parameters </p> <p>Object - the items in object as below: </p> Param Name Data Type Description from DATA, 20 Bytes The address the transaction is sent from. to DATA, 20 Bytes The address the transaction is directed to. value DATA the transfer amount <p>Returns</p> <p>Object - transaction of TransferContract or an error</p> <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\n\n    \"id\": 1337,\n\n    \"jsonrpc\": \"2.0\",\n\n    \"method\": \"buildTransaction\",\n\n    \"params\": [\n\n        {\n\n            \"from\": \"0xC4DB2C9DFBCB6AA344793F1DDA7BD656598A06D8\",\n\n            \"to\": \"0x95FD23D3D2221CFEF64167938DE5E62074719E54\",\n\n            \"value\": \"0x1f4\"\n\n        }]}'\n</code></pre> <p>Result</p> <pre><code>{\"jsonrpc\":\"2.0\",\"id\":1337,\"result\":{\"transaction\":{\"visible\":false,\"txID\":\"ae02a80abd985a6f05478b9bbf04706f00cdbf71e38c77d21ed77e44c634cef9\",\"raw_data\":{\"contract\":[{\"parameter\":{\"value\":{\"amount\":500,\"owner_address\":\"41c4db2c9dfbcb6aa344793f1dda7bd656598a06d8\",\"to_address\":\"4195fd23d3d2221cfef64167938de5e62074719e54\"},\"type_url\":\"type.googleapis.com/protocol.TransferContract\"},\"type\":\"TransferContract\"}],\"ref_block_bytes\":\"957e\",\"ref_block_hash\":\"3922d8c0d28b5283\",\"expiration\":1684469286000,\"timestamp\":1684469226841},\"raw_data_hex\":\"0a02957e22083922d8c0d28b528340f088c69183315a66080112620a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412310a1541c4db2c9dfbcb6aa344793f1dda7bd656598a06d812154195fd23d3d2221cfef64167938de5e62074719e5418f40370d9bac2918331\"}}}\n</code></pre>"},{"location":"api/json-rpc/#transferassetcontract","title":"TransferAssetContract","text":"<p>Parameters </p> <p>Object - the items in object as below: </p> from DATA, 20 Bytes The address the transaction is sent from to DATA, 20 Bytes The address the transaction is directed to tokenId QUANTITY Token ID tokenValue QUANTITY The transfer amount of TRC10 <p>Returns</p> <p>Object - transaction of TransferAssetContract or an error</p> <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\n\n    \"method\": \"buildTransaction\",\n\n    \"params\": [\n\n        {\n\n            \"from\": \"0xC4DB2C9DFBCB6AA344793F1DDA7BD656598A06D8\",\n\n            \"to\": \"0x95FD23D3D2221CFEF64167938DE5E62074719E54\",\n\n            \"tokenId\": 1000016,\n\n            \"tokenValue\": 20\n\n        }\n\n    ],\n\n    \"id\": 44,\n\n    \"jsonrpc\": \"2.0\"\n\n}\n\n'\n</code></pre> <p>Result</p> <pre><code>{\"jsonrpc\":\"2.0\",\"id\":44,\"error\":{\"code\":-32600,\"message\":\"assetBalance must be greater than 0.\",\"data\":\"{}\"}}\n</code></pre>"},{"location":"api/json-rpc/#createsmartcontract","title":"CreateSmartContract","text":"<p>Parameters </p> <p>Object - the items in object as below: </p> from DATA, 20 Bytes The address the transaction is sent from name DATA The name of the smart contract. gas DATA Fee limit abi DATA The ABI of the smart contract. data DATA The byte code of the smart contract. consumeUserResourcePercent QUANTITY The consume user resource percent. originEnergyLimit QUANTITY The origin energy limit. value DATA The data passed through call_value. tokenId QUANTITY Token ID tokenValue QUANTITY The transfer amount of TRC10 <p>Returns</p> <p>Object - transaction of CreateSmartContract or an error</p> <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\n\n    \"id\": 1337,\n\n    \"jsonrpc\": \"2.0\",\n\n    \"method\": \"buildTransaction\",\n\n    \"params\": [\n\n        {\n\n            \"from\": \"0xC4DB2C9DFBCB6AA344793F1DDA7BD656598A06D8\",\n\n            \"name\": \"transferTokenContract\",\n\n            \"gas\": \"0x245498\",\n\n            \"abi\": \"[{\\\"constant\\\":false,\\\"inputs\\\":[],\\\"name\\\":\\\"getResultInCon\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"trcToken\\\"},{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"payable\\\":true,\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"constant\\\":false,\\\"inputs\\\":[{\\\"name\\\":\\\"toAddress\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"trcToken\\\"},{\\\"name\\\":\\\"amount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"TransferTokenTo\\\",\\\"outputs\\\":[],\\\"payable\\\":true,\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"constant\\\":false,\\\"inputs\\\":[],\\\"name\\\":\\\"msgTokenValueAndTokenIdTest\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"trcToken\\\"},{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"payable\\\":true,\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"payable\\\":true,\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"constructor\\\"}]\\n\",\n\n            \"data\": \"6080604052d3600055d2600155346002556101418061001f6000396000f3006080604052600436106100565763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305c24200811461005b5780633be9ece71461008157806371dc08ce146100aa575b600080fd5b6100636100b2565b60408051938452602084019290925282820152519081900360600190f35b6100a873ffffffffffffffffffffffffffffffffffffffff600435166024356044356100c0565b005b61006361010d565b600054600154600254909192565b60405173ffffffffffffffffffffffffffffffffffffffff84169082156108fc029083908590600081818185878a8ad0945050505050158015610107573d6000803e3d6000fd5b50505050565bd3d2349091925600a165627a7a72305820a2fb39541e90eda9a2f5f9e7905ef98e66e60dd4b38e00b05de418da3154e7570029\",\n\n            \"consumeUserResourcePercent\": 100,\n\n            \"originEnergyLimit\": 11111111111111,\n\n            \"value\": \"0x1f4\",\n\n            \"tokenId\": 1000033,\n\n            \"tokenValue\": 100000\n\n        }\n\n    ]\n\n}\n\n'\n</code></pre> <p>Result</p> <pre><code>{\"jsonrpc\":\"2.0\",\"id\":1337,\"result\":{\"transaction\":{\"visible\":false,\"txID\":\"598d8aafbf9340e92c8f72a38389ce9661b643ff37dd2a609f393336a76025b9\",\"contract_address\":\"41dfd93697c0a978db343fe7a92333e11eeb2f967d\",\"raw_data\":{\"contract\":[{\"parameter\":{\"value\":{\"token_id\":1000033,\"owner_address\":\"41c4db2c9dfbcb6aa344793f1dda7bd656598a06d8\",\"call_token_value\":100000,\"new_contract\":{\"bytecode\":\"6080604052d3600055d2600155346002556101418061001f6000396000f3006080604052600436106100565763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305c24200811461005b5780633be9ece71461008157806371dc08ce146100aa575b600080fd5b6100636100b2565b60408051938452602084019290925282820152519081900360600190f35b6100a873ffffffffffffffffffffffffffffffffffffffff600435166024356044356100c0565b005b61006361010d565b600054600154600254909192565b60405173ffffffffffffffffffffffffffffffffffffffff84169082156108fc029083908590600081818185878a8ad0945050505050158015610107573d6000803e3d6000fd5b50505050565bd3d2349091925600a165627a7a72305820a2fb39541e90eda9a2f5f9e7905ef98e66e60dd4b38e00b05de418da3154e7570029\",\"consume_user_resource_percent\":100,\"name\":\"transferTokenContract\",\"origin_address\":\"41c4db2c9dfbcb6aa344793f1dda7bd656598a06d8\",\"abi\":{\"entrys\":[{\"outputs\":[{\"type\":\"trcToken\"},{\"type\":\"uint256\"},{\"type\":\"uint256\"}],\"payable\":true,\"name\":\"getResultInCon\",\"stateMutability\":\"Payable\",\"type\":\"Function\"},{\"payable\":true,\"inputs\":[{\"name\":\"toAddress\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"trcToken\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferTokenTo\",\"stateMutability\":\"Payable\",\"type\":\"Function\"},{\"outputs\":[{\"type\":\"trcToken\"},{\"type\":\"uint256\"},{\"type\":\"uint256\"}],\"payable\":true,\"name\":\"msgTokenValueAndTokenIdTest\",\"stateMutability\":\"Payable\",\"type\":\"Function\"},{\"payable\":true,\"stateMutability\":\"Payable\",\"type\":\"Constructor\"}]},\"origin_energy_limit\":11111111111111,\"call_value\":500}},\"type_url\":\"type.googleapis.com/protocol.CreateSmartContract\"},\"type\":\"CreateSmartContract\"}],\"ref_block_bytes\":\"80be\",\"ref_block_hash\":\"ac7c3d59c55ac92c\",\"expiration\":1634030190000,\"fee_limit\":333333280,\"timestamp\":1634030131693},\"raw_data_hex\":\"0a0280be2208ac7c3d59c55ac92c40b0fba79ec72f5ad805081e12d3050a30747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e437265617465536d617274436f6e7472616374129e050a1541c4db2c9dfbcb6aa344793f1dda7bd656598a06d812fc040a1541c4db2c9dfbcb6aa344793f1dda7bd656598a06d81adb010a381a0e676574526573756c74496e436f6e2a0a1a08747263546f6b656e2a091a0775696e743235362a091a0775696e743235363002380140040a501a0f5472616e73666572546f6b656e546f22141209746f416464726573731a0761646472657373220e120269641a08747263546f6b656e22111206616d6f756e741a0775696e743235363002380140040a451a1b6d7367546f6b656e56616c7565416e64546f6b656e4964546573742a0a1a08747263546f6b656e2a091a0775696e743235362a091a0775696e743235363002380140040a0630013801400422e0026080604052d3600055d2600155346002556101418061001f6000396000f3006080604052600436106100565763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305c24200811461005b5780633be9ece71461008157806371dc08ce146100aa575b600080fd5b6100636100b2565b60408051938452602084019290925282820152519081900360600190f35b6100a873ffffffffffffffffffffffffffffffffffffffff600435166024356044356100c0565b005b61006361010d565b600054600154600254909192565b60405173ffffffffffffffffffffffffffffffffffffffff84169082156108fc029083908590600081818185878a8ad0945050505050158015610107573d6000803e3d6000fd5b50505050565bd3d2349091925600a165627a7a72305820a2fb39541e90eda9a2f5f9e7905ef98e66e60dd4b38e00b05de418da3154e757002928f40330643a157472616e73666572546f6b656e436f6e747261637440c7e3d28eb0c30218a08d0620e1843d70edb3a49ec72f9001a086f99e01\"}}}\n</code></pre>"},{"location":"api/json-rpc/#triggersmartcontract","title":"TriggerSmartContract","text":"<p>Parameters </p> <p>Object - the items in object as below: </p> from DATA, 20 Bytes The address the transaction is sent from to DATA, 20 Bytes The address of the smart contract data DATA The invoked contract function and parameters gas DATA Fee limit value DATA The data passed through call_value tokenId QUANTITY Token ID tokenValue QUANTITY The transfer amount of TRC10 <p>Returns</p> <p>Object - transaction of TriggerSmartContract or an error</p> <p>Example</p> <pre><code>curl -X POST 'https://api.shasta.trongrid.io/jsonrpc' --data '{\"id\": 1337,\n\n    \"jsonrpc\": \"2.0\",\n\n    \"method\": \"buildTransaction\",\n\n    \"params\": [\n\n        {\n\n            \"from\": \"0xC4DB2C9DFBCB6AA344793F1DDA7BD656598A06D8\",\n\n            \"to\": \"0xf859b5c93f789f4bcffbe7cc95a71e28e5e6a5bd\",\n\n            \"data\": \"0x3be9ece7000000000000000000000000ba8e28bdb6e49fbb3f5cd82a9f5ce8363587f1f600000000000000000000000000000000000000000000000000000000000f42630000000000000000000000000000000000000000000000000000000000000001\",\n\n            \"gas\": \"0x245498\",\n\n            \"value\": \"0xA\",\n\n            \"tokenId\": 1000035,\n\n            \"tokenValue\": 20\n\n        }\n\n    ]\n\n    }\n\n'\n</code></pre> <p>Result</p> <pre><code>{\"jsonrpc\":\"2.0\",\"id\":1337,\"result\":{\"transaction\":{\"visible\":false,\"txID\":\"c3c746beb86ffc366ec0ff8bf6c9504c88f8714e47bc0009e4f7e2b1d49eb967\",\"raw_data\":{\"contract\":[{\"parameter\":{\"value\":{\"amount\":10,\"owner_address\":\"41c4db2c9dfbcb6aa344793f1dda7bd656598a06d8\",\"to_address\":\"41f859b5c93f789f4bcffbe7cc95a71e28e5e6a5bd\"},\"type_url\":\"type.googleapis.com/protocol.TransferContract\"},\"type\":\"TransferContract\"}],\"ref_block_bytes\":\"958c\",\"ref_block_hash\":\"9d8c6bae734a2281\",\"expiration\":1684469328000,\"timestamp\":1684469270364},\"raw_data_hex\":\"0a02958c22089d8c6bae734a22814080d1c89183315a65080112610a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412300a1541c4db2c9dfbcb6aa344793f1dda7bd656598a06d8121541f859b5c93f789f4bcffbe7cc95a71e28e5e6a5bd180a70dc8ec5918331\"}}}\n</code></pre>"},{"location":"api/rpc/","title":"RPC List","text":"<p>For the specific definition of API, please refer to the following link: api/api.proto</p> <p>Note</p> <p>SolidityNode is deprecated. Now a FullNode supports all RPCs of a SolidityNode. New developers should deploy FullNode only.</p>"},{"location":"api/rpc/#get-account-information","title":"Get account information","text":"<p><pre><code>rpc GetAccount (Account) returns (Account) {}\n</code></pre> Nodes: Fullnode and SolidityNode</p>"},{"location":"api/rpc/#trx-transfer","title":"TRX transfer","text":"<p><pre><code>rpc CreateTransaction (TransferContract) returns (Transaction) {}\n</code></pre> Nodes: Fullnode</p>"},{"location":"api/rpc/#broadcast-transaction","title":"Broadcast transaction","text":"<p><pre><code>rpc BroadcastTransaction (Transaction) returns (Return) {}\n</code></pre> Nodes: Fullnode</p> <p>Description: Transfer, vote, issuance of token, or participation in token offering. Sending signed transaction information to node, and broadcasting it to the entire network after super representatives verification.</p>"},{"location":"api/rpc/#create-an-account","title":"Create an account","text":"<p><pre><code>rpc CreateAccount (AccountCreateContract) returns (Transaction) {}\n</code></pre> Nodes: FullNode</p>"},{"location":"api/rpc/#account-name-update","title":"Account name update","text":"<p><pre><code>rpc UpdateAccount (AccountUpdateContract) returns (Transaction) {}\n</code></pre> Nodes: Fullnode</p>"},{"location":"api/rpc/#vote-for-super-representative-candidates","title":"Vote for super representative candidates","text":"<p><pre><code>rpc VoteWitnessAccount (VoteWitnessContract) returns (Transaction) {}\n</code></pre> Nodes: FullNode</p>"},{"location":"api/rpc/#query-the-ratio-of-brokerage-of-the-super-representative","title":"Query the ratio of brokerage of the super representative","text":"<p><pre><code>rpc GetBrokerageInfo (BytesMessage) returns (NumberMessage) {}\n</code></pre> Nodes: FullNode</p>"},{"location":"api/rpc/#query-unclaimed-reward","title":"Query unclaimed reward","text":"<p><pre><code>rpc GetRewardInfo (BytesMessage) returns (NumberMessage) {}\n</code></pre> Nodes: FullNode</p>"},{"location":"api/rpc/#update-the-ratio-of-brokerage","title":"Update the ratio of brokerage","text":"<p><pre><code>rpc UpdateBrokerage (UpdateBrokerageContract) returns (TransactionExtention) {}\n</code></pre> Nodes: FullNode</p>"},{"location":"api/rpc/#issue-a-token","title":"Issue a token","text":"<p><pre><code>rpc CreateAssetIssue (AssetIssueContract) returns (Transaction) {}\n</code></pre> Nodes: FullNode</p>"},{"location":"api/rpc/#query-of-list-of-super-representative-candidates","title":"Query of list of super representative candidates","text":"<p><pre><code>rpc ListWitnesses (EmptyMessage) returns (WitnessList) {}\n</code></pre> Nodes: FullNode and SolidityNode</p>"},{"location":"api/rpc/#application-for-super-representative","title":"Application for super representative","text":"<p><pre><code>rpc CreateWitness (WitnessCreateContract) returns (Transaction) {}\n</code></pre> Nodes: FullNode</p> <p>Description: To apply to become TRON\u2019s Super Representative candidate.</p>"},{"location":"api/rpc/#information-update-of-super-representative-candidates","title":"Information update of Super Representative candidates","text":"<p><pre><code>rpc UpdateWitness (WitnessUpdateContract) returns (Transaction) {}\n</code></pre> Nodes: FullNode</p> <p>Description: Update the website url of the SR.</p>"},{"location":"api/rpc/#token-transfer","title":"Token transfer","text":"<p><pre><code>rpc TransferAsset (TransferAssetContract) returns (Transaction){}\n</code></pre> Node: FullNode</p>"},{"location":"api/rpc/#participate-a-token","title":"Participate a token","text":"<p><pre><code>rpc ParticipateAssetIssue (ParticipateAssetIssueContract) returns (Transaction) {}\n</code></pre> Nodes: FullNode</p>"},{"location":"api/rpc/#query-the-list-of-nodes-connected-to-the-ip-of-the-api","title":"Query the list of nodes connected to the ip of the api","text":"<p><pre><code>rpc ListNodes (EmptyMessage) returns (NodeList) {}\n</code></pre> Nodes: FullNode and SolidityNode</p>"},{"location":"api/rpc/#query-the-list-of-all-issued-tokens","title":"Query the list of all issued tokens","text":"<p><pre><code>rpc GetAssetIssueList (EmptyMessage) returns (AssetIssueList) {}\n</code></pre> Nodes: FullNode and SolidityNode</p>"},{"location":"api/rpc/#query-the-token-issued-by-a-given-account","title":"Query the token issued by a given account","text":"<p><pre><code>rpc GetAssetIssueByAccount (Account) returns (AssetIssueList) {}\n</code></pre> Nodes: FullNode and SolidityNode</p>"},{"location":"api/rpc/#query-the-token-information-by-token-name","title":"Query the token information by token name","text":"<p><pre><code>rpc GetAssetIssueByName (BytesMessage) returns (AssetIssueContract) {}\n</code></pre> Nodes: FullNode and Soliditynode</p>"},{"location":"api/rpc/#query-the-list-of-tokens-by-timestamp","title":"Query the list of tokens by timestamp","text":"<p><pre><code>rpc GetAssetIssueListByTimestamp (NumberMessage) returns (AssetIssueList){}\n</code></pre> Nodes: SolidityNode</p>"},{"location":"api/rpc/#get-current-block-information","title":"Get current block information","text":"<p><pre><code>rpc GetNowBlock (EmptyMessage) returns (Block) {}\n</code></pre> Nodes: FullNode and SolidityNode</p>"},{"location":"api/rpc/#get-a-block-by-block-height","title":"Get a block by block height","text":"<p><pre><code>rpc GetBlockByNum (NumberMessage) returns (Block) {}\n</code></pre> Nodes: FullNode and SolidityNode</p>"},{"location":"api/rpc/#get-the-total-number-of-transactions","title":"Get the total number of transactions","text":"<p><pre><code>rpc TotalTransaction (EmptyMessage) returns (NumberMessage) {}\n</code></pre> Nodes: FullNode and SolidityNode</p>"},{"location":"api/rpc/#query-the-transaction-by-transaction-id","title":"Query the transaction by transaction id","text":"<p><pre><code>rpc getTransactionById (BytesMessage) returns (Transaction) {}\n</code></pre> Nodes: SolidityNode</p>"},{"location":"api/rpc/#query-the-transaction-by-timestamp","title":"Query the transaction by timestamp","text":"<p><pre><code>rpc getTransactionsByTimestamp (TimeMessage) returns (TransactionList) {}\n</code></pre> Nodes: SolidityNode</p>"},{"location":"api/rpc/#stake-trx","title":"Stake TRX","text":"<p>This interface has been deprecated, please use FreezeBalanceV2 to stake TRX to obtain resources. <pre><code>rpc FreezeBalance (FreezeBalanceContract) returns (Transaction) {}\n</code></pre> Nodes: FullNode</p>"},{"location":"api/rpc/#unstake-trx","title":"Unstake TRX","text":"<p>Unstake the TRX staked during Stake1.0. <pre><code>rpc UnfreezeBalance (UnfreezeBalanceContract) returns (Transaction) {}\n</code></pre> Nodes: FullNode</p>"},{"location":"api/rpc/#block-producing-reward-redemption","title":"Block producing reward redemption","text":"<p><pre><code>rpc WithdrawBalance (WithdrawBalanceContract) returns (Transaction) {}\n</code></pre> Nodes: FullNode</p>"},{"location":"api/rpc/#unstake-token-balance","title":"Unstake token balance","text":"<p><pre><code>rpc UnfreezeAsset (UnfreezeAssetContract) returns (Transaction) {}\n</code></pre> Nodes: FullNode</p>"},{"location":"api/rpc/#query-the-next-maintenance-time","title":"Query the next maintenance time","text":"<p><pre><code>rpc GetNextMaintenanceTime (EmptyMessage) returns (NumberMessage) {}\n</code></pre> Nodes: FullNode</p>"},{"location":"api/rpc/#query-the-transaction-fee-block-information","title":"Query the transaction fee &amp; block information","text":"<p><pre><code>rpc GetTransactionInfoById (BytesMessage) returns (TransactionInfo) {}\n</code></pre> Nodes: SolidityNode</p>"},{"location":"api/rpc/#query-block-information-by-block-id","title":"Query block information by block id","text":"<p><pre><code>rpc GetBlockById (BytesMessage) returns (Block) {}\n</code></pre> Nodes: FullNode</p>"},{"location":"api/rpc/#update-token-information","title":"Update token information","text":"<p><pre><code>rpc UpdateAsset (UpdateAssetContract) returns (Transaction) {}\n</code></pre> Nodes: Fullnode</p> <p>Description: Token update can only be initiated by the token issuer to update token description, url, maximum bandwidth consumption by each account and total bandwidth consumption.</p>"},{"location":"api/rpc/#query-the-list-of-all-the-tokens-by-pagination","title":"Query the list of all the tokens by pagination","text":"<p><pre><code>rpc GetPaginatedAssetIssueList (PaginatedMessage) returns (AssetIssueList) {}\n</code></pre> Nodes: FullNode and SolidityNode</p>"},{"location":"api/rpc/#deploy-a-smart-contract","title":"Deploy a smart contract","text":"<p><pre><code>rpc DeployContract (CreateSmartContract) returns (TransactionExtention) {}\n</code></pre> Nodes: FullNode and SolidityNode</p>"},{"location":"api/rpc/#trigger-a-smart-contract","title":"Trigger a smart contract","text":"<p><pre><code>rpc TriggerContract (TriggerSmartContract) returns (TransactionExtention) {}\n</code></pre> Nodes: FullNode</p>"},{"location":"api/rpc/#create-an-market-order","title":"Create an market order","text":"<p><pre><code>rpc MarketSellAsset (MarketSellAssetContract) returns (TransactionExtention) {};\n</code></pre> Nodes: FullNode</p>"},{"location":"api/rpc/#cancel-the-order","title":"Cancel the order","text":"<p><pre><code>rpc MarketCancelOrder (MarketCancelOrderContract) returns (TransactionExtention) {};\n</code></pre> Nodes: FullNode </p>"},{"location":"api/rpc/#get-all-orders-for-the-account","title":"Get all orders for the account","text":"<p><pre><code>rpc GetMarketOrderByAccount (BytesMessage) returns (MarketOrderList) {};\n</code></pre> Nodes: FullNode </p>"},{"location":"api/rpc/#get-all-trading-pairs","title":"Get all trading pairs","text":"<p><pre><code>rpc GetMarketPairList (EmptyMessage) returns (MarketOrderPairList) {};\n</code></pre> Nodes: FullNode </p>"},{"location":"api/rpc/#get-all-orders-for-the-trading-pair","title":"Get all orders for the trading pair","text":"<p><pre><code>rpc GetMarketOrderListByPair (MarketOrderPair) returns (MarketOrderList) {};\n</code></pre> Nodes: FullNode </p>"},{"location":"api/rpc/#get-all-prices-for-the-trading-pair","title":"Get all prices for the trading pair","text":"<p><pre><code>rpc GetMarketPriceByPair (MarketOrderPair) returns (MarketPriceList) {};\n</code></pre> Nodes: FullNode </p>"},{"location":"api/rpc/#get-order-by-id","title":"Get order by id","text":"<p><pre><code>rpc GetMarketOrderById (BytesMessage) returns (MarketOrder) {}; \n</code></pre> Nodes: FullNode </p>"},{"location":"api/rpc/#perform-a-historical-balance-lookup","title":"perform a historical balance lookup","text":"<p><pre><code>rpc GetAccountBalance (AccountBalanceRequest) returns (AccountBalanceResponse){}; \n</code></pre> Nodes: FullNode</p> <p>Notice: Only node where <code>storage.balance.history.lookup= true</code> is set in the configuration file supports querying the account's historical balance. The supported official nodes can be queried here.</p>"},{"location":"api/rpc/#fetch-all-balance-changing-transactions-in-a-block","title":"fetch all balance-changing transactions in a block","text":"<p><pre><code>rpc GetBlockBalanceTrace (BlockBalanceTrace.BlockIdentifier) returns (BlockBalanceTrace) {}; \n</code></pre> Nodes: FullNode </p>"},{"location":"api/rpc/#get-the-burn-trx-amount","title":"get the burn trx amount","text":"<p><pre><code>rpc GetBurnTrx (EmptyMessage) returns (NumberMessage) {}; \n</code></pre> Nodes: FullNode and SolidityNode</p>"},{"location":"api/rpc/#freeze-trx","title":"Freeze TRX","text":"<p><pre><code>rpc FreezeBalanceV2 (FreezeBalanceV2Contract) returns (TransactionExtention) {}\n</code></pre> Nodes: FullNode</p>"},{"location":"api/rpc/#unfreeze-trx","title":"UnFreeze TRX","text":"<p><pre><code>rpc UnfreezeBalanceV2 (UnfreezeBalanceV2Contract) returns (TransactionExtention) {}\n</code></pre> Nodes: FullNode</p>"},{"location":"api/rpc/#withdraw-staked-trx","title":"Withdraw Staked TRX","text":"<p><pre><code>rpc WithdrawExpireUnfreeze (WithdrawExpireUnfreezeContract) returns (TransactionExtention) {}\n</code></pre> Nodes: FullNode</p>"},{"location":"api/rpc/#delegate-resource","title":"Delegate Resource","text":"<p><pre><code>rpc DelegateResource (DelegateResourceContract) returns (TransactionExtention) {}\n</code></pre> Nodes: FullNode</p>"},{"location":"api/rpc/#undelegate-resource","title":"UnDelegate Resource","text":"<p><pre><code>rpc UnDelegateResource (UnDelegateResourceContract) returns (TransactionExtention) {}\n</code></pre> Nodes: FullNode</p>"},{"location":"api/rpc/#query-transaction-information-in-the-pending-pool","title":"Query transaction information in the pending pool","text":"<p><pre><code>rpc GetTransactionFromPending (BytesMessage) returns (Transaction) {};\n</code></pre> Nodes: FullNode</p>"},{"location":"api/rpc/#query-the-pending-pool-transaction-id-list","title":"Query the pending pool transaction id list","text":"<p><pre><code>rpc GetTransactionListFromPending (EmptyMessage) returns (TransactionIdList) {};\n</code></pre> Nodes: FullNode</p>"},{"location":"api/rpc/#query-the-size-of-the-pending-pool","title":"Query the size of the pending pool","text":"<pre><code>rpc GetPendingSize (EmptyMessage) returns (NumberMessage) {};\nNodes: FullNode\n</code></pre>"},{"location":"api/rpc/#cancel-unfreeze","title":"Cancel UnFreeze","text":"<p><pre><code>rpc CancelAllUnfreezeV2 (CancelAllUnfreezeV2Contract) returns (TransactionExtention) {}\n</code></pre> Nodes: FullNode</p>"},{"location":"api/rpc/#get-bandwidth-unit-price","title":"Get bandwidth unit price","text":"<p><pre><code>rpc GetBandwidthPrices (EmptyMessage) returns (PricesResponseMessage) {}\n</code></pre> Nodes: FullNode</p>"},{"location":"api/rpc/#get-energy-unit-price","title":"Get energy unit price","text":"<p><pre><code>rpc GetEnergyPrices (EmptyMessage) returns (PricesResponseMessage) {}\n</code></pre> Nodes: FullNode</p>"},{"location":"api/rpc/#get-transaction-memo-fee","title":"Get transaction memo fee","text":"<p><pre><code>rpc GetMemoFee (EmptyMessage) returns (PricesResponseMessage) {}\n</code></pre> Nodes: FullNodes</p>"},{"location":"architecture/database/","title":"Database Configuration Guide","text":"<p>In the TRON Java implementation (java-tron), the node data storage engine offers two options: LevelDB and RocksDB. By default, LevelDB is used on x86 platforms, while RocksDB is used on ARM platforms. If LevelDB is manually configured on an ARM system, the system will print a warning and still enforce the use of RocksDB. Developers can flexibly choose the appropriate storage engine based on the platform environment, hardware conditions, and performance requirements.</p> <p>In comparison, RocksDB provides richer configuration parameters and generally offers higher storage efficiency. This article will introduce how to enable RocksDB and how to convert from LevelDB to RocksDB on x86 platforms.</p>"},{"location":"architecture/database/#using-rocksdb","title":"Using RocksDB","text":""},{"location":"architecture/database/#1-configuring-rocksdb-as-the-storage-engine","title":"1. Configuring RocksDB as the Storage Engine","text":"<p>To enable RocksDB, set <code>storage.db.engine</code> to <code>\"ROCKSDB\"</code> in the configuration file:</p> <pre><code>storage {\n  # Storage engine for persisting data\n  db.engine = \"ROCKSDB\"\n  db.sync = false\n  db.directory = \"database\"\n  transHistory.switch = \"on\"\n}\n</code></pre>"},{"location":"architecture/database/#2-rocksdb-optimization-parameters","title":"2. RocksDB Optimization Parameters","text":"<p>RocksDB supports various tuning parameters that can be configured based on the performance of the node server. Below is an example of recommended parameters: <pre><code>dbSettings = {\n  levelNumber = 7\n  # compactThreads = 32\n  blocksize = 64                 # Unit: KB\n  maxBytesForLevelBase = 256     # Unit: MB\n  maxBytesForLevelMultiplier = 10\n  level0FileNumCompactionTrigger = 4\n  targetFileSizeBase = 256       # Unit: MB\n  targetFileSizeMultiplier = 1\n  maxOpenFiles= 5000\n}\n</code></pre></p>"},{"location":"architecture/database/#migrating-from-leveldb-to-rocksdb-on-x86-platforms","title":"Migrating from LevelDB to RocksDB on x86 Platforms","text":"<p>The data formats of LevelDB and RocksDB are not compatible, and direct switching of storage engines between nodes is not supported. To migrate from LevelDB to RocksDB, use the TRON Toolkit <code>Toolkit.jar</code>.</p>"},{"location":"architecture/database/#1-data-conversion-steps","title":"1. Data Conversion Steps","text":"<pre><code>cd java-tron                                   # Source root directory\n./gradlew build -xtest -xcheck                 # Compile the project\njava -jar build/libs/Toolkit.jar db convert    # Perform data conversion\n</code></pre>"},{"location":"architecture/database/#2-optional-parameter-descriptions","title":"2. Optional Parameter Descriptions","text":"<p>If your node uses a custom data directory, you can include the following parameters when running the conversion script:</p> <ul> <li><code>src_db_path</code>: LevelDB database path (default: <code>output-directory/database</code>)</li> <li><code>dst_db_path</code>: RocksDB database storage path (default: <code>output-directory-dst/database</code>)</li> </ul> <p>For example, if the node is run as follows: <pre><code>nohup java -jar FullNode.jar -d your_database_dir &amp;\n</code></pre> Then use the following command for conversion: <pre><code>java -jar build/libs/Toolkit.jar db convert  your_database_dir/database output-directory-dst/database\n</code></pre></p>"},{"location":"architecture/database/#3-perform-conversion-after-stopping-the-node","title":"3. Perform Conversion After Stopping the Node","text":"<p>The node must be stopped before performing the data conversion operation.</p> <p>To minimize downtime, follow these steps:</p> <ol> <li>Stop the node;</li> <li>Copy the original LevelDB data directory to a new directory;</li> <li>Restart the node (continuing to use the original directory);</li> <li>Perform the data conversion in the new directory.</li> </ol> <p>Example commands: <pre><code>java -jar build/libs/Toolkit.jar db cp output-directory/database /tmp/output-directory/database\ncd /tmp\njava -jar build/libs/Toolkit.jar db convert output-directory/database output-directory-dst/database\n</code></pre></p> <p>Note: The entire data conversion process is expected to take approximately 10 hours, depending on the data volume and disk performance.</p>"},{"location":"architecture/database/#about-leveldb","title":"About LevelDB","text":"<p>LevelDB is the default data storage engine for java-tron on x86 platforms, suitable for resource-constrained or lightweight deployment scenarios. It has a simple structure and is easy to maintain, but it is less efficient than RocksDB in terms of data compression, backup capabilities, and performance for large-scale nodes.</p> <p>For a detailed comparison between the two, refer to the documentation: \ud83d\udcd8 RocksDB vs. LevelDB Comparison</p>"},{"location":"architecture/event/","title":"Event Subscription","text":"<p>TRON provides a robust event subscription mechanism that allows developers to capture critical on-chain events in real-time. This includes transaction statuses, contract invocations, and block production, facilitating the development of feature-rich decentralized applications (dApps).</p> <p>TRON offers two primary event subscription methods, allowing developers to choose based on their specific use cases:</p> <ul> <li>Local Event Plugin Subscription</li> <li>Built-in Message Queue (ZeroMQ) Subscription</li> </ul>"},{"location":"architecture/event/#local-event-plugin-subscription-recommended","title":"Local Event Plugin Subscription (Recommended)","text":"<p>This method utilizes an extensible plugin architecture to persistntly store on-chain events in external systems, such as MongoDB or Kafka, either in real-time or in batches. Designed specifically for production environments, this solution caters to applications requiring high reliability, durable storage, and robust data analysis capabilities.</p> <p>This method has the following advantages:</p> <ul> <li>Diverse Plugin Support: Currently supports Kafka and MongoDB.</li> <li>Rich Data Types: Enables subscriptions to blocks, transactions, smart contract events, and logs.</li> <li>Advanced Filtering: Supports filtering of events based on user-defined criteria.</li> <li>Historical Event Replay: The V2.0 framework allows syncing historical events from any specified block height.</li> <li>Production-Grade Reliability: Ideal for applications requiring high data integrity and dependability.</li> </ul>"},{"location":"architecture/event/#event-service-framework","title":"Event Service Framework","text":"<p>java-tron currently supports two versions of the event service framework: <code>V1.0</code> and <code>V2.0</code>.</p> <ul> <li>V1.0: Only supports real-time event streaming for newly produced blocks.</li> <li>V2.0 (Recommended):  Introduces a historical event replay feature, enabling synchronization from a specified block height.</li> </ul> <p>For a detailed comparison and guidance, refer to: Introduction to Event Service Framework V2.0.</p> <p>Workflow of Event Service:</p> <ol> <li>Event Capture: The TRON node extracts event data from on-chain blocks.</li> <li>Event Queuing: Events are encapsulated and added to a buffer queue.</li> <li>Plugin Consumption: The event plugin asynchronously consumes events from the queue.</li> <li>Event Delivery: The plugin pushes the processed data to the target system (e.g., Kafka or MongoDB).</li> <li>Application Logic: Downstream applications continuously process the event data.</li> </ol>"},{"location":"architecture/event/#how-to-migrate-to-event-service-framework-v20","title":"How to Migrate to Event Service Framework V2.0","text":"<p>The <code>V2.0</code> event service framework introduces a historical event replay feature and includes comprehensive optimizations to the event push mechanism. This guide outlines the procedure for migrating to <code>V2.0</code>.</p> <p>Pre-Migration Considerations</p> <p>Before migrating, please consider the following factors:</p> <ul> <li>Internal Transaction Log Support: <code>V2.0</code> currently does not support internal transaction logs (the <code>internalTransactionList</code> field will be empty). If your application has a dependency on this field, you must remain on <code>V1.0</code>.</li> <li>Plugin Version: We strongly recommend upgrading the event plugin to the latest version to prevent potential performance degradation when processing large volumes of historical data.</li> </ul> <p>Migration Procedure</p>"},{"location":"architecture/event/#step-1-obtain-the-new-event-plugin","title":"Step 1: Obtain the New Event Plugin","text":"<p>You can get the source code from GitHub and build it yourself, or download the officially released version directly.</p> <ul> <li>Build from Source:</li> </ul> <p><pre><code>git clone git@github.com:tronprotocol/event-plugin.git\ncd event-plugin\ngit checkout master\n./gradlew build\n</code></pre> After the build is complete, the generated <code>.zip</code> file is the plugin package.</p> <ul> <li>Download the Official Release:</li> </ul> <p>Visit the event-plugin Releases page to download the latest plugin package.</p>"},{"location":"architecture/event/#step-2-modify-the-fullnode-configuration","title":"Step 2: Modify the FullNode Configuration","text":"<p>In your <code>config.conf</code> file, set the event service version to <code>V2.0</code>, the value is <code>1</code>.</p> <pre><code>event.subscribe.version = 1 # 1 for V2.0\uff0c0 for V1.0\n</code></pre>"},{"location":"architecture/event/#step-3-configure-the-event-plugin","title":"Step 3: Configure the Event Plugin","text":"<p>The configuration process for the new plugin is mostly identical to the old version. You can refer to the official documentation for deployment:</p> <ul> <li>Deploying the Event Plugin (MongoDB)</li> <li>Deploying the Event Plugin (Kafka)</li> </ul>"},{"location":"architecture/event/#step-4-optional-configure-the-starting-point-for-historical-sync","title":"Step 4 (Optional): Configure the Starting Point for Historical Sync","text":"<p>If you need to sync historical events starting from a specific block height, add the following setting to your configuration file.</p> <pre><code>event.subscribe.startSyncBlockNum = &lt;block_height&gt;\n</code></pre>"},{"location":"architecture/event/#step-5-start-the-fullnode-and-plugin","title":"Step 5: Start the Fullnode and Plugin","text":"<p>After completing the configuration, use the following command to start the <code>FullNode</code> and load the event plugin.</p> <pre><code>java -jar FullNode.jar -c config.conf --es\n</code></pre>"},{"location":"architecture/event/#kafka-plugin-deployment-and-usage","title":"Kafka Plugin: Deployment and Usage","text":"<p>This guide is designed to help developers efficiently use the Kafka event subscription plugin to listen for on-chain events on the TRON network. We will walk you through the entire process step-by-step, from environment setup to deployment, configuration, and final verification.</p> <p>The main steps include:</p> <ul> <li>Checking System Configuration</li> <li>Compiling the Event Plugin</li> <li>Deploying and Running Kafka</li> <li>Configuring Event Subscription Rules</li> <li>Creating the Kafka Subscription Topic</li> <li>Starting the Event Subscription Node</li> </ul>"},{"location":"architecture/event/#recommended-system-configuration","title":"Recommended System Configuration","text":"<p>To ensure the stable operation of your TRON node and event subscription service, the following system configuration is recommended:</p> <ul> <li>CPU: 16 cores or higher</li> <li>RAM: 32 GB or higher</li> <li>SSD: 2.5 TB or more of storage space</li> <li>Operating System: Linux or macOS</li> </ul>"},{"location":"architecture/event/#compiling-the-kafka-event-plugin","title":"Compiling the Kafka Event Plugin","text":"<p>First, you need to clone the <code>event-plugin</code> project from its GitHub repository and compile it to generate the plugin's <code>.zip</code> file. Please follow these steps:</p> <pre><code>git clone https://github.com/tronprotocol/event-plugin.git\ncd event-plugin\n./gradlew build\n</code></pre> <p>After a successful compilation, you will find the generated <code>.zip</code> plugin file in the <code>event-plugin/build/plugins/</code> directory, for example, <code>plugin-kafka-1.0.0.zip</code>.</p>"},{"location":"architecture/event/#deploying-and-running-kafka","title":"Deploying and Running Kafka","text":""},{"location":"architecture/event/#step-1-installing-kafka","title":"Step 1. Installing Kafka","text":"<p>In a Linux environment, please follow these steps to install Kafka:</p> <pre><code>cd /usr/local\nwget https://downloads.apache.org/kafka/2.8.0/kafka_2.13-2.8.0.tgz\ntar -xzf kafka_2.13-2.8.0.tgz\n</code></pre>"},{"location":"architecture/event/#step-2-running-kafka","title":"Step 2: Running Kafka","text":"<p>In a Linux environment, please follow these steps to start the ZooKeeper and Kafka Broker services:</p> <pre><code>cd /usr/local/kafka_2.13-2.8.0\n# Start the ZooKeeper service\nbin/zookeeper-server-start.sh config/zookeeper.properties &amp;\n# Start the Kafka Broker service\nbin/kafka-server-start.sh config/server.properties &amp;\n</code></pre>"},{"location":"architecture/event/#configuring-event-subscription","title":"Configuring Event Subscription","text":"<p>To support Kafka event subscriptions, you need to modify the Fullnode's configuration file (<code>config.conf</code>) by adding the <code>event.subscribe</code> section.</p> <pre><code>event.subscribe = {\n  version = 1 \n  startSyncBlockNum = 0 \n\n  native = {\n    useNativeQueue = false \n  }\n\n  path = \"\" \n  server = \"\" \n  dbconfig = \"\" \n  contractParse = true\n  topics = []\n  filter = {}\n}\n</code></pre> <p>Field Descriptions:</p> <ul> <li><code>version</code>: The version of the event service framework. <code>1</code> indicates V2.0, while <code>0</code> indicates V1.0. If not configured, it defaults to V1.0.</li> <li><code>startSyncBlockNum</code>: A new feature in v2.0 designed for historical data subscriptions. It allows the service to start processing and pushing events from a specific historical block height stored on the local node.<ul> <li>If <code>startSyncBlockNum &lt;= 0</code>, this feature is disabled.</li> <li>If <code>startSyncBlockNum &gt; 0</code>, this feature is enabled, and historical event synchronization will begin from the specified block height. Note: We recommend using the latest version of the event plugin when enabling this feature.</li> </ul> </li> <li><code>native.useNativeQueue</code>: Specifies whether to use the built-in message queue (ZeroMQ) for event subscriptions. If you need to support Kafka event subscriptions, ensure this field is set to <code>false</code>; otherwise, Kafka subscriptions will not work.</li> <li><code>path</code>: The absolute local path to the <code>plugin-kafka-1.0.0.zip</code> file. Please ensure the path is correct, or the plugin will fail to load.</li> <li><code>server</code>: The Kafka server address in <code>ip:port</code> format. The default Kafka port is <code>9092</code>. Please ensure the port number is correct and that the Kafka service is accessible.</li> <li><code>dbconfig</code>: This option is only for the MongoDB plugin and should be ignored for the Kafka plugin.</li> <li><code>topics</code>: Configure the events to subscribe to. For more details, please refer to the Event Types section below.</li> <li><code>filter</code>: Filtering parameters. For more details, please refer to the Event Types section below.</li> </ul>"},{"location":"architecture/event/#event-types","title":"Event Types","text":"<p>TRON event subscription supports 7 types of events: <code>block</code>, <code>transaction</code>, <code>contractevent</code>, <code>contractlog</code>, <code>solidity</code>, <code>solidityevent</code>, and <code>soliditylog</code>. Developers should configure these based on their application's specific needs. We recommend subscribing to only 1-2 event types. Enabling too many triggers can lead to performance degradation.</p> <p>1. Transaction Event</p> <p>Subscribes to events related to on-chain transactions.</p> <p>Configuration Example\uff1a</p> <p><pre><code>event.subscribe.topics = [\n  {\n    triggerName = \"transaction\"\n    enable = false\n    topic = \"transaction\"\n    solidified = false\n    ethCompatible = false\n  }\n]\n</code></pre> Parameters:</p> <ul> <li><code>triggerName</code>: (String) The event type identifier. For transaction events, this value is fixed to <code>transaction</code>.</li> <li><code>enable</code>: (Boolean) Enables or disables the subscription for this event type.</li> <li><code>topic</code>: (String) The name of the topic for receiving this event type in MongoDB or Kafka. This value must be consistent with the configuration in MongoDB or Kafka.</li> <li><code>solidified</code>: (Boolean) If set to <code>true</code>, the subscription will only deliver events for transactions included in solidified blocks.</li> <li><code>ethCompatible</code>: (Boolean) If set to <code>true</code>, the event payload will include Ethereum-compatible fields (e.g., <code>transactionIndex</code>, <code>logList</code>).</li> </ul> <p>Key Fields in Transaction Events:</p> <ul> <li><code>transactionId</code>: The transaction hash.</li> <li><code>blockNumber</code>: The block height containing the transaction.</li> <li><code>energyUsage</code>: The total amount of Energy consumed by the transaction.</li> <li><code>energyFee</code>: The total amount of TRX (in sun) consumed by the transaction.</li> </ul> <p>For a complete list of fields, see the TransactionLogTrigger source code.</p> <p>2. Block Events</p> <p>Subscribes to events triggered upon the creation of new blocks.</p> <p>Configuration Example\uff1a</p> <pre><code>event.subscribe.topics = [\n  {\n    triggerName = \"block\"\n    enable = false\n    topic = \"block\"\n    solidified = false\n  }\n]\n</code></pre> <p>Key Fields in Block Events:</p> <ul> <li><code>blockHash</code>: The hash of the block.</li> <li><code>blockNumber</code>: The block height.</li> <li><code>transactionSize</code>: The total number of transactions included in the block.</li> <li><code>latestSolidifiedBlockNumber</code>: The block number of the most recently solidified block at the time of this event.</li> <li><code>transactionList</code>: An array of transaction hashes contained within the block.</li> </ul> <p>For a complete list of fields, see the BlockLogTrigger source code.</p> <p>3. Contract Events and Logs</p> <p>Subscribes to smart contract events and logs generated during contract execution.</p> <p>Configuration Example\uff1a</p> <pre><code>event.subscribe.topics = [\n  {\n    triggerName = \"contractevent\"\n    enable = false\n    topic = \"contractevent\"\n  },\n  {\n    triggerName = \"contractlog\"\n    enable = false\n    topic = \"contractlog\"\n  },\n  {\n    triggerName = \"solidityevent\"\n    enable = false\n    topic = \"solidityevent\"\n  },\n  {\n    triggerName = \"soliditylog\"\n    enable = false\n    topic = \"soliditylog\"\n  }\n]\n</code></pre> <p>Parameters:</p> <ul> <li><code>contractevent</code>: Subscribes to all contract events from all blocks.</li> <li><code>contractlog</code>: Subscribes to all contract logs from all blocks.</li> <li><code>solidityevent</code>: Subscribes only to contract events from solidified blocks.</li> <li><code>soliditylog</code>: Subscribes only to contract logs from solidified blocks.</li> </ul> <p>Key Fields in Contract Events</p> <ul> <li><code>transactionId</code>: The hash of the transaction that generated the event.</li> <li><code>contractAddress</code>: The address of the smart contract.</li> <li><code>blockNumber</code>: The block height at which the event was included.</li> </ul> <p>For a complete list of fields, see the ContractEventTrigger and ContractLogTrigger source code.</p> <p>Note: <code>Contract event</code> and <code>Contract log</code> support event filtering through the <code>filter</code> field. You can specify a block range (<code>fromblock</code> - <code>toblock</code>), specific contract addresses (<code>contractAddress</code>), or specific contract topics (<code>contractTopic</code>) to provide developers with a more efficient and precise event subscription service. <pre><code>filter = {\n  fromblock = \"\" // The starting block number of the query range. Can be an empty string, \"earliest\", or a specific block number.\n  toblock = \"\" // The ending block number of the query range. Can be an empty string, \"latest\", or a specific block number.\n  contractAddress = [\n    \"\" // The contract addresses you wish to subscribe to. If set to an empty string, logs/events from all contract addresses will be received.\n  ]\n\n  contractTopic = [\n    \"\" // The contract topics you wish to subscribe to. If set to an empty string, logs/events for all contract topics will be received.\n  ]\n}\n</code></pre></p> <p>4. Solidified Block Notification Events</p> <p>Subscribes to real-time notifications for the latest solidified block height. This is ideal for applications that need to track the chain's finalized state.</p> <p>Configuration Example\uff1a</p> <pre><code>event.subscribe.topics = [\n  {\n    triggerName = \"solidity\"\n    enable = true\n    topic = \"solidity\"\n  }\n]\n</code></pre> <p>Key Fields in Solidity Notification Events:</p> <ul> <li><code>latestSolidifiedBlockNumber</code>: The block number of the newly solidified block.</li> <li><code>timestamp</code>: The timestamp of the solidified block.</li> </ul> <p>For a complete list of fields, see the SolidityTrigger source code.</p>"},{"location":"architecture/event/#creating-a-kafka-subscription-topic","title":"Creating a Kafka Subscription Topic","text":"<p>The name of the Kafka subscription topic must match the <code>topic</code> setting in the <code>topics</code> field of your <code>event.subscribe</code> configuration. For example, if you need to subscribe to <code>block</code> events and set the <code>topic</code> field in the <code>block</code> trigger to <code>\"block\"</code>, you must create a topic named <code>\"block\"</code> in Kafka to receive block events.</p> <p>In a Linux environment, the command to create a Kafka topic is as follows:</p> <pre><code>bin/kafka-topics.sh --create --topic block --bootstrap-server localhost:9092\n</code></pre>"},{"location":"architecture/event/#starting-the-event-subscription-node","title":"Starting the Event Subscription Node","text":"<p>After completing the above configuration, you must add the <code>--es</code> parameter when starting the FullNode to enable the event subscription feature.</p> <pre><code>java -jar FullNode.jar -c config.conf --es\n</code></pre>"},{"location":"architecture/event/#verifying-plugin-load","title":"Verifying Plugin Load","text":"<p>You can verify that the Kafka event plugin has loaded successfully by checking the Fullnode logs:</p> <pre><code>grep -i eventplugin logs/tron.log\n</code></pre> <p>If you see a message similar to the following in the logs, the event subscription plugin has loaded successfully:</p> <pre><code>[o.t.c.l.EventPluginLoader] 'your plugin path/plugin-kafka-1.0.0.zip' loaded\n</code></pre>"},{"location":"architecture/event/#verifying-event-subscription","title":"Verifying Event Subscription","text":"<p>Execute the <code>kafka-console-consumer.sh</code> script to retrieve messages from the <code>\"block\"</code> topic in Kafka to verify that the event subscription is successful.</p> <p>In a Linux environment, the command is as follows:</p> <pre><code>bin/kafka-console-consumer.sh --topic block --from-beginning --bootstrap-server localhost:9092\n</code></pre> <p>If you see JSON-formatted output similar to the following in your console, the event subscription is successful:</p> <pre><code>{\n    \"timeStamp\": 1539973125000,\n    \"triggerName\": \"blockTrigger\",\n    \"blockNumber\": 3341315,\n    \"blockHash\": \"000000000032fc03440362c3d42eb05e79e8a1aef77fe31c7879d23a750f2a31\",\n    \"transactionSize\": 16,\n    \"latestSolidifiedBlockNumber\": 3341297,\n    \"transactionList\": [\"8757f846e541b51b5692a2370327f4b8031125f4557f8ad4b1037d4452616d39\", \"f6adab7814b34e5e756170f93a31a0c3393c5d99eff11e30271916375adc7467\", ..., \"89bcbcd063a48ef4a5678a033acf5edbb6b17419a3c91eb0479a3c8598774b43\"]\n}\n</code></pre>"},{"location":"architecture/event/#mongodb-plugin-deployment-and-usage","title":"MongoDB Plugin: Deployment and Usage","text":"<p>This guide is designed to help developers quickly deploy and use the TRON MongoDB event subscription plugin to achieve real-time data capture, persistent storage, and querying of on-chain events. The document covers the entire process, including system environment configuration, plugin deployment, database installation, query service setup, and API usage.</p> <p>The main steps include:</p> <ul> <li>Checking System Configuration</li> <li>Understanding the System Architecture</li> <li>Deploying the Event Plugin</li> <li>Deploying the MongoDB</li> <li>Deploying the Event Query Service</li> <li>Starting and Verifing</li> <li>Using the TRON Event Query Service API</li> </ul>"},{"location":"architecture/event/#recommended-system-configuration_1","title":"Recommended System Configuration","text":"<p>To ensure the efficient and stable operation of your TRON node and event service, the following configuration is recommended:</p> <ul> <li>CPU: 16 cores or more</li> <li>RAM: 32 GB or higher</li> <li>SSD: 2.5 TB or more</li> <li>Operating System: Linux or macOS</li> </ul>"},{"location":"architecture/event/#system-architecture-and-workflow","title":"System Architecture and Workflow","text":"<p>The TRON MongoDB event subscription system consists of three core modules:</p> <ol> <li>Event Subscription Plugin: Connects to a TRON node to capture event data and writes it to MongoDB.</li> <li>MongoDB Database: The persistence layer for storing event data.</li> <li>Event Query Service: Provides an HTTP API for external applications to query event data.</li> </ol>"},{"location":"architecture/event/#deploying-the-event-subscription-plugin","title":"Deploying the Event Subscription Plugin","text":""},{"location":"architecture/event/#1-building-the-plugin","title":"1. Building the Plugin","text":"<pre><code>git clone https://github.com/tronprotocol/event-plugin.git\ncd event-plugin\n./gradlew build\n</code></pre> <p>After the build is complete, the generated plugin file will be located at:</p> <pre><code>event-plugin/build/plugins/plugin-mongodb-*.zip\n</code></pre>"},{"location":"architecture/event/#2-configuring-the-fullnode","title":"2. Configuring the FullNode","text":"<p>Add the following content to your FullNode's configuration file, <code>config.conf</code>:</p> <pre><code>event.subscribe = {\n  version = 1  \n  startSyncBlockNum = 0  \n\n  native = {\n    useNativeQueue = false  \n  }\n  path = \"/deploy/fullnode/event-plugin/build/plugins/plugin-mongodb-1.0.0.zip\"  \n  server = \"127.0.0.1:27017\"  \n  dbconfig = \"eventlog|tron|123456\"  \n  topics = [\n    {\n      triggerName = \"block\"  \n      enable = false\n      topic = \"block\"  \n      solidified = false  \n    },\n    {\n      triggerName = \"transaction\"\n      enable = false\n      topic = \"transaction\"\n      solidified = false\n      ethCompatible = false  \n    },\n    {\n      triggerName = \"contractevent\"\n      enable = false\n      topic = \"contractevent\"\n    },\n    {\n      triggerName = \"contractlog\"\n      enable = false\n      topic = \"contractlog\"\n      redundancy = false  \n    },\n    {\n      triggerName = \"solidity\"\n      enable = true  \n      topic = \"solidity\"\n    },\n    {\n      triggerName = \"solidityevent\"\n      enable = false\n      topic = \"solidityevent\"\n    },\n    {\n      triggerName = \"soliditylog\"\n      enable = false\n      topic = \"soliditylog\"\n      redundancy = false  \n    }\n  ]\n\n  filter = {\n    fromblock = \"\"  \n    toblock = \"\"  \n    contractAddress = [\"\" ]\n    contractTopic = [\"\"]\n  }\n}\n</code></pre> <p>Field Descriptions:</p> <ul> <li><code>version</code>: The version of the event service framework. <code>1</code> indicates V2.0, while <code>0</code> indicates V1.0. If not configured, it defaults to V1.0.</li> <li><code>startSyncBlockNum</code>: A feature introduced in V2.0 that allows processing and pushing events from historical blocks, satisfying the need for historical data subscriptions. If <code>startSyncBlockNum &lt;= 0</code>, this feature is disabled. If <code>startSyncBlockNum &gt; 0</code>, the feature is enabled, and historical event synchronization will begin from the specified block height. Note: It is recommended to use the latest version of the event plugin when enabling this feature.</li> <li><code>native.useNativeQueue</code>: Specifies whether to use the built-in message queue (ZeroMQ) for event subscriptions. <code>true</code> uses the built-in queue, while <code>false</code> uses the plugin. This must be set to <code>false</code>.</li> <li><code>path</code>: The absolute path to the plugin file, e.g., <code>\"/deploy/fullnode/event-plugin/build/plugins/plugin-mongodb-1.0.0.zip\"</code>.</li> <li><code>server</code>: The target server address, i.e., the address and port for MongoDB, e.g., <code>\"127.0.0.1:27017\"</code>.</li> <li><code>dbconfig</code>: The MongoDB database configuration in the format: <code>database_name|username|password</code>, e.g., <code>\"eventlog|tron|123456\"</code>.</li> <li><code>topics</code>: Seven event types are currently supported: <code>block</code>, <code>transaction</code>, <code>contractevent</code>, <code>contractlog</code>, <code>solidity</code>, <code>solidityevent</code>, and <code>soliditylog</code>. For more details, please refer to the Event Types chapter.<ul> <li><code>triggerName</code>: The name of the trigger, which cannot be modified.</li> <li><code>enable</code>: Toggles the event subscription. <code>true</code> enables it, <code>false</code> disables it.</li> <li><code>topic</code>: The name of the collection in MongoDB that will receive the events. This can be modified.</li> </ul> </li> <li><code>filter</code>: The criteria for filtering events.<ul> <li><code>fromblock</code>: The starting block number of the query range. Can be <code>\"\"</code>, <code>\"earliest\"</code> (to query from the genesis block), or a specific block number.</li> <li><code>toblock</code>: The ending block number of the query range. Can be <code>\"\"</code>, <code>\"latest\"</code> (the most recent block), or a specific block number.</li> <li><code>contractAddress</code>: A list of contract addresses you wish to subscribe to. If set to an empty string, logs/events from all contract addresses will be received.</li> <li><code>contractTopic</code>: A list of contract topics you wish to subscribe to. If set to an empty string, logs/events for all contract topics will be received.</li> </ul> </li> </ul>"},{"location":"architecture/event/#installing-and-configuring-mongodb","title":"Installing and Configuring MongoDB","text":"<p>MongoDB will be used to store TRON event data. Please follow these steps to install and configure it:</p>"},{"location":"architecture/event/#1-installing-mongodb","title":"1. Installing MongoDB","text":"<p>First, create an installation directory for MongoDB, then download and extract the installation package:</p> <pre><code>mkdir /home/java-tron\ncd /home/java-tron\ncurl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.4.tgz\ntar zxvf mongodb-linux-x86_64-4.0.4.tgz\nmv mongodb-linux-x86_64-4.0.4 mongodb\n</code></pre>"},{"location":"architecture/event/#2-setting-environment-variables","title":"2. Setting Environment Variables","text":"<p>To simplify subsequent operations, please set the environment variables for MongoDB:</p> <pre><code>export MONGOPATH=/home/java-tron/mongodb/\nexport PATH=$PATH:$MONGOPATH/bin\n</code></pre>"},{"location":"architecture/event/#3-configuring-mongodb","title":"3. Configuring MongoDB","text":"<p>Create the log and data directories for MongoDB and create the configuration file <code>mgdb.conf</code>:</p> <pre><code>mkdir -p /home/java-tron/mongodb/{log,data}\ncd /home/java-tron/mongodb/log/ &amp;&amp; touch mongodb.log &amp;&amp; cd -\nvim /home/java-tron/mongodb/mgdb.conf\n</code></pre> <p>Write the following content into the <code>mgdb.conf</code> file. Ensure that <code>dbpath</code> and <code>logpath</code> use absolute paths:</p> <pre><code>dbpath=/home/java-tron/mongodb/data\nlogpath=/home/java-tron/mongodb/log/mongodb.log\nport=27017\nlogappend=true\nfork=true\nbind_ip=0.0.0.0\nauth=true\nwiredTigerCacheSizeGB=2\n</code></pre> <p>Important Configuration Notes:</p> <ul> <li><code>bind_ip=0.0.0.0</code>: Must be configured to <code>0.0.0.0</code>; otherwise, remote connections will be rejected.</li> <li><code>wiredTigerCacheSizeGB</code>: This parameter must be configured to prevent Out Of Memory (OOM) issues.</li> </ul>"},{"location":"architecture/event/#4-starting-mongodb","title":"4. Starting MongoDB","text":"<p>Start the MongoDB service using the configuration file:</p> <pre><code>mongod --config /home/java-tron/mongodb/mgdb.conf &amp;\n</code></pre>"},{"location":"architecture/event/#5-creating-admin-and-database-users","title":"5. Creating Admin and Database Users","text":"<p>Connect to MongoDB to create an administrative user, then create the database and user for the event subscription service:</p> <pre><code>mongo\nuse admin\ndb.createUser({user:\"&lt;admin-username&gt;\",pwd:\"&lt;admin-password&gt;\",roles:[{role:\"root\",db:\"admin\"}]})\n\ndb.auth(\"&lt;admin-username&gt;\", \"&lt;admin-password&gt;\")\nuse eventlog\ndb.createUser({user:\"&lt;eventlog-username&gt;\",pwd:\"&lt;eventlog-password&gt;\",roles:[{role:\"dbOwner\",db:\"eventlog\"}]})\n</code></pre>"},{"location":"architecture/event/#deploying-the-event-query-service","title":"Deploying the Event Query Service","text":"<p>The Event Query Service provides an HTTP interface for querying event data stored in MongoDB. This service requires a Java environment.</p> <p>Note: Please ensure you are using Oracle JDK 8, not Open JDK 8.</p>"},{"location":"architecture/event/#1-downloading-the-source-code","title":"1. Downloading the Source Code","text":"<p>Clone the <code>tron-eventquery</code> project source code:</p> <pre><code>git clone https://github.com/tronprotocol/tron-eventquery.git\ncd tron-eventquery\n</code></pre>"},{"location":"architecture/event/#2-building-the-service","title":"2. Building the Service","text":"<p>Download and use Maven to build the <code>tron-eventquery</code> service:</p> <pre><code>wget https://mirrors.cnnic.cn/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz --no-check-certificate\ntar zxvf apache-maven-3.5.4-bin.tar.gz\nexport M2_HOME=$HOME/maven/apache-maven-3.5.4\nexport PATH=$PATH:$M2_HOME/bin\nmvn --version\nmvn package\n</code></pre> <p>Upon successful execution, a JAR package will be generated in the <code>tron-eventquery/target</code> directory, and a <code>config.conf</code> file will be created in the <code>tron-eventquery/</code> directory. An example of the configuration file content is shown below:</p> <pre><code>mongo.host=IP\nmongo.port=27017\nmongo.dbname=eventlog\nmongo.username=tron\nmongo.password=123456\nmongo.connectionsPerHost=8\nmongo.threadsAllowedToBlockForConnectionMultiplier=4\n</code></pre> <p>Please modify <code>mongo.host</code>, <code>mongo.port</code>, <code>mongo.dbname</code>, <code>mongo.username</code>, and <code>mongo.password</code> according to your MongoDB configuration.</p>"},{"location":"architecture/event/#3-starting-the-tron-event-query-service","title":"3. Starting the TRON Event Query Service","text":"<p>Start the <code>tron-eventquery</code> service and insert the indexes:</p> <pre><code>sh deploy.sh\nsh insertIndex.sh\n</code></pre> <p>Note: The default port is <code>8080</code>. To change it, edit the <code>deploy.sh</code> script. For example:</p> <pre><code>nohup java -jar -Dserver.port=8081 target/troneventquery-1.0.0-SNAPSHOT.jar 2&gt;&amp;1 &amp;\n</code></pre>"},{"location":"architecture/event/#launch-and-verification","title":"Launch and Verification","text":"<p>After completing the deployment steps, you can start the TRON FullNode and verify that the event subscription service is working correctly.</p>"},{"location":"architecture/event/#1-starting-the-fullnode","title":"1. Starting the FullNode","text":"<p>Important: Before starting the FullNode, ensure that the MongoDB service has been started successfully.</p> <p>The command to start the FullNode is as follows:</p> <pre><code>java -jar FullNode.jar -c config.conf --es\n</code></pre> <p>For information on installing a FullNode, please refer to the Deploying a FullNode documentation.</p>"},{"location":"architecture/event/#2-verifying-plugin-load","title":"2. Verifying Plugin Load","text":"<p>You can verify that the event plugin has loaded successfully by checking the FullNode logs:</p> <pre><code>tail -f logs/tron.log | grep -i eventplugin\n</code></pre> <p>If you see a message similar to the following, the plugin has loaded successfully:</p> <pre><code>o.t.c.l.EventPluginLoader 'your plugin path/plugin-kafka-1.0.0.zip' loaded\n</code></pre>"},{"location":"architecture/event/#3-verifying-data-persistence-in-mongodb","title":"3. Verifying Data Persistence in MongoDB","text":"<p>Connect to MongoDB and query the data to verify that event data has been captured from the node and stored in the database via the event subscription:</p> <pre><code>mongo 47.90.245.68:27017\nuse eventlog\ndb.auth(\"tron\", \"123456\")\nshow collections\ndb.block.find()\n</code></pre> <p>If data is returned, it means the data has been stored successfully. Otherwise, please review the FullNode logs to troubleshoot the issue.</p>"},{"location":"architecture/event/#using-the-tron-event-query-service-api","title":"Using the TRON Event Query Service API","text":"<p>The TRON Event Query Service provides a series of HTTP API endpoints for querying event data stored in MongoDB. For details on the specific APIs and their usage, please refer to the Event Query Service HTTP API documentation.</p>"},{"location":"architecture/event/#built-in-message-queue-subscription-zeromq","title":"Built-in Message Queue Subscription (ZeroMQ)","text":"<p>The java-tron node includes a built-in ZeroMQ message queue that provides a lightweight event streaming service. This method requires no external plugins and is ideal for use cases that demand high real-time event delivery but do not require event persistence or historical replay, such as rapid prototyping and testing.</p> <p>This method has the following advantages:</p> <ul> <li>No Plugin Deployment: Subscriptions are established by connecting directly to a TRON node.</li> <li>Low Latency: Optimized for real-time event streaming.</li> <li>Lightweight: Well-suited for rapid development and testing environments.</li> </ul> <p>Therefore, when you want to connect to an event stream quickly and at a minimal cost without relying on persistence capabilities, using the built-in ZeroMQ message queue is a more lightweight and direct choice. This guide explains how to subscribe to events using this method.</p>"},{"location":"architecture/event/#configuring-the-node","title":"Configuring the Node","text":"<p>To enable event subscriptions via java-tron's built-in ZeroMQ, you must enable the feature in the node's configuration file.</p> <pre><code>event.subscribe = {\n  native = {\n    useNativeQueue = true  \n    bindport = 5555  \n    sendqueuelength = 1000  \n  }\n\n  ......\n\n  topics = [\n    {\n      triggerName = \"block\"  \n      enable = true\n      topic = \"block\"  \n    },\n    ......\n  ]\n}\n</code></pre> <ul> <li><code>native.useNativeQueue</code>: <code>true</code> to use the built-in message queue, <code>false</code> to use event plugins.</li> <li><code>native.bindport</code>: The port that the ZeroMQ publisher binds to. In this example, it is <code>5555</code>, so the subscriber should connect to the publisher address <code>\"tcp://127.0.0.1:5555\"</code>.</li> <li><code>native.sendqueuelength</code>: The length of the send queue. This is the maximum number of messages the TCP buffer can hold if the subscriber is slow to receive them. Messages published beyond this limit will be discarded.</li> <li><code>topics</code>: The subscribed Event Types, such as block types, transaction types, etc.</li> </ul>"},{"location":"architecture/event/#starting-the-node","title":"Starting the Node","text":"<p>The event subscription service is disabled by default and must be enabled using the <code>--es</code> command-line argument. The startup command for a node with event subscription enabled is as follows:</p> <pre><code>$ java -jar FullNode.jar --es\n</code></pre>"},{"location":"architecture/event/#preparing-the-event-subscription-script","title":"Preparing the Event Subscription Script","text":"<p>This guide uses Node.js as an example to demonstrate how to subscribe to events.</p> <p>First, install the <code>ZeroMQ</code> library:</p> <pre><code>$ npm install zeromq@5\n</code></pre> <p>Next, write the subscriber code:</p> <pre><code>// subscriber.js\nvar zmq = require(\"zeromq\"),\nvar sock = zmq.socket(\"sub\");\n\nsock.connect(\"tcp://127.0.0.1:5555\");\nsock.subscribe(\"block\");\nconsole.log(\"Subscriber connected to port 5555\");\n\nsock.on(\"message\", function(topic, message) {\n  console.log(\n    \"received a message related to:\",\n    Buffer.from(topic).toString(),\n    \", containing message:\",\n    Buffer.from(message).toString()\n  );\n});\n</code></pre> <p>This example connects the subscriber to the node's event publisher and subscribes to <code>block</code> events.</p>"},{"location":"architecture/event/#starting-the-subscriber","title":"Starting the Subscriber","text":"<p>The Node.js startup command is as follows:</p> <pre><code>$ node subscriber.js\n\n&gt; Subscriber connected to port 5555\n</code></pre> <p>When the node produces a new block, the subscriber will receive the block event, and the output will look like this:</p> <pre><code>received a message related to: block, containing message: {\"timeStamp\":1678343709000,\"triggerName\":\"blockTrigger\",\"blockNumber\":1361,\"blockHash\":\"00000000000005519b3995cd638753a862c812d1bda11de14bbfaa5ad3383280\",\"transactionSize\":0,\"latestSolidifiedBlockNumber\":1361,\"transactionList\":[]}\nreceived a message related to: block, containing message: {\"timeStamp\":1678343712000,\"triggerName\":\"blockTrigger\",\"blockNumber\":1362,\"blockHash\":\"0000000000000552d53d1bdd9929e4533a983f14df8931ee9b3bf6d6c74a47b0\",\"transactionSize\":0,\"latestSolidifiedBlockNumber\":1362,\"transactionList\":[]}\n</code></pre>"},{"location":"clients/wallet-cli/","title":"wallet-cli","text":""},{"location":"clients/wallet-cli/#introduction","title":"Introduction","text":"<p>wallet-cli is an interactive command-line wallet designed specifically for the TRON network. It allows you to sign and broadcast transactions and query on-chain data in a secure, local environment.</p> <p>wallet-cli supports key management. It uses a symmetric encryption algorithm to encrypt your private key and stores it in a local Keystore file. Since wallet-cli does not store on-chain data, it communicates with your configured java-tron node via gRPC. The following diagram illustrates the process of using wallet-cli to sign and broadcast a TRX transfer transaction:</p> <p></p> <ol> <li>First, run the <code>Login</code> command to unlock the wallet.</li> <li>Next, run the <code>SendCoin</code> command to send TRX.</li> <li>wallet-cli builds and signs the transaction locally.</li> <li>It then calls the java-tron node's <code>BroadcastTransaction</code> gRPC API to broadcast the transaction to the network.</li> <li>After a successful broadcast, the java-tron node returns a transaction success result and an object containing the transaction hash.</li> <li>Finally, wallet-cli displays the transaction hash to the user.</li> </ol> <p>For detailed installation and running instructions, please visit: GitHub Repository</p>"},{"location":"clients/wallet-cli/#command-line-operation-example","title":"Command-Line Operation Example","text":"<pre><code>$ cd wallet-cli\n$ ./gradlew build\n$ ./gradlew run\n&gt; RegisterWallet 123456      (password = 123456)\n&gt; login 123456\n&gt; getAddress\naddress = TRfwwLDpr4excH4V4QzghLEsdYwkapTxnm'  # Back it up!\n&gt; BackupWallet 123456\npriKey = 1234567890123456789012345678901234567890123456789012345678901234  # Back it up! (BackupWallet2Base64 option)\n&gt; getbalance\nBalance = 0\n&gt; AssetIssue TestTRX TRX 75000000000000000 1 1 2 \"2019-10-02 15:10:00\" \"2020-07-11\" \"just for test121212\" www.test.com 100 100000 10000 10 10000 1\n&gt; getaccount TRfwwLDpr4excH4V4QzghLEsdYwkapTxnm\n(Prints balance: 9999900000\n\"assetV2\": [\n    {\n        \"key\": \"1000001\",\n        \"value\": 74999999999980000\n    }\n],)\n  # (AssetIssue costs 1000 TRX)\n  # (You can query the TRX balance and other asset balances of any account)\n&gt; TransferAsset TWzrEZYtwzkAxXJ8PatVrGuoSNsexejRiM 1000001 10000\n</code></pre>"},{"location":"clients/wallet-cli/#commands","title":"Commands","text":"<p>wallet-cli supports the following command categories:</p> <ul> <li>Key Management</li> <li>On-chain Accounts</li> <li>Account Resources</li> <li>Transactions</li> <li>Querying On-chain Data</li> <li>Smart Contracts</li> <li>TRC-10 Assets</li> <li>Governance</li> <li>Decentralized Exchange</li> <li>GasFree Support</li> <li>Other Utility Commands</li> </ul> <p></p>"},{"location":"clients/wallet-cli/#key-management","title":"Key Management","text":""},{"location":"clients/wallet-cli/#log-out-logout","title":"Log Out - <code>Logout</code>","text":"<p>Logs out of the current wallet account.</p> <p>Example: <pre><code>wallet&gt; Logout\nLogout successful !!!\n</code></pre></p>"},{"location":"clients/wallet-cli/#log-in-to-all-accounts-loginall","title":"Log in to All Accounts - <code>LoginAll</code>","text":"<p>Multiple keystore accounts can be logged in with a single password.</p> <p>Example: <pre><code>wallet&gt; loginall\nPlease input your password.\npassword:\nUse user defined config file in current dir\nWalletApi getRpcVsersion: 2\n[========================================] 100%\nThe 1th keystore file name is TJEEKTmaVTYSpJAxahtyuofnDSpe2seajB.json\nThe 2th keystore file name is TX1L9xonuUo1AHsjUZ3QzH8wCRmKm56Xew.json\nThe 3th keystore file name is TVuVqnJFuuDxN36bhEbgDQS7rNGA5dSJB7.json\nThe 4th keystore file name is Ledger-TRvVXgqddDGYRMx3FWf2tpVxXQQXDZxJQe.json\nThe 5th keystore file name is TYXFDtn86VPFKg4mkwMs45DKDcpAyqsada.json\nPlease choose between 1 and 5\n5\nLoginAll successful !!!\n</code></pre></p>"},{"location":"clients/wallet-cli/#lock-account-lock","title":"Lock Account - <code>Lock</code>","text":"<p>To use the lock feature for a logged-in account, you need to configure <code>lockAccount = true</code> in <code>config.conf</code>. The current logged-in account is locked, which means signing and transactions are not allowed.</p> <p>Example: <pre><code>wallet&gt; lock\nlock successful !!!\n</code></pre></p>"},{"location":"clients/wallet-cli/#unlock-account-unlock","title":"Unlock Account - <code>Unlock</code>","text":"<p>To use the unlock feature for a logged-in account, you need to configure <code>lockAccount = true</code> in <code>config.conf</code>. A currently locked account can be unlocked. By default, it will lock again after 300 seconds. You can specify the number of seconds when unlocking.</p> <p>Example: <pre><code>wallet&gt; unlock 60\nPlease input your password.\npassword:\nunlock successful !!!\n</code></pre></p>"},{"location":"clients/wallet-cli/#generate-address-generateaddress","title":"Generate Address - <code>GenerateAddress</code>","text":"<p>Generates an address and prints the address and private key.</p>"},{"location":"clients/wallet-cli/#generate-sub-account-generatesubaccount","title":"Generate Sub-Account - <code>GenerateSubAccount</code>","text":"<p>Generates a sub-account using the mnemonic words in the wallet.</p> <p>Example: <pre><code>wallet&gt; GenerateSubAccount\nPlease input your password.\npassword:\n\n=== Sub Account Generator ===\n-----------------------------\nDefault Address: TYEhEg7b7tXm92UDbRDXPtJNU6T9xVGbbo\nDefault Path: m/44'/195'/0'/0/1\n-----------------------------\n\n1. Generate Default Path\n2. Change Account\n3. Custom Path\n\nEnter your choice (1-3): 1\nmnemonic file : ./Mnemonic/TYEhEg7b7tXm92UDbRDXPtJNU6T9xVGbbo.json\nGenerate a sub account successful, keystore file name is TYEhEg7b7tXm92UDbRDXPtJNU6T9xVGbbo.json\ngenerateSubAccount successful.\n</code></pre></p>"},{"location":"clients/wallet-cli/#reset-wallet-resetwallet","title":"Reset Wallet - <code>ResetWallet</code>","text":"<p>Use this command to delete all local wallet Keystore files and mnemonic files, and guide you to re-register or import a wallet.</p> <p>Example:</p> <pre><code>wallet&gt; resetwallet\nUser defined config file doesn't exists, use default config file in jar\n\nWarning: Dangerous operation!\nThis operation will permanently delete the Wallet&amp;Mnemonic files\nWarning: The private key and mnemonic words will be permanently lost and cannot be recovered!\nContinue? (y/Y to proceed, c/C to cancel):\ny\n\nFinal confirmation:\nPlease enter: 'DELETE' to confirm the delete operation:\nConfirm: (DELETE): DELETE\nresetWallet successful !!!\nNow, you can RegisterWallet or ImportWallet again. Or import the wallet through other means.\n</code></pre>"},{"location":"clients/wallet-cli/#register-wallet-registerwallet","title":"Register Wallet - <code>RegisterWallet</code>","text":"<p>Registers your wallet, and you need to set a wallet password and generate an address and a private key.</p>"},{"location":"clients/wallet-cli/#change-account-password-changepassword","title":"Change Account Password - <code>ChangePassword</code>","text":"<p>Changes the password of an account.</p>"},{"location":"clients/wallet-cli/#modify-wallet-name-modifywalletname-new_wallet_name","title":"Modify Wallet Name - <code>ModifyWalletName new_wallet_name</code>","text":"<p>Modifies the name of the wallet.</p> <p>Example: <pre><code>wallet&gt; ModifyWalletName new-name\nModify Wallet Name successful !!\n</code></pre></p>"},{"location":"clients/wallet-cli/#import-wallet-importwallet","title":"Import Wallet - <code>ImportWallet</code>","text":"<p>Imports a wallet. You need to set a password and provide the private key in hexadecimal string format.</p>"},{"location":"clients/wallet-cli/#import-wallet-by-base64-importwalletbybase64","title":"Import Wallet by Base64 - <code>ImportWalletByBase64</code>","text":"<p>Imports a wallet. You need to set a password and provide the private key in Base64 format.</p>"},{"location":"clients/wallet-cli/#import-wallet-by-mnemonic-importwalletbymnemonic","title":"Import Wallet by Mnemonic - <code>ImportWalletByMnemonic</code>","text":"<p>Imports a wallet. You need to set a password and provide the mnemonic words.</p> <p>Example: <pre><code>wallet&gt; ImportWalletByMnemonic\nPlease input password.\npassword:\nPlease input password again.\npassword:\nPlease enter 12 words (separated by spaces) [Attempt 1/3]:\n</code></pre></p>"},{"location":"clients/wallet-cli/#export-wallet-mnemonic-exportwalletmnemonic","title":"Export Wallet Mnemonic - <code>ExportWalletMnemonic</code>","text":"<p>Exports the mnemonic words for the address in the wallet.</p> <p>Example: <pre><code>wallet&gt; ExportWalletMnemonic\nPlease input your password.\npassword:\nexportWalletMnemonic successful !!\na*ert tw*st co*rect mat*er pa*s g*ther p*t p*sition s*op em*ty coc*nut aband*n\n</code></pre></p>"},{"location":"clients/wallet-cli/#export-wallet-keystore-exportwalletkeystore","title":"Export Wallet Keystore - ExportWalletKeystore","text":"<p>Exports the wallet keystore in TronLink wallet format.</p> <p>Example: <pre><code>wallet&gt; ExportWalletKeystore tronlink /tmp\nPlease input your password.\npassword:\nexported keystore file : /tmp/TYdhEg8b7tXm92UDbRDXPtJNU6T9xVGbbo.json\nexportWalletKeystore successful !!\n</code></pre></p>"},{"location":"clients/wallet-cli/#import-wallet-keystore-importwalletbykeystore","title":"Import Wallet Keystore -     <code>ImportWalletByKeystore</code>","text":"<p>Imports a TronLink wallet's keystore file into wallet-cli.</p> <p>Example: <pre><code>wallet&gt; ImportWalletByKeystore tronlink /tmp/tronlink.json\nPlease input password.\npassword:\nPlease input password again.\npassword:\nfileName = TYQq6zp51unQDNELmT4xKMWh5WLcwpCDZJ.json\nimportWalletByKeystore successful !!\n</code></pre></p>"},{"location":"clients/wallet-cli/#import-wallet-by-ledger-importwalletbyledger","title":"Import Wallet by Ledger - ImportWalletByLedger","text":"<p>Imports a Ledger-derived account into wallet-cli.</p> <p>Example: <pre><code>wallet&gt; ImportWalletByLedger\n((Note:This will pair Ledger to user your hardward wallet)\nOnly one Ledger device is supported. If you have multiple devices, please ensure only one is connected.\nLedger device found: Nano X\nPlease input password.\npassword:\nPlease input password again.\npassword:\n-------------------------------------------------\nDefault Account Address: TAT1dA8F9HXGqmhvMCjxCKAD29YxDRw81y\nDefault Path: m/44'/195'/0'/0/0\n-------------------------------------------------\n1. Import Default Account\n2. Change Path\n3. Custom Path\nSelect an option: 1\nImport a wallet by Ledger successful, keystore file : ./Wallet/Ledger-TAT1dA8F9HXGqmhvMCjxCKAD29YxDRw81y.json\nYou are now logged in, and you can perform operations using this account.\n</code></pre></p>"},{"location":"clients/wallet-cli/#backup-wallet-backupwallet","title":"Backup Wallet - BackupWallet**","text":"<p>Backs up your wallet. You need to enter the wallet password and export the private key in hexadecimal string format, for example: 1234567890123456789012345678901234567890123456789012345678901234</p>"},{"location":"clients/wallet-cli/#backup-wallet-base64-backupwallet2base64","title":"Backup Wallet (Base64) - BackupWallet2Base64**","text":"<p>Backs up your wallet. You need to enter the wallet password and export the private key in Base64 format, for example: ch1jsHTxjUHBR+BMlS7JNGd3ejC28WdFvEeo6uUHZUU=</p>"},{"location":"clients/wallet-cli/#clear-wallet-keystore-clearwalletkeystore","title":"Clear Wallet Keystore - ClearWalletKeystore","text":"<p>Clears the wallet keystore file of the logged-in account.</p> <p>Example: <pre><code>wallet&gt; ClearWalletKeystore\n\nWarning: Dangerous operation!\nThis operation will permanently delete the Wallet&amp;Mnemonic files of the Address: TABWx7yFhWrvZHbwKcCmFLyPLWjd2dZ2Rq\nWarning: The private key and mnemonic words will be permanently lost and cannot be recovered!\nContinue? (y/Y to proceed):y\n\nFinal confirmation:\nPlease enter: 'DELETE' to confirm the delete operation:\nConfirm: (DELETE): DELETE\n\nFile deleted successfully:\n- /wallet-cli/Wallet/TABWx8yFhWrvZHbwKcCmFLyPLWjd2dZ2Rq.json\n- /wallet-cli/Mnemonic/TABWx8yFhWrvZHbwKcCmFLyPLWjd2dZ2Rq.json\nClearWalletKeystore successful !!!\n</code></pre></p> <p></p>"},{"location":"clients/wallet-cli/#on-chain-accounts","title":"On-chain Accounts","text":""},{"location":"clients/wallet-cli/#create-account-createaccount","title":"Create Account - CreateAccount","text":"<p>This command can create a new inactive address account and burn 1 TRX as a fee.</p> <p>Example: <pre><code>wallet&gt; createaccount TDJ13zZzT3w91WMBm98gC3mwL7NbA6sQPA\n{\n    \"raw_data\":{\n        \"contract\":[\n            {\n                \"parameter\":{\n                    \"value\":{\n                        \"owner_address\":\"TQLaB7L8o3ikjRVcN7tTjMZsRYPJ23XZbd\",\n                        \"account_address\":\"TDJ13zZzT3w91WMBm98gC3mwL7NbA6sQPA\"\n                    },\n                    \"type_url\":\"type.googleapis.com/protocol.AccountCreateContract\"\n                },\n                \"type\":\"AccountCreateContract\"\n            }\n        ],\n        \"ref_block_bytes\":\"91a4\",\n        \"ref_block_hash\":\"2bfcd3bb597f3d40\",\n        \"expiration\":1745333676000,\n        \"timestamp\":1745333618318\n    },\n    \"raw_data_hex\":\"0a0291a422082bfcd3bb597f3d4040e0cff9efe5325a6612640a32747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e4163636f756e74437265617465436f6e7472616374122e0a15419d9c2bb5ee381a4396dd49ce42292e756b2e5e4b12154124764e4674179d4578cfc4c833c1ac1a09f6ce56708e8df6efe532\"\n}\nBefore sign transaction hex string is 0a84010a0291a422082bfcd3bb597f3d4040e0cff9efe5325a6612640a32747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e4163636f756e74437265617465436f6e7472616374122e0a15419d9c2bb5ee381a4396dd49ce42292e756b2e5e4b12154124764e4674179d4578cfc4c833c1ac1a09f6ce56708e8df6efe532\nPlease confirm and input your permission id, if input y/Y means default 0, other non-numeric characters will cancel transaction.\ny\nPlease choose your key for sign.\nThe 1th keystore file name is TJEEKTmaVTYSpJAxahtyuofnDSpe2seajB.json\nThe 2th keystore file name is TX1L9xonuUo1AHsjUZ3QzH8wCRmKm56Xew.json\nThe 3th keystore file name is TVuVqnJFuuDxN36bhEbgDQS7rNGA5dSJB7.json\nThe 4th keystore file name is Ledger-TRvVXgqddDGYRMx3FWf2tpVxXQQXDZxJQe.json\nThe 5th keystore file name is TYXFDtn86VPFKg4mkwMs45DKDcpAyqsada.json\nPlease choose between 1 and 5\n1\nAfter sign transaction hex string is 0a84010a0291a422082bfcd3bb597f3d404083bd9cfae5325a6612640a32747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e4163636f756e74437265617465436f6e7472616374122e0a15419d9c2bb5ee381a4396dd49ce42292e756b2e5e4b12154124764e4674179d4578cfc4c833c1ac1a09f6ce56708e8df6efe5321241ce53add4f75fe1838aa7e0a4e2411b3bbfce1d2164d68dac18507ed87e22ae503f65592a1161640834b3c0cef43c28f20b2d335120cc78b6f745a82ea95e451100\nTxId is 26d6fcdfdc0018097ec4166eb140e19ebd597bea2212579d2f6d921b0ad6e56f\nCreateAccount successful !!\n</code></pre></p>"},{"location":"clients/wallet-cli/#set-account-id-setaccountid-owner_address-account_id","title":"Set Account ID - <code>SetAccountId [owner_address] account_id</code>","text":"<p>Sets a custom, unique identifier (Account ID) for an account.</p> <p>Example:</p> <pre><code>&gt; SetAccountId TEDapYSVvAZ3aYH7w8N9tMEEFKaNKUD5Bp 100\n</code></pre>"},{"location":"clients/wallet-cli/#update-account-updateaccount-owner_address-account_name","title":"Update Account - <code>UpdateAccount [owner_address] account_name</code>","text":"<p>Changes the name of an account.</p> <p>Example:</p> <pre><code>&gt; UpdateAccount test-name\n</code></pre>"},{"location":"clients/wallet-cli/#get-account-information-getaccount","title":"Get Account Information - <code>GetAccount</code>","text":"<p>Retrieves account information based on the address.</p>"},{"location":"clients/wallet-cli/#get-account-address-getaddress","title":"Get Account Address - <code>GetAddress</code>","text":"<p>Retrieves the address of the current logged-in account.</p>"},{"location":"clients/wallet-cli/#get-account-balance-getbalance","title":"Get Account Balance - <code>GetBalance</code>","text":"<p>Retrieves the balance of the current logged-in account.</p>"},{"location":"clients/wallet-cli/#modify-account-permissions","title":"Modify Account Permissions","text":""},{"location":"clients/wallet-cli/#how-to-use-wallet-clis-account-permission-management-feature","title":"How to Use <code>wallet-cli</code>'s Account Permission Management Feature?","text":"<p>Account Permission Management allows other users to access an account for better account management. There are three access types:</p> <ul> <li><code>owner</code>: The access permission for the account owner.</li> <li><code>active</code>: Access permissions for other account functions, as well as permissions for specific functions. If used for an SR, this does not include block production authorization.</li> <li><code>witness</code>: Used exclusively for SRs, granting one of the users block production authorization.</li> </ul> <p>Other users will be granted permissions.</p> <pre><code>&gt; Updateaccountpermission TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ \n{\n  \"owner_permission\": {\n    \"type\": 0,\n    \"permission_name\": \"owner\",\n    \"threshold\": 1,\n    \"keys\": [\n      {\n        \"address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\",\n        \"weight\": 1\n      }\n    ]\n  },\n  \"witness_permission\": {\n    \"type\": 1,\n    \"permission_name\": \"owner\",\n    \"threshold\": 1,\n    \"keys\": [\n      {\n        \"address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\",\n        \"weight\": 1\n      }\n    ]\n  },\n  \"active_permissions\": [\n    {\n      \"type\": 2,\n      \"permission_name\": \"active12323\",\n      \"threshold\": 2,\n      \"operations\": \"7fff1fc0033e0000000000000000000000000000000000000000000000000000\",\n      \"keys\": [\n        {\n          \"address\": \"TNhXo1GbRNCuorvYu5JFWN3m2NYr9QQpVR\",\n          \"weight\": 1\n        },\n        {\n          \"address\": \"TKwhcDup8L2PH5r6hxp5CQvQzZqJLmKvZP\",\n          \"weight\": 1\n        }\n      ]\n    }\n  ]\n}\n</code></pre> <p>Account <code>TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ</code> grants itself Owner access, and grants <code>TNhXo1GbRNCuorvYu5JFWN3m2NYr9QQpVR</code> and <code>TKwhcDup8L2PH5r6hxp5CQvQzZqJLmKvZP</code> Active access. Active access requires signatures from both accounts to take effect.</p> <p>If the account is not a Super Representative (SR), you do not need to set the <code>witness_permission</code>, or an error will occur.</p> <p></p>"},{"location":"clients/wallet-cli/#account-resources","title":"Account Resources","text":""},{"location":"clients/wallet-cli/#how-to-freezeunfreeze-balance","title":"How to Freeze/Unfreeze Balance","text":"<p>After funds are frozen, you will get a corresponding amount of TRON Power (TP) and Bandwidth. TP can be used for voting, and Bandwidth can be used for transactions.</p> <p>The usage and calculation rules for TP and Bandwidth will be introduced later in this document.</p> <p>The freeze operation is as follows:</p>"},{"location":"clients/wallet-cli/#freezev2-resource","title":"<code>freezev2</code> Resource","text":"<pre><code>freezeBalanceV2 [OwnerAddress] frozen_balance [ResourceCode:0 BANDWIDTH,1 ENERGY,2 TRON_POWER]\n</code></pre> <ul> <li><code>OwnerAddress</code> - The account address initiating the transaction. This is optional and defaults to the address of the logged-in account.</li> <li><code>frozen_balance</code> - The amount to freeze in sun (the smallest unit). The minimum value is 1,000,000 sun.</li> <li><code>ResourceCode</code> - 0 represents BANDWIDTH; 1 represents ENERGY.</li> </ul> <p>Example: <pre><code>wallet&gt; FreezeBalanceV2 TJAVcszse667FmSNCwU2fm6DmfM5D4AyDh 1000000000000000 0\ntxid is 82244829971b4235d98a9f09ba67ddb09690ac2f879ad93e09ba3ec1ab29177d\nwallet&gt; GetTransactionById 82244829971b4235d98a9f09ba67ddb09690ac2f879ad93e09ba3ec1ab29177d\n{\n    \"ret\":[\n        {\n            \"contractRet\":\"SUCCESS\"\n        }\n    ],\n    \"signature\":[\n        \"4faa3772fa3d3e4792e8126cafed2dc2c5c069cd09c29532f0119bc982bf356004772e16fad86e401f5818c35b96d214d693efab06997ca2f07044d4494f12fd01\"\n    ],\n    \"txID\":\"82244829971b4235d98a9f09ba67ddb09690ac2f879ad93e09ba3ec1ab29177d\",\n    \"raw_data\":{\n        \"contract\":[\n            {\n                \"parameter\":{\n                    \"value\":{\n                        \"frozen_balance\":1000000000000000,\n                        \"owner_address\":\"4159e3741a68ec3e1ebba80ad809d5ccd31674236e\"\n                    },\n                    \"type_url\":\"type.googleapis.com/protocol.FreezeBalanceV2Contract\"\n                },\n                \"type\":\"FreezeBalanceV2Contract\"\n            }\n        ],\n        \"ref_block_bytes\":\"0000\",\n        \"ref_block_hash\":\"19b59068c6058ff4\",\n        \"expiration\":1671109891800,\n        \"timestamp\":1671088291796\n    },\n    \"raw_data_hex\":\"0a020000220819b59068c6058ff440d8ada5afd1305a5c083612580a34747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e467265657a6542616c616e63655632436f6e747261637412200a154159e3741a68ec3e1ebba80ad809d5ccd31674236e1080809aa6eaafe30170d4fffea4d130\"\n}\n</code></pre></p> <p>After a freeze operation, the frozen funds will be transferred from the \"Account Balance\" to \"Frozen.\"</p> <p>You can view the frozen funds in your account information.</p> <p>After unfreezing, the funds will be transferred back from \"Frozen\" to \"Balance.\" Frozen funds cannot be used for transactions.</p> <p>When you need to temporarily gain more TP or Bandwidth, you can freeze additional funds to receive extra TP and Bandwidth. The unfreeze time will be postponed to 3 days after the last freeze operation.</p> <p>After the freeze time expires, the funds can be unfrozen.</p> <p>The unfreeze operation is as follows:</p>"},{"location":"clients/wallet-cli/#unfreezev2-resource","title":"<code>unfreezev2</code> Resource","text":"<pre><code>unfreezeBalanceV2 [OwnerAddress] unfreezeBalance ResourceCode(0 BANDWIDTH,1 ENERGY,2 TRON_POWER)\n</code></pre> <ul> <li><code>OwnerAddress</code> - The account address initiating the transaction. This is optional and defaults to the address of the logged-in account.</li> <li><code>unfreezeBalance</code> - The amount to unfreeze in sun (the smallest unit).</li> <li><code>ResourceCode</code> - 0 represents BANDWIDTH; 1 represents ENERGY.</li> </ul> <p>Example: <pre><code>wallet&gt; UnFreezeBalanceV2 TJAVcszse667FmSNCwU2fm6DmfM5D4AyDh 9000000 0\ntxid is dcfea1d92fc928d24c88f7f71a03ae8105d0b5b112d6d48be93d3b9c73bea634\nwallet&gt; GetTransactionById dcfea1d92fc928d24c88f7f71a03ae8105d0b5b112d6d48be93d3b9c73bea634\n{\n    \"ret\":[\n        {\n            \"contractRet\":\"SUCCESS\"\n        }\n    ],\n    \"signature\":[\n        \"f73a278f742c11e8e5ede693ca09b0447a804fcb28ea2bfdfd8545bb05da7be44bd08cfaa92bd4d159178f763fcf753f28d5296bd0c3d4557532cce3b256b9da00\"\n    ],\n    \"txID\":\"dcfea1d92fc928d24c88f7f71a03ae8105d0b5b112d6d48be93d3b9c73bea634\",\n    \"raw_data\":{\n        \"contract\":[\n            {\n                \"parameter\":{\n                    \"value\":{\n                        \"owner_address\":\"4159e3741a68ec3e1ebba80ad809d5ccd31674236e\",\n                        \"unfreeze_balance\":9000000\n                    },\n                    \"type_url\":\"type.googleapis.com/protocol.UnfreezeBalanceV2Contract\"\n                },\n                \"type\":\"UnfreezeBalanceV2Contract\"\n            }\n        ],\n        \"ref_block_bytes\":\"0000\",\n        \"ref_block_hash\":\"19b59068c6058ff4\",\n        \"expiration\":1671119916913,\n        \"timestamp\":1671098316907\n    },\n    \"raw_data_hex\":\"0a020000220819b59068c6058ff440f19e89b4d1305a5a083712560a36747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e556e667265657a6542616c616e63655632436f6e7472616374121c0a154159e3741a68ec3e1ebba80ad809d5ccd31674236e10c0a8a50470ebf0e2a9d130\"\n}\n</code></pre></p> <p>Note: Currently, staking is only allowed using the v2 interface. If you still have unfrozen v1 assets, please use the method below to unfreeze them as soon as possible.</p> <pre><code>&gt; unfreezeBalance [OwnerAddress] ResourceCode(0 BANDWIDTH, 1 CPU) [receiverAddress]\n</code></pre>"},{"location":"clients/wallet-cli/#withdraw-expired-unfrozen-amounts-withdrawexpireunfreeze-owneraddress","title":"Withdraw Expired Unfrozen Amounts - <code>withdrawExpireUnfreeze [OwnerAddress]</code>","text":"<ul> <li><code>OwnerAddress</code> - The account address initiating the transaction. This is optional and defaults to the address of the logged-in account.</li> </ul> <p>Example: <pre><code>wallet&gt; withdrawexpireunfreeze TJAVcszse667FmSNCwU2fm6DmfM5D4AyDh\ntxid is e5763ab8dfb1e7ed076770d55cf3c1ddaf36d75e23ec8330f99df7e98f54a147\nwallet&gt; GetTransactionById e5763ab8dfb1e7ed076770d55cf3c1ddaf36d75e23ec8330f99df7e98f54a147\n{\n    \"ret\":[\n        {\n            \"contractRet\":\"SUCCESS\"\n        }\n    ],\n    \"signature\":[\n        \"f8f02b5aa634b8666862a6d2ed68fcfd90afc616d14062952b0b09f0404d9bca6c4d3dc6dab082784950ff1ded235a07dab0d738c8a202be9451d5ca92b8eece01\"\n    ],\n    \"txID\":\"e5763ab8dfb1e7ed076770d55cf3c1ddaf36d75e23ec8330f99df7e98f54a147\",\n    \"raw_data\":{\n        \"contract\":[\n            {\n                \"parameter\":{\n                    \"value\":{\n                        \"owner_address\":\"4159e3741a68ec3e1ebba80ad809d5ccd31674236e\"\n                    },\n                    \"type_url\":\"type.googleapis.com/protocol.WithdrawExpireUnfreezeContract\"\n                },\n                \"type\":\"WithdrawExpireUnfreezeContract\"\n            }\n        ],\n        \"ref_block_bytes\":\"0000\",\n        \"ref_block_hash\":\"19b59068c6058ff4\",\n        \"expiration\":1671122055318,\n        \"timestamp\":1671100455315\n    },\n    \"raw_data_hex\":\"0a020000220819b59068c6058ff44096e18bb5d1305a5a083812560a3b747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5769746864726177457870697265556e667265657a65436f6e747261637412170a154159e3741a68ec3e1ebba80ad809d5ccd31674236e7093b3e5aad130\"\n}\n</code></pre></p>"},{"location":"clients/wallet-cli/#cancel-all-unfreezing-cancelallunfreezev2-owneraddress","title":"Cancel All Unfreezing - <code>cancelAllUnfreezeV2 [OwnerAddress]</code>","text":"<ul> <li><code>OwnerAddress</code> - The account address initiating the transaction. This is optional and defaults to the address of the logged-in account.</li> </ul> <p>Example: <pre><code>wallet&gt; cancelAllUnfreezeV2 TJAVcszse667FmSNCwU2fm6DmfM5D4AyDh\ntxid is e5763ab8dfb1e7ed076770d55cf3c1ddaf36d75e23ec8330f99df7e98f54a147\nwallet&gt; GetTransactionById e5763ab8dfb1e7ed076770d55cf3c1ddaf36d75e23ec8330f99df7e98f54a147\n{\n    \"ret\":[\n        {\n            \"contractRet\":\"SUCCESS\"\n        }\n    ],\n    \"signature\":[\n        \"f8f02b5aa634b8666862a6d2ed68fcfd90afc616d14062952b0b09f0404d9bca6c4d3dc6dab082784950ff1ded235a07dab0d738c8a202be9451d5ca92b8eece01\"\n    ],\n    \"txID\":\"e5763ab8dfb1e7ed076770d55cf3c1ddaf36d75e23ec8330f99df7e98f54a147\",\n    \"raw_data\":{\n        \"contract\":[\n            {\n                \"parameter\":{\n                    \"value\":{\n                        \"owner_address\":\"4159e3741a68ec3e1ebba80ad809d5ccd31674236e\"\n                    },\n                    \"type_url\":\"type.googleapis.com/protocol.CancelAllUnfreezeV2\"\n                },\n                \"type\":\"CancelAllUnfreezeV2Contract\"\n            }\n        ],\n        \"ref_block_bytes\":\"0000\",\n        \"ref_block_hash\":\"19b59068c6058ff4\",\n        \"expiration\":1671122055318,\n        \"timestamp\":1671100455315\n    },\n    \"raw_data_hex\":\"0a020000220819b59068c6058ff44096e18bb5d1305a5a083812560a3b747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5769746864726177457870697265556e667265657a65436f6e747261637412170a154159e3741a68ec3e1ebba80ad809d5ccd31674236e7093b3e5aad130\"\n}\n</code></pre></p>"},{"location":"clients/wallet-cli/#resources-delegation","title":"Resources Delegation","text":""},{"location":"clients/wallet-cli/#delegating-resources","title":"Delegating Resources","text":"<pre><code>delegateResource [OwnerAddress] balance ResourceCode(0 BANDWIDTH,1 ENERGY), ReceiverAddress [lock]\n</code></pre> <ul> <li><code>OwnerAddress</code> - The account address initiating the transaction\u3002 Optional, defaults to the address of the logged-in account\u3002</li> <li><code>balance</code> - The amount to delegate, in the smallest unit, sun\u3002 The minimum value is 1,000,000 sun\u3002</li> <li><code>ResourceCode</code> - 0 for BANDWIDTH; 1 for ENERGY\u3002</li> <li><code>ReceiverAddress</code> - The account address\u3002</li> <li><code>lock</code> - Defaults to <code>false</code>\u3002 Set to <code>true</code> to lock the delegation for 3 days\u3002</li> <li><code>lock_period</code> - The maximum lock period for delegation\u3002 It can be any time between (0, 86400] blocks\u3002</li> </ul> <p>Example: <pre><code>wallet&gt; DelegateResource TJAVcszse667FmSNCwU2fm6DmfM5D4AyDh 10000000 0 TQ4gjjpAjLNnE67UFbmK5wVt5fzLfyEVs3 true 10000\ntxid is 363ac0b82b6ad3e0d3cad90f7d72b3eceafe36585432a3e013389db36152b6ed\nwallet&gt; GetTransactionById 363ac0b82b6ad3e0d3cad90f7d72b3eceafe36585432a3e013389db36152b6ed\n{\n\u00a0 \u00a0 \"ret\":[\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"contractRet\":\"SUCCESS\"\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 ],\n\u00a0 \u00a0 \"signature\":[\n\u00a0 \u00a0 \u00a0 \u00a0 \"1f57fd78456136faadc5091b47f5fd27a8e1181621e49129df6a4062499429fb48ee72e5f9a9ff5bfb7f2575f01f4076f7d4b89ca382d36af46a6fa4bc749f4301\"\n\u00a0 \u00a0 ],\n\u00a0 \u00a0 \"txID\":\"363ac0b82b6ad3e0d3cad90f7d72b3eceafe36585432a3e013389db36152b6ed\",\n\u00a0 \u00a0 \"raw_data\":{\n\u00a0 \u00a0 \u00a0 \u00a0 \"contract\":[\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"parameter\":{\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"value\":{\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"balance\":10000000,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"receiver_address\":\"419a9afe56e155ef0ff3f680d00ecf19deff60bdca\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"lock\":true,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"owner_address\":\"4159e3741a68ec3e1ebba80ad809d5ccd31674236e\"\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"type_url\":\"type.googleapis.com/protocol.DelegateResourceContract\"\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"type\":\"DelegateResourceContract\"\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 ],\n\u00a0 \u00a0 \u00a0 \u00a0 \"ref_block_bytes\":\"0000\",\n\u00a0 \u00a0 \u00a0 \u00a0 \"ref_block_hash\":\"19b59068c6058ff4\",\n\u00a0 \u00a0 \u00a0 \u00a0 \"expiration\":1671120059226,\n\u00a0 \u00a0 \u00a0 \u00a0 \"timestamp\":1671098459216\n\u00a0 \u00a0 },\n\u00a0 \u00a0 \"raw_data_hex\":\"0a020000220819b59068c6058ff440daf691b4d1305a720839126e0a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e44656c65676174655265736f75726365436f6e747261637412350a154159e3741a68ec3e1ebba80ad809d5ccd31674236e1880ade2042215419a9afe56e155ef0ff3f680d00ecf19deff60bdca280170d0c8eba9d130\"\n}\n</code></pre></p>"},{"location":"clients/wallet-cli/#undelegating-resources","title":"Undelegating Resources","text":"<pre><code>unDelegateResource [OwnerAddress] balance ResourceCode(0 BANDWIDTH,1 ENERGY), ReceiverAddress\n</code></pre> <ul> <li><code>OwnerAddress</code> - The account address initiating the transaction\u3002 Optional, defaults to the address of the logged-in account\u3002</li> <li><code>balance</code> - The amount to undelegate, in the smallest unit, sun\u3002</li> <li><code>ResourceCode</code> - 0 for BANDWIDTH; 1 for ENERGY\u3002</li> <li><code>ReceiverAddress</code> - The account address\u3002</li> </ul> <p>Example: <pre><code>wallet&gt; UnDelegateResource TJAVcszse667FmSNCwU2fm6DmfM5D4AyDh 1000000 0 TQ4gjjpAjLNnE67UFbmK5wVt5fzLfyEVs3\ntxid is feb334794cf361fd351728026ccf7319e6ae90eba622b9eb53c626cdcae4965c\nwallet&gt; GetTransactionById feb334794cf361fd351728026ccf7319e6ae90eba622b9eb53c626cdcae4965c\n{\n\u00a0 \u00a0 \"ret\":[\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"contractRet\":\"SUCCESS\"\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 ],\n\u00a0 \u00a0 \"signature\":[\n\u00a0 \u00a0 \u00a0 \u00a0 \"85a41a4e44780ffbe0841a44fd71cf621f129d98e84984cfca68e03364f781aa7f9d44177af0b40d82da052feec9f47a399ed6e51be66c5db07cb13477dcde8c01\"\n\u00a0 \u00a0 ],\n\u00a0 \u00a0 \"txID\":\"feb334794cf361fd351728026ccf7319e6ae90eba622b9eb53c626cdcae4965c\",\n\u00a0 \u00a0 \"raw_data\":{\n\u00a0 \u00a0 \u00a0 \u00a0 \"contract\":[\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"parameter\":{\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"value\":{\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"balance\":1000000,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"receiver_address\":\"419a9afe56e155ef0ff3f680d00ecf19deff60bdca\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"owner_address\":\"4159e3741a68ec3e1ebba80ad809d5ccd31674236e\"\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"type_url\":\"type.googleapis.com/protocol.UnDelegateResourceContract\"\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"type\":\"UnDelegateResourceContract\"\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 ],\n\u00a0 \u00a0 \u00a0 \u00a0 \"ref_block_bytes\":\"0000\",\n\u00a0 \u00a0 \u00a0 \u00a0 \"ref_block_hash\":\"19b59068c6058ff4\",\n\u00a0 \u00a0 \u00a0 \u00a0 \"expiration\":1671120342283,\n\u00a0 \u00a0 \u00a0 \u00a0 \"timestamp\":1671098742280\n\u00a0 \u00a0 },\n\u00a0 \u00a0 \"raw_data_hex\":\"0a020000220819b59068c6058ff4408b9aa3b4d1305a71083a126d0a37747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e556e44656c65676174655265736f75726365436f6e747261637412320a154159e3741a68ec3e1ebba80ad809d5ccd31674236e18c0843d2215419a9afe56e155ef0ff3f680d00ecf19deff60bdca7088ecfca9d130\"\n}\n</code></pre></p>"},{"location":"clients/wallet-cli/#getting-account-bandwidth-getaccountnet","title":"Getting Account Bandwidth - <code>GetAccountNet</code>","text":"<p>Gets the usage of bandwidth\u3002</p>"},{"location":"clients/wallet-cli/#getting-account-resources-getaccountresource","title":"Getting Account Resources - <code>GetAccountResource</code>","text":"<p>Gets the usage of bandwidth and energy\u3002</p>"},{"location":"clients/wallet-cli/#getting-delegated-resource-information","title":"Getting Delegated Resource Information","text":"<p><code>getDelegatedResource fromAddress toAddress</code></p> <p>Gets the delegated resource information from <code>fromAddress</code> to <code>toAddress</code>\u3002</p> <p><code>getDelegatedResourceAccountIndex address</code></p> <p>Gets the resource information that <code>address</code> has delegated to other accounts\u3002</p>"},{"location":"clients/wallet-cli/#getting-delegated-resource-information-using-v2-api","title":"Getting Delegated Resource Information using v2 API","text":"<p><code>getDelegatedResourceV2 fromAddress toAddress</code></p> <p>Gets the delegated resource information from <code>fromAddress</code> to <code>toAddress</code> using the v2 API\u3002</p> <ul> <li><code>fromAddress</code> - The account address initiating the delegation\u3002</li> <li><code>toAddress</code> - The account address receiving the delegation\u3002</li> </ul> <p>Example: <pre><code>wallet&gt; getDelegatedResourceV2 TJAVcszse667FmSNCwU2fm6DmfM5D4AyDh TQ4gjjpAjLNnE67UFbmK5wVt5fzLfyEVs3\n{\n    \"delegatedResource\": [\n        {\n            \"from\": \"TJAVcszse667FmSNCwU2fm6DmfM5D4AyDh\",\n            \"to\": \"TQ4gjjpAjLNnE67UFbmK5wVt5fzLfyEVs3\",\n            \"frozen_balance_for_bandwidth\": 10000000\n        }\n    ]\n}\n</code></pre></p> <p><code>getDelegatedResourceAccountIndexV2 address</code></p> <p>Gets the delegated resource information that the <code>address</code> has delegated to other accounts using the v2 API\u3002</p> <ul> <li><code>address</code> - The account address that initiated or received the delegation\u3002</li> </ul> <p>Example: <pre><code>wallet&gt; getDelegatedResourceAccountIndexV2 TJAVcszse667FmSNCwU2fm6DmfM5D4AyDh\n{\n    \"account\": \"TJAVcszse667FmSNCwU2fm6DmfM5D4AyDh\",\n    \"toAccounts\": [\n        \"TQ4gjjpAjLNnE67UFbmK5wVt5fzLfyEVs3\"\n    ]\n}\n</code></pre></p> <p><code>getcandelegatedmaxsize ownerAddress type</code></p> <p>Gets the maximum amount of resources <code>ownerAddress</code> can delegate (using <code>delegateResource</code>)\u3002</p> <ul> <li><code>ownerAddress</code> - The account address initiating the delegation\u3002 Optional, defaults to the address of the logged-in account\u3002</li> <li><code>type</code> - 0 for Bandwidth, 1 for Energy\u3002</li> </ul> <p>Example: <pre><code>wallet&gt; getCanDelegatedMaxSize TJAVcszse667FmSNCwU2fm6DmfM5D4AyDh 0\n{\n    \"max_size\": 999999978708334\n}\n</code></pre></p> <p><code>getavailableunfreezecount ownerAddress</code></p> <p>Gets the number of available unfreeze attempts for <code>ownerAddress</code> using <code>unfreezeBalanceV2</code>\u3002</p> <ul> <li><code>ownerAddress</code> - The account address initiating the transaction. Optional, defaults to the address of the logged-in account\u3002</li> </ul> <p>Example: <pre><code>wallet&gt; getAvailableUnfreezeCount TJAVcszse667FmSNCwU2fm6DmfM5D4AyDh\n{\n    \"count\": 31\n}\n</code></pre></p> <p><code>getcanwithdrawunfreezeamount ownerAddress timestamp</code></p> <p>Gets the unfreeze amount <code>ownerAddress</code> can withdraw using <code>withdrawexpireunfreeze</code>.</p> <ul> <li><code>ownerAddress</code> - The account address initiating the transaction. Optional, defaults to the address of the logged-in account.</li> <li><code>timestamp</code> - Gets the withdrawable unfreeze amount before this timestamp.</li> </ul> <p>Example: <pre><code>wallet&gt; getCanWithdrawUnfreezeAmount TJAVcszse667FmSNCwU2fm6DmfM5D4AyDh 1671100335000\n{\n    \"amount\": 9000000\n}\n</code></pre></p> <p></p>"},{"location":"clients/wallet-cli/#transactions","title":"Transactions","text":""},{"location":"clients/wallet-cli/#signing-a-transaction","title":"Signing a Transaction","text":"<pre><code>&gt; SendCoin TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW 10000000000000000\n</code></pre> <p>The following is an example of a transaction using Account Permission Management. For details on the authorization of the signing accounts, please refer to the example in the Modifying Account Permissions section.</p> <pre><code>wallet&gt; sendcoin TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE 10\n{\n    \"raw_data\":{\n        \"contract\":[\n    ...\n    \"raw_data_hex\":\"0a029ca12208432ed1fe1357ff7f40c0c484f19a305a65080112610a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412300a1541babecec4d9f58f0df77f0728b9c53abb1f21d684121541e8bd653015895947cec33d1670a88cf67ab277b9180a708a8481f19a30\"\n}\nbefore sign transaction hex string is 0a83010a029ca12208432ed1fe1357ff7f40c0c484f19a305a65080112610a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412300a1541babecec4d9f58f0df77f0728b9c53abb1f21d684121541e8bd653015895947cec33d1670a88cf67ab277b9180a708a8481f19a30\nPlease confirm and input your permission id, if input y or Y means default 0, other non-numeric characters will cancel transaction.\n2\nPlease choose your key for sign.\nThe 1th keystore file name is UTC--2022-06-28T06-52-56.928000000Z--TB9qhqbev6DpX8mxdf3zDdtSQ6GC6Vb6Ej.json\nThe 2th keystore file name is .DS_Store\nThe 3th keystore file name is UTC--2022-04-06T09-43-20.710000000Z--TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8.json\nThe 4th keystore file name is UTC--2022-04-07T09-03-38.307000000Z--TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE.json\nPlease choose between 1 and 4\n1\nPlease input your password.\npassword: \nCurrent signWeight is:\n{\n    \"result\":{\n        \"code\":\"NOT_ENOUGH_PERMISSION\"\n    },\n    \"approved_list\":[\n        \"TB9qhqbev6DpX8mxdf3zDdtSQ6GC6Vb6Ej\"\n    ],\n    \"permission\":{\n        \"operations\":\"7fff1fc0033e0000000000000000000000000000000000000000000000000000\",\n        \"keys\":[\n            {\n                \"address\":\"TB9qhqbev6DpX8mxdf3zDdtSQ6GC6Vb6Ej\",\n                \"weight\":1\n            },\n            {\n                \"address\":\"TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE\",\n                \"weight\":1\n            }\n        ],\n        \"threshold\":2,\n        \"id\":2,\n        \"type\":\"Active\",\n        \"permission_name\":\"active12323\"\n    },\n    \"current_weight\":1,\n    \"transaction\":{\n        \"raw_data\":{\n            \"contract\":[\n                {\n                    \"parameter\":{\n                        \"value\":{\n                            \"owner_address\":\"TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8\",\n                            \"to_address\":\"TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE\",\n                            \"amount\":10\n                        },\n                        \"type_url\":\"type.googleapis.com/protocol.TransferContract\"\n                    },\n                    \"type\":\"TransferContract\"\n                }\n            ],\n            \"ref_block_bytes\":\"9ca1\",\n            \"ref_block_hash\":\"432ed1fe1357ff7f\",\n            \"expiration\":1656403217000,\n            \"timestamp\":1656403157297\n        },\n        \"signature\":[\n            \"a32b906a5b6f00f023d5a4208a0d2445c75463f822a16d56f6c0f836f3325e6488d57d76a08605330e2f3d532a849f2b389ed94819d9b4b0051e5052994f0e0d01\"\n        ]\n    },\n    \"permission_id\":2\n}\n</code></pre>"},{"location":"clients/wallet-cli/#broadcasting-a-transaction","title":"Broadcasting a Transaction","text":"<p>BroadcastTransaction</p> <p>Broadcasts a transaction, where the transaction is in hex string format\u3002</p>"},{"location":"clients/wallet-cli/#getting-transaction-signature-weight-gettransactionsignweight","title":"Getting Transaction Signature Weight - <code>getTransactionSignWeight</code>","text":"<p>0a8c010a020318220860e195d3609c86614096eadec79d2d5a6e080112680a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412370a1541a7d8a35b260395c14aa456297662092ba3b76fc01215415a523b449890854c8fc460ab602df9f31fe4293f18808084fea6dee11128027094bcb8bd9d2d1241c18ca91f1533ecdd83041eb0005683c4a39a2310ec60456b1f0075b4517443cf4f601a69788f001d4bc03872e892a5e25c618e38e7b81b8b1e69d07823625c2b0112413d61eb0f8868990cfa138b19878e607af957c37b51961d8be16168d7796675384e24043d121d01569895fcc7deb37648c59f538a8909115e64da167ff659c26101</p> <p>The information displayed is as follows:</p> <pre><code>{\n    \"result\":{\n        \"code\":\"PERMISSION_ERROR\",\n        \"message\":\"Signature count is 2 more than key counts of permission : 1\"\n    },\n    \"permission\":{\n        \"operations\":\"7fff1fc0033e0100000000000000000000000000000000000000000000000000\",\n        \"keys\":[\n            {\n                \"address\":\"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\",\n                \"weight\":1\n            }\n        ],\n        \"threshold\":1,\n        \"id\":2,\n        \"type\":\"Active\",\n        \"permission_name\":\"active\"\n    },\n    \"transaction\":{\n        \"result\":{\n            \"result\":true\n        },\n        \"txid\":\"7da63b6a1f008d03ef86fa871b24a56a501a8bbf15effd7aca635de6c738df4b\",\n        \"transaction\":{\n            \"signature\":[\n                \"c18ca91f1533ecdd83041eb0005683c4a39a2310ec60456b1f0075b4517443cf4f601a69788f001d4bc03872e892a5e25c618e38e7b81b8b1e69d07823625c2b01\",\n                \"3d61eb0f8868990cfa138b19878e607af957c37b51961d8be16168d7796675384e24043d121d01569895fcc7deb37648c59f538a8909115e64da167ff659c26101\"\n            ],\n            \"txID\":\"7da63b6a1f008d03ef86fa871b24a56a501a8bbf15effd7aca635de6c738df4b\",\n            \"raw_data\":{\n                \"contract\":[\n                    {\n                        \"parameter\":{\n                            \"value\":{\n                                \"amount\":10000000000000000,\n                                \"owner_address\":\"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\",\n                                \"to_address\":\"TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\"\n                            },\n                            \"type_url\":\"type.googleapis.com/protocol.TransferContract\"\n                        },\n                        \"type\":\"TransferContract\",\n                        \"Permission_id\":2\n                    }\n                ],\n                \"ref_block_bytes\":\"0318\",\n                \"ref_block_hash\":\"60e195d3609c8661\",\n                \"expiration\":1554123306262,\n                \"timestamp\":1554101706260\n            },\n            \"raw_data_hex\":\"0a020318220860e195d3609c86614096eadec79d2d5a6e080112680a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412370a1541a7d8a35b260395c14aa456297662092ba3b76fc01215415a523b449890854c8fc460ab602df9f31fe4293f18808084fea6dee11128027094bcb8bd9d2d\"\n        }\n    }\n}\n</code></pre>"},{"location":"clients/wallet-cli/#get-signature-information-from-a-transaction-gettransactionapprovedlist","title":"Get Signature Information from a Transaction - <code>getTransactionApprovedList</code>","text":"<p>0a8c010a020318220860e195d3609c86614096eadec79d2d5a6e080112680a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412370a1541a7d8a35b260395c14aa456297662092ba3b76fc01215415a523b449890854c8fc460ab602df9f31fe4293f18808084fea6dee11128027094bcb8bd9d2d1241c18ca91f1533ecdd83041eb0005683c4a39a2310ec60456b1f0075b4517443cf4f601a69788f001d4bc03872e892a5e25c618e38e7b81b8b1e69d07823625c2b0112413d61eb0f8868990cfa138b19878e607af957c37b51961d8be16168d7796675384e24043d121d01569895fcc7deb37648c59f538a8909115e64da167ff659c26101</p> <pre><code>{\n    \"result\": {},\n    \"approved_list\": [\n        \"TKwhcDup8L2PH5r6hxp5CQvQzZqJLmKvZP\",\n        \"TNhXo1GbRNCuorvYu5JFWN3m2NYr9QQpVR\"\n    ],\n    \"transaction\": {\n        \"result\": {\n            \"result\": true\n        },\n        \"txid\": \"7da63b6a1f008d03ef86fa871b24a56a501a8bbf15effd7aca635de6c738df4b\",\n        \"transaction\": {\n            \"signature\": [\n                \"c18ca91f1533ecdd83041eb0005683c4a39a2310ec60456b1f0075b4517443cf4f601a69788f001d4bc03872e892a5e25c618e38e7b81b8b1e69d07823625c2b01\",\n                \"3d61eb0f8868990cfa138b19878e607af957c37b51961d8be16168d7796675384e24043d121d01569895fcc7deb37648c59f538a8909115e64da167ff659c26101\"\n            ],\n            \"txID\": \"7da63b6a1f008d03ef86fa871b24a56a501a8bbf15effd7aca635de6c738df4b\",\n            \"raw_data\": {\n                \"contract\": [\n                    {\n                        \"parameter\": {\n                            \"value\": {\n                                \"amount\": 10000000000000000,\n                                \"owner_address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\",\n                                \"to_address\": \"TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\"\n                            },\n                            \"type_url\": \"type.googleapis.com/protocol.TransferContract\"\n                        },\n                        \"type\": \"TransferContract\",\n                        \"Permission_id\": 2\n                    }\n                ],\n                \"ref_block_bytes\": \"0318\",\n                \"ref_block_hash\": \"60e195d3609c8661\",\n                \"expiration\": 1554123306262,\n                \"timestamp\": 1554101706260\n            },\n            \"raw_data_hex\": \"0a020318220860e195d3609c86614096eadec79d2d5a6e080112680a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412370a1541a7d8a35b260395c14aa456297662092ba3b76fc01215415a523b449890854c8fc460ab602df9f31fe4293f18808084fea6dee11128027094bcb8bd9d2d\"\n        }\n    }\n}\n</code></pre> <p></p>"},{"location":"clients/wallet-cli/#querying-on-chain-data","title":"Querying On-chain Data","text":""},{"location":"clients/wallet-cli/#view-transaction-history-viewtransactionhistory","title":"View Transaction History - <code>ViewTransactionHistory</code>","text":"<p>View transaction history. You can configure the maximum number of records to keep in <code>config.conf</code> with <code>maxRecords</code>, not including buffer records.</p> <p>Example: <pre><code>wallet&gt; ViewTransactionHistory\n====================================\n        TRANSACTION VIEWER\n====================================\n\nMAIN MENU:\n1. View all transactions\n2. Filter by time range\n3. Help\n4. Exit\nSelect option: 1\n</code></pre></p>"},{"location":"clients/wallet-cli/#how-to-get-transaction-information","title":"How to Get Transaction Information","text":"<p><code>GetTransactionById</code></p> <p>Get transaction information by transaction ID.</p> <p><code>GetTransactionCountByBlockNum</code></p> <p>Get the number of transactions in a block by block height.</p> <p><code>GetTransactionInfoById</code></p> <p>Get transaction-info by transaction ID, commonly used to check the result of a Smart Contract trigger.</p> <p><code>GetTransactionInfoByBlockNum</code></p> <p>Get the list of transaction information in a block by block height.</p>"},{"location":"clients/wallet-cli/#get-chain-parameters-getchainparameters","title":"Get Chain Parameters - <code>GetChainParameters</code>","text":"<p>Display all parameters that can be set by the blockchain committee.</p>"},{"location":"clients/wallet-cli/#get-resource-prices-and-memo-fee-getbandwidthprices","title":"Get Resource Prices and Memo Fee - <code>getbandwidthprices</code>","text":"<p>Get the historical unit price of Bandwidth.</p> <p>Example: <pre><code>wallet&gt; getBandwidthPrices\n{\n    \"prices\": \"0:10,1606537680000:40,1614238080000:140,1626581880000:1000,1626925680000:140,1627731480000:1000\"\n}\n</code></pre></p> <p><code>getenergyprices</code></p> <p>Get the historical unit price of Energy.</p> <p>Example: <pre><code>wallet&gt; getEnergyPrices\n{\n    \"prices\": \"0:100,1575871200000:10,1606537680000:40,1614238080000:140,1635739080000:280,1681895880000:420\"\n}\n</code></pre></p> <p><code>getmemofee</code></p> <p>Get the memo fee.</p> <p>Example: <pre><code>wallet&gt; getMemoFee\n{\n    \"prices\": \"0:0,1675492680000:1000000\"\n}\n</code></pre></p>"},{"location":"clients/wallet-cli/#how-to-get-block-information","title":"How to Get Block Information","text":"<p><code>GetBlock</code></p> <p>Get a block by block number; if no parameter is passed, the latest block is retrieved.</p> <p><code>GetBlockById</code></p> <p>Get a block by block ID.</p> <p><code>GetBlockByIdOrNum</code></p> <p>Get a block by ID or block height. If no parameter is passed, the header block is retrieved.</p> <p><code>GetBlockByLatestNum n</code></p> <p>Get the latest <code>n</code> blocks, where 0 &lt; n &lt; 100.</p> <p><code>GetBlockByLimitNext startBlockId endBlockId</code></p> <p>Get blocks within the range [startBlockId, endBlockId).</p>"},{"location":"clients/wallet-cli/#other-on-chain-data-commands","title":"Other On-chain Data Commands","text":"<p><code>GetNextMaintenanceTime</code></p> <p>Get the start time of the next maintenance period.</p> <p><code>ListNodes</code></p> <p>Get information about other peers.</p> <p><code>ListWitnesses</code></p> <p>Get information about all Super Representative nodes.</p>"},{"location":"clients/wallet-cli/#current-network-currentnetwork","title":"Current Network - <code>CurrentNetwork</code>","text":"<p>View the current network.</p> <p>Example: <pre><code>wallet&gt; currentnetwork\ncurrentNetwork: NILE\n</code></pre> <pre><code>wallet&gt; currentnetwork\ncurrent network: CUSTOM\nfullNode: EMPTY, solidityNode: localhost:50052\n</code></pre></p> <p></p>"},{"location":"clients/wallet-cli/#smart-contract","title":"Smart Contract","text":""},{"location":"clients/wallet-cli/#deploying-a-smart-contract","title":"Deploying a Smart Contract","text":"<pre><code>DeployContract [ownerAddress] contractName ABI byteCode constructor params isHex fee_limit consume_user_resource_percent origin_energy_limit value token_value token_id(e.g: TRXTOKEN, use # if don't provided) &lt;library:address,library:address,...&gt; &lt;lib_compiler_version(e.g:v5)&gt; library:address,...&gt;\n</code></pre> <ul> <li><code>OwnerAddress</code> - The account address initiating the transaction. Optional, defaults to the address of the logged-in account.</li> <li><code>contractName</code> - The Smart Contract name.</li> <li><code>ABI</code> - The compiled ABI code.</li> <li><code>byteCode</code> - The compiled bytecode.</li> <li><code>constructor</code>, <code>params</code>, <code>isHex</code> - Defines the bytecode format and how it is parsed from parameters</li> <li><code>fee_limit</code> - Maximum TRX that can be consumed by the transaction</li> <li><code>consume_user_resource_percent</code> - Percentage of the user's resources to be consumed, in the range [0, 100]</li> <li><code>origin_energy_limit</code> - Maximum Energy a developer can consume for one contract trigger</li> <li><code>value</code> - Amount of TRX to transfer to the contract account</li> <li><code>token_value</code> - Amount of the TRC-10 token</li> <li><code>token_id</code> - ID of the TRC-10 token</li> </ul> <p>Example:</p> <pre><code>&gt; deployContract normalcontract544 [{\"constant\":false,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\": \"findArgsByIndexTest\",\"outputs\":[{\"name\":\"z\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n608060405234801561001057600080fd5b50610134806100206000396000f3006080604052600436106100405763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663329000b58114610045575b600080fd5b34801561005157600080fd5b5061005d60043561006f565b60408051918252519081900360200190f35b604080516003808252608082019092526000916060919060208201838038833901905050905060018160008151811015156100a657fe5b602090810290910101528051600290829060019081106100c257fe5b602090810290910101528051600390829060029081106100de57fe5b6020908102909101015280518190849081106100f657fe5b906020019060200201519150509190505600a165627a7a72305820b24fc247fdaf3644b3c4c94fcee380aa610ed83415061ff9e65d7fa94a5a50a00029 # # false 1000000000 75 50000 0 0 #\n</code></pre> <p>Use <code>getTransactionInfoById</code> to get the contract execution result:</p> <pre><code>&gt; getTransactionInfoById 4978dc64ff746ca208e51780cce93237ee444f598b24d5e9ce0da885fb3a3eb9\n{\n    \"id\": \"8c1f57a5e53b15bb0a0a0a0d4740eda9c31fbdb6a63bc429ec2113a92e8ff361\",\n    \"fee\": 6170500,\n    \"blockNumber\": 1867,\n    \"blockTimeStamp\": 1567499757000,\n    \"contractResult\": [\n        \"6080604052600436106100405763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663329000b58114610045575b600080fd5b34801561005157600080fd5b5061005d60043561006f565b60408051918252519081900360200190f35b604080516003808252608082019092526000916060919060208201838038833901905050905060018160008151811015156100a657fe5b602090810290910101528051600290829060019081106100c257fe5b602090810290910101528051600390829060029081106100de57fe5b6020908102909101015280518190849081106100f657fe5b906020019060200201519150509190505600a165627a7a72305820b24fc247fdaf3644b3c4c94fcee380aa610ed83415061ff9e65d7fa94a5a50a00029\"\n    ],\n    \"contract_address\": \"TJMKWmC6mwF1QVax8Sy2AcgT6MqaXmHEds\",\n    \"receipt\": {\n        \"energy_fee\": 6170500,\n        \"energy_usage_total\": 61705,\n        \"net_usage\": 704,\n        \"result\": \"SUCCESS\"\n    }\n}\n</code></pre>"},{"location":"clients/wallet-cli/#trigger-a-smart-contract-triggercontract-owneraddress-contractaddress-method-args-ishex-fee_limit-value-token_value-token_id","title":"Trigger a Smart Contract -  <code>TriggerContract [ownerAddress] contractAddress method args isHex fee_limit value token_value token_id</code>","text":"<ul> <li><code>OwnerAddress</code> - The account address initiating the transaction; optional, defaults to the logged-in account's address.</li> <li><code>contractAddress</code> - The smart contract address.</li> <li><code>method</code> - The function name and its parameters; refer to the example for formatting.</li> <li><code>args</code> - The parameter values. To call the <code>receive</code> function, pass '#'.</li> <li><code>isHex</code> - Specifies if <code>method</code> and <code>args</code> are provided as hexadecimal strings.</li> <li><code>fee_limit</code> - The maximum amount of TRX that can be consumed by the transaction.</li> <li><code>token_value</code> - The amount of the TRC-10 token.</li> <li><code>token_id</code> - The ID of the TRC-10 token. Use '#' if not applicable.</li> </ul> <p>Example:</p> <pre><code>&gt; triggerContract TGdtALTPZ1FWQcc5MW7aK3o1ASaookkJxG findArgsByIndexTest(uint256) 0 false\n1000000000 0 0 #\n# Use `getTransactionInfoById` to get the contract execution result\n&gt; getTransactionInfoById 7d9c4e765ea53cf6749d8a89ac07d577141b93f83adc4015f0b266d8f5c2dec4\n{\n    \"id\": \"de289f255aa2cdda95fbd430caf8fde3f9c989c544c4917cf1285a088115d0e8\",\n    \"fee\": 8500,\n    \"blockNumber\": 2076,\n    \"blockTimeStamp\": 1567500396000,\n    \"contractResult\": [\n        \"\"\n    ],\n    \"contract_address\": \"TJMKWmC6mwF1QVax8Sy2AcgT6MqaXmHEds\",\n    \"receipt\": {\n        \"energy_fee\": 8500,\n        \"energy_usage_total\": 85,\n        \"net_usage\": 314,\n        \"result\": \"REVERT\"\n    },\n    \"result\": \"FAILED\",\n    \"resMessage\": \"REVERT opcode executed\"\n}\n</code></pre>"},{"location":"clients/wallet-cli/#trigger-a-constant-contract","title":"Trigger a Constant Contract","text":"<pre><code>TriggerConstantContract [ownerAddress] contractAddress method args isHex fee_limit value token_value token_id\n</code></pre> <ul> <li><code>OwnerAddress</code> - The account address initiating the transaction; optional, defaults to the logged-in account's address.</li> <li><code>contractAddress</code> - The smart contract address.</li> <li><code>method</code> - The function name and its parameters; refer to the example for formatting.</li> <li><code>args</code> - The parameter values. To call the <code>receive</code> function, pass '#'.</li> <li><code>isHex</code> - Specifies if <code>method</code> and <code>args</code> are provided as hexadecimal strings.</li> <li><code>fee_limit</code> - The maximum amount of TRX that can be consumed by the transaction.</li> <li><code>token_value</code> - The amount of the TRC-10 token.</li> <li><code>token_id</code> - The ID of the TRC-10 token. Use '#' if not applicable.</li> </ul> <p>Example: <pre><code>&gt; TriggerConstantContract TSNEe5Tf4rnc9zPMNXfaTF5fZfHDDH8oyW TG3XXyExBkPp9nzdajDZsozEu4BkaSJozs \"balanceOf(address)\" 000000000000000000000000a614f803b6fd780986a42c78ec9c7f77e6ded13c true\n</code></pre></p>"},{"location":"clients/wallet-cli/#predict-contract-address-create2-address-code-salt","title":"Predict Contract Address - <code>Create2 &lt;address&gt; &lt;code&gt; &lt;salt&gt;</code>","text":"<p>Predicts the address of a contract before it is deployed using <code>CREATE2</code>.</p> <ul> <li><code>address</code> - The creator's address</li> <li><code>code</code> - The bytecode of the new contract</li> <li><code>salt</code> - A user-defined salt value.</li> </ul> <p>Example: <pre><code>&gt; Create2 TEDapYSVvAZ3aYH7w8N9tMEEFKaNKUD5Bp 5f805460ff1916600190811790915560649055606319600255 2132\n</code></pre></p>"},{"location":"clients/wallet-cli/#estimate-energy","title":"Estimate Energy","text":"<pre><code>EstimateEnergy &lt;owner_address&gt; &lt;contract_address&gt; &lt;method&gt; &lt;args&gt; &lt;isHex&gt; [value] [token_value] [token_id]\n</code></pre> <p>Estimates the Energy required for a smart contract transaction to execute successfully. This simulates the execution without creating an on-chain transaction. Note: <code>#</code> can be used for <code>&lt;owner_address&gt;</code> to refer to the logged-in account.</p> <p>Example: <pre><code>&gt; EstimateEnergy TSNEe5Tf4rnc9zPMNXfaTF5fZfHDDH8oyW TG3XXyExBkPp9nzdajDZsozEu4BkaSJozs \"balanceOf(address)\" 000000000000000000000000a614f803b6fd780986a42c78ec9c7f77e6ded13c true\n</code></pre></p>"},{"location":"clients/wallet-cli/#clear-contract-abi-clearcontractabi-owneraddress-contractaddress","title":"Clear Contract ABI - <code>ClearContractABI [ownerAddress] &lt;contractAddress&gt;</code>","text":"<ul> <li><code>ownerAddress</code> (Optional) - The account address initiating the transaction. Defaults to the logged-in account's address.</li> <li><code>contractAddress</code> - The address of the smart contract.</li> </ul> <p>Example: <pre><code>&gt; ClearContractABI TSNEe5Tf4rnc9zPMNXfaTF5fZfHDDH8oyW TG3XXyExBkPp9nzdajDZsozEu4BkaSJozs\n</code></pre></p>"},{"location":"clients/wallet-cli/#get-contract-getcontract-contractaddress","title":"Get Contract - <code>GetContract &lt;contractAddress&gt;</code>","text":"<ul> <li><code>contractAddress</code> - The address of the smart contract to query.</li> </ul> <p>Example: <pre><code>&gt; GetContract TGdtALTPZ1FWQcc5MW7aK3o1ASaookkJxG\n{\n    \"origin_address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\",\n    \"contract_address\": \"TJMKWmC6mwF1QVax8Sy2AcgT6MqaXmHEds\",\n    \"abi\": {\n        \"entrys\": [\n            {\n                \"name\": \"findArgsByIndexTest\",\n                \"inputs\": [\n                    {\n                        \"name\": \"i\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"name\": \"z\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                \"type\": \"Function\",\n                \"stateMutability\": \"Nonpayable\"\n            }\n        ]\n    },\n    \"bytecode\": \"608060405234801561001057600080fd5b50610134806100206000396000f3006080604052600436106100405763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663329000b58114610045575b600080fd5b34801561005157600080fd5b5061005d60043561006f565b60408051918252519081900360200190f35b604080516003808252608082019092526000916060919060208201838038833901905050905060018160008151811015156100a657fe5b602090810290910101528051600290829060019081106100c257fe5b602090810290910101528051600390829060029081106100de57fe5b6020908102909101015280518190849081106100f657fe5b906020019060200201519150509190505600a165627a7a72305820b24fc247fdaf3644b3c4c94fcee380aa610ed83415061ff9e65d7fa94a5a50a00029\",\n    \"consume_user_resource_percent\": 75,\n    \"name\": \"normalcontract544\",\n    \"origin_energy_limit\": 50000,\n    \"code_hash\": \"23423cece3b4866263c15357b358e5ac261c218693b862bcdb90fa792d5714e6\"\n}\n</code></pre></p>"},{"location":"clients/wallet-cli/#get-contract-info-getcontractinfo-contractaddress","title":"Get Contract Info - <code>GetContractInfo &lt;contractAddress&gt;</code>","text":"<ul> <li><code>contractAddress</code> - The address of the smart contract to query.</li> </ul> <p>Example: <pre><code>&gt; GetContractInfo TGdtALTPZ1FWQcc5MW7aK3o1ASaookkJxG\n</code></pre></p>"},{"location":"clients/wallet-cli/#update-contract-parameters","title":"Update Contract Parameters","text":"<pre><code># Updates the origin_energy_limit parameter\n&gt; UpdateEnergyLimit [ownerAddress] &lt;contract_address&gt; &lt;energy_limit&gt;\n\n# Updates the consume_user_resource_percent parameter\n&gt; UpdateSetting [ownerAddress] &lt;contract_address&gt; &lt;consume_user_resource_percent&gt;\n</code></pre>"},{"location":"clients/wallet-cli/#trc-10-assets","title":"TRC-10 Assets","text":""},{"location":"clients/wallet-cli/#how-to-issue-a-trc-10-token","title":"How to Issue a TRC-10 Token","text":"<p>Each account can only issue one TRC-10 token.</p>"},{"location":"clients/wallet-cli/#issue-a-trc-10-token","title":"Issue a TRC-10 Token","text":"<pre><code>AssetIssue [OwnerAddress] AssetName AbbrName TotalSupply TrxNum AssetNum Precision StartDate EndDate Description Url FreeNetLimitPerAccount PublicFreeNetLimit FrozenAmount0 FrozenDays0 [...] FrozenAmountN FrozenDaysN\n</code></pre> <ul> <li><code>OwnerAddress</code> (Optional) - The account address initiating the transaction. Default: The address of the logged-in account.</li> <li><code>AssetName</code> - The name of the TRC-10 token being issued.</li> <li><code>AbbrName</code> - The abbreviation of the TRC-10 token.</li> <li><code>TotalSupply</code> - Total issuance amount. <p><code>TotalSupply</code> = Issuer's account balance + all frozen token amounts. Issuer's account balance: At the time of issuance. All frozen token amounts: Before the asset transfer and issuance.</p> </li> <li><code>TrxNum</code>, <code>AssetNum</code> - These two parameters determine the exchange rate at the time of token issuance. <p>Exchange Rate = <code>TrxNum</code> / <code>AssetNum</code> <code>AssetNum</code>: The unit of the issued token, calculated in its base unit. <code>TrxNum</code>: The unit is sun (0.000001 TRX).</p> </li> <li><code>Precision</code> - The number of decimal places.</li> <li><code>FreeNetLimitPerAccount</code> - The maximum amount of Bandwidth an account is allowed to use. The token issuer can freeze TRX to obtain Bandwidth (limited to TransferAssetContract).</li> <li><code>PublicFreeNetLimit</code> - The maximum total Bandwidth allowed for all accounts. The token issuer can freeze TRX to obtain Bandwidth (limited to TransferAssetContract).</li> <li><code>StartDate</code>, <code>EndDate</code> - The start and end dates of the token issuance. During this period, other users can participate in the token issuance.</li> <li><code>FrozenAmount0</code>, <code>FrozenDays0</code> - The amount of token frozen and the number of days. <p><code>FrozenAmount0</code>: Must be greater than 0. <code>FrozenDays0</code>: Must be between 1 and 3653.</p> </li> </ul> <p>Example:</p> <pre><code>&gt; AssetIssue TestTRX TRX 75000000000000000 1 1 2 \"2019-10-02 15:10:00\" \"2020-07-11\" \"just for test121212\" www.test.com 100 100000 10000 10 10000 1\n&gt; GetAssetIssueByAccount TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\u00a0 # Check the published information\n{\n    \"assetIssue\": [\n        {\n            \"owner_address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\",\n            \"name\": \"TestTRX\",\n            \"abbr\": \"TRX\",\n            \"total_supply\": 75000000000000000,\n            \"frozen_supply\": [\n                {\n                    \"frozen_amount\": 10000,\n                    \"frozen_days\": 1\n                },\n                {\n                    \"frozen_amount\": 10000,\n                    \"frozen_days\": 10\n                }\n            ],\n            \"trx_num\": 1,\n            \"precision\": 2,\n            \"num\": 1,\n            \"start_time\": 1570000200000,\n            \"end_time\": 1594396800000,\n            \"description\": \"just for test121212\",\n            \"url\": \"www.test.com\",\n            \"free_asset_net_limit\": 100,\n            \"public_free_asset_net_limit\": 100000,\n            \"id\": \"1000001\"\n        }\n    ]\n}\n</code></pre>"},{"location":"clients/wallet-cli/#update-trc-10-token-parameters-updateasset-owneraddress-newlimit-newpubliclimit-description-url","title":"Update TRC-10 Token Parameters - <code>UpdateAsset [OwnerAddress] newLimit newPublicLimit description url</code>","text":"<p>The specific meanings of the parameters are the same as in <code>AssetIssue</code>.</p> <p>Example:</p> <pre><code>&gt; UpdateAsset 1000 1000000 \"change description\" www.changetest.com\n&gt; GetAssetIssueByAccount TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\u00a0 # View the modified information\n{\n    \"assetIssue\": [\n        {\n            \"owner_address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\",\n            \"name\": \"TestTRX\",\n            \"abbr\": \"TRX\",\n            \"total_supply\": 75000000000000000,\n            \"frozen_supply\": [\n                {\n                    \"frozen_amount\": 10000,\n                    \"frozen_days\": 1\n                },\n                {\n                    \"frozen_amount\": 10000,\n                    \"frozen_days\": 10\n                }\n            ],\n            \"trx_num\": 1,\n            \"precision\": 2,\n            \"num\": 1,\n            \"start_time\": 1570000200000,\n            \"end_time\": 1594396800000,\n            \"description\": \"change description\",\n            \"url\": \"www.changetest.com\",\n            \"free_asset_net_limit\": 1000,\n            \"public_free_asset_net_limit\": 1000000,\n            \"id\": \"1000001\"\n        }\n    ]\n}\n</code></pre>"},{"location":"clients/wallet-cli/#participate-in-trc-10-token-issuance-participateassetissue-owneraddress-toaddress-assetid-amount","title":"Participate in TRC-10 Token Issuance - <code>ParticipateAssetIssue [OwnerAddress] ToAddress AssetID Amount</code>","text":"<ul> <li><code>OwnerAddress</code> (Optional) - The account address initiating the transaction. Default: The address of the logged-in account.</li> <li><code>ToAddress</code> - The account address of the TRC-10 issuer.</li> <li><code>AssertName</code> - The TRC-10 token ID. Example: 1000001</li> <li><code>Amount</code> - The number of TRC-10 tokens to be transferred.</li> </ul> <p>Participation must take place during the TRC-10 token issuance period, otherwise an error may occur.</p> <p>Example:</p> <pre><code>&gt; ParticipateAssetIssue TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ 1000001 1000\n&gt; getaccount TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\u00a0 # View the remaining balance\naddress: TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\nassetV2\n\u00a0 \u00a0 {\n\u00a0 \u00a0 id: 1000001\n\u00a0 \u00a0 balance: 1000\n\u00a0 \u00a0 latest_asset_operation_timeV2: null\n\u00a0 \u00a0 free_asset_net_usageV2: 0\n\u00a0 \u00a0 }\n</code></pre>"},{"location":"clients/wallet-cli/#unfreeze-trc-10-tokens-unfreezeasset-owneraddress","title":"Unfreeze TRC-10 Tokens - <code>unfreezeasset [OwnerAddress]</code>","text":"<p>Used to unfreeze all TRC-10 tokens that should be unfrozen after the freezing period.</p>"},{"location":"clients/wallet-cli/#trc-10-token-transfer-transferasset-owneraddress-toaddress-assertid-amount","title":"TRC-10 Token Transfer -<code>TransferAsset [OwnerAddress] ToAddress AssertID Amount</code>","text":"<ul> <li><code>OwnerAddress</code> (Optional) - The account address initiating the transaction. Default: The address of the logged-in account. -<code>ToAddress</code> - The address of the destination account.</li> <li><code>AssertName</code> - The TRC-10 token ID. Example: 1000001</li> <li><code>Amount</code> - The number of TRC-10 tokens to be transferred.</li> </ul> <p>Example:</p> <pre><code>&gt; TransferAsset TN3zfjYUmMFK3ZsHSsrdJoNRtGkQmZLBLz 1000001 1000\n&gt; getaccount TN3zfjYUmMFK3ZsHSsrdJoNRtGkQmZLBLz\u00a0 # View the destination account information after the transfer\naddress: TN3zfjYUmMFK3ZsHSsrdJoNRtGkQmZLBLz\n\u00a0 \u00a0 assetV2\n\u00a0 \u00a0 {\n\u00a0 \u00a0 id: 1000001\n\u00a0 \u00a0 balance: 1000\n\u00a0 \u00a0 latest_asset_operation_timeV2: null\n\u00a0 \u00a0 free_asset_net_usageV2: 0\n\u00a0 \u00a0 }\n</code></pre>"},{"location":"clients/wallet-cli/#how-to-get-trc-10-token-information","title":"How to Get TRC-10 Token Information","text":"<p><code>ListAssetIssue</code></p> <p>Get information about all published TRC-10 tokens.</p> <p><code>GetAssetIssueByAccount</code></p> <p>Get TRC-10 token information based on the issuer's address.</p> <p><code>GetAssetIssueById</code></p> <p>Get TRC-10 token information based on the ID.</p> <p><code>GetAssetIssueByName</code></p> <p>Get TRC-10 token information based on the name.</p> <p><code>GetAssetIssueListByName</code></p> <p>Get a list of TRC-10 token information based on the name.</p>"},{"location":"clients/wallet-cli/#list-asset-issuance-by-page-listassetissuepaginated-address-code-salt","title":"List Asset Issuance by Page - <code>ListAssetIssuePaginated address code salt</code>","text":"<p>Query all token lists by page. Return the token list starting from the offset position.</p> <p>Example:</p> <pre><code>&gt; ListAssetIssuePaginated 0 1\n</code></pre> <p></p>"},{"location":"clients/wallet-cli/#governance","title":"Governance","text":""},{"location":"clients/wallet-cli/#how-to-vote","title":"How to Vote","text":"<p>Voting requires Shares, which can be obtained by freezing funds.</p> <ul> <li>Share Calculation: For every 1 TRX frozen, you get 1 unit of Share.</li> <li>After unfreezing, previous votes will become invalid. You can avoid this by re-freezing and re-voting.</li> </ul> <p>Note: The TRON Network only records your last voting state, which means each vote you cast will overwrite all previous voting results.</p> <p>Example:</p> <pre><code>&gt; freezeBalance 100000000 3 1 address # Freeze 10 TRX to get 10 units of Shares\n\n&gt; votewitness 123455 witness1 4 witness2 6 # Vote for witness1 with 4 votes and witness2 with 6 votes simultaneously\n\n&gt; votewitness 123455 witness1 10 # Vote for witness1 with 10 votes\n</code></pre> <p>The final result of the commands above is 10 votes for <code>witness1</code> and 0 votes for <code>witness2</code>.</p>"},{"location":"clients/wallet-cli/#brokerage","title":"Brokerage","text":"<p>You will receive rewards after voting for an SR. The SR has the right to decide the brokerage percentage. The default percentage is 20%, which the SR can adjust.</p> <p>By default, if an SR receives a reward, they will get 20% of the total reward, and the remaining 80% will be distributed to their voters.</p>"},{"location":"clients/wallet-cli/#get-brokerage-getbrokerage-owneraddress","title":"Get Brokerage - <code>getbrokerage OwnerAddress</code>","text":"<p>Check the SR's brokerage percentage.</p> <ul> <li><code>OwnerAddress</code> - The address of the SR account, which is a base58check address.</li> </ul>"},{"location":"clients/wallet-cli/#get-reward-getreward-owneraddress","title":"Get Reward - <code>getreward OwnerAddress</code>","text":"<p>Query for unclaimed rewards.</p> <ul> <li><code>OwnerAddress</code> - The address of the voter's account, which is a base58check address.</li> </ul>"},{"location":"clients/wallet-cli/#update-the-brokerage-percentage-updatebrokerage-owneraddress-brokerage","title":"Update the brokerage percentage - <code>updateBrokerage OwnerAddress brokerage</code>","text":"<p>This command is typically used by the witness account.</p> <ul> <li><code>OwnerAddress</code> - The address of the witness account, which is a base58check address.</li> <li><code>brokerage</code> - The brokerage percentage you want to update, ranging from 0 to 100. If you enter 10, it means 10% of the total rewards will be allocated to the SR, and the rest (90% in this case) will be rewarded to all voters.</li> </ul> <p>Example:</p> <pre><code>&gt; getbrokerage TZ7U1WVBRLZ2umjizxqz3XfearEHhXKX7h\n\n&gt; getreward TNfu3u8jo1LDWerHGbzs2Pv88Biqd85wEY\n\n&gt; updateBrokerage TZ7U1WVBRLZ2umjizxqz3XfearEHhXKX7h 30\n</code></pre>"},{"location":"clients/wallet-cli/#withdraw-balance-withdrawbalance-owner_address","title":"Withdraw Balance - <code>WithdrawBalance [owner_address]</code>","text":"<p>Withdraw vote or block rewards.</p> <p>Example:</p> <pre><code>&gt; WithdrawBalance TEDapYSVvAZ3aYH7w8N9tMEEFKaNKUD5Bp\n</code></pre>"},{"location":"clients/wallet-cli/#how-to-create-a-witness","title":"How to Create a Witness","text":"<p>Applying to become a witness account requires a fee of 100,000 TRX. This portion of the funds will be burned directly.</p>"},{"location":"clients/wallet-cli/#create-a-witness-createwitness-owner_address-url","title":"Create a Witness - <code>CreateWitness [owner_address] url</code>","text":"<p>Apply to become a Super Representative candidate.</p> <p>Example: <pre><code>&gt; CreateWitness TEDapYSVvAZ3aYH7w8N9tMEEFKaNKUD5Bp 007570646174654e616d6531353330363038383733343633\n</code></pre></p>"},{"location":"clients/wallet-cli/#update-a-witness-updatewitness","title":"Update a Witness - <code>UpdateWitness</code>","text":"<p>Edit the SR official website URL.</p> <p>Example: <pre><code>&gt; UpdateWitness TEDapYSVvAZ3aYH7w8N9tMEEFKaNKUD5Bp 007570646174654e616d6531353330363038383733343633\n</code></pre></p>"},{"location":"clients/wallet-cli/#how-to-withdraw-balance","title":"How to Withdraw Balance","text":"<p>After each block is generated, the block rewards are sent to the account's allowance, and it is allowed to withdraw from the allowance to the balance once every 24 hours. Funds in the allowance cannot be locked or traded.</p>"},{"location":"clients/wallet-cli/#how-to-operate-on-proposals","title":"How to Operate on Proposals","text":"<p>Any proposal-related operation (except for viewing) must be executed by a Committee member.</p>"},{"location":"clients/wallet-cli/#create-a-proposal-createproposal-owneraddress-id0-value0-idn-valuen","title":"Create a Proposal - <code>createProposal [OwnerAddress] id0 value0 ... idN valueN</code>","text":"<ul> <li><code>OwnerAddress</code> (Optional) - The account address initiating the transaction. Default: The address of the logged-in account.</li> <li><code>id0</code> - The parameter's ID number. Each parameter in the TRON network has an ID number. Please refer to \"http://tronscan.org/#/sr/committee\".</li> <li><code>Value0</code> - The modified value.</li> </ul> <p>In this example, to modify parameter ID 4 (the cost of issuing a token) to 1,000 TRX:</p> <pre><code>&gt; createProposal 4 1000\n&gt; listproposals # View the initiated proposals\n{\n    \"proposals\": [\n        {\n            \"proposal_id\": 1,\n            \"proposer_address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\",\n            \"parameters\": [\n                {\n                    \"key\": 4,\n                    \"value\": 1000\n                }\n            ],\n            \"expiration_time\": 1567498800000,\n            \"create_time\": 1567498308000\n        }\n    ]\n}\n</code></pre> <p>The corresponding ID is 1.</p>"},{"location":"clients/wallet-cli/#approveunapprove-a-proposal","title":"Approve/Unapprove a Proposal","text":"<p>approveProposal [OwnerAddress] id is_or_not_add_approval</p> <ul> <li><code>OwnerAddress</code> (Optional) - The account address initiating the transaction. Default: The address of the logged-in account.</li> <li><code>id</code> - The ID of the initiated proposal. Example: 1</li> <li><code>is_or_not_add_approval</code> - <code>true</code> means approve; <code>false</code> means unapprove.</li> </ul> <p>Example:</p> <pre><code>&gt; ApproveProposal 1 true # Approve the proposal\n&gt; ApproveProposal 1 false # Cancel the approved proposal\n</code></pre>"},{"location":"clients/wallet-cli/#delete-an-existing-proposal-deleteproposal-owneraddress-proposalid","title":"Delete an Existing Proposal - <code>deleteProposal [OwnerAddress] proposalId</code>","text":"<ul> <li><code>proposalId</code> - The ID of the initiated proposal. Example: <code>1</code></li> </ul> <p>The proposal must be canceled by the Super Representative who initiated it.</p> <p>Example: <code>DeleteProposal 1</code></p>"},{"location":"clients/wallet-cli/#get-proposal-information","title":"Get Proposal Information","text":"<p><code>ListProposals</code></p> <p>Get a list of initiated proposals.</p> <p><code>ListProposalsPaginated</code></p> <p>Get initiated proposals using a paginated mode.</p> <p><code>GetProposal</code></p> <p>Get proposal information based on the proposal ID.</p> <p></p>"},{"location":"clients/wallet-cli/#decentralized-exchange-dex","title":"Decentralized Exchange (DEX)","text":"<p>Trading and price fluctuations of trading pairs follow the Bancor protocol.</p>"},{"location":"clients/wallet-cli/#create-a-trading-pair","title":"Create a Trading Pair","text":"<p>exchangeCreate [OwnerAddress] first_token_id first_token_balance second_token_id second_token_balance</p> <ul> <li><code>OwnerAddress</code> - (Optional) The account address initiating the transaction. Defaults to the logged-in account's address.</li> <li><code>first_token_id</code>, <code>first_token_balance</code> - The ID and amount of the first token.</li> <li><code>second_token_id</code>, <code>second_token_balance</code> - The ID and amount of the second token.      &gt; The ID is the ID of an already issued TRC-10 token.     &gt; If it's TRX, the ID is \"_\".     &gt; The amount must be greater than 0 and less than 1,000,000,000,000,000.</li> </ul> <p>Example:</p> <pre><code>&gt; exchangeCreate 1000001 10000 _ 10000\n&gt; Create a trading pair of ID 1000001 and TRX, with a quantity of 10,000 for both.\n</code></pre>"},{"location":"clients/wallet-cli/#get-exchange-information-by-id","title":"Get Exchange Information by ID","text":"<p><code>getExchange</code></p> <p>Query for a trading pair by ID (in a confirmed state).</p> <p>Example:</p> <pre><code>&gt; getExchange 1\n</code></pre>"},{"location":"clients/wallet-cli/#inject-liquidity-exchangeinject-owneraddress-exchange_id-token_id-quant","title":"Inject Liquidity -<code>exchangeInject [OwnerAddress] exchange_id token_id quant</code>","text":"<ul> <li><code>OwnerAddress</code> - (Optional) The account address initiating the transaction. Default: The address of the logged-in account.</li> <li><code>exchange_id</code> - The ID of the trading pair to inject liquidity into.</li> <li><code>token_id</code>, <code>quant</code> - The token ID and quantity to inject (counted in base units).</li> </ul> <p>When injecting liquidity, based on its quantity (<code>quant</code>), a portion of each token in the trading pair will be withdrawn from the account and injected into the trading pair. Due to differences in the exchange balance, the same quantity of funds for the same token may also vary.</p>"},{"location":"clients/wallet-cli/#trade-exchangetransaction-owneraddress-exchange_id-token_id-quant-expected","title":"Trade - <code>exchangeTransaction [OwnerAddress] exchange_id token_id quant expected</code>","text":"<ul> <li><code>OwnerAddress</code> - (Optional) The account address initiating the transaction. Default: The address of the logged-in account.</li> <li><code>exchange_id</code> - The ID of the trading pair.</li> <li><code>token_id</code>, <code>quant</code> - The token ID and quantity to trade, equivalent to selling.</li> <li><code>expected</code> - The expected quantity of the other token. <p><code>expected</code> must be less than <code>quant</code>, otherwise, an error will occur.</p> </li> </ul> <p>Example:</p> <p>ExchangeTransaction 1 1000001 100 80</p> <p>This is expected to trade 100 units of token 1000001 from trading pair ID 1 for 80 TRX, with a price of 80 TRX. (This is equivalent to selling 100 units of token 1000001 for 80 TRX in the trading pair with ID 1).</p>"},{"location":"clients/wallet-cli/#withdraw-liquidity-exchangewithdraw-owneraddress-exchange_id-token_id-quant","title":"Withdraw Liquidity - <code>exchangeWithdraw [OwnerAddress] exchange_id token_id quant</code>","text":"<ul> <li><code>OwnerAddress</code> - (Optional) The account address initiating the transaction. Default: The address of the logged-in account.</li> <li><code>Exchange_id</code> - The ID of the trading pair to withdraw liquidity from.</li> <li><code>Token_id</code>, <code>quant</code> - The token ID and quantity to withdraw (counted in base units).</li> </ul> <p>When withdrawing liquidity, based on its quantity (<code>quant</code>), a portion of each token in the trading pair will be withdrawn from the trading pair and injected into the account. Due to differences in the exchange balance, the same quantity of funds for the same token may also vary.</p>"},{"location":"clients/wallet-cli/#get-trading-pair-information","title":"Get Trading Pair Information","text":"<p><code>ListExchanges</code></p> <p>List trading pairs.</p> <p><code>ListExchangesPaginated</code></p> <p>List trading pairs by page.</p>"},{"location":"clients/wallet-cli/#how-to-use-tron-dex-to-sell-assets","title":"How to Use tron-dex to Sell Assets","text":""},{"location":"clients/wallet-cli/#create-an-order-to-sell-assets","title":"Create an order to sell assets","text":"<pre><code>MarketSellAsset owner_address sell_token_id sell_token_quantity buy_token_id buy_token_quantity\n</code></pre> <ul> <li><code>ownerAddress</code> - The account address initiating the transaction.</li> <li><code>sell_token_id</code>, <code>sell_token_quantity</code> - The token ID and quantity you want to sell.</li> <li><code>buy_token_id</code>, <code>buy_token_quantity</code> - The token ID and quantity you want to buy.</li> </ul> <p>Example:</p> <pre><code>MarketSellAsset TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW 1000001 200 _ 100\n\nUse the `getTransactionInfoById` command to get the contract execution result:\ngetTransactionInfoById 10040f993cd9452b25bf367f38edadf11176355802baf61f3c49b96b4480d374\n\n{\n    \"id\": \"10040f993cd9452b25bf367f38edadf11176355802baf61f3c49b96b4480d374\",\n    \"blockNumber\": 669,\n    \"blockTimeStamp\": 1578983493000,\n    \"contractResult\": [\n        \"\"\n    ],\n    \"receipt\": {\n        \"net_usage\": 264\n    }\n}\n</code></pre>"},{"location":"clients/wallet-cli/#getmarketorderbyaccount-owneraddress","title":"<code>GetMarketOrderByAccount ownerAddress</code>","text":"<p>Get orders created by an account (only includes active status).</p> <ul> <li><code>ownerAddress</code> - The address of the account that created the market order.</li> </ul> <p>Example:</p> <pre><code>GetMarketOrderByAccount TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\n{\n    \"orders\": [\n        {\n            \"order_id\": \"fc9c64dfd48ae58952e85f05ecb8ec87f55e19402493bb2df501ae9d2da75db0\",\n            \"owner_address\": \"TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\",\n            \"create_time\": 1578983490000,\n            \"sell_token_id\": \"_\",\n            \"sell_token_quantity\": 100,\n            \"buy_token_id\": \"1000001\",\n            \"buy_token_quantity\": 200,\n            \"sell_token_quantity_remain\": 100\n        }\n    ]\n}\n</code></pre>"},{"location":"clients/wallet-cli/#getmarketorderbyid-orderid","title":"<code>GetMarketOrderById orderId</code>","text":"<p>Get a specific order by <code>order_id</code>.</p> <p>Example:</p> <pre><code>GetMarketOrderById fc9c64dfd48ae58952e85f05ecb8ec87f55e19402493bb2df501ae9d2da75db0\n{\n    \"order_id\": \"fc9c64dfd48ae58952e85f05ecb8ec87f55e19402493bb2df501ae9d2da75db0\",\n    \"owner_address\": \"TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\",\n    \"create_time\": 1578983490000,\n    \"sell_token_id\": \"_\",\n    \"sell_token_quantity\": 100,\n    \"buy_token_id\": \"1000001\",\n    \"buy_token_quantity\": 200,\n}\n</code></pre>"},{"location":"clients/wallet-cli/#getmarketpairlist","title":"<code>GetMarketPairList</code>","text":"<p>Get a list of market trading pairs.</p> <p>Example:</p> <pre><code>GetMarketPairList\n{\n    \"orderPair\": [\n        {\n            \"sell_token_id\": \"_\",\n            \"buy_token_id\": \"1000001\"\n        }\n    ]\n}\n</code></pre>"},{"location":"clients/wallet-cli/#getmarketorderlistbypair-sell_token_id-buy_token_id","title":"<code>GetMarketOrderListByPair sell_token_id buy_token_id</code>","text":"<p>Get a list of orders based on the trading pair.</p> <ul> <li><code>sell_token_id</code> - The token ID you want to sell.</li> <li><code>buy_token_id</code> - The token ID you want to buy.</li> </ul> <p>Example:</p> <pre><code>GetMarketOrderListByPair _ 1000001\n{\n    \"orders\": [\n        {\n            \"order_id\": \"fc9c64dfd48ae58952e85f05ecb8ec87f55e19402493bb2df501ae9d2da75db0\",\n            \"owner_address\": \"TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\",\n            \"create_time\": 1578983490000,\n            \"sell_token_id\": \"_\",\n            \"sell_token_quantity\": 100,\n            \"buy_token_id\": \"1000001\",\n            \"buy_token_quantity\": 200,\n            \"sell_token_quantity_remain\": 100\n        }\n    ]\n}\n</code></pre>"},{"location":"clients/wallet-cli/#getmarketpricebypair-sell_token_id-buy_token_id","title":"<code>GetMarketPriceByPair sell_token_id buy_token_id</code>","text":"<p>Get the market price based on the trading pair.</p> <ul> <li><code>sell_token_id</code> - The token ID you want to sell.</li> <li><code>buy_token_id</code> - The token ID you want to buy.</li> </ul> <p>Example:</p> <pre><code>GetMarketPriceByPair _ 1000001\n{\n    \"sell_token_id\": \"_\",\n    \"buy_token_id\": \"1000001\",\n    \"prices\": [\n        {\n            \"sell_token_quantity\": 100,\n            \"buy_token_quantity\": 200\n        }\n    ]\n}\n</code></pre>"},{"location":"clients/wallet-cli/#marketcancelorder-owner_address-order_id","title":"<code>MarketCancelOrder owner_address order_id</code>","text":"<p>Cancel an order. </p> <ul> <li><code>owner_address</code> - The account address that created the order.</li> <li><code>order_id</code> - The order ID you want to cancel.</li> </ul> <p>Example:</p> <p><pre><code>MarketCancelOrder TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW fc9c64dfd48ae58952e85f05ecb8ec87f55e19402493bb2df501ae9d2da75db0\n</code></pre> Use the <code>getTransactionInfoById</code> command to get the contract execution result: <pre><code>getTransactionInfoById b375787a098498623403c755b1399e82910385251b643811936d914c9f37bd27\n{\n    \"id\": \"b375787a098498623403c755b1399e82910385251b643811936d914c9f37bd27\",\n    \"blockNumber\": 1582,\n    \"blockTimeStamp\": 1578986232000,\n    \"contractResult\": [\n        \"\"\n    ],\n    \"receipt\": {\n        \"net_usage\": 283\n    }\n}\n</code></pre></p> <p></p>"},{"location":"clients/wallet-cli/#gasfree-support","title":"GasFree Support","text":"<p><code>wallet-cli</code> now supports GasFree integration. This guide explains the new commands and provides instructions on how to use them.</p> <p>For more details, please refer to the GasFree Documentation and the TronLink User Guide For GasFree.</p> <p>Prerequisites API Credentials: Users must obtain an API Key and API Secret from GasFree for authentication. Please refer to the official application form for instructions on how to set up API authentication.</p>"},{"location":"clients/wallet-cli/#query-gasfree-information-gasfreeinfo","title":"Query GasFree Information - <code>GasFreeInfo</code>","text":"<p>Function: Retrieve basic information, including the GasFree address associated with the current wallet address.</p> <p>Note: A GasFree address is automatically activated on the first transfer and may incur an activation fee.</p> <p>Example: <pre><code>wallet&gt; gasfreeinfo\nbalanceOf(address):70a08231\n{\n    \"gasFreeAddress\":\"TCtSt8fCkZcVdrGpaVHUr6P8EmdjysswMF\",\n    \"active\":true,\n    \"tokenBalance\":998696000,\n    \"activateFee\":0,\n    \"transferFee\":2000,\n    \"maxTransferValue\":998694000\n}\ngasFreeInfo: successful !!\n</code></pre> <pre><code>wallet&gt; gasfreeinfo TRvVXgqddDGYRMx3FWf2tpVxXQQXDZxJQe\nbalanceOf(address):70a08231\n{\n    \"gasFreeAddress\":\"TCtSt8fCkZcVdrGpaVHUr6P8EmdjysswMF\",\n    \"active\":true,\n    \"tokenBalance\":998696000,\n    \"activateFee\":0,\n    \"transferFee\":2000,\n    \"maxTransferValue\":998694000\n}\ngasFreeInfo: successful !!\n</code></pre></p>"},{"location":"clients/wallet-cli/#gasfree-transfer-gasfreetransfer","title":"GasFree Transfer - <code>GasFreeTransfer</code>","text":"<p>Submits a GasFree transfer\u3002 Function: Submits a request for a gas-free token transfer\u3002</p> <p>Example: <pre><code>wallet&gt; gasfreetransfer TEkj3ndMVEmFLYaFrATMwMjBRZ1EAZkucT 100000\n\nGasFreeTransfer result: {\n    \"code\":200,\n    \"data\":{\n        \"amount\":100000,\n        \"providerAddress\":\"TKtWbdzEq5ss9vTS9kwRhBp5mXmBfBns3E\",\n        \"apiKey\":\"\",\n        \"accountAddress\":\"TUUSMd58eC3fKx3fn7whxJyr1FR56tgaP8\",\n        \"signature\":\"\",\n        \"targetAddress\":\"TEkj3ndMVEmFLYaFrATMwMjBRZ1EAZkucT\",\n        \"maxFee\":2000000,\n        \"version\":1,\n        \"nonce\":8,\n        \"tokenAddress\":\"TXYZopYRdj2D9XRtbG411XZZ3kM5VkAeBf\",\n        \"createdAt\":1747909635678,\n        \"expiredAt\":1747909695000,\n        \"estimatedTransferFee\":2000,\n        \"id\":\"6c3ff67e-0bf4-4c09-91ca-0c7c254b01a0\",\n        \"state\":\"WAITING\",\n        \"estimatedActivateFee\":0,\n        \"gasFreeAddress\":\"TNER12mMVWruqopsW9FQtKxCGfZcEtb3ER\",\n        \"updatedAt\":1747909635678\n    }\n}\nGasFreeTransfer successful !!!\n</code></pre></p>"},{"location":"clients/wallet-cli/#gasfree-trace-gasfreetrace","title":"GasFree Trace - <code>GasFreeTrace</code>","text":"<p>Traces the transfer status\u3002 Function: Checks the progress of a GasFree transfer using the <code>traceId</code> obtained from <code>GasFreeTransfer</code>\u3002</p> <p>Example: <pre><code>wallet&gt; gasfreetrace 6c3ff67e-0bf4-4c09-91ca-0c7c254b01a0\nGasFreeTrace result: {\n    \"code\":200,\n    \"data\":{\n        \"amount\":100000,\n        \"providerAddress\":\"TKtWbdzEq5ss9vTS9kwRhBp5mXmBfBns3E\",\n        \"txnTotalCost\":102000,\n        \"accountAddress\":\"TUUSMd58eC3fKx3fn7whxJyr1FR56tgaP8\",\n        \"txnActivateFee\":0,\n        \"estimatedTotalCost\":102000,\n        \"targetAddress\":\"TEkj3ndMVEmFLYaFrATMwMjBRZ1EAZkucT\",\n        \"txnBlockTimestamp\":1747909638000,\n        \"txnTotalFee\":2000,\n        \"nonce\":8,\n        \"estimatedTotalFee\":2000,\n        \"tokenAddress\":\"TXYZopYRdj2D9XRtbG411XZZ3kM5VkAeBf\",\n        \"txnHash\":\"858f9a00776163b1f8a34467b9c5727657f8971a9f4e9d492f0a247fac0384f9\",\n        \"txnBlockNum\":57175988,\n        \"createdAt\":1747909635678,\n        \"expiredAt\":1747909695000,\n        \"estimatedTransferFee\":2000,\n        \"txnState\":\"ON_CHAIN\",\n        \"id\":\"6c3ff67e-0bf4-4c09-91ca-0c7c254b01a0\",\n        \"state\":\"CONFIRMING\",\n        \"estimatedActivateFee\":0,\n        \"gasFreeAddress\":\"TNER12mMVWruqopsW9FQtKxCGfZcEtb3ER\",\n        \"txnTransferFee\":2000,\n        \"txnAmount\":100000\n    }\n}\nGasFreeTrace: successful!!\n</code></pre></p> <p></p>"},{"location":"clients/wallet-cli/#other-useful-commands","title":"Other Useful Commands","text":""},{"location":"clients/wallet-cli/#switch-network-switchnetwork","title":"Switch Network - <code>SwitchNetwork</code>","text":"<p>This command allows for flexible network switching at any time. <code>switchnetwork local</code> will switch to the network configured in the local <code>config.conf</code> file.</p> <p>Example:</p> <p><pre><code>wallet&gt; switchnetwork\nPlease select network\uff1a\n1. MAIN\n2. NILE\n3. SHASTA\nEnter numbers to select a network (1-3):1\nNow, current network is : MAIN\nSwitchNetwork successful !!!\n</code></pre> <pre><code>wallet&gt; switchnetwork main\nNow, current network is : MAIN\nSwitchNetwork successful !!!\n</code></pre> <pre><code>wallet&gt; switchnetwork empty localhost:50052\nNow, current network is : CUSTOM\nSwitchNetwork successful !!!\n</code></pre></p>"},{"location":"clients/wallet-cli/#switch-wallet-switchwallet","title":"Switch Wallet - <code>SwitchWallet</code>","text":"<p>You can switch wallets after logging in with the LoginAll command.</p> <p>Example: <pre><code>wallet&gt; switchwallet\nThe 1th keystore file name is TJEEKTmaVTYSpJAxahtyuofnDSpe2seajB.json\nThe 2th keystore file name is TX1L9xonuUo1AHsjUZ3QzH8wCRmKm56Xew.json\nThe 3th keystore file name is TVuVqnJFuuDxN36bhEbgDQS7rNGA5dSJB7.json\nThe 4th keystore file name is Ledger-TRvVXgqddDGYRMx3FWf2tpVxXQQXDZxJQe.json\nThe 5th keystore file name is TYXFDtn86VPFKg4mkwMs45DKDcpAyqsada.json\nPlease choose between 1 and 5\n5\nSwitchWallet successful !!!\n</code></pre></p>"},{"location":"clients/wallet-cli/#view-backup-records-viewbackuprecords","title":"View Backup Records - <code>ViewBackupRecords</code>","text":"<p>View backup records. You can configure the maximum number of records to keep in <code>config.conf</code> with <code>maxRecords</code>, not including buffer records.</p> <p>Example: <pre><code>wallet&gt; ViewBackupRecords\n\n=== View Backup Records ===\n1. View all records\n2. Filter by time range\nChoose an option (1-2): 1\n</code></pre></p>"},{"location":"contracts/contract/","title":"Contract","text":""},{"location":"contracts/contract/#introduction","title":"Introduction","text":"<p>Smart contract is a computerized transaction protocol that automatically implements its terms. Smart contract is the same as common contract, they all define the terms and rules related to the participants. Once the contract is started, it can runs in the way it is designed.</p> <p>TRON smart contract support Solidity language in (Ethereum). You can find the latest solidity version in the TRON solidity repository. Write a smart contract, then build the smart contract and deploy it to TRON network. When the smart contract is triggered, the corresponding function will be executed automatically.</p>"},{"location":"contracts/contract/#features","title":"Features","text":"<p>TRON virtual machine is based on Ethereum solidity language, it also has TRON's own features.</p>"},{"location":"contracts/contract/#defination-of-smart-contract","title":"Defination of Smart Contract","text":"<p>TRON VM is compatible with Ethereum's smart contract, using protobuf to define the content of the contract: <pre><code>message SmartContract {\n  message ABI {\n    message Entry {\n      enum EntryType {\n        UnknownEntryType = 0;\n        Constructor = 1;\n        Function = 2;\n        Event = 3;\n        Fallback = 4;\n        Receive = 5;\n        Error = 6;\n      }\n      message Param {\n        bool indexed = 1;\n        string name = 2;\n        string type = 3;\n      }\n      enum StateMutabilityType {\n        UnknownMutabilityType = 0;\n        Pure = 1;\n        View = 2;\n        Nonpayable = 3;\n        Payable = 4;\n      }\n\n      bool anonymous = 1;\n      bool constant = 2;\n      string name = 3;\n      repeated Param inputs = 4;\n      repeated Param outputs = 5;\n      EntryType type = 6;\n      bool payable = 7;\n      StateMutabilityType stateMutability = 8;\n    }\n    repeated Entry entrys = 1;\n  }\n  bytes origin_address = 1;\n  bytes contract_address = 2;\n  ABI abi = 3;\n  bytes bytecode = 4;\n  int64 call_value = 5;\n  int64 consume_user_resource_percent = 6;\n  string name = 7;\n  int64 origin_energy_limit = 8;\n  bytes code_hash = 9;\n  bytes trx_hash = 10;\n}\n</code></pre></p> <ul> <li>origin_address: smart contract creator address</li> <li>contract_address: smart contract address</li> <li>abi: the api information of all the function of the smart contract</li> <li>bytecode: smart contract byte code</li> <li>call_value: TRX transferred into smart contract while call the contract</li> <li>consume_user_resource_percent: resource consumption percentage set by the developer</li> <li>name: smart contract name</li> <li>origin_energy_limit: energy consumption of the developer limit in one call, must be greater than 0. For the old contracts, if this parameter is not set, it will be set 0, developer can use updateEnergyLimit api to update this parameter (must greater than 0)</li> </ul> <p>Through other two grpc message types CreateSmartContract and TriggerSmartContract to create and use smart contract.</p>"},{"location":"contracts/contract/#usage-of-the-function-of-smart-contract","title":"Usage of the Function of Smart Contract","text":"<ul> <li>constant function and inconstant function</li> </ul> <p>There are two types of function according to whether any change will be made to the properties on the chain: constant function and inconstant function Constant function uses view/pure/constant to decorate, will return the result on the node it is called and not be broadcasted in the form of a transaction Inconstant function will be broadcasted in the form of a transaction while being called, the function will change the data on the chain, such as transfer, changing the value of the internal variables of contracts, etc.</p> <p>Note: If you use create command inside a contract (CREATE instruction), even use view/pure/constant to decorate the dynamically created contract function, this function will still be treated as inconstant function, be dealt in the form of transaction.</p> <ul> <li>message calls</li> </ul> <p>Message calls can call the functions of other contracts, also can transfer TRX to the accounts of contract and none-contract. Like the common TRON triggercontract, Message calls have initiator, recipient, data, transfer amount, fees and return attributes. Every message call can generate a new one recursively. Contract can define the distribution of the remaining energy in the internal message call. If it comes with OutOfEnergyException in the internal message call, it will return false, but not error. In the meantime, only the gas sent with the internal message call will be consumed, if energy is not specified in call.value(energy), all the remaining energy will be used.</p> <ul> <li>delegate call/call code/library</li> </ul> <p>There is a special type of message call, delegate call. The difference with common message call is the code of the target address will be run in the context of the contract that initiates the call, msg.sender and msg.value remain unchanged. This means a contract can dynamically loadcode from another address while running. Storage, current address and balance all point to the contract that initiates the call, only the code is get from the address being called. This gives Solidity the ability to achieve the 'lib' function: the reusable code lib can be put in the storage of a contract to implement complex data structure library.</p> <ul> <li>CREATE command</li> </ul> <p>This command will create a new contract with a new address. The only difference with Ethereum is the newly generated TRON address used the smart contract creation transaction id and the hash of nonce called combined. Different from Ethereum, the definition of nonce is the contract sequence number of the creation of the root call. Even there are many CREATE commands calls, contract number in sequence from 1. Refer to the source code for more detail. Note: Different from creating a contract by grpc's deploycontract, contract created by CREATE command does not store contract abi.</p> <ul> <li>built-in function and built-in function attribute (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily)</li> </ul> <p><pre><code>1)TVM is compatible with solidity language's transfer format, including:\n- accompany with constructor to call transfer\n- accompany with internal function to call transfer\n- use transfer/send/call/callcode/delegatecall to call transfer\n\nNote: TRON's smart contract is different from TRON's system contract, if the transfer to address does not exist it can not create an account by smart contract transfer.\n\n2)Different accounts vote for SuperNode (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily)\n\n3)SuperNode gets all the reward (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily)\n\n4)SuperNode approves or disapproves the proposal (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily)\n\n5)SuperNode proposes a proposal (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily)\n\n6)SuperNode deletes  a proposal (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily)\n\n7)TRON byte address converts to solidity address (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily)\n\n8)TRON string address converts to solidity address (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily)\n\n9)Send token to target address (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily)\n\n10)Query token amount of target address (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily)\n\n11)Compatible with all the built-in functions of Ethereum\n</code></pre> Note: Ethereum's RIPEMD160 function is not recommended, because the return of TRON is a hash result based on TRON's sha256, not an accurate Ethereum RIPEMD160.</p>"},{"location":"contracts/contract/#contract-address-used-in-solidity-language","title":"Contract Address Used in Solidity Language","text":"<p>Ethereum VM address is 20 bytes, but TRON's VM address is 21 bytes.</p> <ul> <li>address conversion</li> </ul> <p>Need to convert TRON's address while using in solidity (recommended): <pre><code>/**\n     *  @dev    convert uint256 (HexString add 0x at beginning) TRON address to solidity address type\n     *  @param  tronAddress uint256 tronAddress, begin with 0x, followed by HexString\n     *  @return Solidity address type\n*/\n\nfunction convertFromTronInt(uint256 tronAddress) public view returns(address){\n        return address(tronAddress);\n}\n</code></pre> This is similar with the grammar of the conversion from other types converted to address type in Ethereum.</p> <ul> <li>address judgement</li> </ul> <p>Solidity has address constant judgement, if using 21 bytes address the compiler will throw out an error, so you should use 20 bytes address, like: <pre><code>function compareAddress(address tronAddress) public view returns (uint256){\n        // if (tronAddress == 0x41ca35b7d915458ef540ade6068dfe2f44e8fa733c) { // compile error\n        if (tronAddress == 0xca35b7d915458ef540ade6068dfe2f44e8fa733c) { // right\n            return 1;\n        } else {\n            return 0;\n        }\n}\n</code></pre> But if you are using wallet-cli, you can use 21 bytes address, like 0000000000000000000041ca35b7d915458ef540ade6068dfe2f44e8fa733c</p> <ul> <li>variable assignment</li> </ul> <p>Solidity has address constant assignment, if using 21 bytes address the compiler will throw out an error, so you should use 20 bytes address, like: <pre><code>function assignAddress() public view {\n        // address newAddress = 0x41ca35b7d915458ef540ade6068dfe2f44e8fa733c; // compile error\n        address newAddress = 0xca35b7d915458ef540ade6068dfe2f44e8fa733c;\n        // do something\n}\n</code></pre> If you want to use TRON address of string type (TLLM21wteSPs4hKjbxgmH1L6poyMjeTbHm) please refer to (2-4-7,2-4-8).</p>"},{"location":"contracts/contract/#special-constants-differ-from-ethereum","title":"Special Constants Differ from Ethereum","text":""},{"location":"contracts/contract/#currency","title":"Currency","text":"<p>Like solidity supports ETH, TRON VM supports trx and sun, 1 trx = 1000000 sun, case sensitive, only support lower case. tron-studio supports trx and sun, remix does not support trx and sun. We recommend to use tron-studio instead of remix to build TRON smart contract.</p>"},{"location":"contracts/contract/#block-related","title":"Block Related","text":"<ul> <li>block.blockhash (uint blockNumber) returns (bytes32): specified block hash, can only apply to the latest 256 blocks and current block excluded</li> <li>block.coinbase (address): SuperNode address that produced the current block</li> <li>block.difficulty (uint): current block difficulty, not recommended, set 0</li> <li>block.gaslimit (uint): current block gas limit, not supported, set 0</li> <li>block.number (uint): current block number</li> <li>block.timestamp (uint): current block timestamp</li> <li>gasleft() returns (uint256): remaining gas</li> <li>msg.data (bytes): complete call data</li> <li>msg.gas (uint): remaining gas - since 0.4.21, not recommended, replaced by gesleft()</li> <li>msg.sender (address): message sender (current call)</li> <li>msg.sig (bytes4): first 4 bytes of call data (function identifier)</li> <li>msg.value (uint): the amount of SUN send with message</li> <li>now (uint): current block timestamp (block.timestamp)</li> <li>tx.gasprice (uint): the gas price of transaction, not recommended, set 0</li> <li>tx.origin (address): transaction initiator</li> </ul> <p>Each command of smart contract consume system resource while running, we use 'Energy' as the unit of the consumption of the resource.</p>"},{"location":"contracts/tools/","title":"Tools","text":""},{"location":"contracts/tools/#tronide","title":"TronIDE","text":"<p>A development tool for TRON smart contracts. It provides a visual interface that supports compiling, debugging, and running Solidity smart contracts. https://www.tronide.io/</p>"},{"location":"contracts/tools/#tronbox","title":"TronBox","text":"<p>A deployment tool for TRON smart contracts. It supports the compilation, deployment, and migration of Solidity smart contracts. https://tronbox.io/#/</p>"},{"location":"contracts/tools/#tronweb","title":"TronWeb","text":"<p>A Javascript library for developing TRON smart contracts. It provides interfaces for interacting with the TRON Mainnet, as well as for deploying and calling contracts. https://tronweb.network/</p>"},{"location":"contracts/tools/#trongrid","title":"TronGrid","text":"<p>An event query service for TRON smart contracts. It allows you to query event log information written in smart contracts. https://www.trongrid.io/</p>"},{"location":"contracts/tools/#trident","title":"Trident","text":"<p>A lightweight Java SDK. It includes a series of libraries to help developers easily work with the TRON network's system and smart contracts. https://tronprotocol.github.io/trident/</p>"},{"location":"developers/advanced-configuration/","title":"Advanced Configurations","text":"<p>we provide some configuration items for LevelDB and gRPC in <code>config.conf</code> file, for fine-grained performance tuning.  You may custom these items only if you have deep understanding on them, otherwise keep them as default.</p>"},{"location":"developers/advanced-configuration/#leveldb","title":"LevelDB","text":"<p>You can custom LevelDB options in the <code>storage</code> part of <code>config.conf</code>, which looks like:</p> <pre><code>storage {\n  # Directory for storing persistent data\n\n  db.directory = \"database\",\n  index.directory = \"index\",\n\n  # You can custom these 14 databases' configs:\n\n  # account, account-index, asset-issue, block, block-index,\n  # block_KDB, peers, properties, recent-block, trans,\n  # utxo, votes, witness, witness_schedule.\n\n  # Otherwise, db configs will remain default and data will be stored in\n  # the path of \"output-directory\" or which is set by \"-d\" (\"--output-directory\").\n\n  # Attention: name is a required field that must be set !!!\n  properties = [\n    {\n      name = \"account\",\n      path = \"/path/to/account\",   // relative or absolute path\n      createIfMissing = true,\n      paranoidChecks = true,\n      verifyChecksums = true,\n      compressionType = 1,        // 0 - no compression,  1 - compressed with snappy\n      blockSize = 4096,           // 4  KB =         4 * 1024 B\n      writeBufferSize = 10485760, // 10 MB = 10 * 1024 * 1024 B\n      cacheSize = 10485760,       // 10 MB = 10 * 1024 * 1024 B\n      maxOpenFiles = 100\n    }\n  ]\n\n}\n</code></pre> <p>As shown in the example above, the data of database <code>account</code> will be stored in the path of <code>/path/to/account/database</code> while the index be stored in <code>/path/to/account/index</code>. And, the example also shows our default value of LevelDB options from <code>createIfMissing</code> to <code>maxOpenFiles</code>. You can just refer to the docs of LevelDB to figure out details of these options.</p>"},{"location":"developers/advanced-configuration/#grpc","title":"gRPC","text":"<p>You can custom gPRC options in the <code>node.rpc</code> part of <code>config.conf</code>, which looks like:</p> <pre><code>node {\n  rpc {\n    port = 50051\n\n    # Number of gRPC thread, default availableProcessors / 2\n    # thread = 16\n\n    # The maximum number of concurrent calls permitted for each incoming connection\n    # maxConcurrentCallsPerConnection =\n\n    # The HTTP/2 flow control window, default 1MB\n    # flowControlWindow =\n\n    # Connection being idle for longer than which will be gracefully terminated\n    maxConnectionIdleInMillis = 60000\n\n    # Connection lasting longer than which will be gracefully terminated\n    # maxConnectionAgeInMillis =\n\n    # The maximum message size allowed to be received on the server, default 4MB\n    # maxMessageSize =\n\n    # The maximum size of header list allowed to be received, default 8192\n    # maxHeaderListSize =\n  }\n}\n</code></pre>"},{"location":"developers/advanced-configuration/#backup","title":"backup","text":"<p>You can custom backup options in the <code>node.backup</code> part of <code>config.conf</code>, which looks like: <pre><code>node.backup {\n    # my priority, each member should use different priority\n    priority = \n    # members should use same port\n    port = \n    # peer's ip list, can't contain mine\n    members = []\n}\n</code></pre> policy:  1. the one which synchronized first will become master. 2. if synchronization is completed at the same time, the one with big priority will become master.</p> <p>E.g. create backups for node A(192.168.0.100) and node B(192.168.0.100 ): node A's configuration: <pre><code>node.backup {\n    priority = 8 \n    port = 10001\n    members = [\n        \"192.168.0.101\"\n    ]\n}\n</code></pre> node B's configuration: <pre><code>node.backup {\n    priority = 5\n    port = 10001\n    members = [\n        \"192.168.0.100\"\n    ]\n}\n</code></pre></p> <p>You may refer to the source code of <code>io.grpc.netty.NettyServerBuilder</code> class to see details or just make a decision according to the brief comments above.  </p>"},{"location":"developers/code-structure/","title":"java-tron Core Modules","text":""},{"location":"developers/code-structure/#code-structure","title":"Code Structure","text":"<p>java-tron is a TRON network client developed based on the Java language. It implements all the functions mentioned in the TRON white paper, including consensus mechanism, cryptography, database, TVM virtual machine, network management, etc. We can run a TRON node by starting java-tron. In this article, we will describe the code structure of java-tron in detail, and introduce the functions of its various modules, to facilitate the subsequent code analysis and development of developers.</p> <p>java-tron adopts a modular code structure; the code structure is clear and easy to maintain and expand. Currently java-tron is divided into 7 modules: protocol, common, chainbase, consensus, actuator, crypto, framework, the following introduces the functions of each module and its code organization.</p>"},{"location":"developers/code-structure/#protocol","title":"protocol","text":"<p>For a distributed network such as blockchain, a concise and efficient data interaction protocol is very important. The protocol module defines:</p> <ul> <li>Inter-node communication protocol</li> <li>Communication protocol between modules within the node</li> <li>Agreement for Services Provided Externally</li> </ul> <p>The above protocols adopt the <code>Google Protobuf</code> data exchange format. Compared with JSON and XML, the <code>Google Protobuf</code> format is more efficient and flexible and can be compiled by the ProtoBuf compiler to generate language-specific serialization and deserialization source code for the defined protocol files. Protobuf is the basis for java-tron to achieve cross-language and cross-platform.</p> <p>protocol module's source code is located at:  <code>https://github.com/tronprotocol/java-tron/tree/develop/protocol</code> , its directory structure is as follows:</p> <pre><code>|-- protos\n    |-- api\n    |   |-- api.proto\n    |   |-- zksnark.proto\n    |-- core\n        |-- Discover.proto\n        |-- Tron.proto\n        |-- TronInventoryItems.proto\n        |-- contract\n</code></pre> <ul> <li><code>protos/api/</code> - The gRPC interface and data structure provided by the java-tron node externally</li> <li><code>protos/core/</code> - Data structure for communication between nodes and between modules within nodes<ul> <li><code>Discover.proto</code> - Node discovers related data structures</li> <li><code>TronInventoryItems.proto</code> - Data structure related to block transferring between nodes</li> <li><code>contract/</code> - Contract related data structures</li> <li><code>Tron.proto</code> - Other important data structures, including accounts, blocks, transactions, resources, super representatives, voting, and proposals...</li> </ul> </li> </ul>"},{"location":"developers/code-structure/#common","title":"common","text":"<p>The common module encapsulates common components and tools, such as exception handling, metrics monitoring tools, etc which make it easy to use by other modules.</p> <p>common module's source code is located at:  <code>https://github.com/tronprotocol/java-tron/tree/develop/common</code>, its directory structure is as follows:</p> <pre><code>|-- /common/src/main/java/org/tron\n    |-- common\n    |   |-- args\n    |   |-- config\n    |   |-- entity\n    |   |-- logsfilter\n    |   |-- overlay\n    |   |-- parameter\n    |   |-- prometheus\n    |   |-- runtime\n    |   |-- setting\n    |   |-- utils\n    |-- core\n        |-- config\n        |-- db\n        |-- db2\n        |-- exception\n</code></pre> <ul> <li><code>common/prometheus</code> - Prometheus metrics monitoring</li> <li><code>common/utils</code> - The wrapper class of basic data type</li> <li><code>core/config</code> - Node configuration related classes</li> <li><code>core/exception</code> - All exception handling related classes</li> </ul>"},{"location":"developers/code-structure/#chainbase","title":"chainbase","text":"<p>Chainbase is a database module. For probabilistic consensus algorithms such as PoW, PoS and DPoS, situations of switching to a new chain, however unlikely, are inevitable. Because of this, chainbase defines an interface standard supporting databases that can roll back. This interface requires databases to have a state rollback mechanism, a checkpoint-based disaster tolerant mechanism and so on. </p> <p>In addition, the chainbase module features a well-designed abstract interface. Any database that implements the interface can be used for underlying storage on the blockchain, granting more flexibility to developers. LevelDB and RocksDB are two default implementations.</p> <p>chainbase module's source code is located at: <code>https://github.com/tronprotocol/java-tron/tree/develop/chainbase</code>, its directory structure is as follows: <pre><code>|-- chainbase.src.main.java.org.tron\n    |-- common\n    |   |-- bloom\n    |   |-- error\n    |   |-- overlay\n    |   |-- runtime\n    |   |-- storage\n    |   |   |-- leveldb\n    |   |   |-- rocksdb\n    |   |-- utils\n    |   |-- zksnark\n    |-- core\n        |-- actuator\n        |-- capsule\n        |-- db\n        |   |-- RevokingDatabase.java\n        |   |-- TronStoreWithRevoking.java\n        |   |-- ......\n        |-- db2\n        |   |-- common\n        |   |-- core\n        |       |-- SnapshotManager.java\n        |       |-- ......\n        |-- net\n        |-- service\n        |-- store\n</code></pre></p> <ul> <li><code>common/</code> - Common components, such as exception handling, tools, etc<ul> <li><code>storage/leveldb/</code> Implemented the use of LevelDB as the underlying storage database</li> <li><code>storage/rocksdb/</code> Implemented the use of RocksDB as the underlying storage database</li> </ul> </li> <li> <p><code>core/</code> - The core code of the chainbase module</p> <ul> <li> <p><code>capsule/</code> </p> <p>The encapsulation class of each data structure, such as AccountCapsule, BlockCapsule, etc. AccountCapsule is the encapsulation class of Account data structure, which provides modification and query of account data; BlockCapsule is the encapsulation class of Block data structure, which provides modification and query of block data.</p> </li> <li> <p><code>store/</code> </p> <p>Various databases, such as <code>AccountStore</code>, <code>ProposalStore</code>, etc. <code>AccountStore</code> is the account database, the database name is <code>account</code>, which stores all account information in the TRON network; <code>ProposalStore</code> is the proposal database, and the database name is <code>proposal</code>, which stores all the proposal information in the TRON network.</p> </li> <li> <p><code>db/</code> and <code>db2/</code> </p> <p>Implemented rollbackable databases, including two rollbackable databases: <code>AbstractRevokingStore</code> located in the <code>db/</code> directory and <code>SnapshotManager</code> located in the <code>db2/</code> directory. Compared with <code>AbstractRevokingStore</code>, <code>SnapshotManager</code> has a more stable data rollback function and supports the extension of the underlying database. Therefore, java-tron uses <code>SnapshotManager</code> to roll back the database. Several important interfaces and implementation classes are as follows:</p> <ul> <li><code>RevokingDatabase.java</code> - It is the interface of the database container, used to manage all rollbackable databases, <code>SnapshotManager</code> is an implementation of this interface</li> <li><code>TronStoreWithRevoking.java</code> - It is the base class that supports rollbackable databases. All rollbackable databases are their implementations, such as <code>BlockStore</code>, <code>TransactionStore</code>, etc</li> </ul> </li> </ul> </li> </ul>"},{"location":"developers/code-structure/#consensus","title":"consensus","text":"<p>The consensus mechanism is a crucial module in blockchains. Common ones are PoW, PoS, DPoS and PBFT, etc. While Paxos, Raft, etc, are applied to consortium blockchains and other trusted networks. The consensus mechanism should match the business scenario. For instance, PoW is not suitable for real-time games that are sensitive to consensus efficiency, while PBFT can make an optimized choice for exchanges demanding high real-time capability. In this sense, a replaceable consensus is a creative innovation and an essential link in building application-specific blockchains. Even star blockchain programs like Cosmos SDK are still at a stage where the application layer provides developers with limited autonomy and the consensus at the base level is subject to Tendermint. Therefore, the ultimate goal of the consensus module is to make consensus switch as easy as configuring parameters for application developers.</p> <p>consensus module's source code is located at:  <code>https://github.com/tronprotocol/java-tron/tree/develop/consensus</code>, its directory structure is as follows: <pre><code>|-- consensus/src/main/java/org/tron/consensus\n    |-- Consensus.java\n    |-- ConsensusDelegate.java\n    |-- base\n    |   |-- ConsensusInterface.java\n    |   |-- ......\n    |-- dpos\n    |-- pbft\n</code></pre> consensus module divides the consensus process into several important parts that are defined in <code>ConsensusInterface</code>:</p> <ol> <li><code>start</code> - start the consensus service with customizable startup parameters</li> <li><code>stop</code> - stop the consensus service</li> <li><code>receiveBlock</code> - define the consensus logic of receiving blocks</li> <li><code>validBlock</code> - define the consensus logic of validating blocks</li> <li><code>applyBlock</code> - define the consensus logic of processing blocks</li> </ol> <p>Currently, java-tron implements DPOS consensus and PBFT consensus based on the <code>ConsensusInterface</code> interface, which is located in the <code>dpos/</code> and <code>pbft/</code> directories respectively. Developers can also implement the <code>ConsensusInterface</code> interface according to their own business needs to customize the consensus mechanism.</p>"},{"location":"developers/code-structure/#actuator","title":"actuator","text":"<p>Ethereum was the first to introduce the virtual machine and define the smart contract. However, smart contracts are constrained in terms of their functions and not flexible enough to accommodate the needs of complex applications. This is one of the reasons why java-tron supports the creation of a chain of applications. For the reasons mentioned, java-tron includes a separate module, Actuator, offering application developers a brand new way of development. They can choose to implant their application codes into a chain instead of running them on virtual machines. </p> <p>Actuator is the executor of transactions, while applications can be viewed as a cluster of different types of transactions, each of which is executed by a corresponding actuator.</p> <p>actuator module's source code is located at: <code>https://github.com/tronprotocol/java-tron/tree/develop/actuator</code>, its directory structure is as follows: <pre><code>|-- actuator/src/main/java/org/tron/core\n    |-- actuator\n    |   |-- AbstractActuator.java\n    |   |-- ActuatorCreator.java\n    |   |-- ActuatorFactory.java\n    |   |-- TransferActuator.java\n    |   |-- VMActuator.java\n    |   |-- ......\n    |-- utils\n    |-- vm\n</code></pre></p> <ul> <li><code>actuator/</code> - The executors of various types of transactions in the TRON network which define the processing logic of different types of transactions. For example, <code>TransferActuator</code> is the processing class for transferring TRX, and <code>FreezeBalanceV2Actuator</code> is the processing class for staking TRX to obtain resource</li> <li><code>utils/</code> - tools needed to execute transaction</li> <li><code>vm/</code> - TRON virtual machine related code</li> </ul> <p>Actuator module defines the <code>Actuator</code> interface, which includes 4 different methods:</p> <ul> <li><code>execute</code> - execute specific actions of transactions, such as state modification, communication between modules, logic execution, etc.</li> <li><code>validate</code> - validate authenticity of transactions</li> <li><code>getOwnerAddress</code> - acquire the address of transaction initiators</li> <li><code>calcFee</code> - define the logic of calculating transaction fees</li> </ul> <p>Depending on their businesses, developers may set up Actuator accordingly and customize the processing of different types of transactions.</p>"},{"location":"developers/code-structure/#crypto","title":"crypto","text":"<p>Crypto is a relatively independent module, but it is also a very important module. Data security in java-tron is almost entirely guaranteed by this module. Currently, SM2 and ECKey encryption algorithms are supported.</p> <p>crypto module's source code is located at: <code>https://github.com/tronprotocol/java-tron/tree/develop/crypto</code>, its directory structure is as follows: <pre><code>|-- crypto/src/main/java/org/tron/common/crypto\n    |-- Blake2bfMessageDigest.java\n    |-- ECKey.java\n    |-- Hash.java\n    |-- SignInterface.java\n    |-- SignUtils.java\n    |-- SignatureInterface.java\n    |-- cryptohash\n    |-- jce\n    |-- sm2\n    |-- zksnark\n</code></pre></p> <ul> <li><code>sm2</code> and <code>jce</code> - Provide SM2 and ECKey encryption algorithm and signature algorithm</li> <li><code>zksnark</code> - Provide a zero-knowledge proof algorithm</li> </ul>"},{"location":"developers/code-structure/#framework","title":"framework","text":"<p>The framework is the core module of java-tron and the entrance of the node. The framework module is responsible for the initialization of each module and business logic. The framework module includes the services provided externally, the node discovery and node management process related to the P2P network, and the block broadcasting and processing procedures.</p> <p>framework module's source code is located at:  <code>https://github.com/tronprotocol/java-tron/tree/develop/framework</code>, its directory structure is as follows:</p> <pre><code>|-- framework/src/main/java/org/tron\n    |-- common\n    |   |-- application\n    |   |-- backup\n    |   |-- logsfilter\n    |   |-- net\n    |   |-- overlay\n    |   |   |-- client\n    |   |   |-- discover\n    |   |   |-- message\n    |   |   |-- server\n    |   |-- runtime\n    |   |-- zksnark\n    |-- core\n    |   |-- Wallet.java\n    |   |-- capsule\n    |   |-- config\n    |   |-- consensus\n    |   |-- db\n    |   |-- metrics\n    |   |-- net\n    |   |-- services\n    |   |-- trie\n    |   |-- zen\n    |-- keystore\n    |-- program\n    |   |-- FullNode.java\n    |-- tool\n</code></pre> <ul> <li><code>program/FullNode.java</code> - It is the entry point of the program and initializes external HTTP, gRPC and json-rpc interface services</li> <li><code>core/services</code> - Defines the externally provided services, its subdirectory <code>http/</code> contains all http interface processing classes, <code>json-rpc/</code> contains all json-rpc interface processing classes</li> <li><code>common/overlay/discover</code> - Node discovery logic</li> <li><code>common/overlay/server</code> - Node management and block synchronization logic among nodes</li> <li><code>core/net</code> - Message processing, its subdirectory <code>/service</code> is  transaction and block broadcasting, block fetching and synchronization logic</li> <li><code>core/db/Manager.java</code> - Transaction and block verification and processing logic</li> </ul>"},{"location":"developers/code-structure/#summary","title":"Summary","text":"<p>This article mainly introduces the code structure of java-tron, as well as the function, location and directory structure of each functional module. Through this article, you will have a general understanding of the overall structure and key interfaces of java-tron, which is helpful for subsequent code analysis and development.</p>"},{"location":"developers/code-structure/#chainbase_1","title":"ChainBase","text":""},{"location":"developers/code-structure/#introduction","title":"Introduction","text":"<p>As we all know, the blockchain is essentially a non-tamperable distributed ledger, which is very suitable for solving the problem of trust. In reality, blockchain is often used for bookkeeping and transactions. For example, many applications use BTC, ETH, TRX, and other cryptos to carry out economic activities to ensure the openness and transparency of funds.</p> <p>The realization of such an immutable distributed ledger is a very complex system engineering, involving many technical fields: such as p2p networks, smart contracts, databases, cryptography, consensus mechanisms, etc. Among them, the database is the basis of the underlying storage, and various blockchain teams are exploring the design and optimization of the database level.</p> <p>The database module of java-tron is also called the ChainBase module. This article mainly introduces some background knowledge and shows developers the implementation details of the ChainBase module by introducing logic such as transaction processing, state rollback, and data persistence.</p>"},{"location":"developers/code-structure/#prerequisites","title":"Prerequisites","text":"<p>The database is an important part of the blockchain system. It stores all the data on the blockchain and is the basis for the normal operation of the blockchain system. Each fullnode stores a full amount of data, including block data, state data, etc. java-tron uses the Account model to save the user's account state.</p>"},{"location":"developers/code-structure/#account-models","title":"Account Models","text":"<p>There are currently two mainstream account models,</p> <ul> <li>UTXO</li> <li>Account Model</li> </ul> <p>The UTXO model is stateless, makes it easier to process transactions concurrently, and has better privacy, but it is not programming-friendly.</p> <p>In the Account Model, user data is stored in the corresponding account, and smart contracts are also stored in the account in the form of code. This model is more intuitive and easier for developers to understand. For programmability, flexibility, and other considerations, java-tron adopts the Account Model.</p>"},{"location":"developers/code-structure/#consensus_1","title":"Consensus","text":"<p>The current mainstream consensus is PoW, PoS, DPoS, etc. PoW is proof of work, all nodes participate in the calculation of an expected hash result, and the node that first calculates the result has the right to produce a block, but as the computing power continues to increase, the energy consumption required to calculate the hash is also increasing. Moreover, large mining farms monopolize most of the computing power, which also goes against the original intention of decentralization.</p> <p>To solve the problems faced by PoW, some people proposed PoS (Proof of Stake), which is simply understood as the more coins that the node holds, the greater the probability of obtaining the right to produce blocks, but this will lead to monopoly problems as well. In order to improve, DPoS (Delegated Proof of Stake) is proposed: the decentralization feature is guaranteed by the elected super representative, and the super representative is responsible for the block production in turn to improve the efficiency. java-tron currently adopts the DPoS consensus mechanism.</p> <p>To learn more, please refer to Delegated Proof of Stake.</p>"},{"location":"developers/code-structure/#persistent-storage","title":"Persistent Storage","text":"<p>There are certain differences between blockchain and traditional Internet business. The blockchain does not have particularly complex processing logic at the database level, but there are a large number of key-value read and write operations in the blockchain so there are higher requirements for data read and write performance.</p> <p>Based on this consideration, java-tron uses LevelDB as the underlying data storage by default, and java-tron has a good architecture design. The interface-oriented programming mode makes the chainbase module have better scalability. All databases implemented the chainbase interface can be used as the underlying storage engine of java-tron. For example, in the chainbase v2 version, a database implementation based on RocksDB is provided.</p>"},{"location":"developers/code-structure/#transaction-validation","title":"Transaction Validation","text":"<p>As we all know, the blockchain mainly stores transaction data. Before introducing the chainbase module, you need to understand the transaction processing logic in java-tron.</p> <p></p> <p>The transaction will be distributed to each node through network broadcast. After receiving the transaction, the node will first validate the signature of the transaction. If successful, the transaction needs to be pre-executed to determine whether the transaction is legal.</p> <p>Note: The specific implementation of java-tron deviates from the above figure, and for the sake of convenience, this article collectively refers to the FullNode and SR as the nodes.</p> <p>For example, to process a transfer transaction: user A transfers 100 TRX to user B, and it needs to validate whether user A has enough balance to make the transfer.</p> <p>The account library in the database stores the account information of all users, including the user's balance information. How to judge whether this transfer transaction is legal? The logic of java-tron is: when a transaction is received from the network, the transaction operation will be executed immediately, that is, the account information will be modified in the local database: (accountA - 100TRX, accountB + 100TRX). If this operation can be executed successfully, it means that the transaction is legal at least in the current state, and can be packed into the block.</p>"},{"location":"developers/code-structure/#glossary","title":"Glossary","text":"<p>SR\uff1a Super Representative, is responsible for block production.</p> <p>FullNode\uff1a stores all block data, is responsible for transactions, block broadcasting and validation, and provides query services.</p> <p>TRX\uff1a TRON native token.</p>"},{"location":"developers/code-structure/#state-rollback","title":"State Rollback","text":"<p>Above we mentioned that java-tron validates whether the transaction is legal through pre-execution, but what we need to know is that the transaction is successfully validated on a certain node does not mean that the transaction has been successfully chained because the transaction has not been packed into the consensus blocks, there is a risk of being rolled back.</p> <p>The consensus of java-tron follows a principle: that is, the transactions in the blocks that are approved by more than 2/3 of the SRs are the ones that are really successful on the chain. can also be understood as below,</p> <ul> <li>transactions are packed into a block</li> <li>the block is approved by more than 2/3 of the SRs</li> </ul> <p>A transaction that satisfies the above two points is a successful transaction on the chain. A transaction in java-tron is finally confirmed through three stages,</p> <ul> <li>transaction validating</li> <li>transaction packing into the block</li> <li>block being accepted and applied</li> </ul> <p>This also leads to a problem: in the implementation of java-tron, if a node validates the transaction, its database state changes accordingly. If the transaction is not packed into the block yet or the block it is packed into has not been approved by more than 2/3 of SR, the state of this node will be inconsistent with the state of the entire network.</p> <p>Therefore, except for the processing transaction data in blocks approved by more than 2/3 SRs, all other data state changes resulting from transaction processing may need to be rolled back. There are three kinds of scenarios in total:</p> <ul> <li>after receiving a new block, roll back the state changes generated by transaction validation</li> <li>after producing a block, roll back the state changes generated by transaction validation</li> <li>if a forked takes place, roll back the state changes generated by the transactions of the blocks in the forked chain</li> </ul> <p>The data state changes caused by these three scenarios may need to be rolled back and the following section explains why.</p>"},{"location":"developers/code-structure/#rollback-after-receiving-a-new-block","title":"Rollback after Receiving a New Block","text":"<p>When receiving a new block, the node needs to roll back to the state at the end of the previous block and roll back all transactions validated afterward. As shown below,</p> <p></p> <p>If the account balance of accountA is 100 at the block height is 1000, the node receives and validates a transaction 't1', in which accountA transfers 100TRX to accountB. After receiving the new block1001, the block contains a transaction 't2', in which accountA transfers 50TRX to accountC. In theory, t2 has been packed into the block, and the priority is higher than t1. However, if no operation is done, the validation of t2 will fail because accountA does not have enough balance. Therefore, after receiving the new block 1001, the state change generated by transaction t1 needs to be rolled back.</p>"},{"location":"developers/code-structure/#rollback-after-producing-a-new-block","title":"Rollback after Producing a New Block","text":"<p>First of all, readers may have a question: the validated transaction can be directly packed into the block, and it will not change the database state. Why is there a change in the database state?</p> <p>Because java-tron does a secondary validation of the transaction when it is packed into the block. The secondary validation is due to the timeliness of the transaction. Still taking the above figure as an example, it can be seen from the figure, that after 1001 is received, the transaction t1 was rolled back, and the balance of accountA was deducted by 50. And then, it was the node's turn to produce a block, but t1 had become an illegal transaction at this time because the balance in accountA was not enough to transfer 100 TRX, it is not advisable to directly pack t1 into the block. So the transaction needs to be validated again, which is why the transaction needs to be validated twice when producing a block.</p> <p>After the block is packed successfully, the node will broadcast the block to the network and apply the block locally. And the logic of applying will re-check the transactions in the block. So after the block is packed, a rollback operation still needs to be performed.</p>"},{"location":"developers/code-structure/#rollback-when-forking","title":"Rollback when Forking","text":"<p>This is the last rollback situation, and the blockchain will inevitably fork, especially the blockchain system based on DPoS with a faster block production speed that is more prone to fork.</p> <p>java-tron maintains a data structure in memory as below,</p> <p></p> <p>java-tron holds all blocks that have not reached consensus recently. When a forked chain occurs, according to the longest chain principle: if the block height of the forked chain is greater than the current main chain block height, the forked chain needs to be switched to the main chain. Part of the blocks on the previous main chain needs to roll back up to their common parent blocks when switching, and then apply new main chain blocks sequentially from the parent block.</p> <p>As shown in the figure, fork A in the dark part was originally the main chain. Because the height of fork B continues to grow and eventually exceeds the height of A, it is necessary to roll back the data in those three blocks with heights 1003, 1002, and 1001 in fork A. Then apply fork blocks 1001', 1002', 1003', and 1004' in B in sequence.</p>"},{"location":"developers/code-structure/#state-rollback-implementation","title":"State Rollback Implementation","text":"<p>This chapter explains receiving and validating transactions, block production, validating and saving blocks from the perspective of code, to further analyze the chainbase module of java-tron. If there is no further declaration, the default description is dedicated to all the Fullnode (including SR).</p>"},{"location":"developers/code-structure/#receiving-transactions","title":"Receiving Transactions","text":"<p>After the node receives a transaction, it puts the transaction into the local pushTransactionQueue cache queue by calling the <code>pushTransaction(final TransactionCapsule trx)</code> function of the manager class and validates the transaction at the same time. And the return of this method is sort of elegant:</p> <ol> <li>if validation is successful, \u2018true' is returned</li> <li>for the transaction sent by the user to the node through the API, if the transaction validation fails, an exception will be returned to the user; for transactions received from other nodes through the network, exceptions will only be recorded locally</li> </ol> <p>After the transaction validation is successful, the transactions without problems will be put into the pendingTransactionQueue, and the pendingTransactionQueue is responsible for providing the transaction set when producing blocks. If the node is an SR node, when producing a block, it will take out all or part of it from the pendingTransactionQueue (depending on how many transactions are in the pendingTransactionQueue) to generate a block.</p>"},{"location":"developers/code-structure/#rollback-when-receiving-blocks","title":"Rollback when Receiving Blocks","text":"<p>A node would receive transactions broadcasted from other nodes before receiving a new block, the transactions need to be validated to determine whether they can be executed correctly. Validation means that the state needs to be changed, and a successful validation does not mean that the transaction will be finally executed, and it will be considered successful after packing into a block and the block become solidified. This step can be considered to filter out those obviously wrong transactions in advance. This is just validation. When a new block arrives, the state changed by transaction validations should be rolled back. Only the state changed when applying new blocks will not be rolled back.</p> <p></p> <p>When rolling back, java-tron move the transactions in the pendingTransactionQueue to rePushTransactions, and clear the pendingTransactionQueue, see the figure for a detailed explanation.</p> <p>Why does the pendingTransactionQueue need to be emptied after a new block arrives? First of all, it is clear that the pendingTransactionQueue queue is responsible for providing transaction data when generating blocks, that is to say, it stores validated transactions that can be directly packed into blocks. Since the new block will also change the account state, those validated transactions in pendingTransactionQueue may not pass the validation after applying the new block (the simplest example: a transaction in the new block is that accountA spends a part of the token, resulting in a transaction amount of accountA in the queue that is not enough to pay ). After the transaction is moved to rePushTransactions, a background thread will be responsible for re-validating the transaction in the queue. If nothing is wrong, it will be put into the pendingTransactionQueue again to provide data for block production.</p> <p>There is a session object in java-tron. A session represents the change in the state of a block. The session object is mainly used for rollback. For example,rolling back the state to the state of the previous block needs to be operated throughout the session, as shown in the following figure,</p> <p></p> <p>In the above figure, you can see that there are many different types of databases in persistent storage. These data are jointly organized into a complete blockchain. For example, blocks are stored in khasodb and blockStore, and account information is stored in accountStore... </p> <p>The node maintains a session chain table, which stores the change information corresponding to the block/transaction, and the node can roll back through the change information. In the above figure, session1 is the status change of the current highest block. When a transaction is received, a new session2 will be generated. Each transaction that comes later will generate a temporary tmpSession, and after the transaction is validated, the tmpSession corresponded will be merged to session2. Before a new block is received again, all status changes generated by transaction validation will be saved in session2. When a new block arrives, directly execute the reset method of the session2 to roll back the state to the previous block.</p>"},{"location":"developers/code-structure/#rollback-when-producing-blocks","title":"Rollback when Producing Blocks","text":"<p>SR needs to roll back before producing blocks. The reasons are more complicated. Let's consider a scenario first:</p> <ul> <li>The pendingTransactionQueue stores the currently validated transactions, so when an SR node produces a block, it only needs to directly pack the transactions in the pendingTransactionQueue into the block, and then roll back the state to the state of the previous block after packing.</li> </ul> <p>However, there is a problem with this scheme: if the SR node has just received and applied a new block, the pendingTransactionQueue will be cleared. At this time, it is the turn of the SR to pack the block, but there is no transaction in pendingTransactionQueue. Therefore, the real implementation is that not only reads transactions from pendingTransactionQueue when generating blocks but also reads transactions from rePushTransactions and puts them into blocks if there are few transactions in pendingTransactionQueue. The above analysis shows that transactions in rePushTransactions may not be possible to pass the validation, so the transactions need to be validated again. Due to this validation logic, the state needs to be rolled back before the block is produced.</p> <p></p> <p>In the process of producing the block, the transaction will be validated again, so there will be a state change, but this is just block production, and the block needs to be broadcast as well, and those blocks who received the broadcast will actually change the state, so the state changes incurred by block production also need to be rolled back. As shown in the figure above, when the block production is completed, session2\" needs to be rolled back.</p>"},{"location":"developers/code-structure/#block-solidity","title":"Block Solidity","text":"<p>java-tron adopts the DPoS consensus mechanism. The DPoS of java-tron is to vote for 27 nodes as block producers (also known as SR), SR has the right and obligation to produce blocks, and blocks approved by more than 2/3 of SR are considered to reach a consensus. These blocks, which are no longer rolled back are called solidified blocks. Only solidified blocks can be written to the database.</p> <p>SnapshotManager in java-tron is the key entry to the storage module, holds references to all current business databases, and stores database references in a list. Each database instance supports adding a new layer of state set on its own called SnapshotImpl. It is an in-memory hashmap, multiple SnapshotImpl are associated in the form of a linked list, and one SnapshotImpl retains the data modification (in-merging or merging) involved in one state change, and SnapshotImpl is independent of each other. They are separated through this data structure, as shown in the following figure,</p> <p></p> <p>The SnapshotRoot in the above figure is the encapsulation class for the persistent database, which is responsible for storing the solidified data.</p> <p>In the previous chapters, we talked about sessions. A session represents the changes of state in a block. In fact, a session contains the SnapshotImpl corresponding to each database. For example, all SnapshotImpl in the layer of block 5 in the above figure together constitutes the changes of block 5 to the entire database.</p> <p>The changes generated after the node receives a new block will not be directly stored in the persistent storage (SnapshotRoot), but will first be stored in snapshotImpl. Each block received corresponds to a snapshotImpl. Continuously receiving blocks will lead to more and more snapshotImpl. When will they be written to persistent storage?</p> <p>There are two variables in SnapshotManager: 'size' and 'maxSize'. Here we simply understand 'size' as how many layers of snapshotImpl are there currently in memory, and 'maxSize' represents the difference between the height of the current solidified block and the latest block.</p> <p>This is obvious. If 'size' &gt; 'maxSize', it means that the blocks corresponding to the first (size-maxSize) snapshotImpl are already solidified blocks, they can be placed on the disk, and then the snapshotImpl will be merged into the persistent storage. This ensures that snapshotImpl does not occupy too much memory, and also ensures that the solidified block can be persisted in time.</p>"},{"location":"developers/code-structure/#atomicity","title":"Atomicity","text":"<p>The database storage of java-tron is slightly different from other public chains. For example, the Ethereum persistence layer uses only one database instance, and different types of data in Ethereum are distinguished by prefixes and stored in one database instance. However, java-tron currently stores data of different business types in its own database instances.</p> <p>The two implementations have their own advantages. A single instance is easy to maintain and can be written uniformly, but the disadvantages are also obvious. For example, the amount of data in a single database continues to grow over time, and frequent access to some business databases may drag down the read-and-write performance of other businesses. </p> <p>Multi-instance does not have the problem of the mutual influence of each business data read and write, and can configure different parameters according to their respective data volume and performance requirements to maximize performance, and can also independently split the database with a large amount of data. Alleviate data bloat problems. But there is a serious problem with multiple database instances: there is no native tool to support atomic writes among multiple database instances.</p> <p>In order to ensure the atomic writing of multiple database instances, java-tron has added a checkpoint mechanism, which writes the changed data to the checkpoint uniformly before the multiple instances are placed on the disk. If an accident occurs in writing to multiple database instances, the changed data will be recovered from the checkpoint when the service is restarted to ensure the atomicity of writing.</p> <p>The process of writing the snapshotImpl of the solidified block to the database in the previous section mainly includes two steps,</p> <ol> <li>create a checkpoint</li> <li>place snapshotImpl on disk</li> </ol> <p>The operation of creating a checkpoint is more critical. A checkpoint is to persistently store the snapshotImpl in memory that needs to be written to the database in a tmp database (currently, the underlying implementation is leveldb and rocksdb). After the checkpoint is successfully created, the snapshotImpl will place on the disk. If the machine is down while placing, it will first search for the existence of tmp checkpoint data when the node restart. And if so, the data in the checkpoint will be played back to snapshotRoot.</p> <p>A checkpoint data structure,</p> <p></p> <p>Checkpoint stores all data of a state change in one database. Different types of data are distinguished by prefixes. In order to ensure that all changed data can be placed on disk this time, the bottom layer of the database calls writeBatch() when writing. </p> <p>This solution can be summarized as,</p> <ul> <li>the atomicity of writes cannot be guaranteed among multiple database instances, but a single database (most mainstream databases) supports atomic writes</li> <li>the data set that needs to be guaranteed to be written atomically is first written to a temporary database by atomic writing, and then the data is written to different database instances; if an accident occurs, it can be recovered through the data of the temporary database</li> </ul>"},{"location":"developers/code-structure/#summary_1","title":"Summary","text":"<p>This article analyzes the implementation details of rollback and database writing in the chainbase module through the processing flow of transactions and blocks and also analyzes the principle of atomic writing among multiple instances of the database to prevent database damage caused by accidental downtime. We hope that reading this article can help developers to further understand and develop the java-tron database.</p>"},{"location":"developers/code-structure/#network","title":"Network","text":""},{"location":"developers/code-structure/#overview","title":"Overview","text":"<p>P2P is a distributed network in which participants in the network share a part of the hardware resources they own, such as processing power, storage capacity, network connection capacity, printers, etc. These shared resources need to be provided services and content by the network, which can be accessed by other peers directly without going through an intermediate entity. Participants in this network are both providers and acquirers of service and content.</p> <p>Different from the traditional Client/Server central server structure, the status of each node in the P2P network is equal. While serving as a client, each node can also serve as a server to provide services to other nodes, which greatly improves the utilization of resources.</p>"},{"location":"developers/code-structure/#blockchain-network","title":"Blockchain Network","text":"<p>P2P is the network layer in the blockchain structure. The main purpose of the network layer is to realize information broadcast, verification and communication between nodes. The blockchain network is essentially a P2P network, and each node can both receive and generate information. Nodes keep communication by maintaining common blockchain data.</p> <p>As the foundation of the blockchain, the P2P network brings the following advantages to the blockchain:</p> <ul> <li>Prevent single-point attack</li> <li>High fault tolerance</li> <li>Better compatibility and scalability</li> </ul>"},{"location":"developers/code-structure/#tron-network","title":"TRON Network","text":"<p>The architecture diagram of TRON is as follows: </p> <p>As the most fundamental module of TRON, the P2P network directly determines the stability of the entire blockchain network. The network module can be divided into the following four parts according to the function:</p> <ul> <li>Node Discovery</li> <li>Node Connection</li> <li>Block Synchronization</li> <li>Block and Transaction Broadcast</li> </ul> <p>Below will separately introduce these four functional parts.</p>"},{"location":"developers/code-structure/#node-discovery","title":"Node Discovery","text":"<p>Node discovery is the first step for nodes to access the blockchain network. The blockchain network is a structured P2P network which organizes all nodes in an orderly manner, such as forming a ring network or a tree-like network. Structured networks are generally implemented based on the DHT (Distributed Hash Table) algorithm. Specific implementation algorithms include Chord, Pastry, CAN, Kademlia and so on. The TRON network uses the Kademlia algorithm.</p>"},{"location":"developers/code-structure/#kademlia-algorithm","title":"Kademlia Algorithm","text":"<p>Kademlia is an implementation of Distributed Hash Table (DHT), it is the core routing technology in the decentralized P2P network and can quickly find target nodes in the network without a central server.</p> <p>For a detailed introduction to the algorithm, please refer to Kademlia.</p>"},{"location":"developers/code-structure/#kademlia-implementation-by-tron","title":"Kademlia Implementation by TRON","text":"<p>The main points of the Kademlia algorithm implemented by TRON are as follows:</p> <ul> <li>Node ID: Randomly generated 512bit ID</li> <li>Node Distance: The node distance is obtained through the XOR operation of two nodes' ID. The formula is: <code>Node distance = 256 - the number of leading 0s in the node ID XOR result</code>, if the calculation result is negative, the distance is equal to 0.</li> <li>K-Bucket: The node routing table. According to the distance between the nodes, the remote nodes are divided into different buckets. The remote nodes with the same distance as the current node are recorded in the same bucket, and each bucket can accommodate up to 16 nodes. According to the calculation formula of node distance, it can be seen that the Kademlia algorithm implemented by TRON maintains a total of 256 buckets.</li> </ul> <p>The node discovery protocol of TRON includes the following four UDP messages:</p> <ul> <li><code>DISCOVER_PING</code> - used to detect if a node is online</li> <li><code>DISCOVER_PONG</code> - used in response to <code>DISCOVER_PING</code> message</li> <li><code>DISCOVER_FIND_NODE</code> - used to find other nodes closest to the target node</li> <li><code>DISCOVER_NEIGHBORS</code> - used in response to <code>DISCOVER_FIND_NODE</code> message, will return one or more nodes, up to 16</li> </ul>"},{"location":"developers/code-structure/#initialize-k-buckets","title":"Initialize K-Buckets","text":"<p>After the node is started, it will read the seed nodes configured in the node configuration file and the peer nodes recorded in the database, and then send <code>DISCOVER_PING</code> message to them respectively. If the reply message <code>DISCOVER_PONG</code> from a peer is received, and at the condition that the K bucket is not full, it will then write the peer node into the K bucket; But if the corresponding bucket has already been full (that is the bucket has reached 16 nodes), it will challenge to the earliest node in the bucket. If the challenge is successful, the old node will be deleted, and the new node will be added to the K bucket. That is the K bucket initialization process, then the node discovery process is performed.</p> <p></p>"},{"location":"developers/code-structure/#send-discover_find_node-to-find-more-nodes","title":"Send DISCOVER_FIND_NODE to Find More Nodes","text":"<p>The node discovery service will start two scheduled tasks (<code>DiscoverTask</code> and <code>RefreshTask</code>) to periodically perform the node discovery process to update k buckets.</p> <ul> <li><code>DiscoverTask</code> is to discover more nodes that are closer to myself. It is executed every 30s. The execution flow is as follows:     </li> <li><code>RefreshTask</code> is to expand the local k-bucket by random node ID, that is, to find nodes that are closer to the random node ID. It is executed every 7.2s. The execution process is as follows:     </li> </ul> <p>The node discovery algorithm used in <code>DiscoverTask</code> and <code>RefreshTask</code> will be executed 8 rounds in one call, and each round sends <code>DISCOVER_FIND_NODE</code> message to the 3 nodes closest to the target node ID in the K bucket, and waits for a reply.</p>"},{"location":"developers/code-structure/#receive-neighbors-messages-and-update-k-bucket","title":"Receive Neighbors' Messages and Update K Bucket","text":"<p>When the local node receives the <code>DISCOVER_NEIGHBORS</code> message replied by the remote node, it will send the <code>DISCOVER_PING</code> message to the received neighbor node in turn, and then if it receives the reply message <code>DISCOVER_PONG</code>, it will judge whether the corresponding K-bucket is full, if the K-bucket is not full, it will add the new node to the K bucket, if the K bucket is full, it will challenge one of the nodes, if the challenge is successful (send a <code>DISCOVER_PING</code> message to the old node, if it fails to receive the reply message <code>DISCOVER_PONG</code>, the challenge is successful, otherwise the challenge fails), the old node will be deleted from the K bucket, and the new node will be added to the K bucket.</p> <p></p> <p>Nodes periodically perform node discovery tasks, continuously update K-buckets, and build their own node routing tables. The next step is to establish a connection with nodes.</p>"},{"location":"developers/code-structure/#node-connection","title":"Node Connection","text":"<p>Before understanding how to establish a TCP connection between nodes, we need to first understand the peer node type.</p>"},{"location":"developers/code-structure/#peer-node-management","title":"Peer Node Management","text":"<p>The local node needs to manage and classify peer nodes for efficient and stable node connection. Remote nodes can be divided into the following categories:</p> <ul> <li>Active nodes: specified in the configuration file. After the system starts, it will actively establish connections with the nodes. If the connection fails to be established, it will retry in each scheduled TCP connection task.</li> <li>Passive nodes: specified in the configuration file. The local node will passively accept connections from them.</li> <li>Trust nodes: specified in the configuration file, both Active nodes and Passive nodes are trusted nodes. When receiving a connection request from a trusted node, some other condition checks are skipped and the request is accepted directly.</li> <li>BadNodes: When an abnormal protocol packet is received, the sending node will be added to the badNodes list, valid for 1 hour. When a connection request from badNodes is received, the request will be rejected directly</li> <li>RecentlyDisconnectedNodes: When a connection is disconnected, the peer node will be added to the recentlyDisconnectedNodes list, valid for 30s, when a connection request from recentlyDisconnectedNodes is received, the request will be rejected directly</li> </ul>"},{"location":"developers/code-structure/#establish-tcp-connection-with-peers","title":"Establish TCP Connection with Peers","text":"<p>After the node is started, a scheduled task <code>poolLoopExecutor</code> will be created to establish a TCP connection with nodes. It will select nodes and establish connections with them. The working process is as follows:</p> <p></p> <p>The TCP connection can be mainly divided into two steps: first, determine the node list which the node will establish a connection with. The list needs to contain the active nodes that have not successfully established a connection, and then calculate the number of connections that also need to be established, and filter out the nodes from discovered neighbors according to the node filtering strategy, then score and sort them according to the node scoring strategy, and the corresponding number of nodes with the highest score is added to the request list. Finally, TCP connections are established with the nodes in the request list.</p>"},{"location":"developers/code-structure/#node-filtering-strategy","title":"Node Filtering Strategy","text":"<p>When establishing a node connection, it is necessary to filter out the following types of nodes and determine whether the node's own connection number has reached the maximum value.</p> <ul> <li>Myself</li> <li>Nodes in the recentlyDisconnectedNodes list</li> <li>Nodes in badNodes list</li> <li>Nodes that have already established a connection</li> <li>The number of connections established with the node IP has already reached the upper limit (maxConnectionsWithSameIp)</li> </ul> <p>But for trusted nodes, some filtering policies are ignored and connections are always established.</p> <p></p>"},{"location":"developers/code-structure/#node-scoring-strategy","title":"Node Scoring Strategy","text":"<p>The node score is used to determine the priority of nodes to establish a connection. The higher the score, the higher the priority. Scoring dimensions include:</p> <ul> <li>Packet loss rate: The lower the packet loss rate, the better the communication quality. The score is inversely proportional to the packet loss rate. The highest score is 100 and the lowest is 0.</li> <li>Network delay: The smaller the network delay, the better the network quality. The score is inversely proportional to the average network latency. The highest score is 20 and the lowest is 0.</li> <li>TCP traffic: The larger the TCP traffic, the more active the communication. The score is proportional to the TCP traffic, with a maximum score of 20 and a minimum of 0</li> <li>Disconnection times: The fewer disconnection times, the more stable the node is. The score is inversely proportional to the number of disconnections. The score is 10 times the number of disconnections.</li> <li>Handshake: Nodes that have been handshake successfully before indicate that they have the same blockchain information, so it is preferred to establish a connection with them. When the number of successful Handshakes is greater than 0, the Handshake score is 20, otherwise, the score is 0.</li> <li>Penalty state: A node in the Penalty state has a score of 0 and does not participate in scoring in other dimensions. The following situations will be regarded as in the Penalty state:<ul> <li>Node disconnection time is less than 60s</li> <li>The node is in the badNodes list</li> <li>Inconsistent blockchain information</li> </ul> </li> </ul> <p>When calculating the node score, first determine whether the node is in the Penalty state, if so, the score is counted as 0, otherwise, the node score is the sum of the scores of each dimension.</p>"},{"location":"developers/code-structure/#handshake","title":"Handshake","text":"<p>After the TCP connection is successfully established, the node that actively initiates the TCP connection request will send a handshake message <code>P2P_HELLO</code> to the neighbor node, in order to confirm whether the blockchain information between the nodes is consistent and whether it is necessary to initiate the block synchronization process.</p> <p>When the neighbor node receives <code>P2P_HELLO</code>, it will compare with the local information, such as checking whether the p2p version and the genesis block information are consistent. If all the check conditions are passed, it will reply to the <code>P2P_HELLO</code> message, and then perform the block synchronization or broadcast; otherwise, it will disconnect the connection.</p>"},{"location":"developers/code-structure/#channel-keep-alive","title":"Channel Keep-Alive","text":"<p>Channel keep-alive is accomplished through <code>P2P_PING</code>, <code>P2P_PONG</code> TCP messages. When a node establishes a TCP connection with a neighbor node and handshakes successfully, the node will open a thread <code>pingTask</code> for the connection and periodically send <code>P2P_PING</code> messages to maintain the TCP connection, which is scheduled every 10s. If the <code>P2P_PONG</code> message replied is not received within the timeout period, the connection will be terminated.</p>"},{"location":"developers/code-structure/#block-synchronization","title":"Block Synchronization","text":"<p>After completing the handshake with the peer node, if the peer node's blockchain is longer than the local blockchain, the block synchronization process <code>syncService.startSync</code> will be triggered according to the longest chain principle. The message interaction during the synchronization process is as follows:</p> <p></p> <p>Node A sends an <code>SYNC_BLOCK_CHAIN</code> message to peer node B to announce the blockchain summary information of the local chain. After the peer node B receives it, it calculates the list of missing blocks of node A, and sends the lost block ID list to node A through the <code>BLOCK_CHAIN_INVENTORY</code> message, carrying a maximum of 2000 block ids at a time.</p> <p>After node A receives the <code>BLOCK_CHAIN_INVENTORY</code> message, it gets the missing block id, and sends a <code>FETCH_INV_DATA</code> message to node B asynchronously to request the missing block, up to 100 blocks at a time. If there are still blocks that need to be synchronized (that is, the remain_num in the <code>BLOCK_CHAIN_INVENTORY</code> message is greater than 0), a new round of block synchronization process will be triggered.</p> <p>After node B receives the <code>FETCH_INV_DATA</code> message from node A, it sends the block to node A through the <code>BLOCK</code> message. After node A receives the <code>BLOCK</code> message, it asynchronously processes the block.</p>"},{"location":"developers/code-structure/#blockchain-summary-and-list-of-missing-blocks","title":"Blockchain Summary and List of Missing Blocks","text":"<p>Below will take several different block synchronization scenarios as examples to illustrate the generation of the blockchain summary and the lost block ID list. </p> <ul> <li>Blockchain summary: an ordered list of block IDs, including the highest solidified block, the highest non-solidified block, and the blocks corresponding to the dichotomy.</li> <li>List of missing blocks: The neighbor node compares its own chain with the received blockchain summary, determines the missing blocks list of peers, and returns a set of consecutive block IDs and the number of remaining blocks.</li> </ul>"},{"location":"developers/code-structure/#normal-synchronization-scene","title":"Normal Synchronization Scene","text":"<p>The height of the local header block is 1018, and the height of the solidified block is 1000. The two nodes have just established a connection, so the height of the common block is 0. The local blockchain summary of node A obtained by the dichotomy is 1000, 1010, 1015, 1017, and 1018.</p> <p>After node B receives the blockchain summary of node A, combined with the local chain, it can produce the list of blocks that node A lacks: 1018, 1019, 1020, and 1021. Then, node A requests to synchronize blocks 1019, 1020, and 1021 according to the list of missing blocks.</p> <p></p>"},{"location":"developers/code-structure/#chain-switching-scene","title":"Chain-Switching Scene","text":"<p>The head block height of the local main chain is 1018, and the height of the solidified block is 1000. The two nodes have just established a connection, so the height of the common block is 0. The local blockchain summary of node A obtained by the dichotomy is 1000, 1010, 1015, 1017, and 1018.</p> <p>After node B receives the chain summary of node A, it finds that the local main chain is not the same as the main chain of node A, compares the chain summary of node A and finds that the common block height is 1015, then it computes the list of blocks that node A lacks are 1015, 1016', 1017', 1018', and 1019'. Then, node A requests to synchronize blocks 1018' and 1019' according to the list of missing blocks.</p> <p></p> <p>In another switching chain scenario, the height of the local main chain header block is 1018, the height of the solidified block is 1000, and the common block is 1017', which is located on the fork chain. The local blockchain summary of node A obtained by the dichotomy is 1000, 1009, 1014, 1016', and 1017'.</p> <p>After node B receives the chain summary of node A, combined with the local chain, it can produce the list of blocks that node A lacks 1017', 1018', and 1019'. Then, node A requests to synchronize blocks 1018', and 1019' according to the list of missing blocks.</p> <p></p>"},{"location":"developers/code-structure/#block-and-transaction-broadcast","title":"Block and Transaction Broadcast","text":"<p>When the super representative node produces a new block, or the fullnode receives a new transaction initiated by the user, the transaction &amp; block broadcasting process will be initiated. When a node receives a new block or new transaction, it will forward the corresponding block or transaction, and the forwarding process is the same as that of broadcasting. The message interaction is shown in the following figure:</p> <p></p> <p>The types of messages involved include:</p> <ul> <li><code>INVENTORY</code> - broadcast list: list of block or transaction ids</li> <li><code>FETCH_INV_DATA</code> - the list data that the node needs to get: block or transaction id list</li> <li><code>BLOCK</code> - block data</li> <li><code>TRXS</code> - transaction data</li> </ul> <p>Node A sends the transaction or block to be broadcast to Node B via the <code>INVENTORY</code> list message. After node B receives the <code>INVENTORY</code> list message, it needs to check the status of the peer node, and if it can receive the message, it puts the blocks/transactions in the list into the \"to be fetched queue\" <code>invToFetch</code>. If it is a block list, it will also trigger the \"get block &amp; transaction task\" immediately to send a <code>FETCH_INV_DATA</code> message to node A to get the block &amp; transaction.</p> <p>After node A receives the <code>FETCH_INV_DATA</code> message, it will check whether an \"INVENTORY\" message has been sent to the peer. If it has been sent, it will send a transaction or block message to node B according to the list data. After node B receives the transaction or block message, it processes the message and triggers the forwarding process.</p>"},{"location":"developers/code-structure/#summary_2","title":"Summary","text":"<p>This article introduces the implementation details related to the P2P network, the lowest level module of TRON, including node discovery, node connection, block synchronization, and the process of block and transaction broadcasting. I hope that reading this article can help developers to further understand and develop java-tron network-related modules.</p>"},{"location":"developers/demo/","title":"Development Example","text":"<p>This document will detail the process of contributing to <code>java-tron</code> development, using the addition of a new <code>setPeer</code> HTTP API as a practical example. Before you begin, please ensure you have configured your development environment, for instance, by following the IntelliJ IDEA Development Environment Setup Guide.</p> <p>Background: At times, a <code>java-tron</code> node may fail to connect to peers due to network issues. To enhance the stability of the node's network connections, we want to implement a feature that enables you to dynamically add trusted nodes while the node is running, ensuring connectivity even if the node discovery service fails.</p>"},{"location":"developers/demo/#1-prepare-the-development-environment","title":"1. Prepare the Development Environment","text":""},{"location":"developers/demo/#11-fork-the-java-tron-repository","title":"1.1 Fork the <code>java-tron</code> Repository","text":"<p>First, fork the official TRON GitHub repository, tronprotocol/java-tron, to your personal GitHub account. Then, clone your forked repository to your local machine and add the <code>upstream</code> remote to track official updates:</p> <pre><code>git clone https://github.com/yourname/java-tron.git\ngit remote add upstream https://github.com/tronprotocol/java-tron.git\n</code></pre>"},{"location":"developers/demo/#12-synchronize-the-repository","title":"1.2 Synchronize the Repository","text":"<p>Before starting development on a new feature, it is crucial to synchronize your personal fork with the <code>upstream</code> repository to get the latest code updates:</p> <pre><code>git fetch upstream\ngit checkout develop\ngit merge upstream/develop --no-ff\n</code></pre>"},{"location":"developers/demo/#13-create-a-new-branch","title":"1.3 Create a New Branch","text":"<p>Create a new branch from your local <code>develop</code> branch for your development work. Please follow the branch naming conventions for naming your branch. For this example, we will use <code>feature/add-new-http-demo</code> as the branch name.</p> <pre><code>git checkout -b feature/add-new-http-demo develop\n</code></pre>"},{"location":"developers/demo/#2-code-implementation-add-the-setpeer-http-api","title":"2. Code Implementation: Add the <code>setPeer</code> HTTP API","text":"<p>Open the <code>java-tron</code> project in IntelliJ IDEA. Next, we will implement a <code>setPeer</code> HTTP API to allow users to add trusted nodes via a POST request.</p>"},{"location":"developers/demo/#21-create-setpeerservletjava","title":"2.1 Create <code>SetPeerServlet.java</code>","text":"<p>In the <code>java-tron/framework/src/main/java/org/tron/core/services/http</code> directory, create a new <code>Servlet</code> class named <code>SetPeerServlet.java</code>. This class will contain <code>doGet</code> and <code>doPost</code> methods to handle HTTP GET and POST requests, respectively. If a specific request type is not supported, you can leave the corresponding method empty.</p> <pre><code>package org.tron.core.services.http;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport org.tron.core.net.peer.ChannelManager;\nimport org.tron.core.net.peer.Node;\nimport org.tron.core.config.CommonParameter;\nimport org.tron.core.Constant;\nimport org.tron.core.exception.BadItemException;\nimport org.tron.core.services.http.fullnode.PostParams;\nimport org.tron.core.services.http.fullnode.Util;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\n\nimport com.alibaba.fastjson.JSONObject;\n\n@Component\n@Slf4j(topic = \"API\")\npublic class SetPeerServlet extends HttpServlet {\n\n  @Autowired\n  private ChannelManager channelManager;\n\n  protected void doGet(HttpServletRequest request, HttpServletResponse response) {\n    // GETrequests are not handled in this example\n  }\n\n  protected void doPost(HttpServletRequest request, HttpServletResponse response) {\n    try {\n      PostParams params = PostParams.getPostParams(request);\n\n      JSONObject jsonObject = JSONObject.parseObject(params.getParams());\n      String peerIpPort = String.valueOf(jsonObject.get(\"peer\"));\n\n      boolean res = addPeer(peerIpPort);\n      if (res) {\n        response.getWriter().println(\"Success to set trusted peer:\" + peerIpPort);\n      } else {\n        response.getWriter().println(\"Fail to set the trusted peer:\" + peerIpPort);\n      }\n\n    } catch (Exception e) {\n      logger.error(\"Exception occurs when setting peer: {}\", e.getMessage());\n      try {\n        response.getWriter().println(Util.printErrorMsg(e));\n      } catch (IOException ioe) {\n        logger.error(\"IOException occurs when setting peer: {}\", ioe.getMessage());\n      }\n    }\n  }\n\n  private boolean addPeer(String peerIP) {\n    try {\n      if (peerIP != null &amp;&amp; !peerIP.isEmpty()) {\n        Node node = Node.instanceOf(peerIP);\n        if (!(CommonParameter.PARAMETER.nodeDiscoveryBindIp.equals(node.getHost())\n            || CommonParameter.PARAMETER.nodeExternalIp.equals(node.getHost())\n            || Constant.LOCAL_HOST.equals(node.getHost()))\n            || CommonParameter.PARAMETER.nodeListenPort != node.getPort()) {\n\n          InetAddress address = new InetSocketAddress(node.getHost(), node.getPort()).getAddress();\n          channelManager.getTrustNodes().put(address, node);\n          return true;\n        }\n      }\n    } catch (Exception e) {\n      logger.error(\"addPeer error - {}\", e.getMessage());\n    }\n    return false;\n  }\n}\n</code></pre> <p>In the code above:</p> <ul> <li>The <code>doPost</code> method handles incoming POST requests. It extracts the <code>peer</code> information (an IP address and port in <code>IP:Port</code> format) from the request parameters.</li> <li>The <code>addPeer</code> method adds the peer to the list of trusted nodes. The logic of this function is as follows:<ol> <li>Check the user-provided parameters to ensure the node's IP and port are not empty.</li> <li>Construct the node information using <code>Node.instanceOf(peerIP)</code>.</li> <li>Ensure that the trusted node being added is not the current node itself.</li> <li>Add the node to the <code>ChannelManager</code>'s trusted nodes list.</li> </ol> </li> </ul>"},{"location":"developers/demo/#22-register-setpeerservlet-with-the-http-api-service","title":"2.2 Register <code>SetPeerServlet</code> with the HTTP API Service","text":"<p>After implementing <code>SetPeerServlet</code>, you need to register it with the node's HTTP API service. The <code>FullNodeHttpApiService</code> class serves as the entry point for registering all HTTP interfaces. In its <code>start</code> method, use <code>context.addServlet</code> to register <code>SetPeerServlet</code> as an HTTP API at the endpoint <code>/wallet/setpeer</code>:</p> <pre><code>package org.tron.core.services.http;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport org.eclipse.jetty.servlet.ServletContextHandler;\nimport org.eclipse.jetty.servlet.ServletHolder;\nimport org.tron.core.services.Service;\n\n@Component\npublic class FullNodeHttpApiService implements Service {\n\n  @Autowired\n  private SetPeerServlet setPeerServlet;\n\n  // ... other member variables and methods ...\n\n  @Override\n  public void start() {\n    // ... other initialization code ...\n    ServletContextHandler context = new ServletContextHandler(ServletContextHandler.SESSIONS);\n    // ... other Servlet registrations ...\n    context.addServlet(new ServletHolder(setPeerServlet), \"/wallet/setpeer\");\n    // ... other startup code...\n  }\n\n  // ... other methods ...\n}\n</code></pre>"},{"location":"developers/demo/#23-debuging-and-testing","title":"2.3 Debuging and Testing","text":"<p>Once the code changes are complete, you can start the <code>java-tron</code> node in IntelliJ IDEA for debugging. Then, use the <code>curl</code> command in your terminal to access the newly added HTTP API:</p> <pre><code>curl --location --request POST 'http://127.0.0.1:16667/wallet/setpeer' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"peer\":\"192.163.3.2:16667\"\n}'\n</code></pre> <p>If the request is successful, you will receive the following response:</p> <p><pre><code>Success to set trusted peer:192.163.3.2:16667\n</code></pre> At this point, the implementation of the <code>setPeer</code> feature is complete. Next, you need to write unit tests for these changes.</p>"},{"location":"developers/demo/#3-writing-unit-tests","title":"3. Writing Unit Tests","text":"<p>The <code>java-tron</code> project uses the JUnit framework for unit testing. For detailed information on using JUnit, please refer to the official JUnit documentation. Below is an introduction to the specifications and common annotations for <code>java-tron</code> unit test cases.</p>"},{"location":"developers/demo/#31-java-tron-unit-test-case-guidelines","title":"3.1 <code>java-tron</code>  Unit Test Case Guidelines","text":"<p>When writing unit tests for <code>java-tron</code>, please adhere to the following guidelines:</p> <ul> <li>Directory and Package Structure: All test classes should be located in the <code>test</code> directory and maintain the same package structure as the class being tested. We recommend suffixing test class names with <code>Test</code>.</li> <li>Test Method Definition: Test methods must be annotated with <code>@Test</code> and declared as <code>public void</code>. We recommend prefixing method names with <code>test</code> to improve readability.</li> <li>Method Independence: Each method in a test class should be runnable independently. There should be no dependencies between methods, ensuring the stability and maintainability of the tests.</li> </ul>"},{"location":"developers/demo/#32-common-junit-annotations","title":"3.2 Common JUnit Annotations","text":"<p>The following are commonly used annotations in JUnit. For more details, please consult the official JUnit documentation.</p> <ul> <li><code>@Test</code>: Marks a method as a test method that will be executed by the test runner.</li> <li><code>@Ignore</code>: Ignores the current test method, preventing it from being executed (useful for temporarily skipping unstable or unfinished tests).</li> <li><code>@BeforeClass</code>: Runs once before any of the test methods in the class. Must be a <code>static</code> method (typically used for initializing shared resources).</li> <li><code>@AfterClass</code>: Runs once after all test methods in the class have been executed. Must be a <code>static</code> method (typically used for releasing shared resources).</li> <li><code>@Before</code>: Runs before each test method (used to prepare the test environment, such as initializing data).</li> <li><code>@After</code>: Runs after each test method (used to clean up the test environment, such as closing connections).</li> </ul>"},{"location":"developers/demo/#33-composition-of-a-unit-test-class","title":"3.3 Composition of a Unit Test Class","text":"<p>A typical unit test class consists of the following three parts:</p> <ul> <li>Initialization Method: A method annotated with <code>@Before</code> or <code>@BeforeClass</code> that performs setup operations before tests are executed, such as preparing test data or configuring the environment.</li> <li>Cleanup Method: A method annotated with <code>@After</code> or <code>@AfterClass</code> that performs cleanup operations after tests are executed, such as releasing resources or restoring data.</li> <li>Test Method: A method annotated with <code>@Test</code> that contains the specific test logic to verify that the code behaves as expected.</li> </ul> <pre><code>import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class DemoTest {\n\n  @Before\n  public void init() {\n    // Initialization work before the test case runs\n  }\n\n  @After\n  public void destroy() {\n    // Data cleanup work after the test case runs\n  }\n\n  @Test\n  public void testDemoMethod() {\n    // Test logic\n  }\n}\n</code></pre> <p>For this example, we should create a new test class file, <code>SetPeerServletTest.java</code>, in the <code>framework/src/test/java/org/tron/core/services/http/</code> directory to write the corresponding test cases.</p> <pre><code>package org.tron.core.services.http;\n\nimport org.junit.After;\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.tron.core.config.args.Args;\nimport org.tron.core.net.peer.ChannelManager;\nimport org.tron.core.services.http.fullnode.SetPeerServlet;\nimport org.tron.core.db.Manager;\nimport org.tron.core.db.TronApplicationContext;\nimport org.tron.core.Constant;\nimport org.tron.core.services.Application;\nimport org.tron.core.services.ApplicationFactory;\n\npublic class SetPeerServletTest {\n\n  private static TronApplicationContext context;\n  private static Application appT;\n  public static ChannelManager channelManager;\n\n  @Before\n  public void init() {\n    Args.setParam(new String[]{}, Constant.TEST_CONF);\n    context = new TronApplicationContext(Manager.class);\n    channelManager = context.getBean(ChannelManager.class);\n    appT = ApplicationFactory.create(context);\n    appT.initServices(Args.getInstance());\n    appT.startServices();\n    appT.startup();\n  }\n\n  @After\n  public void destroy() {\n    Args.clearParam();\n    appT.shutdownServices();\n    appT.shutdown();\n  }\n\n  @Test\n  public void testAddPeer() {\n    SetPeerServlet setPeerServlet = new SetPeerServlet();\n    // Assuming 127.0.0.1 is the local IP, addPeer should return false\n    // because it should not add itself as a trusted peer.\n    Assert.assertFalse(setPeerServlet.addPeer(\"127.0.0.1\"));\n  }\n}\n</code></pre>"},{"location":"developers/demo/#4-checkstyle-code-style-check","title":"4. CheckStyle Code Style Check","text":"<p>Before submitting your code, be sure to run a CheckStyle code style check on the files you have modified. In IntelliJ IDEA, you can right-click a file and select \"Check Current File\". Fix any code style issues based on the prompts until all warnings are resolved.</p> <p></p> <p>After fixing the code style issues, run the check again to ensure all warnings have been resolved:</p> <p></p>"},{"location":"developers/demo/#5-submitting-code-and-creating-a-pull-request","title":"5. Submitting Code and Creating a Pull Request","text":""},{"location":"developers/demo/#51-submit-a-commit","title":"5.1 Submit a Commit","text":"<p>After you have finished writing and testing your code, commit your changes. Please refer to the Commit Specification.</p> <pre><code>git add .\ngit commit -m 'feat: add new http api setpeer'\n</code></pre>"},{"location":"developers/demo/#52-push-the-new-branch","title":"5.2 Push the New Branch","text":"<p>Push your new branch to your personal remote repository:</p> <pre><code>git push origin feature/add-new-http-demo\n</code></pre>"},{"location":"developers/demo/#53-submit-a-pull-request","title":"5.3 Submit a Pull Request","text":"<p>On GitHub, create a Pull Request from your repository to <code>tronprotocol/java-tron</code>. This will propose your changes to the official repository.</p> <p></p> <p>Please ensure your Pull Request description is clear and includes details about the changes you have made and their purpose.</p>"},{"location":"developers/deployment/","title":"Deployment","text":""},{"location":"developers/deployment/#premise","title":"Premise","text":"<p>Create separate directories for fullnode and soliditynode</p> <p>NOTE: SolidityNode is deprecated. Now a FullNode supports all RPCs of a SolidityNode. New developers should deploy FullNode only.</p> <pre><code>/deploy/fullnode\n/deploy/soliditynode\n</code></pre> <p>Create two folders for fullnode and soliditynode.</p> <p>Clone the latest master branch of https://github.com/tronprotocol/java-tron and extract it to <pre><code>/deploy/java-tron\n</code></pre></p> <p>Make sure you have the proper dependencies.</p> <ul> <li>JDK 1.8 (JDK 1.9+ is not supported yet)</li> <li>On Linux Ubuntu system (e.g. Ubuntu 16.04.4 LTS), ensure that the machine has Oracle JDK 8, instead of having Open JDK 8 in the system. If you are building the source code by using Open JDK 8, you will get Build Failed result.</li> <li>Open UDP ports for connection to the network</li> <li>MINIMUM 2 CPU Cores</li> </ul>"},{"location":"developers/deployment/#deployment-guide","title":"Deployment Guide","text":"<p>1.\u00a0Build the java-tron project <pre><code>cd /deploy/java-tron\n./gradlew build\n</code></pre></p> <p>2.\u00a0Copy the FullNode.jar and SolidityNode.jar along with configuration files into the respective directories <pre><code>download your needed configuration file from https://github.com/tronprotocol/java-tron/blob/develop/framework/src/main/resources/config.conf.\n\nconfig.conf is the configuration for MainNet. To set up a testnet node, please modify the parameters in the configuration file.\n\ncp build/libs/FullNode.jar ../fullnode\n\ncp build/libs/SolidityNode.jar ../soliditynode\n</code></pre></p> <p>3.\u00a0You can now run your FullNode using the following command <pre><code>java -jar FullNode.jar -c config.conf // make sure that your config.conf is downloaded from https://github.com/tronprotocol/TronDeployment\n</code></pre></p> <p>4.\u00a0Configure the SolidityNode configuration file</p> <p>You need to edit <code>config.conf</code> to connect to your local FullNode. Change  <code>trustNode</code> in <code>node</code> to local <code>127.0.0.1:50051</code>, which is the default rpc port. Set <code>listen.port</code> to any number within the range of 1024-65535. Please don't use any ports between 0-1024 since you'll most likely hit conflicts with other system services. Also change <code>rpc port</code> to <code>50052</code> or something to avoid conflicts. Please forward the UDP port 18888 for FullNode. <pre><code>rpc {\n      port = 50052\n    }\n</code></pre></p> <p>5.\u00a0You can now run your SolidityNode using the following command\uff1a <pre><code>java -jar SolidityNode.jar -c config.conf //make sure that your config.conf is downloaded from https://github.com/tronprotocol/TronDeployment\n</code></pre></p> <p>6.\u00a0Running a Super Representative Node for mainnet <pre><code>java -jar FullNode.jar -p your private key --witness -c your config.conf(Example\uff1a/data/java-tron/config.conf)\nExample:\njava -jar FullNode.jar -p 650950B1...295BD812 --witness -c /data/java-tron/config.conf\n</code></pre></p> <p>This is similar to running a private testnet, except that the IPs in the <code>config.conf</code> are officially declared by TRON.</p> <p>7.\u00a0Running a Super Representative Node for private testnet</p> <p>You should modify the config.conf:</p> <ul> <li>Replace existing entry in genesis.block.witnesses with your address</li> <li>Replace existing entry in seed.node ip.list with your ip list</li> <li>The first Super Node start, needSyncCheck should be set false</li> <li>Set p2pversion to 61</li> </ul> <pre><code>cd build/libs\njava -jar FullNode.jar -p your private key --witness -c your config.conf (Example\uff1a/data/java-tron/config.conf)\nExample:\njava -jar FullNode.jar -p 650950B1...295BD812 --witness -c /data/java-tron/config.conf\n</code></pre>"},{"location":"developers/deployment/#logging-and-network-connection-verification","title":"Logging and Network Connection Verification","text":"<p>Logs for both nodes are located in <code>/deploy/\\*/logs/tron.log</code>. Use <code>tail -f /logs/tron.log/</code> to follow along with the block syncing.</p> <p>You should see something similar to this in your logs for block synchronization:</p> <p>FullNode <pre><code>12:00:57.658 INFO  [pool-7-thread-1] [o.t.c.n.n.NodeImpl](NodeImpl.java:830) Success handle block Num:236610,ID:0000000000039c427569efa27cc2493c1fff243cc1515aa6665c617c45d2e1bf\n</code></pre> SolidityNode <pre><code>12:00:40.691 INFO  [pool-17-thread-1] [o.t.p.SolidityNode](SolidityNode.java:88) sync solidity block, lastSolidityBlockNum:209671, remoteLastSolidityBlockNum:211823\n</code></pre></p>"},{"location":"developers/deployment/#stop-node-gracefully","title":"Stop Node Gracefully","text":"<p>Create file stop.sh\uff0cuse kill -15 to close FullNode.jar(or SolidityNode.jar). You need to modify pid=<code>ps -ef |grep FullNode.jar |grep -v grep |awk '{print $2}'</code> to find the correct pid. <pre><code>#!/bin/bash\nwhile true; do\n  pid=`ps -ef |grep FullNode.jar |grep -v grep |awk '{print $2}'`\n  if [ -n \"$pid\" ]; then\n    kill -15 $pid\n    echo \"The java-tron process is exiting, it may take some time, forcing the exit may cause damage to the database, please wait patiently...\"\n    sleep 1\n  else\n    echo \"java-tron killed successfully!\"\n    break\n  fi\ndone\n</code></pre></p>"},{"location":"developers/deployment/#fullnode-and-soliditynode-fast-deployment","title":"FullNode and SolidityNode Fast Deployment","text":"<p>Download fast deployment script, run the script according to different types of node.</p> Scope of use <p>This script could be used on Linux/MacOS, but not on Windows. Just Support FullNode and SolidityNode.</p> Download and run script <pre><code>wget https://raw.githubusercontent.com/tronprotocol/TronDeployment/master/deploy_tron.sh -O deploy_tron.sh\n</code></pre> Parameter Illustration <pre><code>bash deploy_tron.sh --app [FullNode|SolidityNode] --net [mainnet|testnet|privatenet] --db [keep|remove|backup] --heap-size &lt;heapsize&gt;\n\n--app Optional, Running application. The default node is Fullnode and it could be FullNode or SolidityNode.\n--net Optional, Connecting network. The default network is mainnet and it could be mainnet, testnet.\n--db  Optional, The way of data processing could be keep, remove and backup. Default is keep. If you launch two different networks, like from mainnet to testnet or from testnet to mainnet, you need to delete database.\n--trust-node  Optional, It only works when deploying SolidityNode. Default is 127.0.0.1:50051. The specified gRPC service of Fullnode, like 127.0.0.1:50051 or 13.125.249.129:50051.\n--rpc-port  Optional, Port of grpc. Default is 50051. If you deploy SolidityNode and FullNode on the same host\uff0cyou need to configure different ports.\n--commit  Optional, commitid of project.\n--branch  Optional, branch of project.  Mainnet default is latest release and Testnet default is master.\n--heap-size  Optional, jvm option: Xmx. The default heap-size is 0.8 * memory size.\n--work_space  Optional, default is current directory.\n</code></pre>  Deployment of FullNode on the one host  <pre><code>wget https://raw.githubusercontent.com/tronprotocol/TronDeployment/master/deploy_tron.sh -O deploy_tron.sh\nbash deploy_tron.sh\n</code></pre>  Deployment of SolidityNode on the one host  <pre><code>wget https://raw.githubusercontent.com/tronprotocol/TronDeployment/master/deploy_tron.sh -O deploy_tron.sh\n# User can self-configure the IP and Port of GRPC service in the trust-node field of SolidityNode. trust-node is the fullnode you just deploy.\nbash deploy_tron.sh --app SolidityNode --trust-node &lt;grpc-ip:grpc-port&gt;\n</code></pre>  Deployment of FullNode and SolidityNode on the same host  <pre><code># You need to configure different gRPC ports on the same host because gRPC port is available on SolidityNode and FullNodeConfigure and it cannot be set as default value 50051. In this case the default value of rpc port is set as 50041.\nwget https://raw.githubusercontent.com/tronprotocol/TronDeployment/master/deploy_tron.sh -O deploy_tron.sh\nbash deploy_tron.sh --app FullNode\nbash deploy_tron.sh --app SolidityNode --rpc-port 50041\n</code></pre>"},{"location":"developers/deployment/#grpc-gateway-deployment","title":"Grpc Gateway Deployment","text":"Summary  <p>This script helps you download the code from https://github.com/tronprotocol/grpc-gateway and deploy the code on your environment.</p>  Pre-requests  <p>Please follow the guide on https://github.com/tronprotocol/grpc-gateway Install Golang, Protoc, and set $GOPATH environment variable according to your requirement.</p>  Download and run script  <pre><code>wget https://raw.githubusercontent.com/tronprotocol/TronDeployment/master/deploy_grpc_gateway.sh -O deploy_grpc_gateway.sh\n</code></pre>  Parameter Illustration  <pre><code>bash deploy_grpc_gateway.sh --rpchost [rpc host ip] --rpcport [rpc port number] --httpport [http port number]\n\n--rpchost The fullnode or soliditynode IP where the grpc service is provided. Default value is \"localhost\".\n--rpcport The fullnode or soliditynode port number grpc service is consuming. Default value is 50051.\n--httpport The port intends to provide http service provided by grpc gateway. Default value is 18890.\n</code></pre>  Example  <p>Use default configuration\uff1a <pre><code>bash deploy_grpc_gateway.sh\n</code></pre> Use customized configuration\uff1a <pre><code>bash deploy_grpc_gateway.sh --rpchost 127.0.0.1 --rpcport 50052 --httpport 18891\n</code></pre></p>"},{"location":"developers/deployment/#event-subscribe-plugin-deployment","title":"Event Subscribe plugin Deployment","text":"<p>This is an implementation of TRON eventsubscribe model.</p> <ul> <li>api module defines IPluginEventListener, a protocol between java-tron and event plugin.</li> <li>app module is an example for loading plugin, developers could use it for debugging.</li> <li>kafkaplugin module is the implementation for kafka, it implements IPluginEventListener, it receives events subscribed from java-tron and relay events to kafka server.</li> <li>mongodbplugin mongodbplugin module is the implementation for mongodb.</li> </ul>  Setup/Build  <ol> <li>Clone the repo <code>git clone https://github.com/tronprotocol/event-plugin.git</code></li> <li>Go to eventplugin <code>cd event-plugin</code></li> <li> <p>run <code>./gradlew build</code></p> </li> <li> <p>This will produce one plugin zip, named <code>plugin-kafka-1.0.0.zip</code>, located in the <code>event-plugin/build/plugins/</code> directory.</p> </li> </ol>  Edit **config.conf** of java-tron\uff0c add the following fields: <p><pre><code>event.subscribe = {\n    path = \"\" // absolute path of plugin\n    server = \"\" // target server address to receive event triggers\n    dbconfig=\"\" // dbname|username|password\n    topics = [\n        {\n          triggerName = \"block\" // block trigger, the value can't be modified\n          enable = false\n          topic = \"block\" // plugin topic, the value could be modified\n        },\n        {\n          triggerName = \"transaction\"\n          enable = false\n          topic = \"transaction\"\n        },\n        {\n          triggerName = \"contractevent\"\n          enable = true\n          topic = \"contractevent\"\n        },\n        {\n          triggerName = \"contractlog\"\n          enable = true\n          topic = \"contractlog\"\n        }\n    ]\n\n    filter = {\n       fromblock = \"\" // the value could be \"\", \"earliest\" or a specified block number as the beginning of the queried range\n       toblock = \"\" // the value could be \"\", \"latest\" or a specified block number as end of the queried range\n       contractAddress = [\n           \"\" // contract address you want to subscribe, if it's set to \"\", you will receive contract logs/events with any contract address.\n       ]\n\n       contractTopic = [\n           \"\" // contract topic you want to subscribe, if it's set to \"\", you will receive contract logs/events with any contract topic.\n       ]\n    }\n}\n</code></pre>  * path: is the absolute path of \"plugin-kafka-1.0.0.zip\"  * server: Kafka server address  * topics: each event type maps to one Kafka topic, we support four event types subscribing, block, transaction, contractlog and contractevent.  * dbconfig: db configuration information for mongodb, if using kafka, delete this one; if using Mongodb, add like that dbname|username|password  * triggerName: the trigger type, the value can't be modified.  * enable: plugin can receive nothing if the value is false.  * topic: the value is the kafka topic to receive events. Make sure it has been created and Kafka process is running  * filter: filter condition for process trigger.  note: if the server is not 127.0.0.1, pls set some properties in config/server.properties file            remove comment and set listeners=PLAINTEXT://:9092            remove comment and set advertised.listeners to PLAINTEXT://host_ip:9092</p>"},{"location":"developers/deployment/#kafka","title":"Install Kafka  Run Kafka  Create topics to receive events, the topic is defined in config.conf  Kafka consumer  Load plugin in java-tron  Event filter","text":"<p>On Mac: <pre><code>brew install kafka\n</code></pre></p> <p>On Linux: <pre><code>cd /usr/local\nwget http://archive.apache.org/dist/kafka/0.10.2.2/kafka_2.10-0.10.2.2.tgz\ntar -xzvf kafka_2.10-0.10.2.2.tgz\nmv kafka_2.10-0.10.2.2 kafka\n\nadd \"export PATH=$PATH:/usr/local/kafka/bin\" to end of /etc/profile\nsource /etc/profile\n\n\nkafka-server-start.sh /usr/local/kafka/config/server.properties &amp;\n</code></pre> Note: make sure the version of Kafka is the same as the version set in build.gradle of eventplugin project.(kafka_2.10-0.10.2.2 kafka)</p> <p>On Mac: <pre><code>zookeeper-server-start /usr/local/etc/kafka/zookeeper.properties &amp; kafka-server-start /usr/local/etc/kafka/server.properties\n</code></pre></p> <p>On Linux: <pre><code>zookeeper-server-start.sh /usr/local/kafka/config/zookeeper.properties &amp;\nSleep about 3 seconds\nkafka-server-start.sh /usr/local/kafka/config/server.properties &amp;\n</code></pre></p> <p>On Mac: <pre><code>kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic block\nkafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic transaction\nkafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic contractlog\nkafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic contractevent\n</code></pre></p> <p>On Linux: <pre><code>kafka-topics.sh  --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic block\nkafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic transaction\nkafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic contractlog\nkafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic contractevent\n</code></pre></p> <p>On Mac: <pre><code>kafka-console-consumer --bootstrap-server localhost:9092  --topic block\nkafka-console-consumer --bootstrap-server localhost:9092  --topic transaction\nkafka-console-consumer --bootstrap-server localhost:9092  --topic contractlog\nkafka-console-consumer --bootstrap-server localhost:9092  --topic contractevent\n</code></pre></p> <p>On Linux: <pre><code>kafka-console-consumer.sh --zookeeper localhost:2181 --topic block\nkafka-console-consumer.sh --zookeeper localhost:2181 --topic transaction\nkafka-console-consumer.sh --zookeeper localhost:2181 --topic contractlog\nkafka-console-consumer.sh --zookeeper localhost:2181 --topic contractevent\n</code></pre></p> <ul> <li>add --es to command line, for example: <pre><code> java -jar FullNode.jar -p privatekey -c config.conf --es\n</code></pre></li> </ul> <p>which is defined in config.conf, path: event.subscribe <pre><code>filter = {\n       fromblock = \"\" // the value could be \"\", \"earliest\" or a specified block number as the beginning of the queried range\n       toblock = \"\" // the value could be \"\", \"latest\" or a specified block number as end of the queried range\n       contractAddress = [\n           \"TVkNuE1BYxECWq85d8UR9zsv6WppBns9iH\" // contract address you want to subscribe, if it's set to \"\", you will receive contract logs/events with any contract address.\n       ]\n\n       contractTopic = [\n           \"f0f1e23ddce8a520eaa7502e02fa767cb24152e9a86a4bf02529637c4e57504b\" // contract topic you want to subscribe, if it's set to \"\", you will receive contract logs/events with any contract topic.\n       ]\n    }\n</code></pre></p>"},{"location":"developers/deployment/#mongo","title":"Download and install MongoDB","text":"<p>** Suggested Configuration **</p> <ul> <li>CPU/ RAM: 16Core / 32G</li> <li>DISK: 500G</li> <li>System: CentOS 64</li> </ul> <p>The version of MongoDB is 4.0.4, below is the command:</p> <ul> <li>cd /home/java-tron</li> <li>curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.4.tgz</li> <li>tar zxvf mongodb-linux-x86_64-4.0.4.tgz</li> <li>mv mongodb-linux-x86_64-4.0.4 mongodb</li> </ul> <p>** Set environment ** - export MONGOPATH=/home/java-tron/mongodb/ - export PATH=PATH:MONGOPATH/bin</p> <p>** Create mongodb config ** The path is : /etc/mongodb/mgdb.conf</p> <ul> <li>cd /etc/mongodb</li> <li>touch mgdb.conf</li> </ul> <p>Create data&amp;log folder for mongodb Create data, log subfolder in mongodb directory,  and add their absolute path to mgdb.conf</p> <p>** Example: **</p> <ul> <li>dbpath=/home/java-tron/mongodb/data</li> <li>logpath=/home/java-tron/mongodb/log/mongodb.log</li> <li>port=27017</li> <li>logappend=true</li> <li>fork=true</li> <li>bind_ip=0.0.0.0</li> <li>auth=true</li> <li>wiredTigerCacheSizeGB=2</li> </ul> <p>** Note: ** - bind_ip must be configured to 0.0.0.0\uff0cotherwise remote connection will be refused. - wiredTigerCacheSizeGB, must be configured to prevent OOM</p> <p>** Launch MongoDB **   - mongod  --config /etc/mongodb/mgdb.conf</p> <p>** Create admin account: ** - mongo - use admin - db.createUser({user:\"root\",pwd:\"admin\",roles:[{role:\"root\",db:\"admin\"}]})</p> <p>** Create eventlog and its owner account **</p> <ul> <li>db.auth(\"root\", \"admin\")</li> <li>use eventlog</li> <li>db.createUser({user:\"tron\",pwd:\"123456\",roles:[{role:\"dbOwner\",db:\"eventlog\"}]})</li> </ul> <p>database: eventlog, username:tron, password: 123456</p> <p>** Firewall rule: ** - iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 27017 -j ACCEPT</p> <p>** Remote connection via mongo: **</p> <ul> <li>mongo 47.90.245.68:27017</li> <li>use eventlog</li> <li>db.auth(\"tron\", \"123456\")</li> <li>show collections</li> <li>db.block.find()</li> </ul> <p>** Query block trigger data: **</p> <ul> <li>db.block.find({blockNumber: {$lt: 1000}});  // return records whose blockNumber less than1000</li> </ul> <p>** Set database index to speedup query: **</p> <p>cd /{projectPath} sh insertIndex.sh</p>"},{"location":"developers/deployment/#event-query-service-deployment","title":"Event query service deployment","text":"Download sourcecode <p>Download sourcecode</p> <p>git clone https://github.com/tronprotocol/tron-eventquery.git cd troneventquery</p>  Build  <ul> <li>mvn package</li> </ul> <p>After the build command is executed successfully, troneventquery jar to release will be generated under troneventquery/target directory.</p> <p>Configuration of mongodb \"config.conf\" should be created for storing mongodb configuration, such as database name, username, password, and so on. We provided an example in sourcecode, which is \" troneventquery/config.conf \". Replace with your specified configuration if needed.</p> <p>Note:</p> <p>Make sure the relative path of config.conf and troneventquery jar. The config.conf 's path is the parent of troneventquery jar.</p> <ul> <li>mongo.host=IP</li> <li>mongo.port=27017</li> <li>mongo.dbname=eventlog</li> <li>mongo.username=tron</li> <li>mongo.password=123456</li> <li>mongo.connectionsPerHost=8</li> <li>mongo.threadsAllowedToBlockForConnectionMultiplier=4</li> </ul> <p>Any configuration could be modified except mongo.dbname, \"eventlog\" is the specified database name for event subscribe.</p>  Run  <ul> <li>troneventquery/deploy.sh is used to deploy troneventquery</li> <li>troneventquery/insertIndex.sh is used to setup mongodb index to speedup query.</li> </ul>"},{"location":"developers/deployment/#advanced-configurations","title":"Advanced Configurations","text":"<p>Read the Advanced Configuration</p>"},{"location":"developers/governance/","title":"Network Governance","text":"<p>The governance of the TRON network is primarily achieved by modifying network parameters, a process also known as network upgrade. Anyone can propose changes to network parameters within the community, but only Super Representatives (SR) , Super Representative Partners and Super Representative Candidates can formally submit voting requests on-chain. During the voting period, the Super Representatives will vote on the proposal. When the voting deadline is reached and the required number of supporting votes is met, the proposal automatically takes effect.</p> <p>You can view the history of completed proposals and voting records here.</p>"},{"location":"developers/governance/#proposal-voting-process","title":"Proposal Voting Process","text":"<ol> <li>Initiate Proposal Discussion </li> <li>Community Discussion </li> <li>Submit Voting Request </li> <li>Voting and Implementation </li> </ol>"},{"location":"developers/governance/#initiate-proposal-discussion","title":"Initiate Proposal Discussion","text":"<p>Any TRON network participant can initiate a discussion for a TIP vote. Please create an Issue in the TIP repository, providing detailed information about the proposal, including:</p> <ul> <li>Proposal motivation  </li> <li>Network parameters to be modified and their values  </li> <li>Technical specifications  </li> <li>Expected impact of the changes  </li> </ul> <p>New proposal discussions can refer to this example.</p>"},{"location":"developers/governance/#specification-requirements","title":"Specification Requirements","text":""},{"location":"developers/governance/#title","title":"Title","text":"<p>To facilitate dissemination and community participation, it is recommended to give the proposal a concise and clear name, placed at the beginning of the title, for example:</p> <pre><code>Proposal: Change the unit price of Energy to 100 sun\n</code></pre>"},{"location":"developers/governance/#body-content","title":"Body Content","text":"<p>The Issue body should include the following main sections:</p> <pre><code>## Simple Summary\nBriefly describe the TRON network parameters to be modified and their values, along with a summary of the expected impact.\n\n## Motivation\nDescribe the motivation for the proposal, including the current issues and why certain network parameters need to be modified.\n\n## Timeline\nSpecify the date for initiating the proposal vote and the estimated time for the proposal to take effect.\nGenerally, after an Issue is raised, about two weeks are allocated for community discussion, so the formal voting request should be initiated after two weeks.\n\n## How to Initialize the Voting Request\nClearly specify the command to initiate the proposal voting request on-chain.\n\n## Technical Specification / Background\nProvide a detailed description of the technical specifications or background information for the proposal.\n</code></pre>"},{"location":"developers/governance/#community-discussion","title":"Community Discussion","text":"<p>After the TIP discussion is initiated, the proposer should actively encourage community users to participate in the discussion, collect opinions and feedback, and make appropriate revisions and updates to the proposal based on the discussion results.</p>"},{"location":"developers/governance/#submit-voting-request","title":"Submit Voting Request","text":"<p>Typically, if the community has fully discussed and reached a basic consensus, a Super Representative , Super Representative Partner or  Super Representative Candidate, will formally submit the voting request on-chain.</p>"},{"location":"developers/governance/#voting-and-implementation","title":"Voting and Implementation","text":"<ul> <li>The on-chain voting period lasts for 3 days.  </li> <li>During this period, all Super Representatives can vote on the TIP.  </li> <li>After the voting deadline, if the number of supporting votes from Super Representatives is greater than or equal to 18, the proposal is considered passed and automatically takes effect.</li> </ul>"},{"location":"developers/issue-workflow/","title":"Issue Specification and Guidelines","text":"<p>We encourage community contributors to actively participate in raising and discussing Issues for java-tron. You can submit any problems you encounter or new ideas you have as an Issue Participating in Issue discussions or helping to provide solutions will drive java-tron in a better direction. We sincerely thank you for every contribution you make to java-tron.</p>"},{"location":"developers/issue-workflow/#submitting-an-issue","title":"Submitting an Issue","text":"<p>If you encounter a problem or find a Bug while using java-tron, we welcome you to submit an Issue Please follow these rules to ensure efficient processing:</p>"},{"location":"developers/issue-workflow/#1-search-existing-issues","title":"1. Search Existing Issues","text":"<p>Before submitting a new Issue, be sure to check whether someone has already reported the same problem or proposed a similar idea. This will not only help you find a solution faster but also prevent duplicate submissions.</p>"},{"location":"developers/issue-workflow/#2-choose-and-submit-an-issue-type","title":"2. Choose and Submit an Issue Type","text":"<p>Please select the corresponding Issue type based on the problem you are reporting and fill out the Issue content according to the template requirements:</p> <ul> <li><code>Ask a question</code>   Please describe the problem you are experiencing, the expected outcome, and the actual observed result in detail. A clear description helps community members better understand your problem and provide a solution faster.</li> <li><code>Report a bug</code>   In addition to describing the problem, expected outcome, and actual result, you should also detail the steps to reproduce the Bug and include the java-tron log and <code>stack trace</code> from when the problem occurred.</li> <li><code>Request a feature</code>   Please explain why this feature is needed, its specific use case, the suggested implementation plan, and whether you are willing to participate in implementing it.</li> </ul>"},{"location":"developers/issue-workflow/#issue-handling-process","title":"Issue Handling Process","text":"<p>The process for handling an Issue is as follows:</p> <ol> <li>Tagging Issues    New issues will be triaged and labeled by core contributors.</li> <li>Assigning Issues    Issues will be assigned to one or more core community developers. These core developers will participate in the investigation and discussion of the Issue</li> <li>Community Discussion    All community participants can join the Issue investigation and discussion, posting their thoughts or opinions in the comments section. Through the collective wisdom of the community, we will work together to find solutions to problems.</li> <li>Closing Issues    An Issue submitter can close their own submitted Issue at any time. We will also close an Issue when the problem has been resolved, or if the Issue has not been discussed by the community for an extended period. If needed, the Issue submitter or other users can reopen the Issue based on the actual situation.</li> </ol>"},{"location":"developers/issue-workflow/#issue-tag-classification","title":"Issue Tag Classification","text":"<p>To view all issue classification labels, please visit the following link:</p> <p>https://github.com/tronprotocol/java-tron/labels</p>"},{"location":"developers/java-tron/","title":"Developer Guide","text":"<p>Thank you for contributing to the development of java-tron source code!</p> <p>Whether it's a small fix or a significant feature improvement, we greatly appreciate your contributions.</p> <p>On GitHub, you can:</p> <ul> <li>Track issues</li> <li>Contribute code</li> <li>Suggest improvements</li> <li>Request new features</li> <li>Collaborate on maintaining documentation</li> </ul> <p>If you plan to contribute to java-tron development, please follow the process below.</p>"},{"location":"developers/java-tron/#contribution-process-overview","title":"Contribution Process Overview","text":"<ol> <li>Fork the Repository     Fork the java-tron repository to your personal account.</li> <li>Modify Code     Create a new branch based on the standard and start development.</li> <li>Submit Changes     Commit your changes with clear commit messages.</li> <li>Create a Pull Request (PR)     Push your changes to your forked repository and submit a PR to the official repository.</li> <li>Code Review and Merge     Maintainers will review your PR based on the Code Review Guidelines and merge it into the main branch if it meets the requirements.</li> </ol>"},{"location":"developers/java-tron/#submission-rules","title":"Submission Rules","text":"<ul> <li>Minor Fixes     You can directly submit a PR, but ensure it includes a complete description.</li> <li>Complex Changes     Please first submit an Issue in the TIP repository, detailing the motivation and implementation plan. Refer to the TIP Specification.</li> <li>Early PR Submission     We encourage developers to submit PRs early, even if the feature is not yet complete. This allows other developers to know that the related TIP Issue has entered the In Progress state.</li> <li>Development Branch     All development should be based on the <code>develop</code> branch, followed by a PR submission.</li> </ul>"},{"location":"developers/java-tron/#branch-management","title":"Branch Management","text":"<p>The <code>java-tron</code> repository includes the following main branch types:</p> <ul> <li><code>develop</code> Branch<ul> <li>Used for daily development</li> <li>Only allows merging from forked branches and <code>release-*</code> branches</li> <li>When preparing a new release, a <code>release-*</code> branch is created from this branch</li> </ul> </li> <li><code>master</code> Branch<ul> <li>Used only for releases</li> <li>Only merges from <code>release-*</code> and <code>hotfix-*</code> branches</li> </ul> </li> <li><code>release-*</code> Branch<ul> <li>Created from <code>develop</code> for version finalization and regression testing</li> <li>Merged into <code>master</code> branch after regression testing</li> <li>Permanently retained as a release snapshot</li> <li>Bug fixes are merged directly into this branch and synchronized back to <code>develop</code></li> </ul> </li> <li><code>feature-*</code> Branch<ul> <li>Created from <code>develop</code> for new feature development</li> <li>Merged back into <code>develop</code> after feature completion</li> <li>Can be maintained long-term</li> </ul> </li> <li><code>hotfix-*</code> Branch<ul> <li>Created from <code>master</code> for urgent bug fixes</li> <li>Merged back into both <code>master</code> and <code>develop</code> after fixes are complete</li> </ul> </li> </ul>"},{"location":"developers/java-tron/#code-submission-process","title":"Code Submission Process","text":""},{"location":"developers/java-tron/#1-fork-and-clone-the-repository","title":"1. Fork and Clone the Repository","text":"<pre><code>git clone https://github.com/yourname/java-tron.git\ncd java-tron\ngit remote add upstream https://github.com/tronprotocol/java-tron.git\n</code></pre> <p><code>upstream</code> refers to the official repository. The name can be customized, but <code>upstream</code> is the conventional choice</p>"},{"location":"developers/java-tron/#2-sync-upstream-code","title":"2. Sync Upstream Code","text":"<pre><code>git fetch upstream\ngit checkout develop\ngit merge upstream/develop --no-ff\n</code></pre> <p><code>--no-ff</code> avoids fast-forward merges to ensure a clear commit history.</p>"},{"location":"developers/java-tron/#3-create-a-development-branch","title":"3. Create a Development Branch","text":"<pre><code>git checkout -b feature/branch_name develop\n</code></pre>"},{"location":"developers/java-tron/#4-commit-changes","title":"4. Commit Changes","text":"<pre><code>git add .\ngit commit -m \"commit message\"\n</code></pre>"},{"location":"developers/java-tron/#5-push-the-branch","title":"5. Push the Branch","text":"<pre><code>git push origin feature/branch_name\n</code></pre>"},{"location":"developers/java-tron/#6-create-a-pull-request","title":"6. Create a Pull Request","text":"<p>From your own repository, submit a Pull Request (PR) to <code>tronprotocol/java-tron</code>.     It\u2019s recommended to select the options in the red box, setting <code>develop</code> branch of the <code>tronprotocol/java-tron</code> as the base branch and your forked repository\u2019s branch as the compare branch.</p>"},{"location":"developers/java-tron/#code-review-guidelines","title":"Code Review Guidelines","text":"<p>The only way to merge code into java-tron is through a Pull Request (PR). All PRs must be reviewed before merging.</p>"},{"location":"developers/java-tron/#review-process","title":"Review Process","text":"<ul> <li>Reviewers must understand the motivation and changes of the PR.</li> <li>For PRs lacking descriptions or with excessive changes, reviewers may request additional clarification.</li> <li>Reviewers check code style, feature completeness, and test coverage.</li> <li>Reviewers should remain polite, respectful, and follow up promptly.</li> </ul>"},{"location":"developers/java-tron/#feature-validation","title":"Feature Validation","text":"<ul> <li>Bug Fix PRs<ul> <li>Reviewers should attempt to reproduce the issue and verify the fix.</li> <li>It\u2019s recommended that submitters provide unit tests that fail before the fix and pass after.</li> </ul> </li> <li>New Feature PRs<ul> <li>Reviewers should test the new feature and provide feedback.</li> <li>All new code must include unit tests.</li> </ul> </li> </ul>"},{"location":"developers/java-tron/#code-specification-requirements","title":"Code Specification Requirements","text":"<ul> <li>Use code formatting tools to check code.</li> <li>Self-test before submission.</li> <li>Pass standardized tests.</li> </ul> <p>CI Tools:</p> <ul> <li>Sonar: Static code analysis</li> <li>Travis CI: Continuous integration checks</li> </ul> <p>Once all checks pass, maintainers will review and merge into <code>develop</code>.</p> <p>Coding Standards - Follow the Google Java Style Guide - All PRs must be based on the <code>develop</code> branch</p>"},{"location":"developers/java-tron/#branch-naming-conventions","title":"Branch Naming Conventions","text":"<ol> <li><code>master</code> and <code>develop</code> are fixed names.</li> <li>Version development branches are named by version number and version name (e.g., <code>GreatVoyage-v4.8.0(Kant)</code>).</li> <li><code>hotfix/*</code>: For urgent fixes ( e.g., <code>hotfix/typo</code>).</li> <li><code>feature/*</code>: For new feature development (e.g., <code>feature/new-resource-model</code>).</li> </ol>"},{"location":"developers/java-tron/#pull-request-specifications","title":"Pull Request Specifications","text":"<ol> <li>One PR should address a single issue.</li> <li>Avoid excessively large changes.</li> <li>Title: Briefly describe the PR\u2019s purpose.</li> <li>Description: Provide detailed information for reviewers.</li> <li>Specify areas where feedback is needed.</li> </ol>"},{"location":"developers/java-tron/#commit-message-specifications","title":"Commit Message Specifications","text":"<p>Recommended format:</p> <pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;\n\n&lt;body&gt;\n\n&lt;footer&gt;\n</code></pre>"},{"location":"developers/java-tron/#commit-types","title":"Commit Types","text":"<ul> <li><code>feat</code>: New feature</li> <li><code>fix</code>: Bug fix</li> <li><code>docs</code>: Documentation changes</li> <li><code>style</code>: Formatting changes (no functional changes)</li> <li><code>refactor</code>: Code refactoring</li> <li><code>test</code>: Test code changes</li> <li><code>chore</code>: Other (e.g., task assignments)</li> </ul>"},{"location":"developers/java-tron/#subject-specifications","title":"Subject Specifications","text":"<ol> <li>Maximum 50 characters.</li> <li>Start with a verb in the first-person present tense (e.g., <code>change</code>, not <code>changed</code>).</li> <li>Start with a lowercase letter.</li> <li>No period at the end.</li> <li>Avoid meaningless commits.</li> </ol> <p>Example: <pre><code>feat(block): optimize the block-producing logic\n\n1. increase the priority for acquiring synchronization lock\n2. add interruption exception handling in block-producing thread\n\nCloses #1234\n</code></pre></p>"},{"location":"developers/java-tron/#handling-special-cases","title":"Handling Special Cases","text":"<ul> <li>Submitter Not Following Up<ul> <li>Contact after a few days; if no response, the PR may be closed or continued by others.</li> </ul> </li> <li>Submitter Refactoring While Fixing Bugs<ul> <li>Small-scale refactoring is acceptable.</li> <li>Large-scale changes should be split into separate PRs or at least separate commits.</li> </ul> </li> <li>Submitter Rejects Feedback<ul> <li>Reviewers may close the PR.</li> </ul> </li> </ul>"},{"location":"developers/java-tron/#conduct","title":"Conduct","text":"<p>Please maintain respect and constructiveness to foster a positive community atmosphere.</p>"},{"location":"developers/run-in-idea/","title":"IntelliJ IDEA Configuration for java-tron","text":"<p>To simplify the Java development process and improve efficiency, selecting and configuring an Integrated Development Environment (IDE) is a crucial first step. This guide uses IntelliJ IDEA as an example to explain how to set up and configure the java-tron development environment.</p> <p>java-tron nodes support deployment on <code>Linux</code> or <code>MacOS</code> operating systems. The JDK version requirements are as follows:</p> <ul> <li>General Requirement: Oracle JDK 1.8</li> <li>For <code>v4.8.1</code> and later: Support is also provided for JDK 17 on the ARM architecture</li> </ul>"},{"location":"developers/run-in-idea/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, please ensure your development environment meets the following requirements:</p> <ul> <li>Operating System: <code>Linux</code> or <code>MacOS</code></li> <li>Oracle JDK 1.8 is installed</li> <li><code>git</code> is installed</li> <li>IntelliJ IDEA is installed</li> </ul>"},{"location":"developers/run-in-idea/#configuring-the-intellij-idea-environment","title":"Configuring the IntelliJ IDEA Environment","text":""},{"location":"developers/run-in-idea/#step-1-install-the-lombok-plugin","title":"Step 1: Install the Lombok Plugin","text":"<p>Lombok simplifies Java code through annotations and is an essential plugin for java-tron development.</p> <ol> <li>Open IntelliJ IDEA and navigate to <code>Preferences</code> -&gt; <code>Plugins</code>.</li> <li>In the Marketplace tab, search for <code>Lombok</code>.</li> <li>Click \"Install\" and restart the IDE when prompted.</li> </ol>"},{"location":"developers/run-in-idea/#step-2-enable-annotation-processing","title":"Step 2: Enable Annotation Processing","text":"<p>To ensure Lombok's annotations work correctly, you must enable the annotation processor.</p> <ol> <li>Navigate to <code>Preferences</code> -&gt; <code>Build, Execution, Deployment</code> -&gt; <code>Compiler</code> -&gt; <code>Annotation Processors</code>.</li> <li>Select the <code>Enable annotation processing</code> checkbox.</li> <li>Click \"Apply\" to save the settings.</li> </ol> <p></p>"},{"location":"developers/run-in-idea/#step-3-verify-and-unify-the-jdk-version","title":"Step 3: Verify and Unify the JDK Version","text":"<p>To ensure the project compiles and runs correctly, you must set the JDK version to Oracle JDK 1.8 in two key locations within IntelliJ IDEA.</p>"},{"location":"developers/run-in-idea/#1-configure-project-sdk","title":"1. Configure Project SDK","text":"<p>This is the core JDK used for compiling the project's source code and performing syntax analysis.</p> <ol> <li>Navigate to <code>File</code> -&gt; <code>Project Structure</code> -&gt;, and select \"Project\" from the left panel.</li> <li>In the <code>Project SDK</code> dropdown menu, confirm that version <code>1.8</code> is selected.</li> </ol>"},{"location":"developers/run-in-idea/#2-configure-gradle-jvm","title":"2. Configure Gradle JVM","text":"<p>This is the JDK used to execute Gradle build tasks (e.g., build, clean).</p> <ol> <li>Navigate to <code>Preferences</code> -&gt; <code>Build, Execution, Deployment</code> -&gt; <code>Build Tools</code> -&gt; <code>Gradle</code>.</li> <li>In the Gradle JVM dropdown menu on the right, ensure that the selected version is also <code>1.8</code>, consistent with the Project SDK.</li> </ol> <p></p> <p>Important Note: The Project SDK and Gradle JVM settings must match and both be set to Oracle JDK 1.8. Otherwise, you may encounter unexpected errors during the build process.</p>"},{"location":"developers/run-in-idea/#getting-and-compiling-the-source-code","title":"Getting and Compiling the Source Code","text":""},{"location":"developers/run-in-idea/#step-1-clone-the-source-code","title":"Step 1: Clone the Source Code","text":"<p>Clone the java-tron source code to your local machine and switch to the <code>develop</code> branch.</p> <pre><code>git clone https://github.com/tronprotocol/java-tron.git\ncd java-tron\ngit checkout -t origin/develop\n</code></pre>"},{"location":"developers/run-in-idea/#step-2-compile-java-tron","title":"Step 2: Compile java-tron","text":"<p>You can compile the project in two ways:</p> <ul> <li> <p>Compile using the terminal:</p> <p>In the root directory of the <code>java-tron</code> project, execute the following Gradle command:</p> <p><pre><code># Perform a full build, including all test cases\n./gradlew clean build\n</code></pre> To speed up the compilation process by skipping unit tests, you can use the <code>-x test</code> argument:</p> <p><pre><code># Compile while skipping tests\n./gradlew clean build -x test\n</code></pre>   * Compile using the IntelliJ IDEA UI:</p> <p>Open the <code>java-tron</code> project in IntelliJ IDEA, then click <code>Build</code> -&gt; <code>Build Project</code> in the top menu bar to compile the entire project.</p> </li> </ul>"},{"location":"developers/run-in-idea/#configuring-code-style-checks","title":"Configuring Code Style Checks","text":"<p>java-tron adheres to the <code>Google checkstyle</code> code standard. By configuring the <code>Checkstyle</code> plugin in IDEA, you can check your code style in real-time to ensure the quality of your commits.</p>"},{"location":"developers/run-in-idea/#step-1-install-the-checkstyle-plugin","title":"Step 1: Install the Checkstyle Plugin","text":"<ol> <li>In IDEA, navigate to <code>Preferences</code> -&gt; <code>Plugins</code>\u3002</li> <li>In the Marketplace, search for and install the <code>Checkstyle</code> plugin.</li> </ol>"},{"location":"developers/run-in-idea/#step-2-configure-checkstyle-rules","title":"Step 2: Configure Checkstyle Rules","text":"<ol> <li>First, locate the code style configuration file. You can use the local <code>config/checkstyle/checkStyleAll.xml</code> file within the project, or download it from the official GitHub Repository.</li> <li>In IDEA, navigate to <code>Preferences</code> -&gt; <code>Tools</code> -&gt; <code>Checkstyle</code> to open the configuration panel.</li> <li>In the <code>Configuration File</code> panel, click the <code>+</code> icon to add a new configuration. </li> <li>In the dialog that appears, set the  <code>Description</code> to <code>tron-checkstyle</code> and select the <code>checkStyleAll.xml</code> file you just obtained.</li> <li>Select the checkbox for the newly added <code>tron-checkstyle</code> rule and click \"Apply\" and \"OK\".</li> </ol> <p>Once configured, you can use the <code>Checkstyle</code> plugin to check your code style. It supports various scopes, allowing you to analyze the entire project, a single module, or the file you are currently editing. The most common operation is to check the current file:</p> <ol> <li>Right-click in the code editor.</li> <li>Select \"Check Current File\".</li> </ol> <p>If any code style issues are detected, <code>Checkstyle</code> will list them in a window at the bottom. Before committing your code, correct all reported issues according to the prompts to maintain codebase consistency.</p> <p></p>"},{"location":"developers/run-in-idea/#running-and-debugging","title":"Running and Debugging","text":""},{"location":"developers/run-in-idea/#step-1-create-a-working-directory","title":"Step 1: Create a Working Directory","text":"<p>Before running java-tron, you need to create a working directory to store the database and log files generated by the node at runtime.</p> <pre><code>mkdir /Users/javatrondeploy\n</code></pre> <p>Important Note: java-tron will look for the <code>config.conf</code> file in this directory. Before starting the node, ensure you have placed the correct configuration file in this directory.</p>"},{"location":"developers/run-in-idea/#step-2-configure-rundebug-options","title":"Step 2: Configure Run/Debug Options","text":"<p>Next, create a new run configuration in IntelliJ IDEA to define how it launches the java-tron application.</p> <ol> <li>In the top-right corner of IDEA, click <code>Add Configuration...</code>.</li> <li>Click <code>+</code> -&gt; <code>Application</code> to create a new run configuration.</li> <li>Find and set the following options in order:<ul> <li>Name: Give the configuration a name, e.g., <code>Fullnode</code>.</li> <li>JDK: Ensure you select <code>java 8 1.8</code>.</li> <li>Main Class: Set to <code>org.tron.program.FullNode</code>.</li> <li>Program Arguments: Enter the node startup arguments. For example, use <code>-c config.conf</code> to specify the configuration file.</li> <li>Working Directory: Set this to the directory you created in Step 1, e.g., <code>/Users/javatrondeploy</code>\u3002 </li> </ul> </li> <li>Click \u201cApply\u201d to save the configuration.</li> </ol>"},{"location":"developers/run-in-idea/#step-3-start-the-node","title":"Step 3: Start the Node","text":"<p>Now you can start the java-tron node from within IDEA:</p> <ul> <li>Run the node: Click <code>Run</code> -&gt; <code>Run 'FullNode'</code> in the top menu bar. </li> <li>Debug the node: Set breakpoints in your code, then click <code>Run</code> -&gt; <code>Debug 'FullNode'</code>. The program will pause at the breakpoints, which allows you to perform step-by-step debugging. </li> </ul> <p>After the node starts, relevant log files will be written to the <code>Working directory</code> you configured.</p>"},{"location":"developers/tips/","title":"TIP Specification and Guidelines","text":"<p>TRON Improvement Proposals (TIPs) document the entire improvement process for the TRON network, from community suggestions and discussions to final adoption. Each TIP is a detailed design document that covers its underlying principles and technical specifications, to help community members fully understand its content. TIPs are a core unit of TRON's community governance, and anyone can freely submit a TIP. Through community discussion, the community decides whether to develop it into a common standard or incorporate it into a network upgrade. The proposer of a TIP is responsible for encouraging developer participation in the community, building consensus for the TIP, and recording all dissenting opinions.</p>"},{"location":"developers/tips/#tip-types","title":"TIP Types","text":"<p>TIPs are primarily categorized into two types: <code>Standard Track</code> and <code>Informational</code>.</p> <ul> <li> <p><code>Standard Track</code>: These TIPs describe changes that affect how TRON is implemented, such as modifications to block or transaction validity rules, proposed application standards, or any changes that affect the interoperability of TRON applications. <code>Standard Track</code> TIPs can be further subdivided into the following categories:</p> <ul> <li><code>Core</code>: TIPs that require a consensus fork<sup>1</sup> for implementation. This category also includes TIPs that don't require a consensus fork but still need discussion by core developers.</li> <li><code>Networking</code>: Improvements to the network protocol.</li> <li><code>Interface</code>: Improvements to API/RPC specifications and standards.</li> <li><code>TRC</code>: Application-level standards, including smart contract standards like TRC-20.</li> <li><code>TVM</code>: Improvements to the TRON Virtual Machine.</li> </ul> </li> <li> <p><code>Informational</code>: These TIPs describe issues related to TRON's design or provide general guidance or information to the TRON community, but do not propose new features.</p> </li> </ul>"},{"location":"developers/tips/#tip-workflow","title":"TIP Workflow","text":"<p>Before submitting a TIP, we recommend first creating a TIP Issue for community discussion and add a link to this issue in the TIP's title. The format of the TIP issue should be consistent with the content of the TIP. The specific process for submitting a TIP is as follows:</p> <ol> <li>Fork the GitHub TIPs repository.</li> <li>Create a new TIP in your forked repository, following the TIP template.</li> <li>Submit a Pull Request (PR) to the TRON TIPs repository.</li> </ol> <p>Strictly follow the <code>markdown</code> requirements of the template when writing a TIP, and ensure that the TIP title includes a link to the TIP Issue or a discussion forum address so that community members can fully discuss the TIP. If a TIP involves the development of new features in java-tron and has a corresponding development PR, you need to cross-reference each other's GitHub links in both the TIP and the java-tron PR to ensure the traceability of the new feature's requirements analysis and development code.</p> <p>After a new TIP's initial PR submission, the TIP will be in the <code>Draft</code> state. The editor will review the TIP to ensure it meets certain formatting standards and assign a TIP number before merging it.</p> <p>Once the TIP is considered mature and ready to move to the next phase, you should:</p> <ul> <li>For Core TIPs, you must follow the process in the TRON Project Management Repository to submit your TIP to the agenda for discussion at an upcoming core developers meeting. If the core developers decide to accept your TIP, the TIP editor will update its status to <code>Accepted</code>.</li> <li>For other types of TIPs, you can submit a PR to change the TIP's status to <code>Final (non-Core)</code>. The TIP editor will then review your draft and ask for any dissenting opinions. If the TIP editor determines that the TIP has not yet reached preliminary consensus, they may close your PR and ask you to continue modifying the draft.</li> </ul>"},{"location":"developers/tips/#tip-status","title":"TIP Status","text":"<p>A TIP may go through the following statuses:</p> <ul> <li><code>Draft</code>: The TIP is in a rapid iteration and modification phase.</li> <li><code>Last Call</code>: The TIP has completed its initial iteration and is ready for review by others.</li> <li><code>Accepted</code>: After a Core TIP's proposer has resolved the required technical changes and the TIP has been in the <code>Last Call</code> state for at least 2 weeks, core developers will decide whether to include the TIP as part of a hard fork and add it to the client development (this process is not part of the TIP workflow). Once a decision is made, the TIP will enter the <code>Final</code> state.</li> <li><code>Final (non-Core)</code>: A non-Core TIP has been in the <code>Last Call</code> state for at least 2 weeks, and all changes have been completed.</li> <li><code>Final (Core)</code>: The core developers have decided to implement the TIP, and it will be included in an upcoming release or has already been implemented in a released version.</li> <li><code>Active</code>: If a TIP may never be completed, its status can be <code>Active</code>.</li> <li><code>Abandoned</code>: A TIP is no longer tracked or maintained by its submitter, or it may no longer be the technically preferred solution.</li> <li><code>Rejected</code>: A TIP that breaks functionality or a <code>Core</code> TIP that has been rejected by core developers and will not be implemented.</li> <li><code>Superseded</code>: A TIP that was previously <code>Final</code> but is no longer considered the optimal solution.</li> <li><code>Deferred</code>: A TIP that is not currently accepted but may be accepted in the future.</li> </ul>"},{"location":"developers/tips/#tip-composition","title":"TIP Composition","text":"<p>A TIP consists of two parts: the header and the main content.</p>"},{"location":"developers/tips/#tip-header","title":"TIP Header","text":"<p>The TIP header contains the TIP number, a short descriptive title (limited to 44 characters), author details, a link to the discussion, TIP status, TIP type, creation date, etc. For the specific format, refer to:</p> <pre><code>tip: &lt;to be assigned&gt;\ntitle: &lt;TIP title&gt;\nauthor: &lt;a list of the author's or authors' name(s) and/or username(s), or name(s) and email(s), e.g. (use with the parentheses or triangular brackets): FirstName LastName (@GitHubUsername), FirstName LastName &lt;foo@bar.com&gt;, FirstName (@GitHubUsername) and GitHubUsername (@GitHubUsername)&gt;\ndiscussions-to: &lt;URL&gt;\nstatus: &lt;Draft | Last Call | Accepted | Final | Deferred&gt;\ntype: &lt;Standards Track (Core, Networking, Interface, TRC, VM) | Informational&gt;\ncategory (*only required for Standard Track): &lt;Core | Networking | Interface | TRC | VM&gt;\ncreated: &lt;date created on, in ISO 8601 (yyyy-mm-dd) format&gt;\nrequires (*optional): &lt;TIP number(s)&gt;\nreplaces (*optional): &lt;TIP number(s)&gt;\n</code></pre>"},{"location":"developers/tips/#tip-body","title":"TIP Body","text":"<p>The TIP body should include the following sections:</p> <ul> <li><code>Simple Summary</code>: A brief description of the TIP.</li> <li><code>Abstract</code>: A concise, easy-to-understand technical summary of the <code>Specification</code> section. Readers should be able to understand the main function of the TIP by reading only the <code>Abstract</code>.</li> <li><code>Motivation</code>: (Optional) Motivation is an important part of a TIP. It should clearly explain why the current protocol is insufficient to address the problem this TIP targets. This section can be omitted if the motivation is obvious.</li> <li><code>Specification</code>: The technical specification, which details the new feature's syntax and semantics and should be sufficiently comprehensive.</li> <li><code>Rationale</code>: Describes the design's motivation and the reasons for the design decisions made. It serves to supplement the <code>Specification</code>. The <code>Rationale</code> should also describe alternative designs and related work, and include an explanation of significant objections or concerns raised during the TIP's discussion.</li> <li><code>Backwards Compatibility</code>: (Optional) If the TIP's changes introduce backwards compatibility issues, the TIP should include a <code>Backwards Compatibility</code> section describing these incompatibilities and their impact. The TIP must state how these incompatibilities are intended to be handled.</li> <li><code>Test Cases</code>: (Optional) For TIPs that affect consensus, implementation-related test cases must be included. This section can be omitted for non-Core TIPs.</li> <li><code>Implementation</code>: This section does not need to be completed before the TIP is assigned the <code>Accepted</code> status but must be completed before the TIP is assigned the <code>Final</code> status. When discussing many API details, \"general consensus and working code\" are necessary.</li> </ul>"},{"location":"developers/tips/#linking-to-external-resources","title":"Linking to External Resources","text":"<p>Since external resources may change at any time (e.g., broken links, content moved or modified), TIPs should not directly include links to them.</p>"},{"location":"developers/tips/#linking-to-other-tips","title":"Linking to Other TIPs","text":"<p>A TIP can reference other TIPs. References to other TIPs should follow the <code>TIP-N</code> format, where <code>N</code> is the number of the referenced TIP, and must be accompanied by a link. The link must be a relative path to ensure it is valid in the TIPs GitHub repository as well as in all forks. For example, you can use <code>[TIP-1](/tips/TIP-1)</code> to reference <code>TIP-1</code>.</p>"},{"location":"developers/tips/#auxiliary-files","title":"Auxiliary Files","text":"<p>Images, diagrams, and other auxiliary files should be stored in a subdirectory of the TIPs repository's <code>assets</code> folder, for example: <code>assets/TIP-N/</code> (where N is the TIP number). When linking to images within a TIP, a relative path should be used, such as: <code>../assets/TIP-1/image.png</code>.</p> <ol> <li> <p>Consensus fork: A phenomenon in a blockchain network where nodes have different opinions on changes to protocol rules, leading to a divergence in the blockchain's history.\u00a0\u21a9</p> </li> </ol>"},{"location":"getting_started/getting_started_with_javatron/","title":"Getting Started with java-tron","text":"<p>This guide will walk you through a series of fundamental operations for java-tron. We recommend learning in the following order:</p> <ul> <li>Create a TRON Account:<ul> <li>Obtain your digital identity in the blockchain world. Learn how to securely generate and manage your address and private key, which are your sole credentials for holding TRX assets, sending transactions, and interacting with smart contracts.</li> </ul> </li> <li>Start and Run a java-tron Node:<ul> <li>Set up your dedicated gateway to the TRON network. Connect your computer to the TRON network, making it a part of the ecosystem. This is crucial for developers who want to maintain the network or require a local, high-availability API service.</li> </ul> </li> <li>Interact with the TRON Network Using a Java-tron Node:<ul> <li>Learn how to send transactions and query on-chain data using client tools like <code>wallet-cli</code> or <code>cURL</code>. (This skill does not require you to run your own node; you can use public node services to complete these operations).</li> </ul> </li> </ul>"},{"location":"getting_started/getting_started_with_javatron/#core-concepts","title":"Core Concepts","text":"<p>java-tron is a TRON network client written in Java. Running java-tron transforms your computer into a TRON network node. The TRON network is a distributed system where information is shared among nodes rather than managed by a centralized server. When a Super Representative (SR)'s node produces a new block, it broadcasts it to other nodes in the network. Each node validates the new block upon receipt and, if it passes verification, stores it in its local database.</p> <p>java-tron continuously updates its \"state\" - the real-time balance of all accounts on the TRON network - by synchronizing blocks.</p> <p>The first step in interacting with any blockchain is connecting to the correct network. The TRON network is primarily divided into:</p> <ul> <li>Mainnet: The production environment for handling real-asset transactions.</li> <li>Nile/Shasta Testnet: A public environment for developers to test applications and smart contracts for free.</li> </ul> <p>For development and learning, we must use a testnet to avoid any real financial loss. The network used in this guide is the TRON Nile Testnet.</p> <p></p>"},{"location":"getting_started/getting_started_with_javatron/#skill-1-creating-your-tron-account","title":"Skill 1: Creating Your TRON Account","text":"<p>There are two main types of accounts on the TRON network:</p> <ul> <li>Externally Owned Accounts (EOAs): Controlled by users through locally managed public-private key pairs. Each EOA consists of a public-private key pair, where the public key is used to derive a unique account address, and the private key is used to secure the account and safely sign and authorize transactions. The account you will create in this tutorial is of this type.</li> <li>Contract Accounts: These accounts execute their smart contract code when they receive a transaction.</li> </ul> <p>To begin interacting with the TRON network, you first need to create an Externally Owned Account (hereafter referred to as an \"account\"). There are several ways to create a TRON account, including using Software Development Kits (SDKs) like Trident-java and TronWeb, or various wallet applications (such as the browser extension wallet, TronLink). </p> <p>This guide will use the command-line tool <code>wallet-cli</code> to demonstrate the most fundamental account operations.</p> <p>About <code>wallet-cli</code></p> <p><code>wallet-cli</code> is an interactive command-line tool that supports the TRON network. It simplifies complex operations by wrapping the node's gRPC interface into developer-friendly commands. It is used to sign and broadcast transactions in a secure local environment and can also be used to fetch on-chain data.</p> <p>Before proceeding, ensure you have downloaded and compiled <code>wallet-cli</code>. This guide only covers a few basic commands as examples. For more information, please refer to the official GitHub documentation.</p> <p>Now, please complete the following three preparation steps in order.</p>"},{"location":"getting_started/getting_started_with_javatron/#step-a-start-wallet-cli-and-configure-network","title":"Step A: Start <code>wallet-cli</code> and Configure Network","text":"<p>1. Start <code>wallet-cli</code></p> <p>In your terminal, start a <code>wallet-cli</code> instance with the command <code>java -jar wallet-cli.jar</code>:</p> <pre><code>$ java -jar wallet-cli.jar\n\nWelcome to TRON wallet-cli\nPlease type one of the following commands to proceed.\nLogin, RegisterWallet or ImportWallet\n\nYou may also use the Help command at anytime to display a full list of commands.\n\nwallet&gt; \n</code></pre> <p>2. Configure the Network</p> <p>By default, <code>wallet-cli</code> operates on the TRON Mainnet. You must first switch the environment to the Nile Testnet to avoid interacting with real assets in this guide.</p> <p>Use the <code>switchnetwork</code> command to switch networks and <code>currentnetwork</code> to verify the status. When prompted, enter <code>2</code> to select <code>NILE</code>. <pre><code>wallet&gt; switchnetwork\nPlease select network\uff1a\n1. MAIN\n2. NILE\n3. SHASTA\nEnter numbers to select a network (1-3): 2\nNow, current network is : NILE\nSwitchNetwork successful !!!\nwallet&gt; currentnetwork\ncurrentNetwork: NILE\n</code></pre></p>"},{"location":"getting_started/getting_started_with_javatron/#step-b-register-a-new-account","title":"Step B: Register a New Account","text":"<p>1. Register Account</p> <p>At the prompt, enter the <code>registerwallet</code> command and follow the instructions to set a secure password. This command generates a new TRON network account and registers it with <code>wallet-cli</code>, which means its encrypted private key is stored in the local keystore for future use in signing transactions.</p> <pre><code>wallet&gt; registerwallet\nPlease input password.\npassword: \nuser defined config file doesn't exists, use default config file in jar\nWalletApi getRpcVsersion: 2\nPlease input password again.\npassword: \nRegister a wallet successful, keystore file name is UTC--2022-07-04T06-35-35.304000000Z--TQXjm2J8K2DKTV49MdfT2anjUehbU3WDJz.json\nwallet&gt; \n</code></pre> <p>2. Log in and View Account Details</p> <p>First, use the <code>login</code> command in <code>wallet-cli</code>. The system will list the available accounts for you to choose from.</p> <p><pre><code>wallet&gt; login\n</code></pre> If multiple accounts are available, when prompted, enter the number for the account you want to log in with (such as <code>2</code>), then enter the account's password.</p> <p><pre><code>Please choose between 1 and 3\n2\nPlease input your password.\npassword: \nLogin successful !!!\nwallet&gt; \n</code></pre> The <code>Login successful !!!</code> message indicates a successful login.</p> <p>After logging in, you can use the <code>getaddress</code> command at any time to view the current account's address.</p> <pre><code>wallet&gt; getaddress\nGetAddress successful !!\naddress = TQXjm2J8K2DKTV49MdfT2anjUehbU3WDJz\nwallet&gt; \n</code></pre> <p>3. Back Up the Private Key (Critical Security Step):</p> <p>This is the most crucial step to ensure the security of your assets. We strongly recommend you back up your private key immediately after creating your account to safeguard your assets.</p> <p>Use the <code>backupwallet</code> command and enter your password when prompted to view the account's private key. Be sure to store the private key in an absolutely secure location.</p>"},{"location":"getting_started/getting_started_with_javatron/#step-c-fund-your-account-with-trx","title":"Step C: Fund Your Account with TRX","text":"<p>Executing any transaction on the TRON network (e.g., transfers, contract calls) consumes network resources, which are acquired by staking or burning TRX. Therefore, before performing any on-chain operations, you must ensure your account holds sufficient TRX. The method for obtaining TRX varies by network:</p> <ul> <li>On the TRON Mainnet, TRX is a real asset and is primarily obtained by:<ul> <li>Earning block rewards as a Super Representative or voting rewards.</li> <li>Receiving TRX transfers from other TRON accounts.</li> <li>Purchasing from cryptocurrency exchanges.</li> </ul> </li> <li>On the Nile Testnet, TRX has no real value. You can obtain it for free by visiting a Faucet. For a detailed guide, refer to How to Get Testnet Tokens.</li> </ul> <p>After completing all the above preparations, you now have a properly configured TRON account on a secure network with test tokens.</p> <p></p>"},{"location":"getting_started/getting_started_with_javatron/#skill-2-start-and-run-a-java-tron-node","title":"Skill 2: Start and Run a Java-tron Node","text":"<p>This module will guide you through launching a java-tron instance, turning your computer into a TRON FullNode. Running your own node provides you with the most stable, reliable, and rate-unlimited network access. The network used in this module is the TRON Nile Testnet.</p> <p>Tips:</p> <ul> <li>Before performing the operations in this guide, ensure you have installed java-tron and its related development tools. If you haven't, see the Installation page for detailed steps. </li> <li>The startup command in this guide is for basic demonstration purposes only. For more detailed deployment and configuration, see the official Nile Node Deployment Guide. </li> <li>The Nile testnet does not support syncing data from the genesis block (block 0). To start your node quickly, download the officially provided data snapshot. For specific instructions, refer to Deploying a Node Using a Data Snapshot.</li> </ul> <p>1. Start the Node</p> <p>Please use the following command to start the node. The <code>-Xmx24g</code> flag allocates 24GB of memory to the JVM; you can adjust this according to your machine's configuration.</p> <p>Tip: Before running this command, make sure you have installed java-tron as described in the introduction.</p> <pre><code>$  java -Xmx24g -XX:+UseConcMarkSweepGC -jar FullNode.jar -c nile_net_config.conf\n</code></pre> <p>2. Verify Node Status</p> <p>2.1 Check Startup and Sync Logs</p> <p>When the node starts, you will first see the network configuration information in the logs. The following logs indicate that java-tron has started and connected to the Nile testnet:</p> <p><pre><code>11:07:58.758 INFO  [main] [app](Args.java:1143) ************************ Net config ************************\n11:07:58.758 INFO  [main] [app](Args.java:1144) P2P version: 201910292\n11:07:58.758 INFO  [main] [app](Args.java:1145) Bind IP: 192.168.20.101\n11:07:58.758 INFO  [main] [app](Args.java:1146) External IP: 203.12.203.3\n11:07:58.758 INFO  [main] [app](Args.java:1147) Listen port: 18888\n11:07:58.758 INFO  [main] [app](Args.java:1148) Discover enable: true\n</code></pre> Next, the node will begin searching for other connectable peers in the network and will continuously request blocks from them to synchronize the entire on-chain data. Successfully connected peers are called \"active peers.\" The following logs indicate that the node has successfully connected to other nodes and has started syncing data:</p> <p><pre><code>11:08:42.547 INFO  [TronJClientWorker-1] [net](Channel.java:116) Finish handshake with /123.56.3.74:18888.\n11:08:42.547 INFO  [TronJClientWorker-1] [net](ChannelManager.java:161) Add active peer /123.56.3.74:18888 | fea80a0298b465a54fd332ff36819545d850115e77b327858b5306c9a58c6b8c2e7c08df76ab508a7594ed3577a8f4157727108442877077ab499b102b488467, total active peers: 1\n11:08:42.549 INFO  [TronJClientWorker-1] [net](Channel.java:208) Peer /123.56.3.74:18888 status change to SYNCING.\n11:08:42.566 INFO  [TronJClientWorker-1] [DB](Manager.java:1636) headNumber:23113867\n11:08:42.566 INFO  [TronJClientWorker-1] [DB](Manager.java:1638) syncBeginNumber:23113867\n11:08:42.567 INFO  [TronJClientWorker-1] [DB](Manager.java:1642) solidBlockNumber:23113849\n11:08:42.567 INFO  [TronJClientWorker-1] [net](SyncService.java:179) Get block chain summary, low: 23113867, highNoFork: 23113867, high: 23113867, realHigh: 23113867\n11:08:42.572 INFO  [TronJClientWorker-1] [net](MessageQueue.java:106) Send to /123.56.3.74:18888, type: SYNC_BLOCK_CHAIN\nsize: 1, start block: Num:23113867,ID:000000000160b08b510b6c501c980a2567bff1229eed62ca79874c9ca7828e9c \n11:08:42.631 INFO  [TronJClientWorker-1] [net](MessageQueue.java:121) Receive from /123.56.3.74:18888, type: BLOCK_CHAIN_INVENTORY\nsize: 2001, first blockId: Num:23113867,ID:000000000160b08b510b6c501c980a2567bff1229eed62ca79874c9ca7828e9c, end blockId: Num:23115867,ID:000000000160b85b587ef18d00a1905d8022ec0a8fd174f3980b78f6aacf0ede\n\n......\n\n11:08:43.478 INFO  [pool-49-thread-1] [net](MessageQueue.java:106) Send to /123.56.3.74:18888, type: FETCH_INV_DATA\ninvType: BLOCK, size: 100, First hash: 000000000160b08c6eeba60eced4fb13d7c56e46a3c5220a67bb2801a05e5679, End hash: 000000000160b0efd90560e389d1f6e5b3c8d3877709ce375a8e063f5db73af9 \n11:08:43.502 INFO  [TronJClientWorker-1] [net](MessageQueue.java:121) Receive from /123.56.3.74:18888, type: BLOCK\nNum:23113868,ID:000000000160b08c6eeba60eced4fb13d7c56e46a3c5220a67bb2801a05e5679, trx size: 1\n\n11:08:43.504 INFO  [TronJClientWorker-1] [net](MessageQueue.java:121) Receive from /123.56.3.74:18888, type: BLOCK\nNum:23113869,ID:000000000160b08d231e450ae1993a72ba19eb8f3c748fa70d105dadd0c9fd5f, trx size: 0\n\n11:08:43.504 INFO  [TronJClientWorker-1] [net](MessageQueue.java:121) Receive from /123.56.3.74:18888, type: BLOCK\nNum:23113870,ID:000000000160b08e37cb9951d31a4233f106c7e77e0535c597dbb6a16f163699, trx size: 0\n</code></pre> You can determine if the sync is progressing normally by observing whether the block number (the number after <code>Num:</code>) in the logs is increasing steadily. If the logs stop scrolling for an extended period or repeatedly show errors or warnings, the node may have encountered an issue.</p> <p>2.2 Confirm Sync Status Using the API</p> <p>To interact with the TRON network, your java-tron node must be running and properly synchronized.</p> <p>You can send the following HTTP requests to your java-tron node to verify that it has started successfully and to check its current status:</p> <ul> <li>Get a node overview via the <code>/wallet/getnodeinfo</code> API: <code>curl http://127.0.0.1:8090/wallet/getnodeinfo</code></li> <li>Get the current block height via the <code>/wallet/getnowblock</code> API: <code>curl http://127.0.0.1:8090/wallet/getnowblock</code></li> </ul> <p>To confirm that your node is fully synchronized with the network, compare your local node's block height with the latest block height displayed on the Tronscan block explorer. If they match, your local node is properly synchronized.</p> <p>To shut down java-tron, use <code>kill -15 &lt;process_id&gt;</code> to stop the node.</p> <p></p>"},{"location":"getting_started/getting_started_with_javatron/#skill-3-interacting-with-the-tron-network","title":"Skill 3: Interacting with the TRON Network","text":"<p>The core of this module is learning how to communicate with the TRON network using the API interfaces provided by a java-tron node. The java-tron node serves as your gateway to the blockchain, offering powerful HTTP and gRPC interfaces that allow any client application to query on-chain data or broadcast transactions.</p> <p>Before you begin, you can choose between two ways to connect to a node:</p> <ul> <li>Use a Public Node (Recommended for beginners): Start instantly without waiting for synchronization.</li> <li>Use Your Own Node (If you completed Skill 2): Get more stable, rate-limit-free access.</li> </ul> <p>The examples in this module will primarily be demonstrated using a public node.</p>"},{"location":"getting_started/getting_started_with_javatron/#method-one-using-wallet-cli-recommended","title":"Method One: Using <code>wallet-cli</code> (Recommended)","text":""},{"location":"getting_started/getting_started_with_javatron/#query-account-information","title":"Query Account Information","text":"<p>You can use the <code>getaccount &lt;address&gt;</code> command to query detailed information for a specific address. When this command is executed, <code>wallet-cli</code> sends a request to the java-tron node in the background and then displays the retrieved account data in the terminal.</p> <p><pre><code>wallet&gt; getaccount TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\n</code></pre> The result is as follows:</p> <pre><code>{\n    \"address\": \"TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\",\n    \"balance\": 93643857919,\n    \"create_time\": 1619681898000,\n    \"latest_opration_time\": 1655358327000,\n    \"is_witness\": true,\n    \"asset_issued_name\": \"TestTRC10T\",\n    \"latest_consume_free_time\": 1652948766000,\n    \"account_resource\": {\n        \"latest_consume_time_for_energy\": 1655358327000\n    },\n\n        ......\n}\n</code></pre>"},{"location":"getting_started/getting_started_with_javatron/#query-account-balance","title":"Query Account Balance","text":"<p>Use the <code>getbalance</code> command to quickly check the TRX balance of the currently logged-in account.</p> <pre><code>wallet&gt; getbalance\nBalance = 93642857919\nwallet&gt; \n</code></pre>"},{"location":"getting_started/getting_started_with_javatron/#transfer-trx","title":"Transfer TRX","text":"<p>Use the <code>sendcoin &lt;recipient_address&gt; &lt;amount&gt;</code> command to initiate a TRX transfer. The amount is in sun (1 TRX = 1,000,000 sun).</p> <pre><code>wallet&gt; sendcoin TUznHJfHe6gdYY7gvWmf6bNZHuPHDZtowf 1000000\n{\n    \"raw_data\":{\n        \"contract\":[\n            {\n                \"parameter\":{\n                    \"value\":{\n                        \"amount\":1000000,\n                        \"owner_address\":\"TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\",\n                        \"to_address\":\"TUznHJfHe6gdYY7gvWmf6bNZHuPHDZtowf\"\n                    },\n                    \"type_url\":\"type.googleapis.com/protocol.TransferContract\"\n                },\n                \"type\":\"TransferContract\"\n            }\n        ],\n        \"ref_block_bytes\":\"cbc3\",\n        \"ref_block_hash\":\"8581ae7e29258a52\",\n        \"expiration\":1656917577000,\n        \"timestamp\":1656917518232\n    },\n    \"raw_data_hex\":\"0a02cbc322088581ae7e29258a5240a89aefbf9c305a67080112630a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412320a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca121541d0b69631440f0a494bb51f7eee68ff5c593c00f018c0843d7098cfebbf9c30\"\n}\nbefore sign transaction hex string is 0a85010a02cbc322088581ae7e29258a5240a89aefbf9c305a67080112630a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412320a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca121541d0b69631440f0a494bb51f7eee68ff5c593c00f018c0843d7098cfebbf9c30\nPlease confirm and input your permission id, if input y or Y means default 0, other non-numeric characters will cancel transaction.\n</code></pre> <p>This command returns a transaction pending confirmation. Please follow the steps below to complete the signing and broadcasting:</p> <ol> <li>Confirm the Transaction: After verifying the transaction details, enter <code>y</code> and press Enter (entering any other character will cancel the transaction).</li> <li>Select Signing Account: Follow the prompts to select the account that will sign this transaction (i.e., the sending account).</li> <li>Authorize with Password: Enter the password for the selected account. <code>wallet-cli</code> will then sign the transaction and broadcast it to the java-tron node, completing the transaction.</li> </ol> <pre><code>Please confirm and input your permission id, if input y or Y means default 0, other non-numeric characters will cancel transaction.\ny\nPlease choose your key for sign.\nThe 1th keystore file name is .DS_Store\nThe 2th keystore file name is UTC--2022-07-04T06-35-35.304000000Z--TQXjm2J8K2DKTV49MdfT2anjUehbU3WDJz.json\nThe 3th keystore file name is UTC--2022-06-21T09-51-26.367000000Z--TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM.json\nPlease choose between 1 and 3\n3\nPlease input your password.\npassword: \nafter sign transaction hex string is 0a85010a02cbc322088581ae7e29258a5240dbfc91ca9c305a67080112630a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412320a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca121541d0b69631440f0a494bb51f7eee68ff5c593c00f018c0843d7098cfebbf9c301241241a3ce4797ccc2fedf49ae41af28b49df1e15a476e4948af4df5aadf23a1e940ad5cc2133f501c08f2bab6a2231cdc82a745fed0fc6a012dc19310532d9138600\ntxid is 21851bcf1faf22c99a7a49c4f246d709cf9f54db2f264ca145adcd464ea155a4\nSend 1000000 Sun to TUznHJfHe6gdYY7gvWmf6bNZHuPHDZtowf successful !!\nwallet&gt; \n</code></pre>"},{"location":"getting_started/getting_started_with_javatron/#query-transaction-details-by-id","title":"Query Transaction Details by ID","text":"<p>After you send a transaction, the <code>wallet-cli</code> terminal returns a unique transaction ID (txid). You can use this <code>txid</code> to query all information about the transaction.</p> <ol> <li>Use <code>gettransactionbyid &lt;txid&gt;</code> to view the raw content of the transaction:   <pre><code>wallet&gt; gettransactionbyid 21851bcf1faf22c99a7a49c4f246d709cf9f54db2f264ca145adcd464ea155a4\n</code></pre>   The returned JSON data contains all the transaction details, such as the contract type (<code>TransferContract</code>), transfer amount, sender and recipient addresses, etc. <code>\"contractRet\":\"SUCCESS\"</code> indicates that the transaction's contract is syntactically correct.</li> </ol> <p><pre><code>{\n  \"ret\":[\n      {\n          \"contractRet\":\"SUCCESS\"\n      }\n  ],\n  \"signature\":[\n      \"241a3ce4797ccc2fedf49ae41af28b49df1e15a476e4948af4df5aadf23a1e940ad5cc2133f501c08f2bab6a2231cdc82a745fed0fc6a012dc19310532d9138600\"\n  ],\n  \"txID\":\"21851bcf1faf22c99a7a49c4f246d709cf9f54db2f264ca145adcd464ea155a4\",\n  \"raw_data\":{\n      \"contract\":[\n          {\n              \"parameter\":{\n                  \"value\":{\n                      \"amount\":1000000,\n                      \"owner_address\":\"TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\",\n                      \"to_address\":\"TUznHJfHe6gdYY7gvWmf6bNZHuPHDZtowf\"\n                  },\n                  \"type_url\":\"type.googleapis.com/protocol.TransferContract\"\n              },\n              \"type\":\"TransferContract\"\n          }\n      ],\n      \"ref_block_bytes\":\"cbc3\",\n      \"ref_block_hash\":\"8581ae7e29258a52\",\n      \"expiration\":1656939118171,\n      \"timestamp\":1656917518232\n  },\n  \"raw_data_hex\":\"0a02cbc322088581ae7e29258a5240dbfc91ca9c305a67080112630a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412320a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca121541d0b69631440f0a494bb51f7eee68ff5c593c00f018c0843d7098cfebbf9c30\"\n}\nwallet&gt; \n</code></pre> 2. Use <code>gettransactioninfobyid &lt;txid&gt;</code> to view the transaction's processing result and receipt information (i.e., whether the transaction has been included in a block, its execution result, and resource consumption):</p> <pre><code>wallet&gt; gettransactioninfobyid 21851bcf1faf22c99a7a49c4f246d709cf9f54db2f264ca145adcd464ea155a4\n</code></pre> <p>In the returned result, the most important field is <code>blockNumber</code>, which indicates the block height at which the transaction was confirmed. If this value exists, the transaction has been successfully recorded on the blockchain. Additionally, the <code>receipt</code> object records the resources consumed by the transaction, such as bandwidth (<code>net_usage</code>).</p> <pre><code>{\n  \"id\": \"21851bcf1faf22c99a7a49c4f246d709cf9f54db2f264ca145adcd464ea155a4\",\n  \"blockNumber\": 27773932,\n  \"blockTimeStamp\": 1656917586000,\n  \"contractResult\": [\n      \"\"\n  ],\n  \"receipt\": {\n      \"net_usage\": 267\n  }\n}\nwallet&gt; \n</code></pre>"},{"location":"getting_started/getting_started_with_javatron/#method-two-using-curl-direct-http-api-call","title":"Method Two: Using <code>cURL</code> (Direct HTTP API Call)","text":"<p>While <code>wallet-cli</code> provides user-friendly interactive commands, more advanced developers or those working in automated scripting scenarios may find it more flexible and efficient to interact with a java-tron node directly via its HTTP API. This section demonstrates how to use <code>cURL</code> (a command-line tool for sending HTTP requests) to call the java-tron node's HTTP API to perform core functions like querying account balances and sending transactions.</p> <p>Unlike <code>wallet-cli</code>, which automatically handles signing and broadcasting, sending a transaction by directly calling the API requires you to manually complete a standard three-step process: Create -&gt; Sign -&gt; Broadcast. This section will show you how to execute this process.</p>"},{"location":"getting_started/getting_started_with_javatron/#prerequisite-query-account-balance","title":"Prerequisite: Query Account Balance","text":"<p>Before sending a transaction, let's first use the node's <code>wallet/getaccount</code> HTTP endpoint to query an account's TRX balance.</p> <p>Send a <code>POST</code> request to the node's <code>8090</code> port, including the address you want to query in the request body.</p> <pre><code> curl -X POST http://127.0.0.1:8090/wallet/getaccount -d \n     '{\"address\": \"TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\",\n       \"visible\": true\n     }'\n</code></pre> <p>In the returned JSON data, the <code>balance</code> field represents the TRX balance of the address, in sun (1 TRX = 1,000,000 sun).</p> <pre><code>{\n    \"account_name\": \"testacc2\",\n    \"address\": \"TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\",\n    \"balance\": 1000000000000000,\"account_resource\": {}\n}\n</code></pre>"},{"location":"getting_started/getting_started_with_javatron/#the-three-step-process-for-sending-a-transaction","title":"The Three-Step Process for Sending a Transaction","text":"<p>Now, let's use a TRX transfer as an example to fully demonstrate the \"Create-Sign-Broadcast\" three-step process for sending a transaction to java-tron.</p> <p>Srtep 1 - Create a Transaction</p> <p>Use the FullNode's <code>wallet/createtransaction</code> HTTP endpoint to create an unsigned TRX transfer transaction. In the request body, specify the sender (<code>owner_address</code>), recipient (<code>to_address</code>), and amount (<code>amount</code>).</p> <pre><code>```\ncurl -X POST  http://127.0.0.1:8090/wallet/createtransaction -d \n    '{\n        \"to_address\": \"TUznHJfHe6gdYY7gvWmf6bNZHuPHDZtowf\", \n        \"owner_address\": \"TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\", \n        \"amount\": 10000000,\n        \"visible\":true\n    }'\n```\n</code></pre> <p>The node will return an unsigned TRX transfer transaction. Take note of the <code>txid</code> and <code>raw_data_hex</code> fields, as they will be used in subsequent steps.</p> <pre><code>```\n{\n    \"visible\": true,\n    \"txID\": \"c558bd35978267d8999baf6148703cbc94786f3f2e22893637588ca05437d7f0\",\n    \"raw_data\": {\n        \"contract\": [\n            {\n                \"parameter\": {\n                    \"value\": {\n                        \"amount\": 10000000,\n                        \"owner_address\": \"TPswDDCAWhJAZGdHPidFg5nEf8TkNToDX1\",\n                        \"to_address\": \"TUznHJfHe6gdYY7gvWmf6bNZHuPHDZtowf\"\n                    },\n                    \"type_url\": \"type.googleapis.com/protocol.TransferContract\"\n                },\n                \"type\": \"TransferContract\"\n            }\n        ],\n        \"ref_block_bytes\": \"193b\",\n        \"ref_block_hash\": \"aaecd88e4e0e7528\",\n        \"expiration\": 1656580476000,\n        \"timestamp\": 1656580418228\n    },\n    \"raw_data_hex\": \"0a02193b2208aaecd88e4e0e752840e098909f9b305a68080112640a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412330a154198927ffb9f554dc4a453c64b2e553a02d6df514b121541d0b69631440f0a494bb51f7eee68ff5c593c00f01880ade20470b4d58c9f9b30\"\n}\n```\n</code></pre> <p>Step 2 - Sign the Transaction</p> <p>Use the sender's private key to sign the transaction data (<code>raw_data_hex</code> or <code>txid</code>) generated in the previous step, proving your ownership of the account. Important Note: </p> <ul> <li>To ensure the security of your private key, it is strongly recommended that you perform all signing operations in a local or secure server environment using official TRON SDKs (e.g., <code>TronWeb</code>, <code>java-tron-sdk</code>).</li> <li><code>cURL</code> cannot perform signing operations. This step is for procedural explanation only.</li> </ul> <p>After signing, you will get a long string, which is the transaction's Signature Hash.</p> <p>Step 3 - Broadcast the Transaction</p> <p>The final step is to broadcast the signed transaction. Call the wallet/broadcasttransaction endpoint, providing the transaction object from step one and the signature hash from step two in the request body. Upon submission, the node will verify the signature and then broadcast the transaction to the entire TRON network for confirmation, completing the transfer process.</p> <pre><code>```\ncurl --location --request POST 'http://127.0.0.1:8090/wallet/broadcasttransaction' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"visible\": true,\n    \"signature\": [\n        \"e12996cfaf52f8b49e64400987f9158a87b1aa809a11a75e01bb230722db97a26204334aea945b1ece0851a89c96459872e56229b0bd725c4f6a0577bfe331c301\"\n    ],\n    \"txID\": \"c558bd35978267d8999baf6148703cbc94786f3f2e22893637588ca05437d7f0\",\n    \"raw_data\": {\n        \"contract\": [\n            {\n                \"parameter\": {\n                    \"value\": {\n                        \"amount\": 10000000,\n                        \"owner_address\": \"TPswDDCAWhJAZGdHPidFg5nEf8TkNToDX1\",\n                        \"to_address\": \"TUznHJfHe6gdYY7gvWmf6bNZHuPHDZtowf\"\n                    },\n                    \"type_url\": \"type.googleapis.com/protocol.TransferContract\"\n                },\n                \"type\": \"TransferContract\"\n            }\n        ],\n        \"ref_block_bytes\": \"193b\",\n        \"ref_block_hash\": \"aaecd88e4e0e7528\",\n        \"expiration\": 1656580476000,\n        \"timestamp\": 1656580418228\n    },\n    \"raw_data_hex\": \"0a02193b2208aaecd88e4e0e752840e098909f9b305a68080112640a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412330a154198927ffb9f554dc4a453c64b2e553a02d6df514b121541d0b69631440f0a494bb51f7eee68ff5c593c00f01880ade20470b4d58c9f9b30\"\n}'\n```\nIf the response contains `\"result\": true`, your transaction has been successfully broadcast:\n\n```\n{\n    \"result\": true,\n    \"txid\": \"c558bd35978267d8999baf6148703cbc94786f3f2e22893637588ca05437d7f0\"\n}\n```\n</code></pre>"},{"location":"getting_started/getting_started_with_javatron/#query-a-transaction-by-id","title":"Query a Transaction by ID","text":"<p>Querying a broadcast transaction via the HTTP API follows the same principle as with <code>wallet-cli</code>.</p> <p><code>wallet/gettransactionbyid</code></p> <p>Use the <code>wallet/gettransactionbyid</code> HTTP endpoint to get the full data of a broadcast transaction. In the request body, pass the <code>txid</code> you want to query in the <code>value</code> field:</p> <p><pre><code>curl --location --request POST 'http://127.0.0.1:8090/wallet/gettransactionbyid' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n     \"value\": \"c558bd35978267d8999baf6148703cbc94786f3f2e22893637588ca05437d7f0\"\n}'\n</code></pre>   The data structure of the response is nearly identical to that of the <code>wallet-cli</code> <code>gettransactionbyid</code> command:</p> <pre><code>{\n    \"ret\": [\n        {\n            \"contractRet\": \"SUCCESS\"\n        }\n    ],\n    \"signature\": [\n        \"e12996cfaf52f8b49e64400987f9158a87b1aa809a11a75e01bb230722db97a26204334aea945b1ece0851a89c96459872e56229b0bd725c4f6a0577bfe331c301\"\n    ],\n    \"txID\": \"c558bd35978267d8999baf6148703cbc94786f3f2e22893637588ca05437d7f0\",\n    \"raw_data\": {\n        \"contract\": [\n            {\n                \"parameter\": {\n                    \"value\": {\n                        \"amount\": 10000000,\n                        \"owner_address\": \"4198927ffb9f554dc4a453c64b2e553a02d6df514b\",\n                        \"to_address\": \"41d0b69631440f0a494bb51f7eee68ff5c593c00f0\"\n                    },\n                    \"type_url\": \"type.googleapis.com/protocol.TransferContract\"\n                },\n                \"type\": \"TransferContract\"\n            }\n        ],\n        \"ref_block_bytes\": \"193b\",\n        \"ref_block_hash\": \"aaecd88e4e0e7528\",\n        \"expiration\": 1656580476000,\n        \"timestamp\": 1656580418228\n    },\n    \"raw_data_hex\": \"0a02193b2208aaecd88e4e0e752840e098909f9b305a68080112640a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412330a154198927ffb9f554dc4a453c64b2e553a02d6df514b121541d0b69631440f0a494bb51f7eee68ff5c593c00f01880ade20470b4d58c9f9b30\"\n}\n</code></pre> <p><code>wallet/gettransactioninfobyid</code></p> <p>Use the <code>wallet/gettransactioninfobyid</code> HTTP endpoint to view the transaction's processing result and receipt information (i.e., whether the transaction has been included in a block, its execution result, and resource consumption).</p> <p>Pass the target <code>txid</code> in the request body:</p> <pre><code>curl --location --request POST 'http://127.0.0.1:8090/wallet/gettransactioninfobyid' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n     \"value\": \"c558bd35978267d8999baf6148703cbc94786f3f2e22893637588ca05437d7f0\"\n}'\n</code></pre> <p>The <code>blockNumber</code> field in the response is the key proof of a successful transaction. As long as this field has a value, it means your transaction is successfully and irreversibly recorded on the blockchain. The <code>receipt</code> field provides a detailed execution receipt.</p> <pre><code>{\n    \"id\": \"c558bd35978267d8999baf6148703cbc94786f3f2e22893637588ca05437d7f0\",\n    \"blockNumber\": 27662687,\n    \"blockTimeStamp\": 1656580470000,\n    \"contractResult\": [\n        \"\"\n    ],\n    \"receipt\": {\n        \"net_usage\": 268\n    }\n}\n</code></pre>"},{"location":"getting_started/getting_started_with_javatron/#next-steps","title":"Next Steps","text":"<p>Congratulations on completing your introductory journey with java-tron! You have now mastered core skills like running a node, creating an account, and sending transactions, laying a solid foundation for deeper exploration of the TRON ecosystem.</p>"},{"location":"mechanism-algorithm/account/","title":"Account Model","text":""},{"location":"mechanism-algorithm/account/#introduction","title":"Introduction","text":"<p>TRON employs an account model for its ledger. All activities on the network, such as transfers, voting, and contract deployment, revolve around accounts.</p> <ul> <li>Unique Identifier: Each account is uniquely identified by its Address, which typically begins with a <code>T</code>.</li> <li>Access Control: Any operation on an account (such as a transfer) requires a signature from the corresponding Private Key.</li> <li> <p>Account Assets and Capabilities: Each account can own and manage various resources, including:</p> <ul> <li>Assets: TRX, TRC-10, TRC-20, TRC-721/TRC-1155 NFTs, etc.</li> <li>Network Resources: Bandwidth and Energy.</li> <li>Permissions and Activities: Initiating transactions, deploying and calling smart contracts, participating in Super Representative elections (voting or becoming a candidate), and more.</li> </ul> </li> </ul>"},{"location":"mechanism-algorithm/account/#how-to-create-an-account","title":"How to Create an Account","text":"<p>There are two primary ways to create a new TRON account:</p> <p>Method 1: Offline Generation and On-Chain Activation</p> <ul> <li>Generate Address: Use a wallet application (like TronLink) to generate a new key pair (private key and address).</li> <li>Activate Account: At this stage, the account exists only conceptually and must be \"activated\" to be used on the blockchain. Activation is accomplished by sending any amount of TRX or a TRC-10 token from an existing account to this new address. Once the transaction is successful, the new account is officially created on the TRON network.</li> </ul> <p>Method 2: Creation via System Contract</p> <ul> <li>Developers can create an account by calling the <code>CreateAccount</code> system contract.</li> </ul> <p>Account Creation Cost:</p> <ul> <li>A fixed fee of 1 TRX is required to create and activate a new account.</li> <li>Additionally, if the creator's account has sufficient Bandwidth (either from staking TRX or delegated from others), the creation will only consume Bandwidth. Otherwise, 0.1 TRX will be burned to pay for the Bandwidth fee.</li> </ul>"},{"location":"mechanism-algorithm/account/#key-pair-generation-algorithm","title":"Key Pair Generation Algorithm","text":"<p>TRON's signature algorithm is ECDSA, and the selected curve is SECP256K1. Its private key is a random number, and the public key is a point on the elliptic curve. The generation process is as follows: first, generate a random number <code>d</code> as the private key, then calculate <code>P = d \u00d7 G</code> as the public key, where <code>G</code> is the base point of the elliptic curve, and the base point is public.</p> <p>The private key is a 32-byte large number, and the public key consists of two 32-byte large numbers, which are the abscissa and ordinate of the above-mentioned <code>P</code> point respectively.</p>"},{"location":"mechanism-algorithm/account/#tron-address-generation","title":"TRON Address Generation","text":"<ol> <li>Take the public key P as input, calculate SHA3 to get the result H, and SHA3 uses Keccak256.</li> <li>Take the last 20 bytes of H, and prepend a byte 0x41 to get address.</li> <li>Perform base58check calculation on address to get the final address.</li> </ol>"},{"location":"mechanism-algorithm/account/#base58check-calculation-process","title":"Base58Check Calculation Process","text":"<ol> <li> <p>Calculate the checksum</p> <p>a. Perform SHA256 hash operation on <code>address</code> to get <code>h1</code> b. Perform SHA256 operation on <code>h1</code> again to get <code>h2</code>  c. Take the first 4 bytes of <code>h2</code> as the checksum <code>check</code></p> </li> <li> <p>Splice data Append <code>check</code> to <code>address</code> to get <code>address||check</code></p> </li> <li>Base58 encoding Perform Base58 encoding on <code>address||check</code>. The character table for Base58 is: <code>\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"</code>, excluding easily confused characters:<code>0</code> (Arabic numeral 0), <code>O</code> (uppercase letter O), <code>I</code> (uppercase letter I), <code>l</code> (lowercase letter L).</li> </ol>"},{"location":"mechanism-algorithm/account/#tron-address-characteristics","title":"TRON Address Characteristics","text":"<p>The principle of Base58 encoding is to convert a large integer with a base of 256 into a representation with a base of 58, and then map it to the character table. Since the first byte of <code>address||check</code> is fixed as <code>0x41</code>, its decimal value <code>N</code> satisfies: <code>65 \u00d7 256\u00b2\u2074 \u2264 N &lt; 66 \u00d7 256\u00b2\u2074</code>.</p> <ul> <li>Length is <code>34</code>: Because <code>58\u00b3\u2074 &gt; 66 \u00d7 256\u00b2\u2074</code> indicates that length of <code>34</code> are sufficient, and <code>58\u00b3\u00b3 &lt; 65 \u00d7 256\u00b2\u2074</code> indicates that length of <code>33</code> are insufficient, so the length can only be <code>34</code>.</li> <li>The first character is <code>T</code>: First, the length is determined to be <code>34</code>, and since <code>27 \u00d7 58\u00b3\u00b3 &gt; 66 \u00d7 256\u00b2\u2074</code> indicates that the index of first character in base58 character table must be less than <code>27</code>, and <code>26 \u00d7 58\u00b3\u00b3 &lt; 65 \u00d7 256\u00b2\u2074</code> indicates that the index must be greater than or equal to <code>26</code>, so the first index can only be <code>26</code>, and <code>26</code> corresponds to <code>T</code> in the base58 character table (<code>0</code> corresponds to <code>'1'</code>).</li> </ul>"},{"location":"mechanism-algorithm/account/#signature-specification","title":"Signature Specification","text":""},{"location":"mechanism-algorithm/account/#algorithm","title":"Algorithm","text":"<ol> <li>Take the <code>rawdata</code> of the transaction, convert it to <code>byte[]</code> format, and record it as <code>data</code> (for example, the <code>byte[]</code> type in Java).</li> <li>Perform <code>sha256</code> operation on <code>data</code> to get the hash value of the transaction, recorded as <code>hash</code>.</li> <li> <p>Use the private key d corresponding to the address in the transaction contract to sign hash. The signature algorithm is the ECDSA algorithm (using the SECP256K1 curve). The signature result includes three values: <code>r</code>, <code>s</code>, and <code>v</code>:</p> <ul> <li>Calculate the <code>r</code> value: Randomly generate a temporary private key <code>k</code>, calculate the temporary public key <code>K = k \u00d7 G</code> (<code>G</code>: curve base point), <code>r = K_x mod n</code>, that is, the abscissa of <code>K</code> modulo <code>n</code>, where <code>n</code> is the curve order (<code>n</code> and <code>G</code> satisfy <code>n \u00d7 G = O</code>, and <code>O</code> is the zero point of the elliptic curve group on the finite field). <code>r</code> is 32 bytes.</li> <li>Calculate the <code>s</code> value: First calculate the modular inverse of the temporary private key <code>k</code> with respect to n, <code>k\u207b\u00b9</code>, that is, <code>k\u207b\u00b9</code> satisfies <code>k\u207b\u00b9 \u00d7 k = 1 mod n</code>, then calculate the <code>s</code> value through the transaction's <code>hash</code>, the user's private key <code>d</code>, and the <code>r</code> value, <code>s = (k\u207b\u00b9 \u00d7 (hash + d \u00d7 r)) mod n</code>. <code>s</code> is 32 bytes.</li> <li>Calculate the <code>v</code> value: The <code>v</code> value is the recovery identifier. Since the <code>r</code> value undergoes a modulo operation and the symmetry of the elliptic curve, if there is only the <code>r</code> value, one <code>r</code> can recover up to four <code>K</code>s. The value range of <code>v</code> is four integers: <code>0, 1, 2, 3</code>. Historically, to be consistent with Ethereum, the final <code>v</code> value will be 27 added to <code>0, 1, 2, 3</code>, that is, the final value range of <code>v</code> is <code>27, 28, 29, 30</code>. With a determined <code>v</code>, the unique <code>K</code> can be recovered. <code>v</code> is 1 byte.</li> </ul> </li> <li> <p>Append the concatenated signature results <code>r</code>, <code>s</code>, <code>v</code> to the transaction, in the order <code>v || r || s</code>.</p> </li> </ol>"},{"location":"mechanism-algorithm/account/#java-code-sample","title":"Java Code Sample","text":"<pre><code>public static Transaction sign(Transaction transaction, ECKey myKey) {\n    Transaction.Builder transactionBuilderSigned = transaction.toBuilder();\n    byte[] hash = sha256(transaction.getRawData().toByteArray());\n    ECDSASignature signature = myKey.sign(hash);\n    ByteString bsSign = ByteString.copyFrom(signature.toByteArray());\n    transactionBuilderSigned.addSignature(bsSign);\n}\n</code></pre>"},{"location":"mechanism-algorithm/account/#signature-verification","title":"Signature Verification","text":"<p>When a FullNode receives a transaction, it uses the transaction hash and signature to recover a public key via the ECDSA recovery mechanism (ecrecover). An address is then derived from this public key. If the derived address matches the originator's address specified in the transaction, the signature is considered valid.</p>"},{"location":"mechanism-algorithm/account/#algorithm_1","title":"Algorithm","text":"<ol> <li>Recover the public key point <code>K</code>: The temporary public key point <code>K</code> can be uniquely recovered through <code>v</code> and <code>r</code> in the signature.</li> <li> <p>Derive the public key <code>P</code>:</p> <ul> <li>Known signature equation: <code>s = k\u207b\u00b9(hash + d \u00d7 r) mod n</code></li> <li>Multiply both sides by <code>k</code>: <code>s \u00d7 k = (hash + d \u00d7 r) mod n</code></li> <li>Multiply both sides by the base point <code>G</code> of the curve (using <code>K = k \u00d7 G</code> and <code>P = d \u00d7 G</code>): <code>s \u00d7 K = hash \u00d7 G + r \u00d7 P</code></li> <li>Since <code>s</code>, <code>K</code>, <code>hash</code>, <code>G</code>, and <code>r</code> are all known, <code>P</code> can be obtained.</li> </ul> </li> <li> <p>Generate TRON address: same as TRON Address Generation.</p> </li> <li>Address verification: compare whether the generated TRON address is consistent with the address in the transaction contract.</li> </ol>"},{"location":"mechanism-algorithm/account/#example","title":"Example","text":"<p>Signature verification is performed by the FullNode. For ECDSA algorithm signature verification, you can refer to java-tron, and the core function is <code>signatureToAddress</code>.</p>"},{"location":"mechanism-algorithm/account/#signature-normalization","title":"Signature normalization","text":"<p>ECDSA signatures (using the secp256k1 curve) are malleable, meaning that for a signature (r, s), where r, s \\in [1, n-1], the pair (r, n - s) is also a valid signature. Since signatures affect transaction ID in both Bitcoin and Ethereum, BIP-62 and EIP-2 require signatures to be normalized, i.e., s \\leq n/2. However, for the TRON network, the transaction ID does not include signature information, so there is no strict requirement for signature normalization, and signature verification does not need to check whether the signature is normalized. Although there is no strict restriction, both <code>java-tron</code> and <code>wallet-cli</code> currently perform signature normalization.</p>"},{"location":"mechanism-algorithm/dex/","title":"Decentralized Exchange (DEX)","text":"<p>The TRON network natively supports Decentralized Exchanges (DEX), with its core consisting of multiple trading pairs. This article introduces the basic concepts of trading pairs, creation methods, trading processes, funding and withdrawal mechanisms, and includes common query methods and price calculation methods.</p>"},{"location":"mechanism-algorithm/dex/#what-is-a-trading-pair","title":"What is a Trading Pair","text":"<p>A trading pair (<code>Exchange</code>) represents a trading market between any two TRC-10 tokens, which can be:</p> <ul> <li>Between any two TRC-10 tokens.</li> <li>Between a TRC-10 token and TRX.</li> </ul> <p>Any account can create any combination of trading pairs, even if the same combination already exists on the network. All trading pairs on the TRON network follow the Bancor protocol for asset exchange, with the default weight of the two tokens being equal. Therefore, the balance ratio of the two tokens in the trading pair represents the current price.</p> <p>Example: Suppose a trading pair contains two tokens, ABC and DEF:</p> <ul> <li>ABC balance is <code>10,000,000</code>.</li> <li>DEF balance is <code>1,000,000</code>.</li> </ul> <p>Then the current exchange rate is: 10 ABC = 1 DEF</p>"},{"location":"mechanism-algorithm/dex/#creating-a-trading-pair","title":"Creating a Trading Pair","text":"<p>Any account can initiate the creation of a trading pair. The fee for creating a trading pair is 1024 TRX, which will be burned. </p> <p>When creating a trading pair, the initial balances of the two tokens must be provided, and upon successful creation, the system will automatically deduct the corresponding tokens from the initiator\u2019s account.</p>"},{"location":"mechanism-algorithm/dex/#contract-exchangecreatecontract","title":"Contract: <code>ExchangeCreateContract</code>","text":"<p>Parameters are as follows:</p> <ul> <li><code>first_token_id</code>: The ID of the first token.</li> <li><code>first_token_balance</code>: The initial balance of the first token.</li> <li><code>second_token_id</code>: The ID of the second token.</li> <li><code>second_token_balance</code>: The initial balance of the second token.</li> </ul> <p>Note: If TRX is included, use <code>_</code> to represent it; the unit for TRX is <code>sun</code> (1 TRX = 1,000,000 sun).</p>"},{"location":"mechanism-algorithm/dex/#example","title":"Example:","text":"<p><pre><code>ExchangeCreate abc 10000000 _ 1000000000000\n</code></pre> The above command creates a trading pair between <code>abc</code> and <code>TRX</code>, with an initial injection of 10,000,000 abc tokens (token precision 0-6) and 1,000,000,000,000 sun (i.e., 1,000,000 TRX). If the account balance is insufficient, the creation transaction will fail.</p>"},{"location":"mechanism-algorithm/dex/#trading","title":"Trading","text":"<p>All accounts can perform instant trades in any trading pair. Trading does not require order placement, and the price and quantity are calculated entirely based on the Bancor protocol.</p>"},{"location":"mechanism-algorithm/dex/#contract-exchangetransactioncontract","title":"Contract: <code>ExchangeTransactionContract</code>","text":"<p>Parameters are as follows:</p> <ul> <li><code>exchange_id</code>: The ID of the trading pair (the system assigns a unique ID based on creation time).</li> <li><code>token_id</code>: The ID of the token to be sold.</li> <li><code>quant</code>: The quantity to be sold.</li> <li><code>expected</code>: The minimum quantity of the other token expected to be received (if the actual amount received is less than this value, the transaction fails).</li> </ul>"},{"location":"mechanism-algorithm/dex/#example_1","title":"Example:","text":"<p>Suppose the trading pair ID for <code>abc</code> and <code>TRX</code> is 1, with the current state:</p> <ul> <li>abc balance is 10,000,000.</li> <li>TRX balance is 1,000,000.</li> </ul> <p>If a user wishes to spend 100 TRX (100,000,000 sun) to buy at least 990 abc, they execute: <pre><code>ExchangeTransaction 1 _ 100000000 990\n</code></pre> Upon a successful transaction, the user's TRX balance will decrease and their abc balance will increase; the trading pair's TRX balance will increase and their abc balance will decrease. The actual amount of <code>abc</code> received by the user can be queried using the <code>gettransactioninfobyid</code> interface, checking the <code>exchange_received_amount</code> field.</p>"},{"location":"mechanism-algorithm/dex/#adding-liquidity-funding","title":"Adding Liquidity (Funding)","text":"<p>When the balance of one token in a trading pair is low, transactions may cause significant price fluctuations. At this point, the creator of the trading pair can choose to inject more assets to improve stability.</p> <p>Funding Guidelines:</p> <ul> <li>Only the trading pair creator can perform this action.</li> <li>No fees are required.</li> <li>The system calculates the required amount of the other token based on the current price ratio to maintain the price.</li> </ul>"},{"location":"mechanism-algorithm/dex/#contract-exchangeinjectcontract","title":"Contract: <code>ExchangeInjectContract</code>","text":"<p>Parameters are as follows:</p> <ul> <li><code>exchange_id</code>: The ID of the trading pair.</li> <li><code>token_id</code>: The ID of the token to be injected.</li> <li><code>quant</code>: The quantity of the token to be injected.</li> </ul>"},{"location":"mechanism-algorithm/dex/#example_2","title":"Example:","text":"<p>Suppose the trading pair ID for <code>abc</code> and <code>TRX</code> is 1, with the current state: - <code>abc</code> balance is 10,000,000. - <code>TRX</code> balance is 1,000,000.</p> <p>If the creator wishes to increase <code>abc</code> by 10% (i.e., add 1,000,000 abc), they execute:</p> <p><pre><code>ExchangeInject 1 abc 1000000\n</code></pre> If successful, the trading pair will gain 1,000,000 abc and the corresponding proportion amount of 100,000 TRX, which will be deducted from the creator\u2019s account.</p>"},{"location":"mechanism-algorithm/dex/#withdrawing-liquidity-withdraw","title":"Withdrawing Liquidity (Withdraw)","text":"<p>The assets in a trading pair belong entirely to the creator. The creator can withdraw a portion of the assets from the trading pair at any time.</p> <p>Withdrawal Rules: - Only the trading pair creator can perform this action. - No fees are required. - The system withdraws the other token in proportion to the current token ratio, ensuring the price remains unchanged but increasing price volatility.</p>"},{"location":"mechanism-algorithm/dex/#contract-exchangewithdrawcontract","title":"Contract: <code>ExchangeWithdrawContract</code>","text":"<p>Parameters are as follows:</p> <ul> <li><code>exchange_id</code>: The ID of the trading pair.</li> <li><code>token_id</code>: The ID of the token to be withdrawn.</li> <li><code>quant</code>: The quantity of the token to be withdrawn.</li> </ul>"},{"location":"mechanism-algorithm/dex/#example_3","title":"Example:","text":"<p>Suppose the trading pair ID for <code>abc</code> and <code>TRX</code> is 1, with the current state: - <code>abc</code> balance is 10,000,000. - <code>TRX</code> balance is 1,000,000.</p> <p>If the creator wishes to withdraw 10% of abc (i.e., reduce 1,000,000 abc), they execute:</p> <p><pre><code>ExchangeWithdraw 1 abc 1000000\n</code></pre> Upon successful transaction, the trading pair will lose 1,000,000 abc and the corresponding proportion of 100,000 TRX, which will be added to the creator\u2019s account.</p>"},{"location":"mechanism-algorithm/dex/#queries-and-calculations","title":"Queries and Calculations","text":""},{"location":"mechanism-algorithm/dex/#querying-trading-pair-information","title":"Querying Trading Pair Information","text":"<p>TRON provides multiple interfaces for querying trading pairs:</p> <p>1. Query all trading pair information: <code>ListExchanges</code></p> <p>2. Paginated query of trading pair list: <code>GetPaginatedExchangeList</code></p> <p>3. Query details of a specific trading pair: <code>GetExchangeById</code></p> <p>For detailed API documentation, refer to RPC-API .</p>"},{"location":"mechanism-algorithm/dex/#price-calculation","title":"Price Calculation","text":"<p>Suppose in a trading pair:</p> <ul> <li><code>first_token_price = 100 sun</code>.</li> <li><code>first_token_balance = 1,000,000</code>.</li> <li><code>second_token_balance = 2,000,000</code>.</li> </ul> <p>Then the <code>second_token_price</code> is:</p> <pre><code>second_token_price = first_token_price * (first_token_balance / second_token_balance)\n                   = 100 * (1,000,000 / 2,000,000)\n                   = 50 sun\n</code></pre>"},{"location":"mechanism-algorithm/dex/#exchange-quantity-calculation","title":"Exchange Quantity Calculation","text":"<p>Suppose <code>first_token</code> is used to exchange for <code>second_token</code>:</p> <ul> <li><code>sellTokenQuant</code>: The quantity of <code>first_token</code> to be sold.</li> <li><code>buyTokenQuant</code>: The quantity of <code>second_token</code> obtained through exchange.</li> <li><code>balance</code>: The current balance of <code>second_token</code> in the trading pair.</li> <li><code>supply</code>: A fixed constant of <code>10^18</code> used in the Bancor protocol formula.</li> </ul> <p>The calculation process is as follows:</p> <pre><code>supplyQuant = -supply * (1.0 - Math.pow(1.0 + (double) sellTokenQuant / (firstTokenBalance + sellTokenQuant), 0.0005));\nbuyTokenQuant = (long)(balance * (Math.pow(1.0 + (double) supplyQuant / supply, 2000.0) - 1.0));\n</code></pre> <p>Note: Market prices may fluctuate in real-time due to other trading activities on the network.</p> <p>For more interface details, refer to: HTTP API Documentation.</p>"},{"location":"mechanism-algorithm/dpos/","title":"TRON DPoS Consensus Mechanism","text":""},{"location":"mechanism-algorithm/dpos/#overview","title":"Overview","text":"<p>As a distributed ledger system, a blockchain boasts thousands, even tens of thousands, of independent nodes globally, each maintaining an identical copy of the ledger. To record new transaction data onto this shared ledger, universal agreement from these nodes is essential. Achieving this in an inherently untrustworthy distributed environment is a complex engineering challenge.</p> <p>A blockchain system functions correctly (i.e., all nodes can consistently maintain a coherent ledger) provided that the vast majority of nodes in the system are honest and reliable. To ensure that honest nodes can collectively oversee the recording of transaction data, every blockchain system needs to establish its own consensus mechanism. </p> <p>The consensus mechanism acts like the blockchain's \"constitution,\" guaranteeing that even in an untrustworthy distributed environment, as long as the majority of nodes adhere to the consensus rules, the system can achieve deterministic and trustworthy results. Therefore, the significance of a consensus mechanism lies in its ability to enable honest nodes within the blockchain to ultimately agree on the ledger's content.</p> <p>Currently, mainstream consensus mechanisms include Proof of Work (PoW), Proof of Stake (PoS), and Delegated Proof of Stake (DPoS), and each mechanism has its unique specific implementation in different blockchain systems. This document will focus on the DPoS consensus mechanism adopted by the TRON network and elaborate on its core components and operational principles.</p>"},{"location":"mechanism-algorithm/dpos/#dpos-consensus-mechanism","title":"DPoS Consensus Mechanism","text":"<p>The core role of the DPoS consensus mechanism in a blockchain system is to elect Super Representatives (SRs), which are the designated Block Producers for the network. These SRs are responsible for validating transaction data and recording it onto the ledger, subsequently broadcasting the new block containing the new entries to the entire network, and gaining recognition from other nodes.</p> <p>In DPoS consensus, the system selects a subset of nodes as SRs based on the number of votes they receive. The election process is as follows:</p> <ol> <li>Initial Setup: When the blockchain system launches, a certain amount of tokens (e.g., TRON's TRX) are issued.</li> <li>Becoming a Candidate: Nodes can spend a portion of these tokens to apply to become an SR candidate.</li> <li>Community Voting: Any node in the network holding tokens can vote for these candidates.</li> <li>Vote Tallying and Election: After a preset time period (e.g., <code>t</code>), the system tallies the votes for all candidates, and the top <code>N</code> candidates by vote count become the SRs for the next time period.</li> <li>Cycle Rotation: After the time period ends, the system re-tallies votes and elects new SRs, and so on.</li> </ol> <p>The following will provide a detailed explanation, integrating the specific implementation within the TRON network.</p>"},{"location":"mechanism-algorithm/dpos/#core-concept-definitions","title":"Core Concept Definitions","text":"Concept Definition TRON The TRON blockchain network. This document does not distinguish between TRON, TRON blockchain, TRON blockchain system, etc. TRX The equity token issued and circulated within the TRON blockchain system, with the ticker symbol TRX. Super Representative (SR) A node in the TRON network that has obtained block production qualifications. TRON sets the number of SRs at 27. This document does not distinguish between block producer, Witness, SuperNode, SR, etc. Super Representative Candidate A node in the TRON network that is eligible to become an SR. Super Representative Partner (SRP) SR candidates ranked from 28th to 127th by vote count. They do not participate in block production or transaction packaging but can receive voting rewards. Voters who vote for SRPs will also receive voting rewards. Block Production / Producing Blocks The process of validating transactions and recording them as entries. Since entries in TRON are carried by blocks, the block production process is also referred to as \"producing blocks.\" This document does not distinguish between block production and producing blocks. Block Production Order (Block Generation Order) The 27 SRs are ranked from highest to lowest by vote count, which determines their block production order. Slot In the TRON network, every 3 seconds is counted as a slot. Under normal circumstances, each SR producing a block will complete block generation within its corresponding slot time. Therefore, TRON's average block generation interval is approximately 3 seconds. If an SR fails to produce a block for some reason, the corresponding slot will be empty, and the next SR will produce a block in the subsequent slot. During maintenance periods, block production skips 2 slots. Epoch TRON defines every 6 hours as an epoch. The last two block generation times in each epoch are maintenance periods. The maintenance period of each epoch will determine the block generation order for the next epoch. Maintenance Period TRON sets this at 2 block times, which is 6 seconds. This period is used to tally the votes for candidates. Since there are 4 epochs in 24 hours, there are naturally 4 maintenance periods. No blocks are produced during the maintenance period; its primary purpose is to determine the block production order for the next epoch."},{"location":"mechanism-algorithm/dpos/#block-production-process","title":"Block Production Process","text":"<p>SRs in the TRON blockchain system continuously execute the following process:</p> <ol> <li>Collect Transactions: SRs collect newly generated transactions from the blockchain network.</li> <li>Validate Transactions: The legitimacy of these transactions is verified.</li> <li>Package Blocks: Validated transactions are packaged into a block in order to record them as a new page of entries to the ledger.</li> <li>Broadcast Blocks: The newly generated block is broadcast throughout the entire blockchain network.</li> <li>Other Node Verification: Upon receiving the new block, other nodes also verify the legitimacy of the transaction data within it and add it to their own ledgers.</li> </ol> <p>SRs continuously repeat this process to ensure that all new transaction data in the TRON system is promptly recorded onto the ledger.</p>"},{"location":"mechanism-algorithm/dpos/#super-representative-election-mechanism","title":"Super Representative Election Mechanism","text":""},{"location":"mechanism-algorithm/dpos/#votes","title":"Votes","text":"<p>Before voting for SRs, an account needs to acquire voting power, specifically TRON Power (TP). Voting power is obtained by staking TRX. In addition to obtaining Bandwidth or Energy, staking TRX simultaneously grants users voting power. For every 1 TRX staked, a user receives 1 TP.</p> <p>When an account unstakes TRX, it loses the corresponding amount of TP, and its current votes become invalid. Votes are tallied every 6 hours, and SRs and SRPs are also updated every 6 hours. If an account casts multiple votes before the vote tally, the TRON network will only record the account's latest vote, and previous votes will be overwritten.</p>"},{"location":"mechanism-algorithm/dpos/#voting-process","title":"Voting Process","text":"<p>In TRON, voting for candidates is defined as a special type of transaction. Nodes can vote for candidates by generating a voting transaction.</p>"},{"location":"mechanism-algorithm/dpos/#tallying-votes","title":"Tallying Votes","text":"<p>During each maintenance period, the system tallies the votes for all candidates and selects the 27 candidates with the most votes to be the SRs for the next block production cycle.</p>"},{"location":"mechanism-algorithm/dpos/#block-production-mechanism","title":"Block Production Mechanism","text":"<p>In an epoch, the 27 SRs will produce blocks sequentially according to their block production order. Each SR can only produce blocks when it is their turn.</p> <p>SRs package multiple valid transaction data into each block. At the same time, each block fills in the hash value (<code>hash</code>) of the previous block as its parent hash value (<code>parentHash</code>). Furthermore, the SR uses their private key to sign the current block's data, and the signature result (<code>witness_signature</code>), along with the SR's address, block height, block generation time, and other data, are also filled into the block.</p> <p>In this way, each block stores the hash value of the previous block, thereby logically linking the blocks together and ultimately forming the blockchain's chain structure. A typical blockchain structure diagram is as follows:</p> <p></p> <p>Ideally, in a blockchain system adopting DPoS consensus, the block production process should strictly follow a pre-calculated block production order, with SRs taking turns to produce blocks sequentially (as shown in Figure a below). However, a real blockchain network is a distributed, untrustworthy, and complex system, and the following situations may occur:</p> <ol> <li>Network Latency: Due to poor network link conditions, a block produced by an SR might not be received by other SRs within the effective time (as shown in Figures b1, b2 below).</li> <li>Node Failure: Some SRs may not always operate normally (as shown in Figure c).</li> <li>Malicious Behavior: A few SRs might maliciously produce fork blocks, attempting to split the main chain (as shown in Figure d).</li> </ol> <p> </p> <p>As mentioned earlier, the normal operation of a blockchain system is predicated on the vast majority of nodes in the system being honest and reliable. To further delve into this issue, the primary guarantee for blockchain system security is ledger security: the ledger cannot be maliciously written with illegal data, and the copies of the ledger stored on various nodes should remain consistent. From the perspective of DPoS consensus, the block production process is completed by SRs, so TRON's security depends on the reliability of the majority of SRs.</p> <p>TRON has established an irreversible block (or solidified block) mechanism, and to resist malicious behavior from a few block-producing nodes, TRON adopts the longest chain principle to confirm the main chain.</p>"},{"location":"mechanism-algorithm/dpos/#solidified-block-principle","title":"Solidified Block Principle","text":"<p>Newly produced blocks initially remain in an unconfirmed state. When a block is acknowledged by at least 70% (i.e., 27 \\times 70\\% \\approx 19 (rounded up) SRs), that block is considered an irreversible block, commonly referred to as a solidified block. At this point, the transactions contained within the solidified block have been confirmed by the entire blockchain network.</p> <p>The \"acknowledgment\" of an unconfirmed block here occurs when other SRs produce subsequent blocks after that block. For example, as shown in Figure d, when SR C produces block 103, SR E produces block 104' based on block 103, and SR G, A, and B produce blocks 105', 106', and 107' respectively. These are essentially subsequent blocks to block 103, and therefore, they signify acknowledgment of block 103 produced by C.</p> <p>Thus, when block 121 is produced, block 103 becomes a solidified block because it now has 19 subsequent blocks. It's important to emphasize that the SRs who produced these 19 blocks must be different from each other and different from the SR who produced block 103.</p>"},{"location":"mechanism-algorithm/dpos/#longest-chain-principle","title":"Longest Chain Principle","text":"<p>When a blockchain forks, honest SRs will always choose to continue producing blocks on the currently longest fork chain.</p>"},{"location":"mechanism-algorithm/dpos/#incentive-model","title":"Incentive Model","text":"<p>To ensure the secure and efficient operation of the TRON blockchain system, TRON has designed an incentive model to encourage more nodes to join the TRON network, thereby expanding network scale.</p> <ul> <li>Block Production Rewards: For every block successfully produced in the TRON network, the corresponding SR is rewarded with 8 TRX. After deducting their commission based on a self-defined commission rate, this SR distributes the remaining portion to the voters who supported them, based on their voting weight.</li> <li>Voting Rewards: With the generation of each block, the TRON network also awards an additional 128 TRX to all SRs and SRPs. This reward is distributed based on their respective vote proportions. Similarly, after deducting their commission based on their set commission rate, SRs and SRPs distribute the remaining voting rewards to their respective voters based on the voters' voting weight.</li> </ul>"},{"location":"mechanism-algorithm/dpos/#proposal-based-parameter-adjustment","title":"Proposal-Based Parameter Adjustment","text":"<p>An important feature of DPoS is that any system parameter adjustment can be initiated through an on-chain proposal. SRs decide whether a proposal takes effect by voting on it. The benefit of this mechanism is that no hard fork upgrade is required when adjusting parameters on-chain.</p> <p>For current dynamic parameters and their values in the TRON network, as well as past proposal records, please refer to the TRONSCAN Committee Page.</p>"},{"location":"mechanism-algorithm/dpos/#references","title":"References","text":"<ul> <li>The Basics of TRON\u2019s DPoS Consensus Algorithm</li> </ul>"},{"location":"mechanism-algorithm/multi-signatures/","title":"Account Permission Management","text":"<p>The TRON network supports fine-grained control of account permissions. By configuring permissions (owner, witness, active), joint control of accounts, secure delegation, and functional permission separation can be achieved. The following document details the account permission model, contract structure, configuration methods, and common interface calls.</p>"},{"location":"mechanism-algorithm/multi-signatures/#function-overview","title":"Function Overview","text":"<p>Account permission management allows:</p> <ul> <li>Setting permission levels for an account.</li> <li>Associating each permission with a group of addresses and weights.</li> <li>Implementing permission control through a threshold mechanism.</li> <li>Flexibly configuring which addresses can execute which contract types.</li> </ul> <p>For detailed specifications, see TIP-16: Account Permission Management.</p>"},{"location":"mechanism-algorithm/multi-signatures/#permission-level-concepts","title":"Permission Level Concepts","text":"<p>TRON supports three types of permission:</p> Permission Type Description owner Highest account permission, controls ownership and permission structure witness Super Representative permission, used only for block production active Custom permission, can specify functional permission combinations"},{"location":"mechanism-algorithm/multi-signatures/#permission-structure-definition","title":"Permission Structure Definition","text":""},{"location":"mechanism-algorithm/multi-signatures/#1-account-structure-account","title":"1. Account Structure: <code>Account</code>","text":"<pre><code>message Account {\n  ...\n  Permission owner_permission = 31;\n  Permission witness_permission = 32;\n  repeated Permission active_permission = 33;\n}\n</code></pre> <p>Explanation:</p> <ul> <li><code>owner_permission</code>: <code>owner</code> permission (only one).</li> <li><code>witness_permission</code>: Super Representative permission (only one).</li> <li><code>active_permission</code>: <code>active</code> permission list, supports up to 8.</li> </ul>"},{"location":"mechanism-algorithm/multi-signatures/#2-permission-configuration-permission","title":"2. Permission Configuration: <code>Permission</code>","text":"<pre><code>message Permission {\n  enum PermissionType {\n    Owner = 0;\n    Witness = 1;\n    Active = 2;\n  }\n  PermissionType type = 1;\n  int32 id = 2;\n  string permission_name = 3;\n  int64 threshold = 4;\n  int32 parent_id = 5;\n  bytes operations = 6;\n  repeated Key keys = 7;\n}\n</code></pre> <p>Explanation:</p> <ul> <li><code>type</code>: Permission type (owner/witness/active).</li> <li><code>id</code>: Permission ID, automatically assigned by the system.</li> <li><code>owner</code> = 0, <code>witness</code> = 1, <code>active</code> starts from 2 and increments.</li> <li><code>permission_name</code>: Permission name, maximum 32 bytes.</li> <li><code>threshold</code>: Permission threshold, operation is allowed only when the combined weight of the signing key \u2265 this value.</li> <li><code>operations</code>: Used only for Active permissions, specifies executable contract types.</li> <li><code>keys</code>: Addresses and weights with this permission (up to 5).</li> </ul>"},{"location":"mechanism-algorithm/multi-signatures/#3-permission-key-structure-key","title":"3. Permission Key Structure: <code>Key</code>","text":"<pre><code>message Key {\n  bytes address = 1;\n  int64 weight = 2;\n}\n</code></pre> <ul> <li><code>address</code>: Address with permission.</li> <li><code>weight</code>: Weight of this address under this permission.</li> </ul>"},{"location":"mechanism-algorithm/multi-signatures/#4-permission-update-transaction-accountpermissionupdatecontract","title":"4. Permission Update Transaction: <code>AccountPermissionUpdateContract</code>","text":"<pre><code>message AccountPermissionUpdateContract {\n  bytes owner_address = 1;\n  Permission owner = 2;\n  Permission witness = 3;\n  repeated Permission actives = 4;\n}\n</code></pre> <ul> <li>This contract is used to update all account permission structures at once.</li> <li>Even if only one permission is modified, all other existing permissions must be fully specified in the contract.</li> </ul>"},{"location":"mechanism-algorithm/multi-signatures/#5-contract-type-enumeration-contracttype","title":"5. Contract Type Enumeration: <code>ContractType</code>","text":"<pre><code>enum ContractType {\n  AccountCreateContract = 0;\n  ...\n  AccountPermissionUpdateContract = 46;\n}\n</code></pre> <p>Active permissions configure which <code>ContractType</code> can be executed through the <code>operations</code> field. For details on how to calculate the value of <code>operations</code>, please see Operations Value Calculation Example.</p>"},{"location":"mechanism-algorithm/multi-signatures/#explanation-of-each-permission-type","title":"Explanation of Each Permission Type","text":""},{"location":"mechanism-algorithm/multi-signatures/#owner-permission-account-master-control","title":"<code>owner</code> Permission (Account Master Control)","text":"<ul> <li>Holds full control over the account.</li> <li>Can modify any permission structure (including itself).</li> <li>Automatically set when creating an account, default threshold is 1, includes the account's own address.</li> <li>By default, transactions without a specified <code>Permission_id</code> use the Owner permission.</li> </ul>"},{"location":"mechanism-algorithm/multi-signatures/#witness-permission-block-production-permission","title":"<code>witness</code> Permission (Block Production Permission)","text":"<ul> <li>Available only for Super Representative, Super Representative Partner, and Super Representative Candidate accounts.</li> <li>Controls block-producing nodes, does not have permissions for fund transfers or other operations.</li> <li>Can delegate block production permission to other addresses to enhance account security.</li> </ul>"},{"location":"mechanism-algorithm/multi-signatures/#super-representative-node-configuration-example","title":"Super Representative Node Configuration Example:","text":"<pre><code># config.conf\n//localWitnessAccountAddress = TMK5c1jd...m6FXFXEz  # TRON Address\nlocalwitness = [\n  xxx  # Private key of TMK5c1jd...m6FXFXEz\n]\n</code></pre> <p>If the <code>witness</code> permission is modified, then:</p> <pre><code>localWitnessAccountAddress = TSMC4YzU...PBebBk2E\nlocalwitness = [\n  yyy  # Private key of TSMC4YzU...PBebBk2E\n]\n</code></pre> <p>Note: Only one private key is allowed in <code>localwitness</code>.</p>"},{"location":"mechanism-algorithm/multi-signatures/#active-permission-functional-permission-combination","title":"Active Permission (Functional Permission Combination)","text":"<ul> <li>Can combine contract permissions, assigning sub-permissions to different roles.</li> <li>Supports up to 8 <code>active</code> permission configurations.</li> <li>Permission IDs start from 2 and increment.</li> <li>When creating an account by default, one <code>active</code> permission is generated, with a default threshold of 1, containing only the account's own address.</li> </ul>"},{"location":"mechanism-algorithm/multi-signatures/#operation-fees","title":"Operation Fees","text":"Operation Fee Standard Modify Account Permission 100 TRX Transaction (2 or more signatures) Additional 1 TRX <p>The above fees can be adjusted through proposals.</p>"},{"location":"mechanism-algorithm/multi-signatures/#interfaces-and-operation-examples","title":"Interfaces and Operation Examples","text":""},{"location":"mechanism-algorithm/multi-signatures/#1-permission-modification-operation-process","title":"1. Permission Modification Operation Process","text":"<ol> <li>Use <code>getaccount</code> to query the current account permission structure.</li> <li>Construct the new permission configuration.</li> <li>Call <code>AccountPermissionUpdateContract</code>.</li> <li>Sign and broadcast the transaction.</li> </ol>"},{"location":"mechanism-algorithm/multi-signatures/#example-request","title":"Example Request:","text":"<pre><code>POST http://{{host}}:{{port}}/wallet/accountpermissionupdate\n\n{\n  \"owner_address\": \"41ffa946...\",\n  \"owner\": {\n    \"type\": 0,\n    \"id\": 0,\n    \"permission_name\": \"owner\",\n    \"threshold\": 2,\n    \"keys\": [...]\n  },\n  \"witness\": {\n    \"type\": 1,\n    \"id\": 1,\n    \"permission_name\": \"witness\",\n    \"threshold\": 1,\n    \"keys\": [...]\n  },\n  \"actives\": [\n    {\n      \"type\": 2,\n      \"id\": 2,\n      \"permission_name\": \"active0\",\n      \"threshold\": 3,\n      \"operations\": \"7fff1fc0037e...\",\n      \"keys\": [...]\n    }\n  ]\n}\n</code></pre>"},{"location":"mechanism-algorithm/multi-signatures/#2-operations-value-calculation-example","title":"2. Operations Value Calculation Example","text":"<p><code>operations</code> is a 32-byte hexadecimal string (little-endian) representing executable contract permissions. The following Java example generates permissions for contracts (ID=0-45):</p> <pre><code>Integer[] contractId = {0, 1, 2, ..., 45};\nbyte[] operations = new byte[32];\nfor (int id : contractId) {\n  operations[id / 8] |= (1 &lt;&lt; id % 8);\n}\nSystem.out.println(ByteArray.toHexString(operations));\n</code></pre>"},{"location":"mechanism-algorithm/multi-signatures/#3-transaction-execution-process","title":"3. Transaction Execution Process","text":"<ol> <li>Create the transaction.</li> <li>Set <code>Permission_id</code> (default is 0, i.e., <code>owner</code> permission).</li> <li>User A signs and forwards to B.</li> <li>User B signs and forwards to C.</li> <li>...</li> <li>The last user signs and broadcasts.</li> <li>The node verifies if the total signature weight \u2265 <code>threshold</code>; if yes, accepts the transaction.</li> </ol> <p>Example code reference: wallet-cli Example</p>"},{"location":"mechanism-algorithm/multi-signatures/#auxiliary-interfaces","title":"Auxiliary Interfaces","text":""},{"location":"mechanism-algorithm/multi-signatures/#query-signed-addresses","title":"Query Signed Addresses","text":"<pre><code>POST /wallet/getapprovedlist\n\nrpc GetTransactionApprovedList(Transaction) returns (TransactionApprovedList) {}\n</code></pre>"},{"location":"mechanism-algorithm/multi-signatures/#query-signature-weight","title":"Query Signature Weight","text":"<pre><code>POST /wallet/getsignweight\n\nrpc GetTransactionSignWeight(Transaction) returns (TransactionSignWeight) {}\n</code></pre>"},{"location":"mechanism-algorithm/multi-signatures/#references","title":"References","text":"<ul> <li>TIP-16 Permission Management Proposal</li> <li>Tron.proto Contract Type Definitions</li> </ul>"},{"location":"mechanism-algorithm/resource/","title":"Resource Model","text":""},{"location":"mechanism-algorithm/resource/#introduction-to-the-resource-model","title":"Introduction to the Resource Model","text":"<p>The TRON network's core system resources consist of three components: TRON Power (TP), Bandwidth, and Energy. Their definitions and functions are as follows:</p> <ul> <li>TRON Power (TP): Used exclusively for voting for Super Representatives (SRs) and Super Representative Partners. It serves as the credential for users to participate in network governance and is obtained by staking TRX.</li> <li>Bandwidth: Measures the byte size of a transaction on the blockchain. Every type of transaction, from a simple transfer to a contract interaction, must consume Bandwidth.</li> <li>Energy: Measures the computational resources consumed by the TRON Virtual Machine (TVM) to execute a smart contract. It can be understood as a \"CPU processing fee.\" Energy is only consumed when deploying or triggering a smart contract.</li> </ul>"},{"location":"mechanism-algorithm/resource/#tron-power-tp","title":"TRON Power (TP)","text":"<p>Before voting for Super Representatives, an account must first acquire TRON Power (TP).</p> <ul> <li>How to Obtain: When you stake TRX for either Bandwidth or Energy, you simultaneously receive an equivalent amount of TRON Power. This is the only way to get TP. For staking instructions, refer to the Staking on TRON section.</li> <li>Conversion Ratio: The staking-to-TP ratio is 1:1. Staking 1 TRX grants you 1 TP.</li> <li>Accumulation: You can stake TRX in multiple, separate transactions. The TP acquired from all stakes is automatically added to your account's total TP pool.</li> <li>Querying: You can check your account's total and used TP at any time using the <code>wallet/getaccountresource</code> API endpoint.</li> </ul>"},{"location":"mechanism-algorithm/resource/#bandwidth","title":"Bandwidth","text":"<p>Transactions are transmitted and stored on the network as byte arrays. The Bandwidth consumed by a transaction is calculated as <code>Transaction Size (bytes) * Bandwidth Rate</code>. The current Bandwidth rate is 1.</p> <p>For example, a transaction with a size of 200 bytes will consume 200 Bandwidth.</p> <p>Note: Because the total staked funds in the network and an individual account's staked funds can change at any time, the amount of Bandwidth an account possesses is not a fixed value.</p>"},{"location":"mechanism-algorithm/resource/#1-obtaining-bandwidth","title":"1. Obtaining Bandwidth","text":"<p>There are three ways to obtain Bandwidth:</p> <ul> <li> <p>Staking TRX: Users share a fixed total Bandwidth pool in proportion to the amount of TRX they have staked for Bandwidth.</p> <pre><code>Bandwidth Share = (TRX Staked for Bandwidth / Total TRX Staked for Bandwidth Network-Wide) * Total Bandwidth Limit\n</code></pre> <p>Total Bandwidth is a network parameter that can be modified through a committee proposal (#62) and is currently set to 43,200,000,000.</p> <p>Staking for Bandwidth (<code>wallet-cli</code> example):</p> <pre><code>freezeBalanceV2 frozen_balance [ResourceCode:0 BANDWIDTH,1 ENERGY]\n</code></pre> </li> <li> <p>Delegation from Others:     Another account can delegate their Bandwidth to you. </p> <p>Delegating Bandwidth (<code>wallet-cli</code> example):</p> <pre><code>delegateResource [OwnerAddress] balance ResourceCode(0 BANDWIDTH,1 ENERGY), ReceiverAddress [lock]\n</code></pre> </li> <li> <p>Daily Free Allowance: Every account receives a fixed daily allowance of free Bandwidth, which can be modified through a committee proposal #61 and is currently set to 600.</p> </li> </ul>"},{"location":"mechanism-algorithm/resource/#2-how-bandwidth-is-consumed","title":"2. How Bandwidth is Consumed","text":"<p>All transactions, except for query operations, consume Bandwidth. When you initiate a transaction, the system deducts the Bandwidth fee according to a strict priority order based on the transaction type.</p> <p>Scenario 1: Standard Transactions</p> <p>The system attempts to pay the Bandwidth fee in the following order:</p> <ol> <li>Staked Bandwidth: Consumes the Bandwidth obtained by the transaction initiator from staking TRX.</li> <li>Free Bandwidth: If staked Bandwidth is insufficient, consumes the initiator's 600 daily free allowance.</li> <li>TRX Burning: If both staked and free Bandwidth are insufficient, burns the initiator's TRX to cover the fee.<ul> <li>Burn Fee = Transaction Size (bytes) \u00d7 1,000 sun</li> </ul> </li> </ol> <p>Scenario 2: New Account Creation Transactions</p> <p>Transactions that create a new account follow a special rule and do not use the daily free allowance:</p> <ol> <li>Staked Bandwidth: First, attempts to consume the Bandwidth obtained by the transaction initiator from staking TRX.</li> <li>TRX Burning: If staked Bandwidth is insufficient, directly burns 0.1 TRX to complete the account creation.</li> </ol> <p>Scenario 3: TRC-10 Token Transfers</p> <p>TRC-10 token transfers have a unique consumption logic that introduces the \"token issuer\" as a potential fee payer:</p> <ol> <li>Issuer's Bandwidth (Highest Priority): The system first attempts to consume the Bandwidth prepaid by the token issuer. This requires all three of the following conditions to be met (only if all three checks pass will the issuer's Bandwidth be deducted; otherwise, the cost falls to the transaction initiator):<ul> <li>The token issuer has a sufficient total free Bandwidth allowance.<ul> <li>Query Method: /wallet/getassetissuebyaccount</li> <li>Formula: <code>public_free_asset_net_limit - public_free_asset_net_usage</code></li> <li>Description: The remaining quota the token issuer can pay for this token's transfers.</li> </ul> </li> <li>The transaction initiator has a sufficient Bandwidth allowance for that specific token.<ul> <li>Query Method: /wallet/getaccountnet </li> <li>Formula: <code>assetNetLimit['assetID'] - assetNetUsed['assetID']</code></li> <li>Description: The free Bandwidth quota provided by the issuer that the token holder can still use.</li> </ul> </li> <li>The token issuer has sufficient staked Bandwidth. <ul> <li>Query Method: /wallet/getaccountnet</li> <li>Formula: <code>NetLimit - NetUsed</code></li> <li>Description: The amount of available Bandwidth the issuer has obtained through staking.</li> </ul> </li> </ul> </li> <li>Initiator's Staked Bandwidth: Attempts to consume the initiator's staked Bandwidth.</li> <li>Initiator's Free Bandwidth: If staked Bandwidth is insufficient, consumes the initiator's free Bandwidth allowance.</li> <li>TRX Burning: If all the above resources are insufficient, burns the initiator's TRX to pay the fee.<ul> <li>Burn Fee = Transaction Size (bytes) \u00d7 1,000 sun</li> </ul> </li> </ol>"},{"location":"mechanism-algorithm/resource/#3-automatic-bandwidth-recovery","title":"3. Automatic Bandwidth Recovery","text":"<p>An account's consumed free Bandwidth and staked Bandwidth will gradually recover over a 24-hour period.</p>"},{"location":"mechanism-algorithm/resource/#4-querying-bandwidth-balance","title":"4. Querying Bandwidth Balance","text":"<p>You can query an account's current resource status by calling the <code>wallet/getaccountresource</code> HTTP endpoint. In the returned JSON data, use the following formulas to calculate the remaining Bandwidth:</p> <pre><code>Remaining Free Bandwidth = freeNetLimit - freeNetUsed\nRemaining Staked Bandwidth = NetLimit - NetUsed\n</code></pre> <p>Note: If any of these parameters are absent from the API response, their value is <code>0</code>.</p>"},{"location":"mechanism-algorithm/resource/#energy","title":"Energy","text":"<p>Energy is the unit of measurement for the computational resources consumed by the TRON Virtual Machine (TVM) when executing the instructions of a smart contract. This section provides a comprehensive overview of Energy focusing on the following three aspects:</p> <ul> <li>The acquisition, consumption, and recovery of Energy</li> <li>How to set the key parameter, <code>fee_limit</code></li> <li>The TRON network's overall consumption mechanism</li> </ul> <p></p>"},{"location":"mechanism-algorithm/resource/#1-acquiring-and-consuming-energy","title":"1. Acquiring and Consuming Energy","text":"<p>Energy can be acquired in two primary ways:</p> <ul> <li>By Staking TRX: Users can obtain Energy by staking the TRX they hold.</li> <li>By Receiving Delegation: Users can receive Energy delegated to them from other accounts.</li> </ul>"},{"location":"mechanism-algorithm/resource/#staking-for-energy-wallet-cli-example","title":"Staking for Energy (<code>wallet-cli</code> example)","text":"<pre><code>freezeBalanceV2 frozen_balance [ResourceCode:0 BANDWIDTH,1 ENERGY]\n</code></pre>"},{"location":"mechanism-algorithm/resource/#delegating-energy-wallet-cli-example","title":"Delegating Energy (<code>wallet-cli</code> example)","text":"<pre><code>delegateResource [OwnerAddress] balance ResourceCode(0 BANDWIDTH,1 ENERGY), ReceiverAddress [lock]\n</code></pre>"},{"location":"mechanism-algorithm/resource/#querying-energy-balance","title":"Querying Energy Balance","text":"<p>You can query an account's current Energy status using the <code>wallet/getaccountresource</code> HTTP endpoint. In the returned JSON data, calculate the remaining Energy using the following formula:</p> <pre><code>Remaining Energy = EnergyLimit - EnergyUsed\n</code></pre> <p>Note: If these parameters are absent from the API response, their value is <code>0</code>.</p>"},{"location":"mechanism-algorithm/resource/#calculating-your-energy-share","title":"Calculating your Energy Share","text":"<p>The amount of Energy you receive is a dynamic value calculated in real-time based on your stake relative to the total network stake for Energy:</p> <pre><code>Your Energy Share = (TRX Staked for Energy / Total TRX Staked for Energy Network-Wide) * Total Energy Limit\n</code></pre> <p>Total Energy Limit is a network parameter set by the committee (#19), currently at 180,000,000,000, and can be modified via proposals.</p> <p>Calculation Example</p> <p>Because your share is tied to the network's total stake, your available Energy will fluctuate as other users stake or unstake.</p> <pre><code>Assume only two users, A and B, have staked 2 TRX each.\n\nTheir respective Energy shares are:\nA: 90,000,000,000\nB: 90,000,000,000\n\nWhen a third user, C, stakes 1 TRX, the shares are adjusted:\nA: 72,000,000,000\nB: 72,000,000,000\nC: 36,000,000,000\n</code></pre>"},{"location":"mechanism-algorithm/resource/#energy-consumption","title":"Energy Consumption","text":"<p>Payment Priority</p> <p>When a contract transaction consumes Energy, the system deducts the cost in the following order:</p> <ol> <li>Staked Energy: First, the system consumes the Energy obtained by the transaction initiator from staking TRX.</li> <li>TRX Burning: If staked Energy is insufficient to cover all instructions, the system automatically burns the initiator's TRX to cover the difference. The current price is 0.0001 TRX per unit of Energy.</li> </ol> <p>Fee Deduction for Exceptions</p> <p>Contract execution can be interrupted for various reasons, with different rules for Energy deduction:</p> <ul> <li>Normal Interruption (<code>REVERT</code>): If a contract exits due to a <code>REVERT</code> instruction, only the Energy for the instructions executed up to that point is deducted.</li> <li>Unexpected Interruption (bug or Timeout): If a contract crashes due to a code bug, timeout, or another unexpected error, the system will deduct all available Energy for the transaction as a penalty. Users can limit this penalty by setting the <code>fee_limit</code> parameter for the transaction.</li> </ul>"},{"location":"mechanism-algorithm/resource/#energy-recovery","title":"Energy Recovery","text":"<p>Consumed Energy resources gradually recover over a 24-hour period.</p> <p></p>"},{"location":"mechanism-algorithm/resource/#2-how-to-set-fee_limit-essential-for-users","title":"2. How to Set <code>fee_limit</code> (Essential for Users)","text":"<p>Note</p> <p>In this section, \"developer\" refers to the person who develops and deploys the contract, while \"caller\" refers to the user or contract that invokes it. Since the Energy consumed by a contract can be converted to TRX (or sun), this section uses \"Energy\" and \"TRX\" interchangeably to refer to the resource cost. The terms are distinguished only when referring to specific numerical units.</p> <p><code>fee_limit</code> is a critical safety parameter when calling a smart contract. A properly set <code>fee_limit</code> ensures that a transaction can execute successfully while preventing excessive TRX consumption if the contract requires unexpectedly high Energy.</p> <p>Before setting <code>fee_limit</code>, understand these concepts:</p> <ol> <li>A valid <code>fee_limit</code> is an integer ranging from 0 to 15,000,000,000 sun (equivalent to 15,000 TRX). The <code>fee_limit</code> upper bound is a network parameter that can be modified by committee proposals (#47), and its current value is 15,000 TRX.</li> <li>Contracts of varying complexity consume different amounts of Energy. The same contract generally consumes a similar amount of Energy per execution<sup>1</sup>, but with the dynamic energy model, popular contracts may require more Energy at different times. For details, see the Dynamic Energy Model section. During execution, Energy is deducted instruction by instruction. If the cost exceeds the <code>fee_limit</code>, the execution fails, and the consumed Energy is not refunded.</li> <li>The <code>fee_limit</code> currently specifies the maximum amount of TRX the caller is willing to pay to execute a contract<sup>2</sup>. Note that the total Energy consumed by the contract's execution can be a combination of what the caller pays and what the developer covers for the contract.</li> <li>If a contract execution times out or crashes due to a bug, all the Energy allowed for the current transaction will be consumed. This total energy pool is the sum of the following components: <code>Total Consumed Energy = Energy from Caller's Stake + Energy from Developer's Share + Energy from Burned TRX</code>. The \"Energy from Burned TRX\" component is capped by <code>fee_limit</code>.</li> <li>Through the Energy sharing mechanism, a developer may cover a percentage of the Energy cost (e.g., 90%). However, if the developer's account has insufficient Energy, the remaining cost falls entirely to the caller. Within the <code>fee_limit</code>, if the caller's Energy is also insufficient, an equivalent amount of TRX will be burned.</li> </ol> <p>Example: Here's how to estimate the <code>fee_limit</code> for executing a contract <code>C</code>:</p> <ul> <li>Assume contract C consumed 18,000 Energy during its last successful execution. By calling the estimateenergy API to get a pre-execution estimate, let's assume the upper limit of Energy consumption for this transaction is approximately 20,000 Energy.</li> <li>When burning TRX, since the unit price of Energy is currently 100 sun, 10 TRX can be exchanged for a fixed 100,000 Energy units.</li> <li>Assume the developer has committed to covering 90% of the Energy cost and has sufficient Energy.</li> </ul> <p>The <code>fee_limit</code> estimation method is as follows:</p> <ul> <li>Step 1: Calculate the Total Transaction Fee: Calculate the total potential cost of the transaction by multiplying the estimated maximum Energy consumption by the current Energy price: <code>20,000 Energy * 100 sun = 2,000,000 sun (equivalent to 2 TRX)</code>.</li> <li>Step 2: Determine the User's Share: Calculate the portion of the fee the user is responsible for. Given the developer commits to covering 90%, the user's share is 10%: <code>2,000,000 sun * 10% = 200,000 sun</code>.</li> <li>Step 3: Set the Final <code>fee_limit</code>: The recommended <code>fee_limit</code> for the user to set is 200,000 sun.</li> </ul> <p></p>"},{"location":"mechanism-algorithm/resource/#3-energy-consumption-mechanism","title":"3. Energy Consumption Mechanism","text":"<p>Basic Energy Consumption Rules</p> <p>When executing smart contract transactions, the system calculates and deducts the Energy required for each instruction sequentially. The consumption of Energy in an account follows these priority principles:</p> <ol> <li>Available Energy (obtained through staking or renting) in the account is first used.</li> <li>If that part of Energy is insufficient, the remaining part will be covered by burning TRX from the account at a fixed rate (0.0001 TRX per Energy unit).</li> </ol> <p>Contract Energy Sharing Mechanism</p> <p>For smart contract calls, to reduce the caller's costs, TRON allows contract deployers to bear a portion of the Energy consumption. For specific details, please refer to the Contract Energy Sharing Mechanism section.</p> <p>Energy Deduction Rules:</p> <ul> <li>Portion borne by the contract deployer:<ul> <li>Directly deducted from the available Energy in the deployer's account. TRX in the deployer's account will not be burned.</li> </ul> </li> <li>Portion borne by the contract caller:<ul> <li>Available Energy in the caller\u2019s account is consumed first.</li> <li>If insufficient, the remaining part will be covered by burning TRX from the caller's account at a fixed rate.</li> </ul> </li> </ul> <p></p>"},{"location":"mechanism-algorithm/resource/#dynamic-energy-model","title":"Dynamic Energy Model","text":"<p>The Dynamic Energy Model is a resource-balancing mechanism on the TRON network. It dynamically adjusts the Energy consumption of each contract based on its resource usage, promoting a more equitable distribution of Energy and preventing network resources from being excessively concentrated on a few popular contracts. For more details, see the Introduction to Dynamic Energy Model.</p>"},{"location":"mechanism-algorithm/resource/#how-it-works","title":"How It Works","text":"<p>If a contract consumes an excessive amount of Energy within a maintenance period (currently 6 hours), transactions calling that same contract will incur additional Energy costs in the next period. When the contract's resource usage returns to a reasonable level, the Energy cost for calling it will gradually return to normal.</p> <p>Each contract has an <code>energy_factor</code>, which is a multiplier for its base Energy consumption. The initial value is <code>0</code>.</p> <ul> <li>An <code>energy_factor</code> of <code>0</code> means the contract is using resources reasonably, and calls will incur no extra Energy cost.</li> <li>An <code>energy_factor</code> greater than <code>0</code> indicates it is a popular contract, and calls will consume additional Energy. You can query a contract's <code>energy_factor</code> via the <code>getcontractinfo</code> API endpoint.</li> </ul> <p>The final Energy consumption for a contract call is calculated as:</p> <pre><code>Contract Transaction Energy Consumption = Base Energy Consumption Generated by the Contract Call Transaction * (1 + energy_factor)\n</code></pre> <p>The dynamic energy model introduces three network parameters that control the <code>energy_factor</code>:</p> <ul> <li><code>threshold</code>: The threshold for a contract's base Energy consumption. If a contract exceeds this threshold in a maintenance period, its Energy cost will increase in the next period.</li> <li><code>increase_factor</code>: The rate at which <code>energy_factor</code> increases when the threshold is exceeded.</li> <li><code>max_factor</code>: The maximum possible value for <code>energy_factor</code>.</li> </ul> <p>There is also a <code>decrease_factor</code> used to lower the <code>energy_factor</code>:</p> <ul> <li><code>decrease_factor</code>: Set to one-fourth of the <code>increase_factor</code>. When a contract's base Energy consumption falls below the threshold, its <code>energy_factor</code> is reduced by this rate.</li> </ul> <p><code>energy_factor</code> Adjustment Formulas:</p> <ul> <li>When the base energy consumption of a contract exceeds the <code>threshold</code> within a maintenance period, its <code>energy_factor</code> will increase during the next maintenance period, but will not exceed <code>max_factor</code>. The formula for this calculation is:     <pre><code>energy_factor = min((1 + energy_factor) * (1 + increase_factor) - 1, max_factor)\n</code></pre></li> <li>When the base energy consumption of a contract falls to or below the <code>threshold</code> within a maintenance period, its <code>energy_factor</code> will decrease during the next maintenance period, but not below a minimum of <code>0</code>. The formula for this calculation is:     <pre><code>energy_factor = max((1 + energy_factor) * (1 - decrease_factor) - 1, 0)\n</code></pre></li> </ul> <p>The dynamic energy model is active on Mainnet with the following parameters:</p> <ul> <li><code>threshold</code>: 5,000,000,000</li> <li><code>increase_factor</code>: 0.2</li> <li><code>max_factor</code>: 3.4</li> </ul> <p>Since the Energy cost for popular contracts can vary between maintenance periods, it is crucial to set an appropriate <code>fee_limit</code> for transactions.</p> <p></p>"},{"location":"mechanism-algorithm/resource/#staking-on-tron","title":"Staking on TRON","text":""},{"location":"mechanism-algorithm/resource/#how-to-stake-for-system-resources","title":"How to Stake for System Resources","text":"<p>On the TRON network, staking TRX is the unified mechanism for obtaining the three core resources: Energy, Bandwidth, and TRON Power (TP).</p>"},{"location":"mechanism-algorithm/resource/#how-to-stake","title":"How to Stake","text":"<ul> <li>HTTP API: Call the <code>wallet/freezebalancev2</code> endpoint.</li> <li>Smart Contract: Use the Stake 2.0 Solidity API within a contract.</li> </ul> <p>When you unstake, the corresponding resources (Energy/Bandwidth) and TP are released and reclaimed simultaneously.</p>"},{"location":"mechanism-algorithm/resource/#how-to-delegate-resources","title":"How to Delegate Resources","text":"<p>After an account obtains Energy or Bandwidth through staking, it can choose to delegate these resources to other TRON accounts. This allows accounts with a surplus of resources to help those with insufficient resources complete transactions.</p> <p>Delegation Rules and Key Restrictions</p> <p>Before delegating, you must understand the following key rules:</p> <ul> <li>Delegable Resources: Only Energy and Bandwidth can be delegated. TP cannot.</li> <li>Source of Resources: Only available resources obtained through Stake 2.0 are eligible for delegation.</li> <li>Recipient: The recipient must be an activated external account, not a contract address.</li> </ul> <p>Time Lock Option</p> <p>When delegating, you can choose to enable a time lock, which affects when you can reclaim the resources.</p> <ul> <li>With Time Lock: The resources are locked for a period. You must wait for this period to end before you can undelegate.     Important: If you delegate to the same address again during this period, the pending period resets.</li> <li>Without Time Lock: You can undelegate at any time and reclaim the resources immediately.</li> </ul> <p>Related API Endpoints</p> <ul> <li><code>delegateresource</code>: Delegate resources.</li> <li><code>undelegateresource</code>: Undelegate (reclaim) resources.</li> <li><code>getcandelegatedmaxsize</code>: Query the maximum amount of a resource you can delegate.</li> </ul>"},{"location":"mechanism-algorithm/resource/#how-to-unstake","title":"How to Unstake","text":"<p>After staking TRX, you can initiate an unstake operation at any time using the <code>unfreezebalancev2</code> API. However, this process has a time delay and follows specific rules.</p> <p>After staking TRX, you can initiate an unstake operation at any time using the <code>unfreezebalancev2</code> API. After initiating an unstake, your TRX enters a 14-day pending period. This pending period is TRON network parameter #70 and can be changed in the future through network governance. After the 14-day period has ended, you can withdraw the funds to your account balance using the <code>withdrawexpireunfreeze</code> API.</p> <p>!!! Important Notes     * Delegated Resources Cannot Be Unstaked: You cannot unstake TRX corresponding to resources that are currently delegated. You must first reclaim the resources using <code>undelegateresource</code> before you can unstake that portion of TRX.     * Resource Reclamation: Unstaking will cause the resources (Energy or Bandwidth) and TRON Power (TP) corresponding to the staked TRX to be synchronously reclaimed by the system. As a result, you will lose the respective Energy or Bandwidth and an equivalent amount of TP.     * Concurrent Operation Limit: You can have a maximum of 32 unstake operations in the 14-day pending period at any one time. Use the <code>getavailableunfreezecount</code> endpoint to check your remaining unstake capacity.</p> <p>Automatic Effects of Unstaking: Calling <code>unfreezebalancev2</code> not only initiates a new unstaking process, but it also automatically withdraws any TRX that has already completed its 14-day pending period.</p> <p>How to Verify Withdrawn Amount: To find out exactly how much unstaked TRX was automatically withdrawn during a specific unstaking operation, you can query the details of that unstake transaction using the <code>gettransactioninfobyid</code> API and look for the field <code>withdraw_expire_amount</code>, which shows the amount of matured unstaked TRX that was automatically withdrawn in this transaction.</p>"},{"location":"mechanism-algorithm/resource/#reclaiming-tron-power","title":"Reclaiming TRON Power","text":"<p>Under Stake 2.0, unstaking TRX simultaneously reclaims an equivalent amount of TRON Power (TP). If the amount of TP to be reclaimed exceeds your account's idle (unvoted) TP, the system will proportionally revoke your cast votes.</p> <p>TP Reclamation Priority: When the system reclaims TP, it follows the following two-step process:</p> <ol> <li>Reclaim Idle TP First: The system first reclaims all of your account's TP that is not currently being used for voting.</li> <li>Cancel Votes as Needed: If the idle TP is insufficient to meet the reclamation demand, the system will begin to revoke your cast votes to reclaim the remaining required TP.</li> </ol> <p>Rules for Calculating Vote Revocation</p> <p>The revocation operation is not random. Instead, votes are revoked proportionally and fairly from every Super Representative (SR) and Super Representative Partner you have voted for.</p> <ul> <li> <p>Formula:</p> <pre><code>Votes Revoked from a Given SR = Total Votes to Revoke * (Votes Cast for that SR or SR Partner / Total Votes Cast by the Account)\n</code></pre> </li> <li> <p>Example:</p> <p>Assume User <code>A</code>'s initial account state is:</p> <ul> <li>Total Staked: 2,000 TRX</li> <li>Total TP: 2,000 TP</li> <li>Votes Cast: 1,000 TP (600 for SR1, 400 for SR2)</li> <li>Unused TP: 1,000 TP</li> </ul> <p>Now, User <code>A</code> unstakes 1,500 TRX.</p> <p>System Process:</p> <ol> <li>Reclamation Demand: The system needs to reclaim 1,500 TP.</li> <li>Reclaim Unused TP: First, it reclaims all 1,000 idle TP.</li> <li>Calculate Shortfall: A remaining <code>1,500 - 1,000 = 500 TP</code> must be reclaimed by revoking votes.</li> <li>Proportional revocation:<ul> <li>Votes revoked for SR1: <code>500 * (600 / 1000) = 300</code> votes.</li> <li>Votes revoked for SR2: <code>500 * (400 / 1000) = 200</code> votes.</li> </ul> </li> <li>Final State: User A successfully unstakes 1,500 TRX. Their voting state is updated to: 300 votes for SR1 and 200 votes for SR2.</li> </ol> </li> </ul> <p>!!! Important Distinction: Stake 1.0 vs. Stake 2.0     Although Stake 2.0 is the current standard, TRX staked via the legacy Stake 1.0 system is still valid and can be redeemed using its corresponding <code>wallet/unfreezebalance</code> API.</p> <pre><code>Unstaking TRX from Stake 1.0 will revoke **all** of the account's votes.\n</code></pre>"},{"location":"mechanism-algorithm/resource/#how-to-cancel-all-unstaking-requests","title":"How to Cancel All Unstaking Requests","text":"<p>If you initiate an unstake but change your mind, Stake 2.0 provides an efficient \"cancel\" feature. You can use the <code>cancelallunfreezev2</code> API to immediately cancel all pending unstake requests, bypassing the 14-day pending period, and get your resources back immediately.</p> <p>Please note: this endpoint cancels all of your account's unstaking requests that are currently in the 14-day pending period.</p> <ul> <li>TRX Status: The canceled TRX is immediately re-staked.</li> <li>Resource Type: The re-staked funds will acquire the same resource type (Energy or Bandwidth) as the original stake.</li> </ul> <p>Additional Effect - Automatic Withdrawal: This operation will also automatically withdraw any unstaked TRX that has already completed its 14-day pending period and is awaiting withdrawal.</p> <p>How to Verify the Result</p> <p>You can query the transaction details using <code>gettransactioninfobyid</code> and check the following fields:</p> <ul> <li><code>cancel_unfreezeV2_amount</code>: The total amount of TRX that was successfully canceled and re-staked.</li> <li><code>withdraw_expire_amount</code>: The total amount of matured unstaked TRX that was automatically withdrawn to your account balance.</li> </ul>"},{"location":"mechanism-algorithm/resource/#relevant-api-endpoints","title":"Relevant API Endpoints","text":"API Endpoint Description <code>wallet/freezebalancev2</code> Stake TRX. <code>wallet/unfreezebalancev2</code> Unstake TRX. <code>wallet/delegateresource</code> Delegate resources. <code>wallet/undelegateresource</code> Undelegate resources. <code>wallet/withdrawexpireunfreeze</code> Withdraw unstaked TRX that has passed the pending period. <code>wallet/getavailableunfreezecount</code> Check the remaining number of unstake operations allowed. <code>wallet/getcanwithdrawunfreezeamount</code> Check the amount of withdrawable unstaked TRX. <code>wallet/getcandelegatedmaxsize</code> Check the maximum amount of delegable resources. <code>wallet/getdelegatedresourcev2</code> Check resources delegated from one address to another. <code>wallet/getdelegatedresourceaccountindexv2</code> Check an account's delegation and received delegation status. <code>wallet/getaccount</code> Check account stake, resources, unstake, and voting status. <code>wallet/getaccountresource</code> Check resource totals, usage, and available amounts. <code>wallet/cancelallunfreezev2</code> Cancel all pending unstake requests. <ol> <li> <p>If a developer is unsure about a contract's stability, they should not set the user's cost share to 0%. Otherwise, if the execution is deemed malicious, all of the developer's Energy will be deducted.\u00a0\u21a9</p> </li> <li> <p>Therefore, it is recommended that developers set the user's share of the cost to be between 10% and 100%.\u00a0\u21a9</p> </li> </ol>"},{"location":"mechanism-algorithm/shielded-transaction/","title":"Shielded Transaction","text":""},{"location":"mechanism-algorithm/shielded-transaction/#introduction","title":"Introduction","text":"<p>TRON shielded transaction uses zk-SNARK(Zero-Knowledge Succinct Non-Interactive Argument of Knowledge) to implement a completely anonymous transaction. TronZ is the name of shielded trc10 token.</p> <p>In shielded transaction of transferring TronZ, the sender and the receiver's address and transfer amount can both be completely confidential.</p> <p>In shielded transaction of transferring TronZ, there are two types of address:</p> <ul> <li>\"t-addr\" (Transparent Address)</li> <li>\"z-addr\" (Shielded Address)</li> </ul> <p>\"t-addr\" address uses TRON account model. \"z-addr\" address uses Anonymous account model.</p> <p>In shielded transaction of transferring TronZ, there are three types of transfer transaction: - From \"t-addr\" to \"z-addr\": The transaction information of \"t-addr\" can be tracked, \"z-addr\" can not be tracked.</p> <ul> <li> <p>From \"z-addr\" to \"z-addr\": The transaction information of both \"z-addr\" can not be tracked.</p> </li> <li> <p>From \"z-addr\" to \"t-addr\": The transaction information of both \"t-addr\" can be tracked, \"z-addr\" can not be tracked.</p> </li> </ul> <p>From \"t-addr\" to \"t-addr\" are not supported.</p>"},{"location":"mechanism-algorithm/shielded-transaction/#usage-guide","title":"Usage Guide","text":"<p>1.\u00a0The sender can only spend one note in each transfer. The receiver can receive two notes in each transfer at most.</p> <p>2.\u00a0When you transfer from \"z-addr\" to \"t-addr\", if no note returns to \"z-addr\" as a change, it will generate a note of zero value automatically, and send it to a random black hole address.</p> <p>3.\u00a0The fee for each shielded transaction is xx.</p> <p>The doc below describes how to use TRON Shielded Transaction with http api.</p>"},{"location":"mechanism-algorithm/shielded-transaction/#transfer-from-transparent-address-to-shielded-address","title":"Transfer from transparent address to shielded address","text":"<p>Step 1. Call api: wallet/createshieldedtransaction to build the transaction Method: Post Parameters: <pre><code>{\n    \"transparent_from_address\":\"41A7D8A35B260395C14AA456297662092BA3B76FC0\",\n    \"from_amount\":100000000,\n    \"ovk\":\"798ba79bfec55e154fa69b4e6a96247288f727b5e4ecc5cd848aefc0afab02b6\",\n    \"shielded_receives\":[{\n        \"note\":\n        {\n             \"value\": 500000000,\n             \"payment_address\": \"ztron1jld8fmvujrz2vgkc867zuwklmewy4ypw0wtwgweqs2paee0uhc8f3azy90el770arksa2kunl02\",\n             \"rcm\": \"723053bcbfecdf5da66c18ab0376476ef308c61b7abe891b2c01e903bcb87c0e\"\n        }\n    }]\n}\n</code></pre> Return: <pre><code>{\"txID\":\"1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497\",\"raw_data\":{\"contract\":[{\"parameter\":{\"value\":{\"transparent_from_address\":\"41a7d8a35b260395c14aa456297662092ba3b76fc0\",\"binding_signature\":\"5407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a\",\"from_amount\":100000000,\"fee\":10000000,\"receive_description\":[{\"value_commitment\":\"5a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd21\",\"note_commitment\":\"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\",\"epk\":\"e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b\",\"c_enc\":\"d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae\",\"c_out\":\"8e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a\",\"zkproof\":\"8b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c790607\"}]},\"type_url\":\"type.googleapis.com/protocol.ShieldedTransferContract\"},\"type\":\"ShieldedTransferContract\"}],\"ref_block_bytes\":\"0245\",\"ref_block_hash\":\"b1ea272768028540\",\"expiration\":1558691289000,\"timestamp\":1558691230861},\"raw_data_hex\":\"0a0202452208b1ea27276802854040a8aff6c9ae2d5ae708083312e2080a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412a8080a1541a7d8a35b260395c14aa456297662092ba3b76fc01080c2d72f22c2070a205a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd211220f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b621a20e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b22c404d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae2a508e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a32c0018b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c7906072a405407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a4080ade204708de9f2c9ae2d\"}\n</code></pre> Step 2. Sign the transaction using SDK</p> <p>Step 3. Call api: wallet/broadcasttransaction to broadcast the transaction Method: Post Parameters: <pre><code>{\"signature\":[\"5c1939e2e1177f44a6d168b5e473bd193ea099aa369ffe27727d560f1c72a3226dd4be61c19a09cabbe3f4a7433932df11cf3e54c4fc04cff0eea6906f04c32a00\"],\"txID\":\"1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497\",\"raw_data\":{\"contract\":[{\"parameter\":{\"value\":{\"transparent_from_address\":\"41a7d8a35b260395c14aa456297662092ba3b76fc0\",\"binding_signature\":\"5407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a\",\"from_amount\":100000000,\"fee\":10000000,\"receive_description\":[{\"value_commitment\":\"5a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd21\",\"note_commitment\":\"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\",\"epk\":\"e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b\",\"c_enc\":\"d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae\",\"c_out\":\"8e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a\",\"zkproof\":\"8b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c790607\"}]},\"type_url\":\"type.googleapis.com/protocol.ShieldedTransferContract\"},\"type\":\"ShieldedTransferContract\"}],\"ref_block_bytes\":\"0245\",\"ref_block_hash\":\"b1ea272768028540\",\"expiration\":1558691289000,\"timestamp\":1558691230861},\"raw_data_hex\":\"0a0202452208b1ea27276802854040a8aff6c9ae2d5ae708083312e2080a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412a8080a1541a7d8a35b260395c14aa456297662092ba3b76fc01080c2d72f22c2070a205a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd211220f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b621a20e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b22c404d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae2a508e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a32c0018b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c7906072a405407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a4080ade204708de9f2c9ae2d\"}\n</code></pre> Return: <pre><code>{\"result\": true}\n</code></pre></p>"},{"location":"mechanism-algorithm/shielded-transaction/#transfer-from-shielded-address-to-shielded-address","title":"Transfer from shielded address to shielded address","text":"<p>Step 1. Call api: wallet/getmerkletreevoucherinfo to get the voucher of the shield address, this info will be used when create shielded transaction Method: Post Parameter: <pre><code>{\n    \"out_points\":[{\n        \"hash\":\"1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497\",\n        \"index\":0\n    }],\n    \"block_num\":1\n}\n</code></pre> Return: <pre><code>{\"vouchers\": [{\"tree\": {\"left\": {\"content\": \"7efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed35\"},\"right\": {\"content\": \"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\"}},\"rt\": \"72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e\"}],\"paths\": [\"2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca155207efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed350100000000000000\"]}\n</code></pre> Step 2. Call api: wallet/createshieldedtransaction to create transaction Method: Post Parameter: <pre><code>{\n    \"ask\": \"f9302122162221f59a7668e0d740245dcabaeb51dd157ba995eecd02f4b60b06\",\n    \"nsk\": \"050fc9a42909e60fefb9d548fe12718cb759e3ee28d1b92ceaeaffc23d200a0d\",\n    \"ovk\": \"a0da0cc6294dc900e93887b9f08ac42a162234359fdaf523b98382602c92513c\",\n\n    \"shielded_spends\": [\n        {\n            \"note\": {\n                \"value\": 90000000,\n                \"payment_address\": \"ztron1jld8fmvujrz2vgkc867zuwklmewy4ypw0wtwgweqs2paee0uhc8f3azy90el770arksa2kunl02\",\n                \"rcm\": \"e48836a3cfae0e1b27b5230460199b46ebd88ad650fa9db5ac1eafb20b516302\"\n            },\n\n\n            \"alpha\": \"2608999c3a97d005a879ecdaa16fd29ae434fb67b177c5e875b0c829e6a1db04\",\n            \"voucher\": {\"tree\": {\"left\": {\"content\": \"7efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed35\"},\"right\": {\"content\": \"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\"}},\"rt\": \"72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e\"},\n            \"path\": \"2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca155207efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed350100000000000000\"\n\n        }\n    ],\n    \"shielded_receives\": [\n        {\n            \"note\": {\n                \"value\": 80000000,\n                \"payment_address\": \"ztron1wd46s6fwmz99gulqpxul6zffqtevzfpl93ng3s5834fhwf6e7w5l6zmjhmpvtwsc4wxa7dusmvr\",\n                \"rcm\": \"ccced07d36641fc93cba33cddda7064cb82f6962a0bdf15a4240a4a742770e03\"\n            }\n        }\n    ]\n}\n</code></pre> Return: <pre><code>{\"txID\":\"5a057fde4a1add0da38eda9978f6c3d035f7ca4807adae4b8c57e34499dfedfb\",\"raw_data\":{\"contract\":[{\"parameter\":{\"value\":{\"binding_signature\":\"b77c81fdb8af64075a7d95e8f04ef28660bb2f3f2bfb884baf17abd87ae7f212de091016ae6147edbff280b52515a1a52515bd1fa118de2964412f87b6a5790c\",\"spend_description\":[{\"value_commitment\":\"ddc8138f73323eff8d2f0367070c63f5e2659538fa431d6aa06d62696845e529\",\"anchor\":\"72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e\",\"nullifier\":\"29269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c\",\"rk\":\"c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf463\",\"spend_authority_signature\":\"518def6477325d78b77b00aac6142bfc7b9a5f3eaaff5b8b4b8f2c46114ed85d1cc15a314028f58ce0c42e9f030f465063bbc0c41d01c92edd639d02575f6b08\",\"zkproof\":\"82eda1b9baeaa5b08b3b33f157ae7a117e2561c702520e615a92e65098615eba1809a20e0b518fef286268d4c6f15a8eaa1b2a15630dd673fcfdde503a12daf80dfc157e6a0ea9333dedc2c365368847f2e7d8e3e648cc65cf5e805cd2343077051d70fcd140a8c665760f8cf066edb32036de7421e6755f3b64f44621aaa47d7e0f2012069ad374a7addb00b841b759b9e567c7b8b2642110eabd22358d22f4d3b4002a1ba4e9f6c018c58a5c1242acbc0169cf4aa0bf1423ed4a0b688928ad\"}],\"fee\":10000000,\"receive_description\":[{\"value_commitment\":\"6b082c7b9d01338d60fc4f5d434a152f9d8bf5c05c22422e23d3c74d36c2b925\",\"note_commitment\":\"e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02\",\"epk\":\"36b1cb275228b3ab8275d6b04b3e2e93c04d5c0cc0ab1f41421093228b94f758\",\"c_enc\":\"1f91dd5cdf0731c99318a2a87b169b7159230c4dee4e47e8b0717fc51c604ccc7a2df9c873a91903e59528756e2c2f3bd07ec5aa9b994ae5d8492ad779d6a00d4a71e7cb742c1ae416e4d983554fade0e04b0213880da2e96be402a5351ca3a5d78e5a975d20cb5ec1475c7ed35dc09c0b04a3a2e8a65595d8d77652f2881a4b93ed99cff007b3923b36967be6819721ed3daea2190fca744423ffb77d1a579f569bfb30c77ad0dadc0ca484a7a89318e15d50e540744927e19c5f6f08be2e97e77cd9c6ce3e05bdbeeb6f6d7b53f83a2283f56786ea8544c98b648300dfb8554e7a2611204598ddc37c4e61ce5881e63ab171ec83c1aedf97166596d014b1fc8193ff30d4e1c7aff8a3c3638e3a41b2a4040828a8d9568ab0fe4aef08a97872ca84c6c247635a1774efde8b8ed16177393879c8626a8ea0075fa2db5af58754d712ccd5a94dcf87c019faffa2c8f3143a9a9d540de4a705c87fc16dc5efa0c387f1e6ed9dad12b84f2ca7bb09cd95a10a2e412fc410aa7ebf676f6a74f03a7334a0a1697067cc88ccd968bdf6d8c20ed7d7bd9687bda89fb28c2849e45734d30395fead9f955649a3e3f1deb15eb02f28dad608d6d0ef2943ae9fd9e14f2507e9b871a3bebe5d15ba41a8dafc7dd18cd594eb69ad89192e776fc35a3d6eb48c2446d78258fed12cbb61200ddf0c3d2dbbf73fc82a4a2e96f619fa1ad479e6da108ddab453c02fa2fa8e96721585b791f6478966e36d2d75a6677858a64672dde9bb72feb64b58b7723c13c75f70cf7333c3331d46951633a2686b108e48215eb5d56653\",\"c_out\":\"bbbf78f926fa2cae70ed68ef644487c32a82da230b5b8e2be26aa3102627ffc2db26f45f29c2379b20595ef26c60801f33508e17f03f66694cfdf15f606e5fabfe1d76593c1a8543593c10160f4ae4a0\",\"zkproof\":\"b5597534076320a98ef1a546253185011f17cc7d175a8937736bfe1daee1c33e25411346996e64d0bf1887c4553b49bb815cc8ef57b6811e7213b8c7f81c9853a4663703bf2b2989688a9ae5cabcc56c2316d411f6b910722169609d76890a2b0fc9b3fb536c3be378eb4100b925d9ae6a4a9e08eee591066f881c726a0416861ad41f69148619d187ee4d8f0f8b111da8f0d5bd4f781c2ddfdd7e4b3544b09ec2c9548cef85c28cd1129bf60f1f421c9ac7ed7f36b20984038fb33fcb409956\"}]},\"type_url\":\"type.googleapis.com/protocol.ShieldedTransferContract\"},\"type\":\"ShieldedTransferContract\"}],\"ref_block_bytes\":\"029b\",\"ref_block_hash\":\"027c45a7dc0875f7\",\"expiration\":1558691547000,\"timestamp\":1558691489292},\"raw_data_hex\":\"0a02029b2208027c45a7dc0875f740f88e86caae2d5adb0b083312d60b0a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e7472616374129c0b1a8d030a20ddc8138f73323eff8d2f0367070c63f5e2659538fa431d6aa06d62696845e529122072eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e1a2029269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c2220c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf4632ac00182eda1b9baeaa5b08b3b33f157ae7a117e2561c702520e615a92e65098615eba1809a20e0b518fef286268d4c6f15a8eaa1b2a15630dd673fcfdde503a12daf80dfc157e6a0ea9333dedc2c365368847f2e7d8e3e648cc65cf5e805cd2343077051d70fcd140a8c665760f8cf066edb32036de7421e6755f3b64f44621aaa47d7e0f2012069ad374a7addb00b841b759b9e567c7b8b2642110eabd22358d22f4d3b4002a1ba4e9f6c018c58a5c1242acbc0169cf4aa0bf1423ed4a0b688928ad3240518def6477325d78b77b00aac6142bfc7b9a5f3eaaff5b8b4b8f2c46114ed85d1cc15a314028f58ce0c42e9f030f465063bbc0c41d01c92edd639d02575f6b0822c2070a206b082c7b9d01338d60fc4f5d434a152f9d8bf5c05c22422e23d3c74d36c2b9251220e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f021a2036b1cb275228b3ab8275d6b04b3e2e93c04d5c0cc0ab1f41421093228b94f75822c4041f91dd5cdf0731c99318a2a87b169b7159230c4dee4e47e8b0717fc51c604ccc7a2df9c873a91903e59528756e2c2f3bd07ec5aa9b994ae5d8492ad779d6a00d4a71e7cb742c1ae416e4d983554fade0e04b0213880da2e96be402a5351ca3a5d78e5a975d20cb5ec1475c7ed35dc09c0b04a3a2e8a65595d8d77652f2881a4b93ed99cff007b3923b36967be6819721ed3daea2190fca744423ffb77d1a579f569bfb30c77ad0dadc0ca484a7a89318e15d50e540744927e19c5f6f08be2e97e77cd9c6ce3e05bdbeeb6f6d7b53f83a2283f56786ea8544c98b648300dfb8554e7a2611204598ddc37c4e61ce5881e63ab171ec83c1aedf97166596d014b1fc8193ff30d4e1c7aff8a3c3638e3a41b2a4040828a8d9568ab0fe4aef08a97872ca84c6c247635a1774efde8b8ed16177393879c8626a8ea0075fa2db5af58754d712ccd5a94dcf87c019faffa2c8f3143a9a9d540de4a705c87fc16dc5efa0c387f1e6ed9dad12b84f2ca7bb09cd95a10a2e412fc410aa7ebf676f6a74f03a7334a0a1697067cc88ccd968bdf6d8c20ed7d7bd9687bda89fb28c2849e45734d30395fead9f955649a3e3f1deb15eb02f28dad608d6d0ef2943ae9fd9e14f2507e9b871a3bebe5d15ba41a8dafc7dd18cd594eb69ad89192e776fc35a3d6eb48c2446d78258fed12cbb61200ddf0c3d2dbbf73fc82a4a2e96f619fa1ad479e6da108ddab453c02fa2fa8e96721585b791f6478966e36d2d75a6677858a64672dde9bb72feb64b58b7723c13c75f70cf7333c3331d46951633a2686b108e48215eb5d566532a50bbbf78f926fa2cae70ed68ef644487c32a82da230b5b8e2be26aa3102627ffc2db26f45f29c2379b20595ef26c60801f33508e17f03f66694cfdf15f606e5fabfe1d76593c1a8543593c10160f4ae4a032c001b5597534076320a98ef1a546253185011f17cc7d175a8937736bfe1daee1c33e25411346996e64d0bf1887c4553b49bb815cc8ef57b6811e7213b8c7f81c9853a4663703bf2b2989688a9ae5cabcc56c2316d411f6b910722169609d76890a2b0fc9b3fb536c3be378eb4100b925d9ae6a4a9e08eee591066f881c726a0416861ad41f69148619d187ee4d8f0f8b111da8f0d5bd4f781c2ddfdd7e4b3544b09ec2c9548cef85c28cd1129bf60f1f421c9ac7ed7f36b20984038fb33fcb4099562a40b77c81fdb8af64075a7d95e8f04ef28660bb2f3f2bfb884baf17abd87ae7f212de091016ae6147edbff280b52515a1a52515bd1fa118de2964412f87b6a5790c4080ade204708ccc82caae2d\"}\n</code></pre> Step 3. Call api: wallet/broadcasttransaction to broadcast this transaction(no need to sign this transaction) Method: Post Parameter: <pre><code>{\"txID\":\"791d30b7123448a54c56407a11857d4f3885cb699a071ee5f265f7db408dec6c\",\"raw_data\":{\"contract\":[{\"parameter\":{\"value\":{\"binding_signature\":\"231cc2ddbf2715b51d07ed63e142ad874e7e173ec0c5d681b49e3060ca33bd65cf39921355dfaacc62dac7aa810c49daafbf8db8a1adc168da4a833eba0d7504\",\"spend_description\":[{\"value_commitment\":\"f4c543df8f0fe9b71b1bbd6aa2f06f87e07605dcd339b0eaa48afd9e2488b140\",\"anchor\":\"72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e\",\"nullifier\":\"29269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c\",\"rk\":\"c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf463\",\"spend_authority_signature\":\"2f50449f92e4bf541c9ba7d82b93f6dd416208449ea8996dc45614c1cb90a7911264fece30446da875d8a864224f1a3870e3654ec8a4005305faa329224f4c08\",\"zkproof\":\"984779ad18c87d71dd79b78564e49c1c18d6f871ef45f79bdb012f73439d6402593dd7cda308d9d5412e2b64b0be461192eb2a8d2ffdcc700475a1c8b8912220f628af41bf44a7c010a8dda2a65f98b4aaf8c375c4046afd1af3e6bbe4b33b9210c68298f46999322174b9ba76b0be4d6ef2c74ff5d16370a8c30fa17c5c3bbeab217610de5cc680b1d64d557c4d53a4a3f73294699ac6a00b37c3d8076a20362ab09c77c94f08bb00db2648ade72f224821ecc190627222cf58130b9bcf639b\"}],\"fee\":10000000,\"receive_description\":[{\"value_commitment\":\"3f4465801b357f9b8334eb3025bd8b3cd84247355c099133c08d53a8cffd3595\",\"note_commitment\":\"e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02\",\"epk\":\"3ece31615aec76e7711e25b05b05f5b7fb99d75f3812fe56702291633e5f474c\",\"c_enc\":\"4fc57e65bfdd91e2ae0284cfc2926d5df63d51b8f864e9191f368404db390e28ce15fefc9bd210aca4e7f42b30140bc4b1650d9a79bcbfb1670288c68d4678ba5c34266ce1bd4fd1f4e4040508b072cdca87d69e4921af8c8305f982aa7f37897a29c69cce06c311eafb2ef5928f07d5b8f207e5f46c32237f6e9b0eadc2597e0cd8d884cd3f4a35d86145e75565913b9d4a2e613523c9f377fe3bdf6f1d9e6789605e6bdaf9526412632e52a1994fec98dd086596c62ba028508d45933943f3446c83f463f56e860f29d2ea0eb3b87a55a0602974b7df6b58905872cb97a757f24515f05d2b12d932a0ac038e0c0b15b9c8b324c8e31d4ddf8bf39bfb65bd9d495eac1818b281822c9ad85adbe8a90f62adfbb6723fae7a7d91760a5b2d146f180d5ca4d85653449089f4788459752e899abd4abd395842e8b5315dd3738eee0b4e0f758698aabb92df587b703e85774048f290ea366696de3dde665eefb6fce6c2776e4e9ad18662b8d95af4203a10e9af54085ee498c77ad7e7b5824f91aaeb8f138d8c90d95f57e71dc15c177b602c45e38f12e402cc65c2c55b80c9a7d908332baa30b2871a0d6cf417bcaf0be6ae5c451c2468e945273151da500aaccd7235a29c7fcd0da4ac4d6ceefda59cf568f7a362b49654a5793c552bd970681a6489a1951ad75e22215b22d5cd511a030d751892b4b5746d66f048d6b6889c2ddcd5da908417b91ef52c0507b2ce8b1214567b71963c5d6ace1f6e858ce02b11fcf0f839cbe8183fa71b9a239f70c5e98642f6e9b9b6eb31f12a752829ebecf0f12df040\",\"c_out\":\"5fc1926bb6501f8ec4dc796d56786d7f019db9e43ccde07bbbddd95444df4f099310ef3f8d86a0a25ff72de0385563e44b9cb9e5e477299891959d24060a3b08b41aa36c29ce7297f0806a74f11aa99e\",\"zkproof\":\"b924ae84aba3af2c4d6529c22ebd6ba900ac63c629723e035ab843295d41aec1e9ebb2906fa7471473dbdae7e182fbd7a9f14a2f599a79456a3dbb949203d9923c3c3600225f12217e38b69b88a080b5b5751d78ac84375c9a03ad0bc61492850c49488a654c376c49701abdde20d5658bce851e9a6fd1bee5429b9b4d4b55ed1eb888a43f435740b8f063ea6e2e7e81b53f12e67e3eac60020aab5c3ff45d34ff2c3dde4eb76ed2893df22232993deb1b9397d1d4f9cc1eb8405f7cbef5a24b\"}]},\"type_url\":\"type.googleapis.com/protocol.ShieldedTransferContract\"},\"type\":\"ShieldedTransferContract\"}],\"ref_block_bytes\":\"0328\",\"ref_block_hash\":\"833c24d9f1019cd0\",\"expiration\":1558691970000,\"timestamp\":1558691911355},\"raw_data_hex\":\"0a0203282208833c24d9f1019cd040d0f79fcaae2d5adb0b083312d60b0a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e7472616374129c0b1a8d030a20f4c543df8f0fe9b71b1bbd6aa2f06f87e07605dcd339b0eaa48afd9e2488b140122072eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e1a2029269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c2220c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf4632ac001984779ad18c87d71dd79b78564e49c1c18d6f871ef45f79bdb012f73439d6402593dd7cda308d9d5412e2b64b0be461192eb2a8d2ffdcc700475a1c8b8912220f628af41bf44a7c010a8dda2a65f98b4aaf8c375c4046afd1af3e6bbe4b33b9210c68298f46999322174b9ba76b0be4d6ef2c74ff5d16370a8c30fa17c5c3bbeab217610de5cc680b1d64d557c4d53a4a3f73294699ac6a00b37c3d8076a20362ab09c77c94f08bb00db2648ade72f224821ecc190627222cf58130b9bcf639b32402f50449f92e4bf541c9ba7d82b93f6dd416208449ea8996dc45614c1cb90a7911264fece30446da875d8a864224f1a3870e3654ec8a4005305faa329224f4c0822c2070a203f4465801b357f9b8334eb3025bd8b3cd84247355c099133c08d53a8cffd35951220e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f021a203ece31615aec76e7711e25b05b05f5b7fb99d75f3812fe56702291633e5f474c22c4044fc57e65bfdd91e2ae0284cfc2926d5df63d51b8f864e9191f368404db390e28ce15fefc9bd210aca4e7f42b30140bc4b1650d9a79bcbfb1670288c68d4678ba5c34266ce1bd4fd1f4e4040508b072cdca87d69e4921af8c8305f982aa7f37897a29c69cce06c311eafb2ef5928f07d5b8f207e5f46c32237f6e9b0eadc2597e0cd8d884cd3f4a35d86145e75565913b9d4a2e613523c9f377fe3bdf6f1d9e6789605e6bdaf9526412632e52a1994fec98dd086596c62ba028508d45933943f3446c83f463f56e860f29d2ea0eb3b87a55a0602974b7df6b58905872cb97a757f24515f05d2b12d932a0ac038e0c0b15b9c8b324c8e31d4ddf8bf39bfb65bd9d495eac1818b281822c9ad85adbe8a90f62adfbb6723fae7a7d91760a5b2d146f180d5ca4d85653449089f4788459752e899abd4abd395842e8b5315dd3738eee0b4e0f758698aabb92df587b703e85774048f290ea366696de3dde665eefb6fce6c2776e4e9ad18662b8d95af4203a10e9af54085ee498c77ad7e7b5824f91aaeb8f138d8c90d95f57e71dc15c177b602c45e38f12e402cc65c2c55b80c9a7d908332baa30b2871a0d6cf417bcaf0be6ae5c451c2468e945273151da500aaccd7235a29c7fcd0da4ac4d6ceefda59cf568f7a362b49654a5793c552bd970681a6489a1951ad75e22215b22d5cd511a030d751892b4b5746d66f048d6b6889c2ddcd5da908417b91ef52c0507b2ce8b1214567b71963c5d6ace1f6e858ce02b11fcf0f839cbe8183fa71b9a239f70c5e98642f6e9b9b6eb31f12a752829ebecf0f12df0402a505fc1926bb6501f8ec4dc796d56786d7f019db9e43ccde07bbbddd95444df4f099310ef3f8d86a0a25ff72de0385563e44b9cb9e5e477299891959d24060a3b08b41aa36c29ce7297f0806a74f11aa99e32c001b924ae84aba3af2c4d6529c22ebd6ba900ac63c629723e035ab843295d41aec1e9ebb2906fa7471473dbdae7e182fbd7a9f14a2f599a79456a3dbb949203d9923c3c3600225f12217e38b69b88a080b5b5751d78ac84375c9a03ad0bc61492850c49488a654c376c49701abdde20d5658bce851e9a6fd1bee5429b9b4d4b55ed1eb888a43f435740b8f063ea6e2e7e81b53f12e67e3eac60020aab5c3ff45d34ff2c3dde4eb76ed2893df22232993deb1b9397d1d4f9cc1eb8405f7cbef5a24b2a40231cc2ddbf2715b51d07ed63e142ad874e7e173ec0c5d681b49e3060ca33bd65cf39921355dfaacc62dac7aa810c49daafbf8db8a1adc168da4a833eba0d75044080ade20470bbad9ccaae2d\"}\n</code></pre> Return: <pre><code>{\"result\": true}\n</code></pre></p>"},{"location":"mechanism-algorithm/shielded-transaction/#transfer-from-shielded-address-to-transparent-address","title":"Transfer from shielded address to transparent address","text":"<p>Step 1. Call api: wallet/getmerkletreevoucherinfo to get the voucher of the shield address, this info will be used when create shielded transaction Method: Post Parameter: <pre><code>{\n    \"out_points\":[{\n        \"hash\":\"791d30b7123448a54c56407a11857d4f3885cb699a071ee5f265f7db408dec6c\",\n        \"index\":0\n    }],\n    \"block_num\":1\n}\n</code></pre> Return: <pre><code>{\"vouchers\": [{\"tree\": {\"left\": {\"content\": \"e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02\"},\"parents\": [{\"content\": \"c835053e32be73852e67a65f4cd40407a11f4a7a38bb84b8d3e8a1f57acdbf61\"}]},\"rt\": \"8bdf96ac1241f30d5cd54d4ece7f10867d9eef854121ef77d1015f0ab2a26b1b\"}],\"paths\": [\"2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420c835053e32be73852e67a65f4cd40407a11f4a7a38bb84b8d3e8a1f57acdbf612001000000000000000000000000000000000000000000000000000000000000000200000000000000\"]}\n</code></pre></p> <p>Step 2. Call api: wallet/createshieldedtransaction to create transaction Method: Post Parameter: <pre><code>{\n    \"ask\": \"653b3a3fdd40b60d2f53ba121df8840f6590384993f8fa9a0ecb0dfb23496604\",\n    \"nsk\": \"428ff3c9e101dc1fca08f7b0e3387b23b68016746ae565aefc19d112b696db01\",\n    \"ovk\": \"1274dcc5c7307bf0fd0ead466e9dd5641fed4a51391f681862370e2f2654cc61\",\n    \"shielded_spends\": [\n        {\n            \"note\": {\n                \"value\": 80000000,\n                \"payment_address\": \"ztron1wd46s6fwmz99gulqpxul6zffqtevzfpl93ng3s5834fhwf6e7w5l6zmjhmpvtwsc4wxa7dusmvr\",\n                \"rcm\": \"ccced07d36641fc93cba33cddda7064cb82f6962a0bdf15a4240a4a742770e03\"\n            },\n            \"alpha\": \"3ad5406efd6efcd81d27696d5f91efc07ba5c98ea6fb0f787b93e557b51df405\",\n            \"voucher\": {\n                \"tree\": {\n                    \"left\": {\n                        \"content\": \"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\"\n                    },\n                    \"right\": {\n                        \"content\": \"e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02\"\n                    }\n                },\n                \"rt\": \"774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a567\"\n            },\n            \"path\": \"2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca15520f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b620100000000000000\"\n        }\n    ],\n    \"transparent_to_address\": \"41A7D8A35B260395C14AA456297662092BA3B76FC0\",\n    \"to_amount\": 70000000\n}\n</code></pre> Return: <pre><code>{\"txID\":\"4dbdc95574a155434baeaf5e690e2d0c77a2b883a048d8d0103ab5c7fed8d866\",\"raw_data\":{\"contract\":[{\"parameter\":{\"value\":{\"to_amount\":70000000,\"binding_signature\":\"780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203\",\"spend_description\":[{\"value_commitment\":\"086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd9\",\"anchor\":\"774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a567\",\"nullifier\":\"fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587\",\"rk\":\"41132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d4\",\"spend_authority_signature\":\"b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f30207\",\"zkproof\":\"b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee1\"}],\"fee\":10000000,\"transparent_to_address\":\"41a7d8a35b260395c14aa456297662092ba3b76fc0\"},\"type_url\":\"type.googleapis.com/protocol.ShieldedTransferContract\"},\"type\":\"ShieldedTransferContract\"}],\"ref_block_bytes\":\"00dc\",\"ref_block_hash\":\"a45c748f93fa2854\",\"expiration\":1558928754000,\"timestamp\":1558928695327},\"raw_data_hex\":\"0a0200dc2208a45c748f93fa285440d08a94bbaf2d5ab204083312ad040a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412f3031a8d030a20086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd91220774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a5671a20fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587222041132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d42ac001b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee13240b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f302072a40780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203321541a7d8a35b260395c14aa456297662092ba3b76fc03880bbb0214080ade204709fc090bbaf2d\"}\n</code></pre></p> <p>Step 3. Call api: wallet/broadcasttransaction to broadcast this transaction(no need to sign this transaction) Method: Post Parameter: <pre><code>{\"txID\":\"4dbdc95574a155434baeaf5e690e2d0c77a2b883a048d8d0103ab5c7fed8d866\",\"raw_data\":{\"contract\":[{\"parameter\":{\"value\":{\"to_amount\":70000000,\"binding_signature\":\"780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203\",\"spend_description\":[{\"value_commitment\":\"086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd9\",\"anchor\":\"774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a567\",\"nullifier\":\"fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587\",\"rk\":\"41132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d4\",\"spend_authority_signature\":\"b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f30207\",\"zkproof\":\"b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee1\"}],\"fee\":10000000,\"transparent_to_address\":\"41a7d8a35b260395c14aa456297662092ba3b76fc0\"},\"type_url\":\"type.googleapis.com/protocol.ShieldedTransferContract\"},\"type\":\"ShieldedTransferContract\"}],\"ref_block_bytes\":\"00dc\",\"ref_block_hash\":\"a45c748f93fa2854\",\"expiration\":1558928754000,\"timestamp\":1558928695327},\"raw_data_hex\":\"0a0200dc2208a45c748f93fa285440d08a94bbaf2d5ab204083312ad040a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412f3031a8d030a20086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd91220774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a5671a20fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587222041132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d42ac001b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee13240b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f302072a40780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203321541a7d8a35b260395c14aa456297662092ba3b76fc03880bbb0214080ade204709fc090bbaf2d\"}\n</code></pre> Return: <pre><code>{\"result\": true}\n</code></pre></p>"},{"location":"mechanism-algorithm/sr/","title":"Super Representatives &amp; Committee","text":""},{"location":"mechanism-algorithm/sr/#how-to-become-a-super-representative","title":"How to Become a Super Representative","text":"<p>In the TRON network, block producers are called Super Representatives (SRs), and they are elected by a network-wide vote. Any account can apply to become a Super Representative candidate and participate in the election by paying a fee of 9999 TRX.</p> <p>Based on the final vote rankings, candidates are divided into two categories:</p> <ul> <li>Super Representatives (SRs): The top 27 candidates with the most votes. They are the core nodes of the TRON network, responsible for producing blocks and packing transactions. For this, they receive block rewards and vote rewards.</li> <li>Super Representative Partners (SR Partners): Candidates ranking from 28th to 127th. They act as backup nodes for the network, do not participate in block production, but share in the vote rewards.</li> </ul> <p>Voters who cast their ballots for both Super Representatives (SRs) and Partners can receive corresponding voting rewards proportional to their votes.</p> <p>The TRON network tallies votes once every 6 hours, and the roles of Super Representatives and Partners are updated accordingly in this 6-hour cycle.</p>"},{"location":"mechanism-algorithm/sr/#super-representative-election","title":"Super Representative Election","text":"<p>All accounts in the TRON network have the right to vote for the Super Representative candidates they support. The core of voting is TRON Power (TP), which determines the weight of your vote.</p> <ul> <li> <p>Obtaining Voting Power (TRON Power)</p> <p>Your amount of TP is directly linked to the amount of TRX you have staked. Calculation Method: For every 1 TRX you stake, you receive 1 TP.</p> </li> <li> <p>The Impact of Unstaking on Voting</p> <p>When you unstake a portion of your TRX, you lose an equivalent amount of TP. The system reclaims TP according to the following rules:</p> <ul> <li>Unused TP is reclaimed first.</li> <li>If the available TP is insufficient, the system automatically retracts a proportional amount from your existing votes to cover the deficit.</li> <li>If you have voted for multiple SRs, the system will retract votes proportionally from each SR based on your voting distribution.</li> </ul> </li> </ul> <p>Important Note: The TRON network only records the state of your last vote. This means that every new vote you cast will completely overwrite all previous voting effects.</p> <p>Example:\uff1a </p> <p><pre><code>&gt;freezebalancev2 10000000 1 # Stake 10 TRX to get 10 TP. Resource code: 0 for BANDWIDTH, 1 for ENERGY.\n&gt;votewitness SR1 4 SR2 6 # Cast 4 votes for SR1 and 6 votes for SR2.\n&gt;votewitness SR1 3 SR2 7 # Cast 3 votes for SR1 and 7 votes for SR2.\n</code></pre> The final result of the commands above is 3 votes for SR1 and 7 votes for SR2.</p>"},{"location":"mechanism-algorithm/sr/#rewards","title":"Rewards","text":""},{"location":"mechanism-algorithm/sr/#brokerage-of-srs-and-sr-partners","title":"Brokerage of SRs and SR Partners","text":"<p>SRs and SR Partners can set a Commission Rate (also known as Brokerage Rate) to determine how rewards are distributed between themselves and their voters.</p> <ul> <li> <p>Default Rate</p> <p>The default commission rate for a newly elected SR or SR Partner is 20%. This means that 20% of the total rewards go to the SR, and the remaining 80% is distributed to their voters in proportion to their votes.</p> </li> <li> <p>Customizing the Rate</p> <p>SRs and SR Partners can adjust their commission rate at any time via the <code>wallet/updateBrokerage</code> API interface.</p> <ul> <li>100% Commission: All rewards go to the SR/SR Partner.</li> <li>0% Commission: All rewards are distributed to the voters.</li> </ul> </li> </ul>"},{"location":"mechanism-algorithm/sr/#block-production-rewards-and-voting-rewards","title":"Block Production Rewards and Voting Rewards","text":"<p>Rewards are divided into block rewards and vote rewards. The differences are as follows:</p> Block Production Rewards Voting Rewards Total Rewards On-chain parameter modifiable by proposal, currently 8 TRX On-chain parameter modifiable by proposal, currently 128 TRX Related On-chain Parameter ID #5 (requires activation of #30 chain parameter) #31 (requires activation of #30 chain parameter) Related On-chain Parameter Name <code>getWitnessPayPerBlock</code> <code>getWitness127PayPerBlock</code> Rewards Distribution Target SRs, their voters SRs/SR partners, their voters Rewards Distribution Time SR: After producing each blockVoters: Triggered when voters initiate any of these 4 transactions:- <code>VoteWitnessContract</code>- <code>WithdrawBalanceContract</code>- <code>UnfreezeBalanceContract</code>- <code>UnfreezeBalanceV2Contract</code> SRs/SR partners: After producing each blockVoters: Triggered when voters initiate any of these 4 transactions:- <code>VoteWitnessContract</code>- <code>WithdrawBalanceContract</code>- <code>UnfreezeBalanceContract</code>- <code>UnfreezeBalanceV2Contract</code> Specific Rewards SR: <code>8 * brokerageRate</code>voter: <code>8 * (1-brokerageRate) * (votes of this voter) / (total votes received by this SR)</code> SR/SR partner: <code>128 * brokerageRate * (votes received by this SR/SR partner) / (total votes received by all SRs &amp; SR partners)</code>voter: <code>128 * (1-brokerageRate) * (votes of this voter) / (total votes received by all SRs &amp; SR partners)</code> <p>Notes:</p> <ul> <li>Chain parameter details can be viewed on TRONSCAN's committee page.</li> <li><code>brokerageRate</code> refers to the commission rate.</li> <li>SRs and SR Partners are the top 127 SR candidates.</li> <li>If a voter votes for an SR, they are eligible for both block and vote rewards (block rewards only when that SR produces a block). If a voter votes for a Partner, they are only eligible for vote rewards.</li> </ul>"},{"location":"mechanism-algorithm/sr/#committee","title":"Committee","text":""},{"location":"mechanism-algorithm/sr/#about-the-committee","title":"About the Committee","text":"<p>The Committee is the highest governing body of the TRON network, responsible for modifying the network's core dynamic parameters (such as transaction fees, block rewards, etc.).</p> <ul> <li>Composition: The Committee is composed of the current 27 active Super Representatives (SRs).</li> <li> <p>Powers: Each committee member has two core powers: </p> <ul> <li>To create a proposal: Initiate a proposal to modify network parameters.</li> <li>To vote on a proposal: Vote on proposals initiated by other members.</li> </ul> </li> <li> <p>Proposal Effective Mechanism: A proposal is passed when it receives at least 18 approval votes. It will then take effect in the next maintenance period.</p> </li> </ul>"},{"location":"mechanism-algorithm/sr/#create-a-proposal","title":"Create a Proposal","text":"<p>In the TRON network, all SRs, SR Partners, and SR candidates have the right to initiate proposals to modify network parameters.</p> <p>Please refer to here for TRON network dynamic parameters and their values.</p> <p>Example:</p> <pre><code>&gt;createproposal id0 value0 ... idN valueN\n# id0_N: Parameter number\n# value0_N: New parameter value\n</code></pre>"},{"location":"mechanism-algorithm/sr/#vote-for-a-proposal","title":"Vote for a Proposal","text":"<p>The voting process for proposals follows these core rules:</p> <ol> <li>The governance system only supports approval votes. Not voting is equivalent to disapproving.</li> <li>A proposal is valid for 3 days from its creation. If it does not receive enough approval votes within this period, it will expire.</li> </ol> <p>Example:</p> <pre><code>&gt;approveProposal id is_or_not_add_approval\n# id: proposal id\n# is_or_not_add_approval: YES vote or cancel YES vote\n</code></pre>"},{"location":"mechanism-algorithm/sr/#cancel-proposal","title":"Cancel Proposal","text":"<p>The creator of a proposal can cancel it at any time before it takes effect.</p> <p>Example: <pre><code>&gt;deleteProposal proposalId\n# id: proposal id\n</code></pre></p>"},{"location":"mechanism-algorithm/sr/#query-proposal","title":"Query Proposal","text":"<p>Proposals can be queried using the following API interfaces:</p> <ul> <li>Query all the proposals list (ListProposals)</li> <li>Query all the proposals list by pagination (GetPaginatedProposalList)</li> <li>Query a proposal by proposal id (GetProposalById)</li> </ul>"},{"location":"mechanism-algorithm/system-contracts/","title":"System Contracts","text":"<p>The TRON network supports many different types of transactions, such as TRX transfer transactions, TRC10 transfer transactions, creating smart contract transactions, triggering smart contract transactions, staking TRX transactions, and more. To create different types of transactions, you need to call different API. For example, the type of smart contract deployment transaction is <code>CreateSmartContract</code>, you need to call <code>wallet/deploycontractAPI</code> to create a transaction; the type of stake TRX transactions is <code>FreezeBalanceV2Contract</code>, you need to call<code>wallet/freezebalancev2API</code> to create transactions, we collectively refer to the implementation of these different transaction types as system contracts, the following are the types of system contracts and their contents:</p>"},{"location":"mechanism-algorithm/system-contracts/#accountcreatecontract","title":"AccountCreateContract","text":"<pre><code>    message AccountCreateContract {\n      bytes owner_address = 1;\n      bytes account_address = 2;\n      AccountType type = 3;\n    }\n</code></pre> <ul> <li><code>owner_address</code>: The owner of the current account.</li> <li><code>account_address</code>: The target address to create.</li> <li><code>type</code>: Account type. 0 means normal account; 1 means the Genesis account; 2 means smart contract account.</li> </ul>"},{"location":"mechanism-algorithm/system-contracts/#transfercontract","title":"TransferContract","text":"<pre><code>    message TransferContract {\n      bytes owner_address = 1;\n      bytes to_address = 2;\n      int64 amount = 3;\n    }\n</code></pre> <ul> <li><code>owner_address</code>: The owner of the current account.</li> <li><code>to_address</code>: The target address to transfer.</li> <li><code>amount</code>: The amount of TRX to transfer.</li> </ul>"},{"location":"mechanism-algorithm/system-contracts/#transferassetcontract","title":"TransferAssetContract","text":"<pre><code>    message TransferAssetContract {\n      bytes asset_name = 1;\n      bytes owner_address = 2;\n      bytes to_address = 3;\n      int64 amount = 4;\n    }\n</code></pre> <ul> <li><code>asset_name</code>: The token id to transfer.</li> <li><code>owner_address</code>: The owner of the current account.</li> <li><code>to_address</code>: The target address to transfer.</li> <li><code>amount</code>: The amount of token to transfer.</li> </ul>"},{"location":"mechanism-algorithm/system-contracts/#votewitnesscontract","title":"VoteWitnessContract","text":"<pre><code>    message VoteWitnessContract {\n      message Vote {\n        bytes vote_address = 1;\n        int64 vote_count = 2;\n      }\n      bytes owner_address = 1;\n      repeated Vote votes = 2;\n      bool support = 3;\n    }\n</code></pre> <ul> <li><code>owner_address</code>: The owner of the current account.</li> <li><code>vote_address</code>: The SR or candidate's address.</li> <li><code>vote_count</code>: The votes number.</li> <li><code>support</code>: Constant true, not used.</li> </ul>"},{"location":"mechanism-algorithm/system-contracts/#witnesscreatecontract","title":"WitnessCreateContract","text":"<pre><code>    message WitnessCreateContract {\n      bytes owner_address = 1;\n      bytes url = 2;\n    }\n</code></pre> <ul> <li><code>owner_address</code>: The owner of the current account.</li> <li><code>url</code>: The website url of the witness.</li> </ul>"},{"location":"mechanism-algorithm/system-contracts/#assetissuecontract","title":"AssetIssueContract","text":"<pre><code>    message AssetIssueContract {\n      message FrozenSupply {\n        int64 frozen_amount = 1;\n        int64 frozen_days = 2;\n      }\n      bytes owner_address = 1;\n      bytes name = 2;\n      bytes abbr = 3;\n      int64 total_supply = 4;\n      repeated FrozenSupply frozen_supply = 5;\n      int32 trx_num = 6;\n      int32 num = 8;\n      int64 start_time = 9;\n      int64 end_time = 10;\n      int64 order = 11; // the order of tokens of the same name\n      int32 vote_score = 16;\n      bytes description = 20;\n      bytes url = 21;\n      int64 free_asset_net_limit = 22;\n      int64 public_free_asset_net_limit = 23;\n      int64 public_free_asset_net_usage = 24;\n      int64 public_latest_free_net_time = 25;\n    }\n</code></pre> <ul> <li><code>owner_address</code>: The owner of the current account.</li> <li><code>name</code>: The token name to issue.</li> <li><code>abbr</code>: The abbreviation of the token name.</li> <li><code>total_supply</code>: The amount of token to issue.</li> <li><code>frozen_supply</code>: The amount of token and staked days to stake.</li> <li><code>trx_num</code>: trx_num/num defines the token price.</li> <li><code>num</code>: trx_num/num defines the token price.</li> <li><code>start_time</code>: ICO starts time.</li> <li><code>end_time</code>: ICO ends time.</li> <li><code>order</code>: Deprecated.</li> <li><code>vote_score</code>: Deprecated.</li> <li><code>description</code>: The description of the token.</li> <li><code>url</code>: The website url of the token.</li> <li><code>free_asset_net_limit</code>: The free bandwidth limit each account owns when transfers asset.</li> <li><code>public_free_asset_net_limit</code>: The free bandwidth limit all the accounts can use.</li> <li><code>public_free_asset_net_usage</code>: The free bandwidth usage of all the accounts.</li> <li><code>public_latest_free_net_time</code>: The latest bandwidth consumption time of token transfer.</li> </ul>"},{"location":"mechanism-algorithm/system-contracts/#witnessupdatecontract","title":"WitnessUpdateContract","text":"<pre><code>    message WitnessUpdateContract {\n      bytes owner_address = 1;\n      bytes update_url = 12;\n    }\n</code></pre> <ul> <li><code>owner_address</code>: The owner of the current account.</li> <li><code>update_url</code>: The website url of the witness.</li> </ul>"},{"location":"mechanism-algorithm/system-contracts/#participateassetissuecontract","title":"ParticipateAssetIssueContract","text":"<pre><code>    message ParticipateAssetIssueContract {\n      bytes owner_address = 1;\n      bytes to_address = 2;\n      bytes asset_name = 3;\n      int64 amount = 4;\n    }\n</code></pre> <ul> <li><code>owner_address</code>: The owner of the current account.</li> <li><code>to_address</code>: The token owner address.</li> <li><code>account_name</code>: The token id.</li> <li><code>amount</code>: The amount of token to purchase.</li> </ul>"},{"location":"mechanism-algorithm/system-contracts/#accountupdatecontract","title":"AccountUpdateContract","text":"<pre><code>    // Update account name. Account name is unique now.\n    message AccountUpdateContract {\n      bytes account_name = 1;\n      bytes owner_address = 2;\n    }\n</code></pre> <ul> <li><code>owner_address</code>: The owner of the current account.</li> <li><code>account_name</code>: Account name.</li> </ul>"},{"location":"mechanism-algorithm/system-contracts/#deprecatedfreezebalancecontract","title":"(Deprecated)FreezeBalanceContract","text":"<pre><code>    message FreezeBalanceContract {\n      bytes owner_address = 1;\n      int64 frozen_balance = 2;\n      int64 frozen_duration = 3;\n      ResourceCode resource = 10;\n      bytes receiver_address = 15;\n    }\n</code></pre> <ul> <li><code>owner_address</code>: The owner of the current account.</li> <li><code>frozen_balance</code>: The amount of TRX to stake.</li> <li><code>frozen_duration</code>: The stake duration.</li> <li><code>resource</code>: The type of resource get by staking TRX.</li> <li><code>receiver_address</code>: The account address to receive resource.</li> </ul>"},{"location":"mechanism-algorithm/system-contracts/#unfreezebalancecontract","title":"UnfreezeBalanceContract","text":"<pre><code>    message UnfreezeBalanceContract {\n      bytes owner_address = 1;\n      ResourceCode resource = 10;\n      bytes receiver_address = 13;\n    }\n</code></pre> <ul> <li><code>owner_address</code>: The owner of the current account.</li> <li><code>resource</code>: The type of resource to unfree.</li> <li><code>receiver_address</code>: The account address to receive resource.</li> </ul>"},{"location":"mechanism-algorithm/system-contracts/#withdrawbalancecontract","title":"WithdrawBalanceContract","text":"<pre><code>    message WithdrawBalanceContract {\n      bytes owner_address = 1;\n    }\n</code></pre> <ul> <li><code>owner_address</code>: The owner of the current account.</li> </ul>"},{"location":"mechanism-algorithm/system-contracts/#unfreezeassetcontract","title":"UnfreezeAssetContract","text":"<pre><code>    message UnfreezeAssetContract {\n      bytes owner_address = 1;\n    }\n</code></pre> <ul> <li><code>owner_address</code>: The owner of the current account.</li> </ul>"},{"location":"mechanism-algorithm/system-contracts/#updateassetcontract","title":"UpdateAssetContract","text":"<pre><code>    message UpdateAssetContract {\n      bytes owner_address = 1;\n      bytes description = 2;\n      bytes url = 3;\n      int64 new_limit = 4;\n      int64 new_public_limit = 5;\n    }\n</code></pre> <ul> <li><code>owner_address</code>: The owner of the current account.</li> <li><code>description</code>: The description of the token.</li> <li><code>url</code>: The website url of the token.</li> <li><code>new_limit</code>: The bandwidth consumption limit of each account when transfers asset.</li> <li><code>new_public_limit</code>: The bandwidth consumption limit of the accounts.</li> </ul>"},{"location":"mechanism-algorithm/system-contracts/#proposalcreatecontract","title":"ProposalCreateContract","text":"<pre><code>    message ProposalCreateContract {\n      bytes owner_address = 1;\n      map&lt;int64, int64&gt; parameters = 2;\n    }\n</code></pre> <ul> <li><code>owner_address</code>: The owner of the current account.</li> <li><code>parameters</code>: The proposal.</li> </ul>"},{"location":"mechanism-algorithm/system-contracts/#proposalapprovecontract","title":"ProposalApproveContract","text":"<pre><code>    message ProposalApproveContract {\n      bytes owner_address = 1;\n      int64 proposal_id = 2;\n      bool is_add_approval = 3; // add or remove approval\n    }\n</code></pre> <ul> <li><code>owner_address</code>: The owner of the current account.</li> <li><code>proposal_id</code>: The proposal id.</li> <li><code>is_add_approval</code>: Whether to approve.</li> </ul>"},{"location":"mechanism-algorithm/system-contracts/#proposaldeletecontract","title":"ProposalDeleteContract","text":"<pre><code>    message ProposalDeleteContract {\n      bytes owner_address = 1;\n      int64 proposal_id = 2;\n    }\n</code></pre> <ul> <li><code>owner_address</code>: The owner of the current account.</li> <li><code>proposal_id</code>: The proposal id.</li> </ul>"},{"location":"mechanism-algorithm/system-contracts/#setaccountidcontract","title":"SetAccountIdContract","text":"<pre><code>    // Set account id if the account has no id. Account id is unique and case insensitive.\n    message SetAccountIdContract {\n      bytes account_id = 1;\n      bytes owner_address = 2;\n    }\n</code></pre> <ul> <li><code>owner_address</code>: The owner of the current account.</li> <li><code>account_id</code>: The account id.</li> </ul>"},{"location":"mechanism-algorithm/system-contracts/#createsmartcontract","title":"CreateSmartContract","text":"<pre><code>    message CreateSmartContract {\n      bytes owner_address = 1;\n      SmartContract new_contract = 2;\n      int64 call_token_value = 5;\n      int64 token_id = 6;\n    }\n</code></pre> <ul> <li><code>owner_address</code>: The owner of the current account.</li> <li><code>new_contract</code>: the smart contract.</li> <li><code>call_token_value</code> : The amount of TRC-10 token to send to the contract when triggers.</li> <li><code>token_id</code> : The id of the TRC-10 token to be sent to the contract.</li> </ul>"},{"location":"mechanism-algorithm/system-contracts/#triggersmartcontract","title":"TriggerSmartContract","text":"<pre><code>    message TriggerSmartContract {\n      bytes owner_address = 1;\n      bytes contract_address = 2;\n      int64 call_value = 3;\n      bytes data = 4;\n      int64 call_token_value = 5;\n      int64 token_id = 6;\n    }\n</code></pre> <ul> <li><code>owner_address</code>: The owner of the current account.</li> <li><code>contract_address</code>: The contract address.</li> <li><code>call_value</code>: The amount of TRX to send to the contract when triggers.</li> <li><code>data</code>: The parameters to trigger the contract.</li> <li><code>call_token_value</code> : The amount of TRC-10 token to send to the contract when triggers.</li> <li><code>token_id</code> : The id of the TRC-10 token to be sent to the contract.</li> </ul>"},{"location":"mechanism-algorithm/system-contracts/#updatesettingcontract","title":"UpdateSettingContract","text":"<pre><code>    message UpdateSettingContract {\n      bytes owner_address = 1;\n      bytes contract_address = 2;\n      int64 consume_user_resource_percent = 3;\n    }\n</code></pre> <ul> <li><code>owner_address</code>: The owner of the current account.</li> <li><code>contract_address</code>: The address of the smart contract.</li> <li><code>consume_user_resource_percent</code>: The percentage of resource consumption ratio.</li> </ul>"},{"location":"mechanism-algorithm/system-contracts/#exchangecreatecontract","title":"ExchangeCreateContract","text":"<pre><code>    message ExchangeCreateContract {\n      bytes owner_address = 1;\n      bytes first_token_id = 2;\n      int64 first_token_balance = 3;\n      bytes second_token_id = 4;\n      int64 second_token_balance = 5;\n    }\n</code></pre> <ul> <li><code>owner_address</code>: The owner of the current account.</li> <li><code>first_token_id</code>: First token id.</li> <li><code>first_token_balance</code>: First token balance.</li> <li><code>second_token_id</code>: Second token id.</li> <li><code>second_token_balance</code>: Second token balance.</li> </ul>"},{"location":"mechanism-algorithm/system-contracts/#exchangeinjectcontract","title":"ExchangeInjectContract","text":"<pre><code>    message ExchangeInjectContract {\n      bytes owner_address = 1;\n      int64 exchange_id = 2;\n      bytes token_id = 3;\n      int64 quant = 4;\n    }\n</code></pre> <ul> <li><code>owner_address</code>: The owner of the current account.</li> <li><code>exchange_id</code>: The token pair id.</li> <li><code>token_id</code>: The token id to inject.</li> <li><code>quant</code>: The token amount to inject.</li> </ul>"},{"location":"mechanism-algorithm/system-contracts/#exchangewithdrawcontract","title":"ExchangeWithdrawContract","text":"<pre><code>    message ExchangeWithdrawContract {\n      bytes owner_address = 1;\n      int64 exchange_id = 2;\n      bytes token_id = 3;\n      int64 quant = 4;\n    }\n</code></pre> <ul> <li><code>owner_address</code>: The owner of the current account.</li> <li><code>exchange_id</code>: The token pair id.</li> <li><code>token_id</code>: The token id to withdraw.</li> <li><code>quant</code>: The token amount to withdraw.</li> </ul>"},{"location":"mechanism-algorithm/system-contracts/#exchangetransactioncontract","title":"ExchangeTransactionContract","text":"<pre><code>    message ExchangeTransactionContract {\n      bytes owner_address = 1;\n      int64 exchange_id = 2;\n      bytes token_id = 3;\n      int64 quant = 4;\n      int64 expected = 5;\n    }\n</code></pre> <ul> <li><code>owner_address</code>: The owner of the current account.</li> <li><code>exchange_id</code>: The token pair id.</li> <li><code>token_id</code>: The token id to sell.</li> <li><code>quant</code>: The token amount to sell.</li> <li><code>expected</code>: The expected token amount to buy, if the calculated actual token amount that can be bought is less than this value, the transaction will fail.</li> </ul>"},{"location":"mechanism-algorithm/system-contracts/#shieldedtransfercontract","title":"ShieldedTransferContract","text":"<pre><code>    message ShieldedTransferContract {\n      bytes transparent_from_address = 1;\n      int64 from_amount = 2;\n      repeated SpendDescription spend_description = 3;\n      repeated ReceiveDescription receive_description = 4;\n      bytes binding_signature = 5;\n      bytes transparent_to_address = 6;\n      int64 to_amount = 7;\n    }\n</code></pre> <ul> <li><code>transparent_from_address</code>: The transparent address of the sender.</li> <li><code>from_amount</code>: The amount to send.</li> <li><code>spend_description</code>: Shielded spend information.</li> <li><code>receive_description</code>: Shielded receive information.</li> <li><code>binding_signature</code>: The binding signature.</li> <li><code>transparent_to_address</code>: The transparent address of the receiver.</li> <li><code>to_amount</code>: The amount to receive.</li> </ul> <pre><code>message SpendDescription {\n  bytes value_commitment = 1;\n  bytes anchor = 2;\n  bytes nullifier = 3;\n  bytes rk = 4;\n  bytes zkproof = 5;\n  bytes spend_authority_signature = 6;\n}\n</code></pre> <ul> <li><code>value_commitment</code>: value commitment of spender's transfer amount.</li> <li><code>anchor</code>: root of the note commitment Merkle tree at some block.</li> <li><code>nullifier</code>: nullifier of spender's note, to prevent double-spent.</li> <li><code>rk</code>: public key, to verify spender's Spend Authorization Signature.</li> <li><code>zkproof</code>: zero-knowledge proof of spender's note, prove that this note exists and could be spent.</li> <li><code>spend_authority_signature</code>: the spender's Spend Authorization Signature.</li> </ul> <pre><code>message ReceiveDescription {\n  bytes value_commitment = 1;\n  bytes note_commitment = 2;\n  bytes epk = 3;\n  bytes c_enc = 4;\n  bytes c_out = 5;\n  bytes zkproof = 6;\n}\n</code></pre> <ul> <li><code>value_commitment</code>: value commitment of receiver's transfer amount.</li> <li><code>note_commitment</code>: commitment of the receiver's not.</li> <li><code>epk</code>: ephemeral public key, in order to generate note's decryption key.</li> <li><code>c_enc</code>: part of note ciphertext, encryption of diversifier, receiver's transfer amount, rcm, and memo.</li> <li><code>c_out</code>: part of note ciphertext, encryption of the receiver's public key and ephemeral private key.</li> <li><code>zkproof</code>: zero-knowledge proof of the receiver's note.</li> </ul>"},{"location":"mechanism-algorithm/system-contracts/#account-permission-management","title":"Account Permission Management","text":"<p>Account Permission Management</p>"},{"location":"mechanism-algorithm/system-contracts/#clearabicontract","title":"ClearABIContract","text":"<pre><code>    message ClearABIContract {\n      bytes owner_address = 1;\n      bytes contract_address = 2;\n    }\n</code></pre> <ul> <li><code>owner_address</code>: The owner of the current account.</li> <li><code>account_address</code>: The target contract address to clear ABI.</li> </ul>"},{"location":"mechanism-algorithm/system-contracts/#updatebrokeragecontract","title":"UpdateBrokerageContract","text":"<pre><code>    message UpdateBrokerageContract {\n      bytes owner_address = 1;\n      int32 brokerage = 2;\n    }\n</code></pre> <ul> <li><code>owner_address</code>: The owner of the current account.</li> <li><code>brokerage</code>: Commission rate, from 0 to 100,1 mean 1%.</li> </ul>"},{"location":"mechanism-algorithm/system-contracts/#updateenergylimitcontract","title":"UpdateEnergyLimitContract","text":"<pre><code>    message UpdateEnergyLimitContract {\n      bytes owner_address = 1;\n      bytes contract_address = 2;\n      int64 origin_energy_limit = 3;\n    }\n</code></pre> <ul> <li><code>owner_address</code>: The owner of the current account.</li> <li><code>contract_address</code>: The contract address.</li> <li><code>origin_energy_limit</code>: The target energy limit to change.</li> </ul>"},{"location":"mechanism-algorithm/system-contracts/#freezebalancev2contract","title":"FreezeBalanceV2Contract","text":"<pre><code>     message FreezeBalanceV2Contract {\n      bytes owner_address = 1;\n      int64 frozen_balance = 2;\n      ResourceCode resource = 3;\n      }\n</code></pre> <ul> <li><code>owner_address</code>\uff1aOwner address</li> <li><code>frozen_balance</code>\uff1aTRX stake amount, the unit is sun</li> <li><code>resource</code>\uff1a Resource type</li> </ul>"},{"location":"mechanism-algorithm/system-contracts/#unfreezebalancev2contract","title":"UnfreezeBalanceV2Contract","text":"<pre><code>      message UnfreezeBalanceV2Contract {\n       bytes owner_address = 1;\n       int64 unfreeze_balance = 2;\n       ResourceCode resource = 3;\n      }\n</code></pre> <ul> <li><code>owner_address</code>\uff1aOwner address</li> <li><code>unfreeze_balance</code>\uff1aThe amount of TRX to unstake, in sun</li> <li><code>resource</code>\uff1a Resource type</li> </ul>"},{"location":"mechanism-algorithm/system-contracts/#withdrawexpireunfreezecontract","title":"WithdrawExpireUnfreezeContract","text":"<pre><code>      message WithdrawExpireUnfreezeContract {\n        bytes owner_address = 1;\n      }\n</code></pre> <ul> <li><code>owner_address</code>\uff1aOwner address</li> </ul>"},{"location":"mechanism-algorithm/system-contracts/#delegateresourcecontract","title":"DelegateResourceContract","text":"<pre><code>      message DelegateResourceContract {\n      bytes owner_address = 1;\n      ResourceCode resource = 2;\n      int64 balance = 3;\n      bytes receiver_address = 4;\n      bool  lock = 5;\n      }\n</code></pre> <ul> <li><code>owner_address</code>\uff1aOwner address</li> <li><code>resource</code>\uff1a Resource type</li> <li><code>balance</code>\uff1a Amount of TRX staked for resources to be delegated, unit is sun</li> <li><code>receiver_address</code>\uff1aResource receiver address</li> <li><code>lock</code>\uff1aWhether it is locked, if it is set to true, the delegated resources cannot be undelegated within 3 days. When the lock time is not over, if the owner delegates the same type of resources using the lock to the same address, the lock time will be reset to 3 days</li> </ul>"},{"location":"mechanism-algorithm/system-contracts/#undelegateresourcecontract","title":"UnDelegateResourceContract","text":"<pre><code>      message UnDelegateResourceContract {\n      bytes owner_address = 1;\n      ResourceCode resource = 2;\n      int64 balance = 3;\n      bytes receiver_address = 4;\n      }\n</code></pre> <ul> <li><code>owner_address</code>\uff1aOwner address</li> <li><code>resource</code>\uff1a Resource type</li> <li><code>balance</code>\uff1aundelegated TRX, unit is sun</li> <li><code>receiver_address</code>\uff1aResource receiver address</li> </ul>"},{"location":"releases/history/","title":"History","text":"Code Name Version Released Incl TIPs Release Note Specs Kant GreatVoyage-v4.8.0 2025-04-29 TIP-650 TIP-651 TIP-694 TIP-697 TIP-745 Release Note Specs Epicurus GreatVoyage-v4.7.7 2024-11-29 TIP-697 Release Note Specs Anaximander GreatVoyage-v4.7.6 2024-10-04 N/A Release Note Specs Cleobulus GreatVoyage-v4.7.5 2024-5-30 TIP-653 Release Note Specs Bias GreatVoyage-v4.7.4 2024-3-15 TIP-635 TIP-621 Release Note Specs Solon GreatVoyage-v4.7.3.1 2024-1-12 N/A Release Note Specs Chilon GreatVoyage-v4.7.3 2023-10-25 TIP-586 TIP-592 Release Note Specs Periander GreatVoyage-v4.7.2 2023-7-1 TIP-541 TIP-542 TIP-543 TIP-544 TIP-555 TIP-547 TIP-548 TIP-549 TIP-550 Release Note Specs Pittacus GreatVoyage-v4.7.1.1 2023-4-17 TIP-534 Release Note Specs Sartre GreatVoyage-v4.7.1 2023-2-27 N/A Release Note Specs Aristotle GreatVoyage-v4.7.0.1 2023-1-20 TIP-467 TIP-474 TIP-491 Release Note Specs Socrates GreatVoyage-v4.6.0 2022-11-21 TIP-387 TIP-461 TIP-465 TIP-476 Release Note Specs Aurelius GreatVoyage-v4.5.2 2022-8-18 TIP-425 TIP-428 TIP-440 Release Note Specs Tertullian GreatVoyage-v4.5.1 2022-1-19 TIP-391 TIP-388 TIP-383 TIP-382 TIP-370 TIP-369 TIP-397 Release Note Specs David GreatVoyage-v4.4.6 2022-5-25 N/A Release Note Specs Cicero GreatVoyage-4.4.5 2022-4-27 N/A Release Note Specs Plotinus GreatVoyage-4.4.4 2022-2-22 TIP-362 TIP-366 Release Note Specs Pythagoras GreatVoyage-4.4.3 2021-12-17 N/A Release Note N/A Augustinus GreatVoyage-4.4.2 2021-12-16 TIP-343 TIP-344 Release Note Specs Protagoras GreatVoyage-4.4.1 2021-10-19 N/A Release Note N/A Rousseau GreatVoyage-4.4.0 2021-10-15 TIP-289 TIP-290 TIP-272 TIP-318 Release Note Specs Bacon GreatVoyage-4.3.0 2021-8-3 TIP-292 TIP-293 TIP-295 TIP-271 TIP-306 Release Note Specs Epictetus GreatVoyage-4.2.2.1 2021-6-25 N/A Release Note Specs Lucretius GreatVoyage-4.2.2 2021-6-22 TIP-268 TIP-269 TIP-281 Release Note Specs Origen GreatVoyage-4.2.1 2021-5-22 N/A Release Note N/A Plato GreatVoyage-4.2.0 2021-4-27 TIP-157 TIP-207 Release Note Specs Thales GreatVoyage-4.1.3 2021-3-18 TIP-238 Release Note Specs N/A GreatVoyage-4.1.2 2021-1-20 TIP-196 TIP-204 TIP-209 Release Note Specs N/A GreatVoyage-4.1.1 2020-11-9 N/A Release Note Specs N/A GreatVoyage-v4.1.0 2020-11-2 TIP-127 TIP-128 TIP-174 TIP-175 TIP-176 Release Note N/A N/A GreatVoyage-v4.0.2 2020-11-2 N/A Release Note N/A N/A GreatVoyage-v4.0.1 2020-3-17 N/A Release Note N/A N/A GreatVoyage-4.0.0 2020-7-7 TIP-135 TIP-137 TIP-138 Release Note Specs N/A Odyssey-v3.7 2020-3-17 N/A Release Note Specs N/A Odyssey-v3.6.5 2019-10-8 TIP-37 TIP-43 TIP-44 TIP-53 TIP-54 TIP-60 Release Note Specs N/A Odyssey-v3.6.2 2019-8-8 N/A Release Note N/A N/A Odyssey-v3.6.1 2019-7-10 TIP-41 Release Note N/A N/A Odyssey-v3.6.0 2019-6-20 TIP-26 TIP-28 TIP-29 TIP-30 TIP-31 TIP-32 Release Note N/A N/A Odyssey-v3.5.1 2019-4-10 N/A Release Note N/A N/A Odyssey-v3.5.0.1 2019-3-1 N/A Release Note N/A N/A Odyssey-v3.5 2019-3-1 N/A Release Note N/A N/A Odyssey-v3.2.5 2019-1-25 N/A Release Note N/A N/A Odyssey-v3.2.4 2019-1-14 N/A Release Note N/A N/A Odyssey-v3.2.3 2018-12-24 N/A Release Note N/A N/A Odyssey-v3.2.2 2018-12-17 N/A Release Note N/A N/A Odyssey-v3.2.1.2 2018-12-7 N/A Release Note N/A N/A Odyssey-v3.2.1 2018-11-30 N/A Release Note N/A N/A Odyssey-v3.2 2018-11-30 N/A Release Note N/A N/A Odyssey-v3.1.3 2018-10-19 N/A Release Note N/A N/A Odyssey-v3.1.2 2018-10-12 N/A Release Note N/A N/A Odyssey-v3.1.1 2018-9-17 N/A Release Note N/A N/A Odyssey-v3.1.0 2018-9-10 N/A Release Note N/A N/A Odyssey-v3.0.1 2018-9-6 N/A Release Note N/A N/A Odyssey-v3.0 2018-8-30 N/A Release Note N/A N/A Odyssey-v2.0.8.1 2018-8-20 N/A Release Note N/A N/A Odyssey-v2.0.8 2018-8-14 N/A Release Note N/A N/A Odyssey-v2.0.7 2018-8-9 N/A Release Note N/A N/A Odyssey-v2.0.6 2018-7-11 N/A Release Note N/A N/A Odyssey-v2.0.5 2018-6-24 N/A Release Note N/A N/A Odyssey-v2.0.4.1 2018-6-24 N/A Release Note N/A N/A Odyssey-v2.0.4 2018-6-22 N/A Release Note N/A N/A Odyssey-v2.0.3 2018-6-20 N/A Release Note N/A N/A Odyssey-v2.0.2 2018-6-19 N/A Release Note N/A N/A Odyssey-v2.0.1 2018-6-6 N/A Release Note N/A N/A Odyssey-v2.0 2018-5-31 N/A Release Note N/A N/A Odyssey-v1.1.2 2018-5-31 N/A Release Note N/A N/A Odyssey-v1.1.1 2018-5-28 N/A Release Note N/A N/A Odyssey-v1.1 2018-5-18 N/A Release Note N/A N/A Odyssey-v1.0.6.3 2018-5-10 N/A Release Note N/A N/A Odyssey-v1.0.6.1 2018-5-7 N/A Release Note N/A N/A Odyssey-v1.0.6 2018-5-7 N/A Release Note N/A N/A Odyssey-v1.0.5 2018-4-20 N/A Release Note N/A N/A Odyssey-v1.0.4 2018-4-13 N/A Release Note N/A N/A Odyssey-v1.0.3 2018-4-5 N/A Release Note N/A N/A Exodus-v1.0 2017-12-28 N/A Release Note N/A"},{"location":"releases/history/#greatvoyage-480kant","title":"GreatVoyage-4.8.0(Kant)","text":"<p>The Kant release introduces several important optimizations and updates, including support for the Ethereum Cancun upgrade and enhanced validation in the consensus layer. Detailed information is provided below.</p>"},{"location":"releases/history/#ethereum-cancun-upgrade-support","title":"Ethereum Cancun Upgrade Support","text":""},{"location":"releases/history/#1-tip-650-implement-eip-1153-transient-storage-instructions","title":"1. TIP-650: Implement EIP-1153 Transient Storage Instructions","text":"<p>The TRON Virtual Machine (TVM) will support the <code>TLOAD</code> and <code>TSTORE</code> opcodes, aligning with the Ethereum Cancun upgrade.</p> ID TVM Instruction Description 0x5c TLOAD Read operation for transient storage 0x5d TSTORE Write operation for transient storage <p>Transient storage is a temporary storage mechanism between persistent storage (storage) and memory. It offers a more gas-efficient storage solution that persists for the duration of a transaction. Data in transient storage is automatically cleared upon transaction completion. </p> <p>Note: This feature is governed by TRON network parameter #83. It is disabled by default (value: 0) post-Kant deployment and can be enabled through a governance proposal vote. Once enabled, it cannot be disabled. </p> <ul> <li>TIP: https://github.com/tronprotocol/tips/blob/master/tip-650.md </li> <li>Source Code:  https://github.com/tronprotocol/java-tron/pull/6185 https://github.com/tronprotocol/java-tron/pull/6195 https://github.com/tronprotocol/java-tron/pull/6214 </li> </ul>"},{"location":"releases/history/#2-tip-651-implement-eip-5656-mcopy-memory-copying-instruction","title":"2. TIP-651: Implement EIP-5656 MCOPY - Memory Copying Instruction","text":"<p>TVM will support the <code>MCOPY</code> instruction, aligning with the Ethereum Cancun upgrade.</p> ID TVM Instruction Description 0x5e MCOPY Memory copy operation <p>Memory copying is an operation that copies data from its original location to a target location in memory. It aims to reduce resource costs for memory area copying, thereby improving copying efficiency.</p> <p>Note: This feature is governed by TRON network parameter #83. It is disabled by default (value: 0) post-Kant deployment and can be enabled through a governance proposal vote. Once enabled, it cannot be disabled. </p> <ul> <li>TIP: https://github.com/tronprotocol/tips/blob/master/tip-651.md </li> <li>Source Code:  https://github.com/tronprotocol/java-tron/pull/6185 https://github.com/tronprotocol/java-tron/pull/6194 </li> </ul>"},{"location":"releases/history/#3-tip-745-introduce-eip-4844-instruction-and-eip-7516-instruction","title":"3. TIP-745: Introduce EIP-4844 Instruction and EIP-7516 Instruction","text":"<p>TVM will support the Ethereum Cancun upgrade's <code>BLOBHASH</code> and <code>BLOBBASEFEE</code> instructions:</p> ID TVM Instruction Description 0x49 BLBOHASH Retrieves the Blob hash value for a specified index in the current transaction; currently returns 0 by default 0x4a BLOBBASEFEE Retrieves the Blob transaction base fee for the current block; currently returns 0 by default <p>The <code>BLOBHASH</code> and <code>BLOBBASEFEE</code> instructions are associated with Ethereum Blob transactions. Currently, <code>BLOBHASH</code> and <code>BLOBBASEFEE</code> are implemented as stubs, both returning 0. The precompile contracts verifying KZG proof are not implemented in Kant since blob transaction is not supported.</p> <p>Note: This feature is governed by TRON network parameter #89. It is disabled by default (value: 0) post-Kant deployment and can be enabled through a governance proposal vote. Once enabled, it cannot be disabled.</p> <ul> <li>TIP: https://github.com/tronprotocol/tips/blob/master/tip-745.md </li> <li>Source Code:  https://github.com/tronprotocol/java-tron/pull/6232 https://github.com/tronprotocol/java-tron/pull/6247 https://github.com/tronprotocol/java-tron/pull/6270 https://github.com/tronprotocol/java-tron/pull/6283 </li> </ul>"},{"location":"releases/history/#core","title":"Core","text":""},{"location":"releases/history/#1-enhanced-consensus-layer-verification","title":"1. Enhanced Consensus Layer Verification","text":""},{"location":"releases/history/#11-tip-694-enhance-verification-of-transaction-limitations-at-consensus-layer","title":"1.1 TIP-694: Enhance Verification of Transaction Limitations at Consensus Layer","text":"<p>Prior to Kant, transaction validation was optimized at various points, but only focused on the transaction broadcast phase. The Kant version enhances transaction validation at the consensus layer, further improving transaction processing consistency and validity.</p> <ul> <li>Strengthened Account Creation Transaction Size Check: Verifies that the transaction size, excluding its results and signatures, does not exceed the maximum byte limit allowed for account creation transactions (parameter #82).</li> <li>Enhanced Transaction Size Validation: Verifies whether the transaction body content exceeds the size limit.</li> <li>Transaction Result List Constraint: Ensures consistency with the contract count (currently limited to 1).</li> <li>Transaction Expiration Time Check: Verifies that the transaction expiration time is later than the next block's slot time.</li> </ul> <p>Note: This enhancement is governed by TRON network parameter #88. It is disabled by default post-Kant deployment and can be enabled through a governance proposal vote.</p> <ul> <li>TIP: https://github.com/tronprotocol/tips/blob/master/tip-694.md </li> <li>Source Code:  https://github.com/tronprotocol/java-tron/pull/6172 https://github.com/tronprotocol/java-tron/pull/6221 </li> </ul>"},{"location":"releases/history/#12-enhanced-validation-of-block-production-during-maintenance-periods","title":"1.2 Enhanced Validation of Block Production during Maintenance Periods","text":"<p>Maintenance periods are designated for Super Representative (SR) elections and proposal processing. Therefore, SRs must not produce blocks during these periods. However, in prior versions, blocks produced by SRs during maintenance periods could potentially pass validation. The Kant version modifies block production and validation logic to prevent SRs from producing blocks during maintenance periods. Any block produced during this time will fail validation.  </p> <p>Note: This enhancement is governed by TRON network parameter #88. It is disabled by default post-Kant deployment and can be enabled through a governance proposal vote.</p> <ul> <li>Source Code:  https://github.com/tronprotocol/java-tron/pull/6187</li> </ul>"},{"location":"releases/history/#13-enhanced-block-header-validation","title":"1.3 Enhanced Block Header Validation","text":"<p>Block time, recorded in the block header, represents the time a block is produced. Given that the TRON network's block slot time is 3 seconds, the block time must be a strict multiple of 3 seconds.</p> <p>Note: This enhancement is governed by TRON network parameter #88. It is disabled by default post-Kant deployment and can be enabled through a governance proposal vote.</p> <ul> <li>Source Code:  https://github.com/tronprotocol/java-tron/pull/6186 </li> </ul>"},{"location":"releases/history/#14-optimized-super-representative-election-ranking-algorithm","title":"1.4 Optimized Super Representative Election Ranking Algorithm","text":"<p>In versions prior to Kant, when multiple SRs had identical vote counts, the system determined the ranking order based on the hash of the SR's address. However, due to the risk of hash collisions and the potential for impacting ranking performance in extreme cases, the Kant version optimizes the SR ranking rules by implementing a more intuitive and stable lexicographical ordering of addresses (i.e., ranking by address alphanumerically). This approach eliminates hash collision-related performance issues and provides a more transparent and predictable ranking mechanism.</p> <ul> <li>Source Code:  https://github.com/tronprotocol/java-tron/pull/6173 </li> </ul>"},{"location":"releases/history/#tvm","title":"TVM","text":""},{"location":"releases/history/#1-tip-652-announce-eip-6049-deprecate-selfdestruct","title":"1. TIP-652: Announce EIP-6049 Deprecate SELFDESTRUCT","text":"<p>Note: Although TIP-652 itself does not modify the behavior of the <code>SELFDESTRUCT</code> opcode, it has been officially announced that client developers will change its behavior in a future upgrade. Therefore, any applications that expose the <code>SELFDESTRUCT</code> opcode to users must clearly warn them that a semantic change to <code>SELFDESTRUCT</code> is imminent.</p> <p>TIP: https://github.com/tronprotocol/tips/blob/master/tip-652.md </p>"},{"location":"releases/history/#net","title":"Net","text":""},{"location":"releases/history/#1-optimized-block-synchronization-logic","title":"1. Optimized Block Synchronization Logic","text":"<p>Kant introduces two key optimizations to the block synchronization logic, significantly improving synchronization efficiency:</p>"},{"location":"releases/history/#11-optimized-p2p-protocol-discarding-solidified-block-lists-to-conserve-network-bandwidth","title":"1.1 Optimized P2P Protocol: Discarding Solidified Block Lists to Conserve Network Bandwidth","text":"<p>Kant optimizes the synchronization request mechanism by eliminating requests for solidified block data from remote nodes. This prevents redundant requests for existing data, reduces resource waste, and improves synchronization efficiency.</p> <ul> <li>Source Code:  https://github.com/tronprotocol/java-tron/pull/6184 </li> </ul>"},{"location":"releases/history/#12-faster-block-synchronization-task-scheduling-for-enhanced-efficiency","title":"1.2 Faster Block Synchronization Task Scheduling for Enhanced Efficiency","text":"<p>Kant adjusts the scheduling frequency of block synchronization tasks from once per second to once per 100 milliseconds. This accelerates block processing, further improving block synchronization efficiency.</p> <ul> <li>Source Code:  https://github.com/tronprotocol/java-tron/pull/6183 </li> </ul>"},{"location":"releases/history/#2-enhanced-transaction-validity-verification-by-early-discarding-zero-contract-transactions","title":"2. Enhanced Transaction Validity Verification by Early Discarding Zero-Contract Transactions","text":"<p>Kant strengthens transaction validity verification. Upon receiving a transaction message, the node will discard transactions with zero contracts and disconnect from the sender.</p> <ul> <li>Source Code:  https://github.com/tronprotocol/java-tron/pull/6181 </li> </ul>"},{"location":"releases/history/#other-changes","title":"Other Changes","text":""},{"location":"releases/history/#1-enhanced-event-service-framework-v20-provision","title":"1. Enhanced Event Service Framework (V2.0) Provision","text":"<p>The previous event service framework (V1.0) lacked support for processing events in historical blocks and intertwined event processing with block processing logic. Consequently, event service exceptions could lead to block processing failures, disrupting block broadcast and synchronization.</p> <p>Kant introduces a new event service framework (V2.0) that segregates event services from block processing at the thread level. This prevents node disruptions caused by event service exceptions. V2.0 also supports event processing that begins from local historical blocks. Users can specify the starting block height for event synchronization using the event.subscribe.startSyncBlockNum configuration parameter. This feature is disabled if the parameter value is \u2264 0, and enabled otherwise.</p> <p>Note: Double-check the startSyncBlockNum configuration when restarting the node, since the node will synchronize historical events from the specified block height upon startup. The original event service framework is retained to facilitate a gradual migration to the new framework. Post-Kant deployment, the V1.0 version remains the default. To utilize the V2.0 version, modify the following configuration parameter: <pre><code>event.subscribe.version = 1  // 1 means v2.0 , 0 means v1.0\n</code></pre> * Source Code: https://github.com/tronprotocol/java-tron/pull/6256 https://github.com/tronprotocol/java-tron/pull/6245 https://github.com/tronprotocol/java-tron/pull/6234 https://github.com/tronprotocol/java-tron/pull/6227 https://github.com/tronprotocol/java-tron/pull/6223 https://github.com/tronprotocol/java-tron/pull/6206 https://github.com/tronprotocol/java-tron/pull/6192 </p>"},{"location":"releases/history/#2-cross-platform-consistent-javalangstrictmath-replacement-for-javalangmath","title":"2. Cross-Platform Consistent <code>java.lang.StrictMath</code> Replacement for <code>java.lang.Math</code>","text":"<p>The mathematical operation library is migrated from <code>java.lang.Math</code> to <code>java.lang.StrictMath</code>, to further enhance Java-tron's cross-platform compatibility and establish a robust foundation for future support of diverse hardware architectures (including ARM). This ensures consistent computational results across different platforms.</p> <ul> <li>TIP: https://github.com/tronprotocol/tips/blob/master/tip-697.md</li> <li>Source Code: https://github.com/tronprotocol/java-tron/pull/6182 https://github.com/tronprotocol/java-tron/pull/6210 </li> </ul>"},{"location":"releases/history/#3-optimized-node-exit-and-startup-logic","title":"3. Optimized Node Exit and Startup Logic","text":""},{"location":"releases/history/#31-optimized-node-exit-logic","title":"3.1 Optimized Node Exit Logic","text":"<p>Kant standardizes the code logic for process termination while preserving original functionalities, enhancing code consistency and system stability.</p> <ul> <li>Source Code: https://github.com/tronprotocol/java-tron/pull/6170 https://github.com/tronprotocol/java-tron/pull/6177 https://github.com/tronprotocol/java-tron/pull/6205 </li> </ul>"},{"location":"releases/history/#32-optimized-node-startup-logic","title":"3.2 Optimized Node Startup Logic","text":"<p>Kant introduces enhanced service integrity checks for the node startup process. To ensure operational stability, the node will immediately terminate if any core service (including API, P2P, Prometheus, and event plugins) fails to initialize. This prevents operation with incomplete critical services.</p> <p>Additionally, the Kant version extends the API service with the following four configurable options (all enabled by default), providing node deployers the choice to selectively disable or enable these API service features: <pre><code>node.rpc.enable = true\nnode.rpc.solidityEnable = true\nnode.rpc.PBFTEnable = true\nnode.http.PBFTEnable = true\n</code></pre> * Source Code:  https://github.com/tronprotocol/java-tron/pull/5857 https://github.com/tronprotocol/java-tron/pull/6228 https://github.com/tronprotocol/java-tron/pull/6233</p>"},{"location":"releases/history/#4-dependency-library-security-upgrade","title":"4. Dependency Library Security Upgrade","text":"<p>To enhance system security, Kant has updated several underlying dependency libraries and removed obsolete components. This includes updating the jcommander, pf4j, grpc, logback, and libp2p dependency libraries to secure and stable releases, and removing the deprecated library quartz for task scheduling.</p> <ul> <li>Source Code: https://github.com/tronprotocol/java-tron/pull/6180 https://github.com/tronprotocol/java-tron/pull/6207 https://github.com/tronprotocol/java-tron/pull/6257 </li> </ul>"},{"location":"releases/history/#5-gradle-764-upgrade-with-dependency-integrity-verification","title":"5. Gradle 7.6.4 Upgrade with Dependency Integrity Verification","text":"<p>Kant upgrades Gradle to version 7.6.4 and enables security verification of third-party dependency JAR packages. During JAR file packaging and generation, the system automatically validates all referenced external dependencies to ensure they originate from trusted sources and are free from tampering. This prevents the inclusion of potentially vulnerable JAR packages in the final product. This enhancement effectively mitigates supply chain attacks and bolsters the overall build security of the project.</p> <ul> <li>Source Code:  https://github.com/tronprotocol/java-tron/pull/5869 https://github.com/tronprotocol/java-tron/pull/5903 https://github.com/tronprotocol/java-tron/pull/6229 </li> </ul>"},{"location":"releases/history/#6-null-pointer-exception-fix-during-startup","title":"6. Null Pointer Exception Fix During Startup","text":"<p>Kant resolves an intermittent null pointer exception that could occur during node startup. This ensures the consensus service initializes before the network service, preventing startup failures.</p> <ul> <li>Source Code:  https://github.com/tronprotocol/java-tron/pull/6216</li> </ul>"},{"location":"releases/history/#7-internal-transaction-details-logging-for-cancelallunfreezev2-opcode","title":"7. Internal Transaction Details Logging for <code>CANCELALLUNFREEZEV2</code> Opcode","text":"<p>Nodes configured to save internal transactions, beginning with the Kant version, will log the unstaking amounts of various resources when processing transactions that include the <code>CANCELALLUNFREEZEV2</code> opcode. For example: {\"BANDWIDTH\":100,\"ENERGY\":100,\"TRON_POWER\":0}.</p> <ul> <li>Source Code:  https://github.com/tronprotocol/java-tron/pull/6191</li> </ul>"},{"location":"releases/history/#api","title":"API","text":""},{"location":"releases/history/#1-enhanced-compatibility-for-ethereum-json-rpc-interface","title":"1. Enhanced Compatibility for Ethereum JSON-RPC Interface","text":""},{"location":"releases/history/#11-support-for-querying-solidified-data-via-finalized-block-parameter-in-json-rpc-api","title":"1.1 Support for Querying Solidified Data via finalized Block Parameter in JSON-RPC API","text":"<p>Kant's JSON-RPC interface now supports the \"finalized\" parameter. This allows certain interfaces that use a block number as a parameter to accept \"finalized\u201d for querying the latest solidified block information, further improving compatibility with the Ethereum JSON-RPC interface.</p> <p>Interfaces supporting \"finalized\" as a parameter:</p> <ul> <li>eth_getBlockTransactionCountByNumber</li> <li>eth_getBlockByNumber</li> <li>eth_getTransactionByBlockNumberAndIndex</li> <li>eth_getLogs</li> </ul> <p>Interfaces not supporting \"finalized\" as a parameter:</p> <ul> <li>eth_getBalance</li> <li>eth_getCode</li> <li>eth_getStorageAt</li> <li>eth_call</li> <li> <p>eth_newFilter</p> </li> <li> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/6007 https://github.com/tronprotocol/java-tron/pull/6238 https://github.com/tronprotocol/java-tron/pull/6239</p> </li> </ul>"},{"location":"releases/history/#12-new-limits-on-block-range-and-topics-quantity-for-json-rpc-log-queries","title":"1.2 New Limits on Block Range and \u201cTopics\u201d Quantity for JSON-RPC Log Queries","text":"<p>Kant introduces a query limit mechanism for JSON-RPC event query interfaces, controlled by the following two configuration parameters:</p> <ul> <li><code>maxBlockRange</code>: Specifies the maximum block range allowed for log queries. The default value is 5000. The range between the starting block and the ending block cannot exceed this value when related interfaces are called.</li> <li><code>maxSubTopics</code>: Limits the maximum number of \u201csub topics\u201d that can be set. The default value is 1000, meaning that a maximum of 1000 \u201csub topics\u201d can be set during interface calls.</li> </ul> <p>Note: The values of the above configuration parameters must be positive integers greater than 0. If a configured value is less than or equal to 0, the corresponding limit is considered disabled, and the relevant interfaces will not perform this validation. <pre><code>node.jsonrpc.maxBlockRange = 5000\nnode.jsonrpc.maxSubTopics = 1000\n</code></pre></p> <p>Interfaces supporting <code>maxBlockRange</code>:</p> <ul> <li>eth_getLogs</li> </ul> <p>Interfaces supporting <code>maxSubTopics</code>:</p> <ul> <li>eth_getLogs</li> <li> <p>eth_newFilter</p> </li> <li> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/6271 https://github.com/tronprotocol/java-tron/pull/6275 </p> </li> </ul>"},{"location":"releases/history/#13-optimized-eth_getlogs-to-resolve-data-retrieval-issue-in-rare-hash-collisions","title":"1.3 Optimized eth_getLogs to Resolve Data Retrieval Issue in Rare Hash Collisions","text":"<p>Kant optimizes the eth_getLogs processing logic to resolve the issue where the interface failed to retrieve data in rare hash collision scenarios, thus increasing interface stability.</p> <ul> <li>Source Code: https://github.com/tronprotocol/java-tron/pull/6203</li> </ul>"},{"location":"releases/history/#2-non-null-payment-address-validation-in-shielded-transaction-creation-api","title":"2. Non-Null Payment Address Validation in Shielded Transaction Creation API","text":"<p>Kant adds validation to the shielded transaction creation API to ensure a payment address is not empty. If the validation fails, the API returns the reason for the failure, improving the user experience.</p> <ul> <li>Source Code: https://github.com/tronprotocol/java-tron/pull/6174</li> </ul> <p>Science is organized knowledge. Wisdom is organized life.</p> <p>---Immanuel Kant</p>"},{"location":"releases/history/#greatvoyage-477epicurus","title":"GreatVoyage-4.7.7(Epicurus)","text":"<p>GreatVoyage-4.7.7(Epicurus) introduces multiple important optimizations and updates, including a new proposal to upgrade the floating-point power calculation library from <code>java.lang.Math</code> to <code>java.lang.StrictMath</code>, to expand TRON hardware compatibility and provide users with more flexible hardware platform selection, and save operating costs; optimizing event subscription processing logic to ensure the integrity of event acquisition, and bring users a more user-friendly development experience; adapting to the GRPC asynchronous call mode, and further improve the node monitoring system. You may find the details below.</p>"},{"location":"releases/history/#core_1","title":"Core","text":""},{"location":"releases/history/#1-migrate-pow-operation-from-javalangmath-to-javalangstrictmath-for-cross-platform-computational-consistency","title":"1. Migrate <code>pow</code> operation from java.lang.Math to java.lang.StrictMath for cross-platform computational consistency","text":"<p>In order to enable java-tron to support multiple platforms and be compatible with new JDK versions, the Epicurus version switches the floating-point power operation library from <code>java.lang.Math</code> to <code>java.lang.StrictMath</code> to ensure consistency in cross-platform calculations.</p> <p>Note: This optimization is the No. 87 parameter of the TRON network. After Epicurus is deployed, it is disabled by default and can be enabled through governance voting.</p> <p>TIP: https://github.com/tronprotocol/tips/issues/697 </p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/6098 </p>"},{"location":"releases/history/#other-changes_1","title":"Other Changes","text":""},{"location":"releases/history/#1-optimize-event-subscription-processing-logic","title":"1. Optimize event subscription processing logic","text":"<p>java-tron provides event subscription service, and developers can subscribe to specific events from node through event plugin. For block events, when a node receives a new block, if it successfully verifies and processes the block, it will save the block data in the memory database. At the same time, if there is a new solidified block, the solidified block data will be written to the disk database. If the node deployer subscribes to block events, after the node completing the above block processing steps, the event sending related logic will be performed, that is, the latest block event and the latest solidified block event will be sent to the event plugin. However, in previous versions of Epicurus, block processing and event sending used the same exception capture logic: the newly received block data was removed from the memory database and an exception was thrown. This would result in the new block data being deleted when the block processing was normal but an exception occurred during event sending, which might temporarily affect block synchronization.</p> <p>The Epicurus version optimizes the event subscription processing logic and performs separate exception capture on the block event sending logic. When an exception occurs during event sending, an error log is output and the node exits, so that the node deployer can understand the node abnormality in time and ensure the integrity of event acquisition.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/6096 </p>"},{"location":"releases/history/#2-support-graceful-shutdown-with-signal-15-sigterm-for-nodes-enabling-backup","title":"2. Support graceful shutdown with signal -15 (SIGTERM) for nodes enabling backup.","text":"<p>The Epicurus version adjusts the resource release order of the master and backup services, first closing the communication channel between the master and backup nodes, and then closing the thread pool to ensure that the nodes enabling backup can exit gracefully through the <code>kill -15</code> command.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/6095 </p>"},{"location":"releases/history/#3-improve-duration-metrics-accuracy-of-grpc-interfaces","title":"3. Improve duration metrics accuracy of gRPC interfaces","text":"<p>The Epicurus version optimizes the duration statistics method for GRPC interface calls to adapt to the GRPC asynchronous call mode: a new server-side interceptor is added to record the start time of the GRPC call and monitor the end event of the GRPC call to accurately calculate the time consumption of the GRPC interface asynchronous call.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/6097 </p> <p>Not what we have but what we enjoy, constitutes our abundance.</p> <p>---Epicurus</p>"},{"location":"releases/history/#greatvoyage-v476anaximander","title":"GreatVoyage-v4.7.6(Anaximander)","text":"<p>The GreatVoyage-4.7.6(Anaximander) introduces several important optimizations and updates, including optimized unit test tasks to improve the stability of test cases execution; newly added TCP and UDP traffic statistics further enriches node monitoring data; optimized peer node idle judgment logic improves the stability of block synchronization; optimized node connection random disconnection logic improves the robustness of node network. Please find the details below.</p>"},{"location":"releases/history/#other-changes_2","title":"Other Changes","text":""},{"location":"releases/history/#1-optimize-the-statistical-logic-of-node-http-request-monitoring-metric","title":"1. Optimize the statistical logic of node HTTP request monitoring metric","text":"<p>java-tron supports node monitoring and provides various metrics data. Anaximander optimizes the statistical logic of node HTTP request monitoring metric to ensure data consistency during concurrent access by multiple threads when counting request data from each mapping address.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5920 </p>"},{"location":"releases/history/#2-improve-stability-of-gradle-test-task","title":"2. Improve stability of Gradle test task","text":"<p>Anaximander optimizes the unit test task. The Gradle test-retry  plugin is introduced to allow the failed unit test tasks to be re-executed. The <code>@Ignore</code> annotation is used to skip temporarily unused and unstable test cases. This optimization improves the stability of test task execution.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5916 https://github.com/tronprotocol/java-tron/pull/5927 </p>"},{"location":"releases/history/#3-add-tcp-outflow-monitoring-metric-for-prometheus-and-add-udp-inflow-traffic-statistic-to-monitorgetstatsinfo-api","title":"3. Add TCP outflow monitoring metric for Prometheus and add UDP inflow traffic statistic to <code>/monitor/getstatsinfo</code> API","text":"<p>Anaximander adds a new node TCP outflow monitoring metric and adds a UDP inflow statistic to the <code>/monitor/getstatsinfo</code> interface, further enriching the node monitoring data.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5942 </p>"},{"location":"releases/history/#4-optimize-peer-node-idle-judgment-logic","title":"4. Optimize peer node idle judgment logic","text":"<p>Anaximander optimizes the logic of judging whether the peer node is idle during the block synchronization process, so that block synchronization is not affected by the process of broadcasting blocks/transactions, which improves the efficiency of block synchronization and the stability of the connection between nodes.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5921 </p>"},{"location":"releases/history/#5-optimize-peer-sorting-logic","title":"5. Optimize peer sorting logic","text":"<p>Anaximander optimizes the peers\u2019 sorting logic and adds exception-catching to improve the efficiency of establishing connections between nodes.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5923 </p>"},{"location":"releases/history/#6-optimize-check-logic-for-fetching-block-inventory-message","title":"6. Optimize check logic for fetching block inventory message","text":"<p>Anaximander optimizes the check logic for fetching block inventory messages. The block number requested should be smaller than the largest block number in chain inventory message so that the node can detect illegal messages in time and disconnect from the other node. At the same time, richer node logs are conducive to the troubleshooting and location of connection issues between nodes.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5922 </p>"},{"location":"releases/history/#7-optimize-block-processing-logic","title":"7. Optimize block processing logic","text":"<p>Anaximander optimizes the block processing logic. When processing a received broadcasted block, the node will promptly update the ID and number of  the block which the node with its peer both have to better understand the status of the peers.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5925 </p>"},{"location":"releases/history/#8-optimize-random-disconnection-strategy","title":"8. Optimize random disconnection strategy","text":"<p>When a node\u2019s latest block height is higher than all peers\u2019 that are connected to it, this node will neither be able to synchronize blocks from peers, nor broadcast transactions. We call it an \"island node\". An island node actually does not have a valid peer. In order to prevent a node from entering the island state, Anaximander optimizes the random disconnection logic of the node, disconnects nodes that have been inactive for a long time, increases the number of valid connections, and improves the robustness of the node network.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5924 https://github.com/tronprotocol/java-tron/pull/5944 https://github.com/tronprotocol/java-tron/pull/5956 https://github.com/tronprotocol/java-tron/pull/5984 </p> <p>Nature is eternal and does not age.</p> <p>---Anaximander</p>"},{"location":"releases/history/#greatvoyage-v475cleobulus","title":"GreatVoyage-v4.7.5(Cleobulus)","text":"<p>The Cleobulus version introduces multiple important optimizations and updates, including a new proposal to adjust the energy cost of some opcodes in TVM to make the energy cost more reasonable. The enhanced transaction and block verification logic improves the system's fault tolerance. The optimized synchronization logic between threads improves data consistency. You may find the details below.</p>"},{"location":"releases/history/#core_2","title":"Core","text":""},{"location":"releases/history/#1-optimize-block-synchronization-and-production-logic","title":"1. Optimize block synchronization and production logic","text":"<p>The Cleobulus version optimizes the block production logic. After obtaining the block production lock, the node will check whether it meets the conditions for producing blocks to avoid inconsistent state before and after obtaining the block production lock, thereby improving the stability of the TRON network.</p> <p>Additionally, Cleobulus enhances the block verification logic. All nodes add checks on block size and block time. </p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5833 https://github.com/tronprotocol/java-tron/pull/5830 </p>"},{"location":"releases/history/#2-strengthen-size-check-of-account-creation-transactions","title":"2. Strengthen size check of account creation transactions","text":"<p>The Cleobulus version optimizes the account creation logic, strengthens the size check of account creation transactions, and adds the No.82 TRON network parameter to set the maximum number of bytes allowed for account creation transactions. The parameter ranges from 500 to 10000 and the default value is 1000. The value can be modified by initiating a proposal for a vote.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5835 </p>"},{"location":"releases/history/#tvm_1","title":"TVM","text":""},{"location":"releases/history/#1-adjust-energy-cost-for-some-opcodes-in-tvm","title":"1. Adjust energy cost for some opcodes in TVM","text":"<p>Cleobulus adjusts the energy cost of the <code>VOTEWITNESS</code> and <code>SUICIDE</code> opcodes to make the energy consumption more reasonable based on the resources and time required for the actual execution of each opcode.</p> <p>This optimization is the No. 81 parameter of the TRON network. After Cleobulus is deployed, it is disabled by default and can be enabled through governance voting.</p> <p>TIP: https://github.com/tronprotocol/tips/blob/master/tip-653.md  Source Code: https://github.com/tronprotocol/java-tron/pull/5837 </p>"},{"location":"releases/history/#other-changes_3","title":"Other Changes","text":""},{"location":"releases/history/#1-optimize-synchronization-logic-among-threads","title":"1. Optimize synchronization logic among threads","text":"<p>The Cleobulus version optimizes the block request logic and no longer reads <code>fetchBlockInfo</code> data when printing logs, improving the stability of concurrent access to <code>fetchBlockInfo</code> object by multiple threads.</p> <p>Additionally, Cleobulus optimizes the synchronization block processing logic. Regardless of whether the <code>syncBlockToFetch</code> queue is empty, the node can process block data normally, improving the efficiency of block synchronization.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5831 https://github.com/tronprotocol/java-tron/pull/5832 </p>"},{"location":"releases/history/#2-remove-redundant-code","title":"2. Remove redundant code","text":"<p>The Cleobulus version removes redundant code in the block processing logic, improving the readability and maintainability of the code.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5834 </p> <p>Seek virtue and eschew vice. </p> <p> ---Cleobulus</p>"},{"location":"releases/history/#greatvoyage-v474bias","title":"GreatVoyage-v4.7.4(Bias)","text":"<p>The Bias version introduces several important optimizations and updates, including a new proposal to optimize the performance of voting reward withdrawal; the refactored Gradle dependency reduces the complexity of core protocol development; support for gRPC reflection services and optimized logging system brings a more friendly and convenient development experience to users. Please find the details below.</p>"},{"location":"releases/history/#core_3","title":"Core","text":""},{"location":"releases/history/#1-optimize-voting-reward-withdrawal-performance","title":"1. Optimize voting reward withdrawal performance","text":"<p>TIP-465 aims to improve the calculation performance of TRON voting rewards. By recording the single-vote cumulative reward value of each super representative in each maintenance period, the time complexity of voting reward calculation can be reduced from linear time to constant time. The TIP-465 has been implemented as early as the Socrates version, and No. 82 proposal based on TIP-465 has been officially adopted at 2023-01-20 14:00:00. However, this proposal only optimizes the calculation performance of voting rewards generated after the proposal takes effect (constant time complexity), while the calculation performance of voting rewards generated before the proposal takes effect is still low (linear time complexity).</p> <p>The Bias version optimizes the calculation performance of voting rewards generated before the No.82 proposal takes effect. It calculates the single-vote cumulative reward value of each super representative in each maintenance period before the No.82 proposal takes effect in advance through background tasks, and saves the calculation results to the database. This will make the calculation performance of voting rewards generated before and after the No. 82 proposal takes effect consistent, so that any transaction involving reward withdrawal can complete the reward calculation within a constant time, speeding up the execution speed of transactions related to voting rewards withdrawal, improving network throughput.</p> <p>This optimization is the No. 79 parameter of the TRON network. After Bias is deployed, it is turned off by default and can be enabled through governance voting.</p> <p>TIP: https://github.com/tronprotocol/tips/issues/635 Source Code: https://github.com/tronprotocol/java-tron/pull/5406 https://github.com/tronprotocol/java-tron/pull/5654 https://github.com/tronprotocol/java-tron/pull/5683 https://github.com/tronprotocol/java-tron/pull/5742 https://github.com/tronprotocol/java-tron/pull/5748 </p>"},{"location":"releases/history/#2-add-check-function-for-the-number-of-unsolidified-blocks","title":"2. Add check function for the number of unsolidified blocks","text":"<p>The block solidification mechanism of the TRON network is: a block can be solidified only after it is confirmed by 70% of the super representatives, that is, the block data is written to the disk and the data cannot be changed. Blocks that cannot be solidified are always stored in memory. If the number of unsolidified blocks continues to increase, it may cause memory exhaustion and the node to stop running.</p> <p>The Bias version adds a check function for the number of unsolidified blocks. When it is detected that the number of unsolidified blocks of a node reaches the threshold, the node will stop broadcasting transactions to avoid too many transactions that cannot be solidified in the network. This can not only reduce the node's memory usage, but also reduce the number of transactions in the block, improve the block execution speed, and facilitate the rapid recovery of the network in the later period..</p> <p>This feature is disabled by default. Node deployers can turn on it and configure the threshold through the below configuration items.</p> <pre><code>node.unsolidifiedBlockCheck = true\nnode.maxUnsolidifiedBlocks = 54\n</code></pre> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5643 </p>"},{"location":"releases/history/#api_1","title":"API","text":""},{"location":"releases/history/#1-supply-block_unsolidified-in-code-for-walletbroadcasttransaction-api","title":"1. Supply BLOCK_UNSOLIDIFIED in code for /wallet/broadcasttransaction API","text":"<p>The Bias version adds a check function for the number of unsolidified blocks. When it is detected that the number of unsolidified blocks of a node reaches the threshold, the node will stop broadcasting transactions. In order to provide better feedback on the node status, the Bias version adds a new return code <code>BLOCK_UNSOLIDIFIED</code> for the <code>/wallet/broadcasttransaction</code> API. This code indicates that the node has too many unsolidified blocks and the number has exceeded the threshold, the node cannot broadcast the transaction.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5643 </p>"},{"location":"releases/history/#other-changes_4","title":"Other Changes","text":""},{"location":"releases/history/#1-add-field-codeversion-to-hellomessage-to-declare-code-version","title":"1. Add field codeVersion to HelloMessage to declare code version","text":"<p>Bias adds a new field <code>codeVersion</code> representing version information in the HelloMessage message, so that nodes can obtain the version information of the other node during the node discovery phase, which is beneficial to troubleshooting and locating problems later.</p> <p>TIP: https://github.com/tronprotocol/tips/issues/621 Source Code: https://github.com/tronprotocol/java-tron/pull/5584 https://github.com/tronprotocol/java-tron/pull/5667 </p>"},{"location":"releases/history/#2-bump-libp2p-to-version-221","title":"2. Bump libp2p to version 2.2.1","text":"<p>Bias upgrades the network module to libp2p v2.2.1. The main contents of this version include: bump snappy-java dependency library to v1.1.10.5, add LAN IP acquisition logic, optimize handshake logic, and adjust some log levels.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5692 </p>"},{"location":"releases/history/#3-bump-jetty-to-9453v20231009","title":"3. Bump jetty to 9.4.53.v20231009","text":"<p>The Bias version bumps the jetty dependency library to v9.4.53.v20231009. </p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5571 </p>"},{"location":"releases/history/#4-refactor-gradle-dependencies","title":"4. Refactor Gradle dependencies","text":"<p>The java-tron code is divided into multiple modules, each module has its own dependencies, but currently there are situations where dependencies are declared multiple times in multiple modules. The Bias version reconstructs the Gradle dependencies of each module and deletes duplicate dependency statements, making the code dependencies clearer and enabling unified management of dependencies to reduce maintenance costs.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5625 </p>"},{"location":"releases/history/#5-provide-grpc-reflection-service","title":"5. Provide gRPC reflection service","text":"<p>Starting from the Bias version, the gRPC reflection service is supported. Users can directly use the gRPCurl command line tool to make the gPRC interface calls, which improves the ease of use of the gRPC interface. This feature needs to be enabled through the following configuration items: <pre><code>node.rpc.reflectionService=true\n</code></pre> Source Code: https://github.com/tronprotocol/java-tron/pull/5583 </p>"},{"location":"releases/history/#6-delete-the-litefullnodetool-related-code-under-the-framework-module","title":"6. Delete the LiteFullNodeTool related code under the framework module","text":"<p>In order to facilitate tool maintenance and developer use, TRON has launched the <code>Toolkit.jar</code> toolbox, which includes various TRON development tools. As early as the Aristotle version, the code related to the LiteFullNode data clipping tool has been integrated into the <code>Toolkit</code> toolbox (located under the plugin module), and <code>Toolkit</code> can completely replace <code>LiteFullNodeTool</code> (located under the framework module). Therefore, the Bias version deletes the <code>LiteFullNodeTool</code> related code under the framework module, which not only reduces code redundancy, but also makes the division of functional modules clearer. The commands to use the LiteFullNode data pruning function in the <code>Toolkit</code> are as follows:</p> <pre><code>$ java -jar Toolkit.jar db lite \n</code></pre> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5711 </p>"},{"location":"releases/history/#7-remove-configuration-item-nodediscoverybindip","title":"7. Remove configuration item node.discovery.bind.ip","text":"<p>Bias upgrades libp2p to v2.2.1. That makes the node can obtain the node LAN IP directly through libp2p without manual configuration by the deployer. Therefore, the Bias version deletes the no longer used configuration item <code>node.discovery.bind.ip</code>, simplifying the configuration complexity.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5597 https://github.com/tronprotocol/java-tron/pull/5750 </p>"},{"location":"releases/history/#8-remove-redundant-ci-scripts","title":"8. Remove redundant CI scripts","text":"<p>The Bias version removes project build scripts that are no longer used, including checkStyle.sh, codecov.sh, querySonar.sh, sonar.sh.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5580 </p>"},{"location":"releases/history/#9-initialize-the-api-service-first-during-the-node-startup","title":"9. Initialize the API service first during the node startup","text":"<p>The Bias version adjusts the start order of each service, starts the node API service first, and then starts the P2P service and consensus service. This prevents the API service port from being occupied by other services.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5711 </p>"},{"location":"releases/history/#10-optimize-log","title":"10. Optimize log","text":"<p>The Bias version optimizes node logs, adjusts some log levels according to business logic, simplifies expected exception logs, and elaborates unexpected exception logs to facilitate problem location.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5624 https://github.com/tronprotocol/java-tron/pull/5601 https://github.com/tronprotocol/java-tron/pull/5660 https://github.com/tronprotocol/java-tron/pull/5687 https://github.com/tronprotocol/java-tron/pull/5697 </p>"},{"location":"releases/history/#11-add-synchronization-control-when-writing-to-zeromq","title":"11. Add synchronization control when writing to ZeroMQ","text":"<p>java-tron supports subscribing to events through the built-in ZeroMQ message queue. However, when multiple threads concurrently send events to the ZeroMQ, write exception errors may occur. The Bias version adds synchronization control when writing to ZeroMQ, ensuring the order of concurrent access between threads.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5536 </p>"},{"location":"releases/history/#12optimize-unexpected-exception-capture-process-of-scalingfactor-in-walletcreateshieldedcontractparameters-api","title":"12.Optimize unexpected exception capture process of scalingFactor in /wallet/createshieldedcontractparameters API.","text":"<p>The Bias version optimizes the <code>/wallet/createshieldedcontractparameters</code> interface and adds a legality check for the anonymous contract scaling factor parameter <code>scalingFactor</code>, which must be a positive integer.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5746 </p> <p>Be slow in considering, but resolute in action. </p> <p> ---Bias</p>"},{"location":"releases/history/#greatvoyage-v4731solon","title":"GreatVoyage-v4.7.3.1(Solon)","text":"<p>Solon is a non-mandatory upgrade version that will introduce two important updates. A more stable HTTP interface and Lite FullNode data pruning tool bring users a more friendly development experience.</p> <p>Please find the details below.</p>"},{"location":"releases/history/#other-changes_5","title":"Other Changes","text":""},{"location":"releases/history/#1-more-stable-walletgetnodeinfo-interface","title":"1. More stable /wallet/getnodeinfo interface","text":"<p>In versions prior to Solon, there was a very small probability that an exception might be triggered when calling the /wallet/getnodeinfo interface due to the concurrent execution of block data object serialization. Therefore, the Solon version modified the serialization logic of block data to ensure the correctness of block data acquisition and make the /wallet/getnodeinfo interface more stable.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5594 </p>"},{"location":"releases/history/#2-optimize-lite-fullnode-data-pruning-tool","title":"2. Optimize Lite FullNode data pruning tool","text":"<p>In order to solve the problem of node database corruption caused by the abnormal shutdowns, starting from Socrates version, the Checkpoint V2 mechanism was introduced. The V2 mechanism saves multiple checkpoints on the disk, corresponding to multiple solidified block data, which is used to restore the data when the node database is damaged.</p> <p>The Lite FullNode data pruning tool should also be compatible with the checkpoint v2 version. When a node stops abnormally, the pruning tool can also restore the node data and complete the data pruning. </p> <p>Therefore, Solon optimized the Lite FullNode data pruning tool in the toolkit. When it is found that checkpoint v2 is used, the data will be queried from the checkpoint v2 database, so that even if the node stops abnormally, the tool can restore and prune the data, which improves the usability of the Lite FullNode data pruning tool.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5658 </p> <p>Do not counsel what is most pleasant, but what is best. </p> <p> ---Solon</p>"},{"location":"releases/history/#greatvoyage-v473chilon","title":"GreatVoyage-v4.7.3(Chilon)","text":"<p>Chilon is a non-mandatory upgrade version that will introduce multiple important updates. Richer gRPC interfaces and faster node startup speed, bring users a more friendly development experience. Optimized disconnection strategy and synchronization process improve the stability of the connection among nodes. The optimized transaction processing logic and database query performance elevate the transaction packaging efficiency and network throughput.</p> <p>Please find the details below.</p>"},{"location":"releases/history/#core_4","title":"Core","text":""},{"location":"releases/history/#1-add-grpc-interfaces-for-resource-price-and-transaction-memo-fee-query","title":"1. Add gRPC interfaces for resource price and transaction memo fee query","text":"<p>Chilon adds three new gRPC interfaces. Users can obtain historical bandwidth unit price through <code>getBandwidthPrices</code> API, obtain historical energy unit price through <code>getEnergyPrices</code> API, and obtain transaction memo fee through <code>getMemoFee</code> API. These new gRPC APIs further improve the developer experience.</p> <p>TIP: https://github.com/tronprotocol/tips/blob/master/tip-586.md Source Code: https://github.com/tronprotocol/java-tron/pull/5412 </p>"},{"location":"releases/history/#2-supplement-disconnect-reasons","title":"2. Supplement disconnect reasons","text":"<p>When a node fails to process a message from a peer, it may initiatively disconnect from the peer. However, in previous versions of Chilon, in some cases, the node did not inform the other node of the reason for the disconnection, which was not conducive to the analysis and troubleshooting of the connection issue by the other node.</p> <p>The Chilon version supplements two reasons for disconnection. Node will send the disconnection reasons to the other node before dropping the connection, so as to facilitate efficient handling of node connection problems.</p> <p>TIP: https://github.com/tronprotocol/tips/blob/master/tip-592.md Source Code: https://github.com/tronprotocol/java-tron/pull/5392  </p>"},{"location":"releases/history/#3-discard-transactions-from-bad-peers-instead-of-disconnected-peers","title":"3. Discard transactions from bad peers instead of disconnected peers","text":"<p>For a broadcast transaction, the node must determine whether to process it. In previous versions of Chilon, the basis for judgment is whether the transaction comes from a disconnected peer. If so, the transaction will be discarded. However, whether to execute a broadcasted transaction should not be judged based on whether it maintains a connection with the other node, but whether the other node is a malicious node. </p> <p>Therefore, the Chilon version optimizes the transaction processing logic and no longer discards transactions from disconnected peers. Instead, it only discards transactions broadcasted from the nodes that have sent illegal transactions. This change improves transaction broadcast and packaging efficiency.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5440 </p>"},{"location":"releases/history/#4-optimize-stake-20-codes-and-error-messages","title":"4. Optimize Stake 2.0 codes and error messages","text":"<p>The Chilon version standardizes Stake 2.0-related code and simplifies complex functions\uff0c improving the simplicity and readability of the code.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5426 </p>"},{"location":"releases/history/#5-accelerate-bloomfilter-initialization-for-transaction-cache","title":"5. Accelerate bloomFilter initialization for transaction cache","text":"<p>When a node starts, it will load the transactions of the latest 65536 blocks from the database to build a transaction cache bloomFilter, which is used to determine duplicate transactions when verifying transactions later. In previous versions of Chilon, the loading time of the transaction cache accounted for more than 70% of the node startup time. In order to accelerate the speed of the transaction cache bloomFilter initialization, the Chilon version persists in the transaction cache bloomFilter. When the node exits normally, the transaction cache bloomFilter-related data will be stored on the disk. When the node restarts, there will be no need to read the transaction information in the recent blocks, but directly load the bloomFilter data into the memory, speeding up the initialization process of the transaction cache bloomFilter and greatly improving the node startup speed. This feature is disabled by default and can be enabled through the node configuration item <code>storage.txCache.initOptimization = true</code>.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5394  https://github.com/tronprotocol/java-tron/pull/5491  https://github.com/tronprotocol/java-tron/pull/5505  https://github.com/tronprotocol/java-tron/pull/5523  https://github.com/tronprotocol/java-tron/pull/5543  </p>"},{"location":"releases/history/#6-fix-concurrency-issues-when-generating-chain-inventory","title":"6. Fix concurrency issues when generating chain inventory","text":"<p>In previous versions of Chilon, when node A requests to synchronize blocks from node B, it first sends its own chain summary to node B. After receiving it, node B generates node A's missing block list according to the local chain and returns the list to node A. The list generation process is: first, find the maximum common block height of the two nodes from the chain summary of node A, and then add the IDs of several blocks starting from the maximum common block height to the missing blocks list of node A. Since the generation of the missing block list and chain switching are executed concurrently, if chain switching occurs when generating the missing block list, it may happen that after the maximum common block height is obtained, the corresponding block id cannot be obtained, causing the generated missing block list does not match the chain summary of node A, resulting in dropping the node connection.</p> <p>The Chilon version optimizes the generation logic of the missing block list. When the ID of the highest common block previously calculated cannot be obtained, the node will retry to ensure that the returned list contains the highest common block information, which improves the stability of connections between nodes.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5393  https://github.com/tronprotocol/java-tron/pull/5532 </p>"},{"location":"releases/history/#7-correct-resource-disorder-closure-behavior-on-kill-15","title":"7. Correct resource disorder closure behavior on kill -15","text":"<p>In previous versions of Chilon, when the service is shut down, abnormal errors may occur  due to the resource release order issue. The Chilon version optimizes the service shutdown logic. When the <code>kill -15</code> command is used to shut down the service, it can ensure the accuracy of the release sequence of various types of resources so that the node can exit normally.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5410 https://github.com/tronprotocol/java-tron/pull/5425  https://github.com/tronprotocol/java-tron/pull/5421 https://github.com/tronprotocol/java-tron/pull/5429  https://github.com/tronprotocol/java-tron/pull/5447  </p>"},{"location":"releases/history/#api_2","title":"API","text":""},{"location":"releases/history/#1-optimize-http-interface-monitoring","title":"1. Optimize HTTP interface monitoring","text":"<p>Chilon optimizes the HTTP interface monitoring, it no longer counts requests for APIs that are not supported by the node, making the statistics of successful or failed HTTP interface requests more accurate.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5332 </p>"},{"location":"releases/history/#2-provide-uniform-rate-limitation-configuration-for-all-http-and-grpc-apis","title":"2. Provide uniform rate limitation configuration for all HTTP and gRPC APIs","text":"<p>java-tron supports interface rate limiting. The default qps (queries per second) of each interface is 1000. Node deployers can also limit the traffic of a particular interface. However, in previous versions of Chilon, it was not supported to modify the default qps of each interface, that way, If you want to configure the default qps of each interface to 2000, you need to configure the current limit for each interface respectively. The Chilon version adds a new default interface rate limit configuration <code>rate.limiter.global.api.qps</code>. With this configuration, users can change the rate limit of all interfaces, simplifying the configuration complexity.</p> <pre><code>rate.limiter.global.api.qps = 1000\n</code></pre> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5502 </p>"},{"location":"releases/history/#3-optimize-http-interface-parameter-parsing","title":"3. Optimize HTTP interface parameter parsing","text":"<p>In previous versions of Chilon, for interfaces involving reward queries, if the request passes in invalid parameters or non-JSON formatted parameters, the node will throw an exception. The Chilon version optimizes the HTTP interface parameter parsing logic and returns a 0 value or error message for requests with incorrect parameter formats.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5367 https://github.com/tronprotocol/java-tron/pull/5483 </p>"},{"location":"releases/history/#4-add-solidity-query-interfaces-of-resource-unit-price","title":"4. Add solidity query interfaces of resource unit price","text":"<p>Chilon supplements query interfaces of resource unit price for solidity, they are <code>/walletsolidity/getbandwidthprices</code> and  <code>/walletsolidity/getenergyprices</code>.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5412 https://github.com/tronprotocol/java-tron/pull/5451 https://github.com/tronprotocol/java-tron/pull/5437 </p>"},{"location":"releases/history/#5-optimize-the-processing-logic-of-some-http-interfaces","title":"5. Optimize the processing logic of some HTTP interfaces","text":"<p>The Chilon version optimizes some HTTP interfaces to make it consistent with get and post request processing, including parameters check and return value. The interfaces include <code>/wallet/getavailableunfreezecount</code>, <code>/wallet/getcanwithdrawunfreezeamount</code>, <code>/wallet/getcandelegatedmaxsize</code>, and <code>/wallet/getavailableunfreezecount</code>. </p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5408 </p>"},{"location":"releases/history/#other-changes_6","title":"Other Changes","text":""},{"location":"releases/history/#1-add-check-for-expired-transactions-when-fetching-transactions","title":"1. Add check for expired transactions when fetching transactions","text":"<p>Chilon adds a check for expired transactions in the broadcast list it receives. For transactions timed out in the list, it will no longer make requests to its remote node, avoiding node connections being disconnected due to transaction processing failures, and improving node connection stability.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5460 </p>"},{"location":"releases/history/#2-fix-concurrency-issue-of-getheadblockid-method","title":"2. Fix concurrency issue of getHeadBlockId method","text":"<p>During the block synchronization process, the node must obtain the <code>BlockId</code> of the latest block through the <code>getHeadBlockId</code> method. In previous versions of Chilon, the <code>BlockId</code> was obtained through the block number and hash of the latest block. However, due to the concurrent execution of the latest block data acquisition thread and the update thread, getHeadBlockId may start to obtain the BlockId of the latest block before the block number and hash value of the latest block have been updated, which makes it possible for the <code>getHeadBlockId</code> method to return an abnormal <code>BlockId</code> value. </p> <p>Chilon optimizes the <code>BlockId</code> acquisition logic of the latest block, and <code>getHeadBlockId</code> only obtains <code>BlockId</code> through the hash value of the latest block, ensuring the correctness of the block ID acquisition.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5403 </p>"},{"location":"releases/history/#3-delete-unused-network-configurations","title":"3. Delete unused network configurations","text":"<p>Chilon deleted four unused network parameters, including the three configuration items below, simplifying the complexity of using for developers.</p> <pre><code>node.discovery.public.home.node\nnode.discovery.ping.timeout\nnode.p2p.pingInterval\n</code></pre> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5441 </p>"},{"location":"releases/history/#4-obtain-external-ip-through-libp2p","title":"4. Obtain external IP through Libp2p","text":"<p>In previous versions of Chilon, when a node starts, the external IP address would be obtained repeatedly, and java-tron and lib2p2 each perform the IP acquisition once. To improve the node startup speed, Chilon optimizes the external IP acquisition logic. When a node starts, it directly calls the libp2p module to obtain the external IP, and it can directly assign the external IP to libp2p and repeated obtaining is avoided.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5407 </p>"},{"location":"releases/history/#5-add-address-parsing-for-stake-related-transactions-in-event-subscription","title":"5. Add address parsing for stake-related transactions in event subscription","text":"<p>Chilon optimizes the event subscription service and adds the parsing of addresses in stake-related transactions, so that event subscribers can obtain address information in stake, resource delegation, and other transactions.</p> <p>Source Code:https://github.com/tronprotocol/java-tron/pull/5419 </p>"},{"location":"releases/history/#6-adjust-default-number-of-cpu-cores-used-in-signature-validation","title":"6. Adjust default number of CPU cores used in signature validation","text":"<p>In previous versions of Chilon, nodes used 1/2 of the system CPU cores for parallel signature verification by default. To improve the performance of node synchronization and block processing, the Chilon version changed the default value of the number of threads used for signature verification to the maximum number of CPU cores to maximize signature verification performance. Node deployers can also adjust the number of signature verification threads through the <code>node.validateSignThreadNum</code> configuration item.</p> <p>Source Code:https://github.com/tronprotocol/java-tron/pull/5396  </p>"},{"location":"releases/history/#7-migrate-litefullnode-tool-related-unit-test-cases-to-plugins-module","title":"7. Migrate LiteFullNode tool related unit test cases to Plugins module","text":"<p>In the previous version, the code related to the LiteFullNode tool has been integrated into the toolkit in the plugins module. The Chilon version has further integrated and moved the test cases related to the LiteFullNode tool from the framework module to the plugins module. Not only does It make the code structure clearer but also improves the execution efficiency of test cases.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5475 https://github.com/tronprotocol/java-tron/pull/5482 </p>"},{"location":"releases/history/#8-enhance-query-performance-of-properties-db","title":"8. Enhance query performance of properties DB","text":"<p>During the block processing process, nodes access the <code>properties</code> database more frequently. Better <code>properties</code> database query performance will improve the processing speed of the block. Since the property data volume is small and updates are infrequent, Chilon optimizes the query performance of the <code>properties</code> database, loading all data into the first-level cache to maximize data query performance and thereby improve transaction processing capabilities.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5378  </p> <p>Do not desire impossible. </p> <p> ---Chilon</p>"},{"location":"releases/history/#greatvoyage-v472periander","title":"GreatVoyage-v4.7.2(Periander)","text":"<p>The Periander version introduces several important optimizations and updates, adding two governance proposals to optimize Stake 2.0, greatly improving the flexibility of the TRON stake mechanism; adding a governance proposal to implement EIP-3855 <code>PUSH0</code> Instruction, which not only ensures the compatibility of TRON and Ethereum at the virtual machine level but also reduces the cost of using TRON smart contracts; more friendly smart contracts interfaces to improve the convenience of smart contract development; the P2P network module of TRON has been fully upgraded to support IPV6 protocol, node discovery via DNS, message compression, etc., greatly improving the performance of TRON network infrastructure.</p> <p>Please see the details below.</p>"},{"location":"releases/history/#core_5","title":"Core","text":""},{"location":"releases/history/#1-upgrade-libp2p-to-v120","title":"1. Upgrade Libp2p to v1.2.0","text":"<p>Libp2p is a Java version open-source P2P protocol framework developed by the java-tron core developers and anyone can develop distributed applications with Libp2p, as the underlying P2P network of java-tron is implemented based on Libp2p. In order to further improve the underlying network performance of java-tron, Periander upgrades the Libp2p v0.1.4 with the v1.2.0 version.</p> <p>Libp2p v1.2.0 has the following new features\uff1a</p> <ul> <li> <p>Support IPv6 protocol</p> <p>IPV6 protocol is the next-generation Internet IP protocol that replaces IPV4. While solving the problem of IP4 address exhaustion, the network performance has also been improved. Currently, mainstream server operating systems support both IPv4 and IPv6. Therefore, Libp2p v1.2.0 supporting dual protocol stacks not only improves the network performance of TRON but also enables nodes that either support one of the protocols or support both of them to join the TRON network.</p> <p>This function is disabled by default and needs to be enabled through the node configuration item <code>node.enableIpv6 = true</code>.</p> <ul> <li>TIP: https://github.com/tronprotocol/tips/blob/master/tip-549.md </li> </ul> </li> <li> <p>Node Discovery via DNS</p> <p>Libp2p v1.2.0 supports node discovery through DNS so that nodes can use not only the Kademlia algorithm but also the DNS servers for node discovery. The nodes supporting the feature can publish nodes to the DNS service and use DNS for node discovery. These functions need to be enabled through node configuration items, see below:</p> <p>Publish Nodes to DNS</p> <p>The node supports publishing known nodes to the DNS service for other nodes to use. There are two ways to publish nodes: dynamic publishing and static publishing. Dynamic publishing is the node periodically publishing the remote node IP in the K-bucket to DNS. Static publishing is to publish the nodes in the <code>dns.staticNodes</code> configuration item to the DNS service at one time, without updating later. If <code>dns.staticNodes</code> is not empty, it means to adopt the static publishing way, otherwise, the dynamic publishing way.</p> <pre><code>node.dns {\n    # enable or disable dns publish, default false\n    publish = true\n\n    # dns domain to publish nodes, required if publish is enable\n    dnsDomain = \"...\"\n\n    # dns private key used to publish, required if publish is enable, hex string of length 64\n    dnsPrivate = \"...\"\n\n    # dns server to publish, required if publish is enable, only \u201daws\u201d or \u201caliyun\u201d is support\n    serverType = \"...\"\n\n    # access key id of aws or aliyun api, required if publish is enable, string\n    accessKeyId = \"...\"\n\n    # access key secret of aws or aliyun api, required if publish is enable, string\n    accessKeySecret = \"...\"\n\n    # if publish is enable and serverType is aliyun, it's endpoint of aws dns server, string\n    aliyunDnsEndpoint = \"...\"\n\n    # if publish is enable and serverType is aws, it's region of aws api, such as \"eu-south-1\", string\n    awsRegion = \"...\"\n    # if publish is enable and serverType is aws, it's host zone id of aws's domain, string\n    awsHostZoneId = \"...\"\n\n    # static nodes to published on dns\n    staticNodes = [\n        # Sample entries:\n        # \"ip:port\",\n        # \"ip:port\"\n    ]\n\n    # the range is from 1 to 5\n    maxMergeSize = 2\n\n    changeThreshold = 0.001\n}\n</code></pre> <p>Node discovery via DNS</p> <p>To use the function of node discovery via DNS, you need to configure the following configuration items: <pre><code>node.dns {\n # DNS URL to get nodes, URL format tree://{pubkey}@{domain}, default empty\n treeUrls = [......]\n}\n</code></pre></p> <ul> <li>TIP: https://github.com/tronprotocol/tips/blob/master/tip-548.md </li> </ul> </li> <li> <p>Connection precheck before P2P communication </p> <p>Libp2p v0.1.4 chooses whether to establish a connection and synchronize data with a remote node according to the order of the update time of the node. In actual scenarios, the connection may be rejected by the other party for some reason, which will affect data synchronization. In order to improve the efficiency of establishing connections between nodes, Libp2p v1.2.0 supports node connection precheck before the P2P communication, which can check whether the other node can accept the connection in advance.</p> <p>The node tries to establish a TCP connection with the other node in advance to know whether it is online. If the TCP connection is established, a pair of interactive messages are used to obtain the relevant information of the other node, including the Libp2p version, the maximum number of connections, the current number of connections, etc., to determine whether the other node can still accept connections. This function avoids invalid connection requests and greatly improves the efficiency of connection establishment.</p> <p>This function is disabled by default and needs to be enabled through the node configuration item <code>node.nodeDetectEnable</code>.</p> <ul> <li>TIP: https://github.com/tronprotocol/tips/blob/master/tip-547.md </li> </ul> </li> <li> <p>P2P message Snappy compression</p> <p>Libp2p v1.2.0 supports TCP message compression. The node compresses the TCP message before transmission and decompresses it after receiving the compressed message. After testing, the time consumption for message compression and decompression is short, less than 1 ms, and this function can significantly reduce the network bandwidth occupation of message transmission, which can save about 40% of the bandwidth.</p> <ul> <li>TIP: https://github.com/tronprotocol/tips/blob/master/tip-550.md </li> <li>Source Code: https://github.com/tronprotocol/java-tron/pull/5017</li> </ul> </li> </ul>"},{"location":"releases/history/#2-support-canceling-unstaking-in-stake-20","title":"2. Support canceling unstaking in Stake 2.0","text":"<p>In the versions previous to Periander, after initiating an unstaking transaction through the HTTP API in Stake 2.0, the user needs to wait for a 14-day waiting period before withdrawing the corresponding funds, and the unstaking cannot be canceled.</p> <p>The Periander version optimizes the Stake 2.0 mechanism, allowing users to cancel unstakings that have been initiated but not completed yet. When canceling unstakings, all unstaked funds still in the waiting period will be re-staked, and the resource obtained through the re-staking remains the same as before. Unstakings that exceeded the 14-day waiting period cannot be canceled, and this part of the unstaked funds will be automatically withdrawn to the owner\u2019s account. This feature is controlled by the No. 77 parameter of the TRON network, which needs to be enabled through governance voting. After it is enabled, the nodes will support a new transaction type, and users can use the <code>wallet/cancelallunfreezev2</code> API to create an unstaking canceling transaction: <pre><code>curl -X POST http://127.0.0.1:8090/wallet/cancelallunfreezev2 -d \\\n'{\n  \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\",\n  \"visible\": true\n}'\n</code></pre></p> <ul> <li>TIP: https://github.com/tronprotocol/tips/blob/master/tip-541.md </li> <li>Source Code: https://github.com/tronprotocol/java-tron/pull/5230 https://github.com/tronprotocol/java-tron/pull/5260 https://github.com/tronprotocol/java-tron/pull/5279 </li> </ul>"},{"location":"releases/history/#3-resource-delegating-supports-customizable-lock-period","title":"3. Resource delegating supports customizable lock period","text":"<p>In the versions previous to Periander, users can choose whether to lock or not when delegating resources. If chosen to lock, the resource delegating to the recipient address could not be canceled within 3 days, which is more conducive for users participating in the resource rental market.</p> <p>The Periander version further optimizes the lock time when delegating resources, changing it from the current fixed value of 3 days to a configurable length of time for users according to their needs.</p> <p>This feature is controlled by the No.78 parameter of the TRON network. It needs to be enabled through governance voting. When enabling the proposal, a time parameter needs to be specified, indicating the maximum value of the lock time that can be set. Once enabled, a new parameter, <code>lock_period</code>, will be added to wallet/delegateresource API:</p> <pre><code>curl -X POST http://127.0.0.1:8090/wallet/delegateresource -d \\\n'{\n  \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\",\n  \"receiver_address\": \"TPswDDCAWhJAZGdHPidFg5nEf8TkNToDX1\",\n  \"balance\": 1000000,\n  \"resource\": \"ENERGY\",\n  \"lock\": true,\n  \"lock_period\": 86400,\n  \"visible\": true\n}'\n</code></pre> <ul> <li>lock: whether to lock the delegating</li> <li>lock_period: lock time, only when <code>lock</code> is <code>true</code>, this field is valid. The owner cannot cancel the delegating before the lock time is up. The unit of lock_period is block interval(3 seconds). This field indicates the time of how many blocks will be produced from the moment the transaction is executed. So the above 86400 means locking for 259200 seconds (3 days). lock_period cannot exceed the maximum lock period (value of the No.78 network parameter).</li> </ul> <p>The default value of lock_period is 86400, which is 3 days. That is, when <code>lock</code> is <code>true</code>, if <code>lock_period</code> is not specified or set to 0, <code>lock_period</code> will be set to 86400 by default, which will ensure compatibility before and after this feature takes effect.</p> <p>In addition, the value of <code>lock_period</code> cannot be lower than the remaining lock time of this type of resource that was previously delegated to the same recipient address, and the value will overwrite the remaining lock time of the previous delegating.</p> <p>For example, user A delegates 100 energy shares to B, and <code>lock_period</code> is set to 57600 (2 days), and so that the remaining lock time after 1 day is 28800. At this time, when A delegates energy to B again, if choose to lock, <code>lock_period</code> should be set to at least 28800 (1 day), otherwise, an exception error will be thrown when creating the delegating transaction: \u201cThe lock period for ENERGY this time cannot be less will be thrown when creating a proxy transaction than the remaining time[9600000ms] of the last lock period for ENERGY!.\u201d</p> <ul> <li>TIP:  https://github.com/tronprotocol/tips/blob/master/tip-542.md </li> <li>Source Code: https://github.com/tronprotocol/java-tron/pull/5255</li> </ul>"},{"location":"releases/history/#4-optimize-effective-peer-acquiring-strategy","title":"4. Optimize effective peer-acquiring strategy","text":"<p>When the latest block heights of all connected remote nodes are lower than a node\u2019s, then the node will not be able to synchronize blocks from the remote nodes, nor broadcast the transactions. We call this kind of node an \"island node\". In fact, the island node has no valid peer node.</p> <p>In order to enable nodes to connect to effective peer nodes, the Periander version optimizes the node acquisition strategy and adds island node detection. If a node finds that it is in an island state, it will look for a node with a higher header block than the local one and establish a connection with it. This strategy prevents the node from being in an isolated state for a long time, ensures that the node can quickly replenish effective connections, enables it to obtain new blocks and broadcast transactions, and improves the stability of the node.</p> <p>This function is disabled by default and needs to be enabled by setting the node configuration item <code>node.effectiveCheckEnable</code>.</p> <ul> <li>Source Code: https://github.com/tronprotocol/java-tron/pull/5088</li> </ul>"},{"location":"releases/history/#tvm_2","title":"TVM","text":""},{"location":"releases/history/#1-implement-eip-3855-push0-instruction","title":"1. Implement EIP-3855 PUSH0 Instruction","text":"<p>EIP-3855 is included in the Shanghai upgrade of Ethereum, which adds a new instruction called <code>PUSH0</code> to the Ethereum Virtual Machine (EVM) to reduce the gas cost of smart contract transactions, and Periander also adds a new governance proposal to be compatible with EIP-3855. On one hand, it can ensure the compatibility between TRON and Ethereum at the virtual machine level, and on the other hand, it also reduces the energy cost of using smart contracts on TRON as well.</p> <ul> <li>TIP: https://github.com/tronprotocol/tips/blob/master/tip-543.md </li> <li>Source Code: https://github.com/tronprotocol/java-tron/pull/5175</li> </ul>"},{"location":"releases/history/#api_3","title":"API","text":""},{"location":"releases/history/#1-add-api-global-rate-limiter","title":"1. Add API global rate limiter","text":"<p>Limiting the API access rate can not only effectively allocate node resources, but also ensure the stable running of a node. In previous versions of Periander, a rate limiter only affected a single interface. You can set the maximum number of accesses per second for an interface, the maximum number of accesses per second for an IP to this interface, and the number of concurrent accesses allowed to this interface. But there is no global rate limiter for all interfaces.</p> <p>In addition to the original rate limit control function for individual interfaces, the Periander version adds a global rate limit for all interfaces. The overall traffic of all HTTP, gRPC and JSON-RPC interfaces can be limited through the configuration item <code>rate.limiter.global.qps</code>, and the access rate of an IP to all interfaces can be limited through <code>rate.limiter.global.ip.qps</code>.</p> <pre><code># QPS rate limit for all interfaces\nrate.limiter.global.qps =10  \n# QPS rate limit to all interfaces from the same IP address\nrate.limiter.global.ip.qps = 5  \n</code></pre> <ul> <li>Source Code: https://github.com/tronprotocol/java-tron/pull/5093</li> </ul>"},{"location":"releases/history/#2-add-data-to-http-interfaces-for-smart-contract-interaction","title":"2. Add <code>data</code> to HTTP Interfaces for Smart Contract Interaction","text":"<p>The Periander version optimizes the HTTP smart contract calling interfaces <code>triggersmartcontract</code>, <code>triggerconstantcontract</code> and <code>estimateenergy</code>, and adds a <code>data</code> parameter to them. This optimization not only realizes the contract call directly through the <code>data</code> field in the transaction but also enables the <code>triggerconstantcontract</code> and <code>estimateenergy</code> interfaces to estimate the energy consumption of smart contract deployment transactions, which greatly improves the convenience of smart contract development.</p> <ul> <li> <p>Calling contract using <code>function_selector</code> and <code>parameter</code> <pre><code>curl --request POST \\\n --url https://api.shasta.trongrid.io/wallet/triggersmartcontract \\\n --header 'accept: application/json' \\\n --header 'content-type: application/json' \\\n --data '\n{\n    \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\",\n  \"contract_address\": \"TG3XXyExBkPp9nzdajDZsozEu4BkaSJozs\",\n  \"function_selector\": \"balanceOf(address)\",\n  \"parameter\": \"000000000000000000000000a614f803b6fd780986a42c78ec9c7f77e6ded13c\",\n  \"visible\": true\n}\n'\n</code></pre></p> </li> <li> <p>Calling contract through <code>data</code> <pre><code>curl --request POST \\\n --url https://api.shasta.trongrid.io/wallet/triggersmartcontract \\\n --header 'accept: application/json' \\\n --header 'content-type: application/json' \\\n --data '\n{\n  \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\",\n  \"contract_address\": \"TG3XXyExBkPp9nzdajDZsozEu4BkaSJozs\",\n  \"data\": \"70a08231000000000000000000000000a614f803b6fd780986a42c78ec9c7f77e6ded13c\",\n  \"visible\": true\n}'\n</code></pre></p> </li> <li> <p>Estimate energy consumption of contract deployment transaction     <pre><code>curl --request POST \\\n --url https://api.shasta.trongrid.io/wallet/triggerconstantcontract \\\n --header 'accept: application/json' \\\n --header 'content-type: application/json' \\\n --data '\n{\n  \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\",\n  \"data\": \"608060405234801561001057600080fd5b50d3801561001d57600080fd5b50d2801561002a57600080fd5b506101c18061003a6000396000f3fe608060405234801561001057600080fd5b50d3801561001d57600080fd5b50d2801561002a57600080fd5b50600436106100455760003560e01c8063f8b2cb4f1461004a575b600080fd5b610064600480360381019061005f919061012a565b61007a565b6040516100719190610170565b60405180910390f35b60008173ffffffffffffffffffffffffffffffffffffffff16319050919050565b600080fd5b600074ffffffffffffffffffffffffffffffffffffffffff82169050919050565b6100ca816100a0565b81146100d557600080fd5b50565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610103826100d8565b9050919050565b600081359050610119816100c1565b610122816100f8565b905092915050565b6000602082840312156101405761013f61009b565b5b600061014e8482850161010a565b91505092915050565b6000819050919050565b61016a81610157565b82525050565b60006020820190506101856000830184610161565b9291505056fea26474726f6e58221220839f9be3efc349a3efd6bb491d0bee7bc34d86313c73f6e6eeddc4719ec69c0064736f6c63430008120033\",\n  \"visible\": true\n}'\n</code></pre></p> </li> <li> <p>TIP: https://github.com/tronprotocol/tips/blob/master/tip-544.md </p> </li> <li>Source Code: https://github.com/tronprotocol/java-tron/pull/5079</li> </ul>"},{"location":"releases/history/#3-optimize-getstorageat-interface","title":"3. Optimize getStorageAt interface","text":"<p>In versions previous to Periander, for contracts created by the <code>create2</code> instruction, the contract data cannot be queried through the getStorageAt interface. This is due to the difference in index construction of contract data in the underlying storage for contracts created using the <code>create</code> instruction and the <code>create2</code> instruction. The Periander version optimizes the getStorageAt interface, which will select the corresponding method to construct the index according to the way the contract was created to ensure the availability of the getStorageAt interface.</p> <ul> <li>Source Code: https://github.com/tronprotocol/java-tron/pull/5061</li> </ul>"},{"location":"releases/history/#other-changes_7","title":"Other Changes","text":""},{"location":"releases/history/#1-optimize-event-forwarding-logic-in-event-subscription","title":"1. Optimize event forwarding logic in event subscription","text":"<p>java-tron supports event subscription. In the previous version of Periander, if the solidified transaction event is subscribed, then when the node receives a new block, it would send the transaction information in the latest solidified block to the subscriber. If the network of most SR nodes is unstable, making them unable to synchronize and produce blocks in time, in this case, according to the calculation logic of the latest solidified block of the node, the height of the latest solidified block will not be guaranteed to increase by one each time. So that the latest obtained solidified block forwarded to the subscriber during event forwarding may not be the block next to the one that was forwarded the last time, resulting in data missing. </p> <p>Since the conditions for this problem are very strict, it will basically not appear in the main network. However, to avoid this problem occurring in the test network or private chain, the Periander version optimizes the event forwarding logic in the event subscription and records the height of the solidified block forwarded last time, so when the node receives a new block, it will sequentially send the blocks after the last forwarded solidified block to the subscribers, ensuring the integrity of data forwarding.</p> <ul> <li>Source Code:  https://github.com/tronprotocol/java-tron/pull/5031</li> </ul>"},{"location":"releases/history/#2-support-dynamic-loading-according-to-nodeactive-and-nodepassive","title":"2. Support dynamic loading according to node.active and node.passive","text":"<p>java-tron supports configuring trusted nodes for the local node with <code>node.active</code> and <code>node.passive</code>. The local node will actively connect to the nodes in <code>node.active</code> and accept the connection request of the nodes in <code>node.passive</code>. By configuring trusted nodes, you can solve the problem that the node has no valid connections or the number of connections is rather small. However, in the previous version of Periander, you need to stop the node first to change the configuration file, and then restart the node after the update is completed. Restarting the node has a certain impact on some applications. Therefore, starting from the Periander version, the dynamic loading of <code>node.active</code> and <code>node.passive</code> configuration items are supported, so that the change of the trusted node can be completed without restarting the local node, which improves the online stability of the node.</p> <p>This function is disabled by default and needs to be enabled by modifying the following node configuration items. <pre><code>node.dynamicConfig.enable=true\nnode.dynamicConfig.checkInterval = 600\n</code></pre></p> <ul> <li>Source Code:  https://github.com/tronprotocol/java-tron/pull/5090</li> </ul>"},{"location":"releases/history/#3-optimize-block-synchronization-logic","title":"3. Optimize block synchronization logic","text":"<p>The Periander version optimizes the block synchronization logic, ensures the correctness of concurrent execution of the block acquisition thread and block synchronization thread, the block summary obtaining thread and chain switching thread through the lock mechanism, and improves the stability of block synchronization and node connection.</p> <ul> <li>Source Code: https://github.com/tronprotocol/java-tron/pull/5094 https://github.com/tronprotocol/java-tron/pull/5097 https://github.com/tronprotocol/java-tron/pull/5102 </li> </ul>"},{"location":"releases/history/#4-normalize-http-urls","title":"4. Normalize HTTP URLs","text":"<p>The node supports disabling the specified HTTP APIs, and the node deployer can configure the interfaces to which the node will stop providing services through the <code>node.disabledApi</code>. In previous versions of Periander, even if the interface was added to the <code>node.disabledApi</code> list, the node would still respond to non-standard URL requests. The Periander version normalizes the requested URL to ensure the validity of the <code>node.disabledApi</code> list.</p> <pre><code>node.disabledApi= [\n   \"getaccount\",\n    \"getnowblock2\"\n]\n</code></pre> <ul> <li>Source Code: https://github.com/tronprotocol/java-tron/pull/5085 </li> </ul>"},{"location":"releases/history/#5-optimize-block-fetching-logic","title":"5. Optimize block fetching logic","text":"<p>After a node requests a block from another node, if it does not receive the block within a certain period of time, the request will be considered as a timeout, and then it will request the block from another node that meets the conditions. Of which, one of the conditions for selecting a node is that the node's <code>block acquisition delay</code> is lower than the <code>block timeout period</code>. Therefore, a low <code>block timeout</code> setting may make the node unable to find other remote nodes, resulting in slow block synchronization or stopping the synchronization.</p> <p>In order to improve block synchronization performance under an unstable network, the Periander version increases the default value of the timeout period for nodes to obtain blocks, from 200ms to 500ms, which not only expands the scope of node selection but also increases the probability of successfully obtaining blocks, greatly improving the efficiency of block synchronization. The node deployer can also adjust the timeout period through the <code>node.fetchBlock.timeout</code> configuration item.</p> <ul> <li>Source Code: https://github.com/tronprotocol/java-tron/pull/5106</li> </ul>"},{"location":"releases/history/#6-add-a-new-node-startup-mode","title":"6. Add a new node startup mode","text":"<p>In order to facilitate data backup or data statistics for node deployers, the client supports stopping running under specific conditions. Users can set the conditions for node stop through the node configuration file. When the conditions are met, the node will stop syncing and exit. However, in the versions previous to Periander, the node only supports stopping under certain conditions and does not support the interface query service after stopping, so users cannot call the interface to query the status of the system. Therefore, the Periander version adds a new node startup mode to support data query services without starting the P2P network module. When the node successfully stops under certain conditions, the user can add <code>-p2p- disable true</code> parameter to the command to start the node. At this time, the node will not start the network module, and will not perform node discovery and block synchronization, but will provide interface query services, so that users can query the current system status. Below is the start command:</p> <pre><code>java -jar FullNode.jar -c config.conf --p2p-disable true \n</code></pre> <ul> <li>Source Code:  https://github.com/tronprotocol/java-tron/pull/5011</li> </ul>"},{"location":"releases/history/#7-upgrade-junit-to-4132","title":"7. Upgrade JUnit to 4.13.2","text":"<p>The Periander version upgrades the unit testing framework and upgrades the JUnit dependency library from v4.12 to v4.13.2.</p> <ul> <li>Source Code: https://github.com/tronprotocol/java-tron/pull/5244 </li> </ul>"},{"location":"releases/history/#8-add-monitoring-metrics-for-json-rpc","title":"8. Add monitoring metrics for JSON-RPC","text":"<p>The Periander version supports JSON-RPC interface latency monitoring metrics, allowing node deployers to monitor the latency of all types of interfaces.</p> <ul> <li>Source Code: https://github.com/tronprotocol/java-tron/pull/5222 </li> </ul>"},{"location":"releases/history/#9-optimize-the-database-module","title":"9. Optimize the database module","text":"<p>In versions previous to Periander, for nodes using LevelDB as the storage engine, if the LevelDB database is detected to be damaged during the startup period, it will try to repair the data. Although this function can repair the data, it cannot guarantee the integrity of the data. Therefore, the Periander version optimizes the database module and removes the LevelDB data automatic repair function, so that when the node detects that the database is damaged, it immediately reports an error and exits, avoiding invalid synchronization.</p> <ul> <li>Source Code: https://github.com/tronprotocol/java-tron/pull/5223 </li> </ul>"},{"location":"releases/history/#10-optimize-checkpoint-v2-recovery-process","title":"10. Optimize checkpoint v2 recovery process","text":"<p>In order to solve the problem of node database corruption caused by the abnormal shutdowns, starting from GreatVoyage-v4.6.0 (Socrates), the Checkpoint V2 mechanism is introduced. The V2 mechanism will save multiple checkpoints on the disk, corresponding to multiple solidified block data, which is used to restore the data when the node database is damaged. </p> <p>This function needs to periodically clean up expired checkpoints. Since the operation of deleting expired checkpoints is not an atomic operation, this will lead to the situation that expired checkpoints may not be completely deleted when the machine is abnormally shut down, that is, there may be damaged checkpoints. Therefore, the Periander version optimizes the automatic repair function of checkpoint v2. When restoring data, all expired checkpoints are skipped, avoiding the situation of using damaged checkpoints to repair data, and improving the stability of nodes.</p> <ul> <li>Source Code: https://github.com/tronprotocol/java-tron/pull/5224</li> </ul> <p>Forethought in all things. </p> <p> ---Periander</p>"},{"location":"releases/history/#greatvoyage-v4711-pittacus","title":"GreatVoyage-v4.7.1.1 (Pittacus)","text":"<p>GreatVoyage-v4.7.1.1 (Pittacus) version optimized multiple interfaces and removed APIs involving sensitive information.</p> <p>Please see the details below.</p>"},{"location":"releases/history/#api_4","title":"API","text":""},{"location":"releases/history/#1-remove-apis-involving-sensitive-information","title":"1. Remove APIs involving sensitive information","text":"<p>Versions prior to GreatVoyage-v4.7.1.1 (Pittacus) provide APIs related to signature and address generation. Since the input or output of these APIs contains private keys, there are security risks in transmission in the network. At present, public API service providers in the TRON ecosystem have closed these APIs, such as TronGrid, Anker, GetBlock, etc. In the developer document, these APIs have already been tagged as obsolete and it is recommended to sign transactions and create addresses offline using SDK.</p> <p>GreatVoyage-v4.7.1.1(Pittacus) officially removes these APIs:</p> <ul> <li>HTTP<ul> <li><code>createaddress</code>: Create an address based on the specified password</li> <li><code>generateaddress</code>: Create address randomly</li> <li><code>easytransfer</code>: Transfer TRX with password</li> <li><code>easytransferbyprivate</code>: Transfer TRX with private key</li> <li><code>easytransferasset</code>: Transfer TRC10 token with password</li> <li><code>easytransferassetbyprivate</code>: Transfer TRC10 token with private key</li> <li><code>gettransactionsign</code>: Sign transaction with private key</li> <li><code>addtransactionsign</code>: Sign transaction with private key which is mainly used to sign multi-signature transactions</li> </ul> </li> <li>gRPC<ul> <li><code>CreateAddress</code>: Create an address based on the specified password</li> <li><code>GenerateAddress</code>: Create address randomly</li> <li><code>EasyTransfer</code>: Transfer TRX with password</li> <li><code>EasyTransferByPrivate</code>: Transfer TRX with private key</li> <li><code>EasyTransferAsset</code>: Transfer TRC10 token with password</li> <li><code>EasyTransferAssetByPrivate</code>: Transfer TRC10 token with private key</li> <li><code>GetTransactionSign</code>: Sign transaction with private key</li> <li><code>GetTransactionSign2</code>: Sign transaction with private key</li> <li><code>AddSign</code>: Sign transaction with private key which is mainly used to sign multi-signature transactions</li> </ul> </li> </ul> <p>TIP: https://github.com/tronprotocol/tips/issues/534</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5096 </p>"},{"location":"releases/history/#2-optimize-resource-delegate-information-query-interface","title":"2. Optimize resource delegate information query interface","text":"<p>The <code>/wallet/getdelegatedresourcev2</code> interface can query the resources that an address delegates to another address, and resource delegate can choose whether to be locked. For 2 resource delegation to the same address, one of them may be locked, and the other may be not locked, so <code>/wallet/getdelegatedresourcev2</code> interface will return two sets of information: locked resource delegation data and unlocked resource delegation data. In versions prior to GreatVoyage-v4.7.1.1 (Pittacus), if all the resource delegation by one address to another address are locked, then the non-locked resource delegation data will be 0. In this case, the interface may also return non-locked resource delegation data (0 value which is meaningless). The GreatVoyage-v4.7.1.1 (Pittacus) version optimizes the <code>/wallet/getdelegatedresourcev2</code> interface, and only returns resource delegation data with non-zero value, making the returned data more concise and clear.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5123 </p>"},{"location":"releases/history/#other-changes_8","title":"Other Changes","text":""},{"location":"releases/history/#1-optimize-the-update-logic-of-the-origin_energy_usage-field-in-the-transaction-receipt","title":"1. Optimize the update logic of the <code>origin_energy_usage</code> field in the transaction receipt","text":"<p>The TRON network supports contract deployers to share part of the contract call cost. In order to facilitate users to query the energy consumption of contract transactions, in addition to recording the total energy consumption of the transaction through the <code>energy_usage_total</code> field, the transaction receipt will also record the amount of energy paid by the contract deployer through the <code>origin_energy_usage</code> field. <code>energy_usage_total</code> contains <code>origin_energy_usage</code>. </p> <p>In versions prior to GreatVoyage-v4.7.1.1 (Pittacus), in rare cases, the <code>energy_usage_total</code> field is 0 while the <code>origin_energy_usage</code> field is not 0 when querying through <code>/wallet/gettransactioninfobyid</code> API. Therefore the GreatVoyage-v4.7.1.1 (Pittacus) version optimizes the update logic of <code>origin_energy_usage</code> in the transaction receipt to ensure the accuracy of querying the consumed energy of the contract deployer.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/5120 </p> <p>Whatever you do, do it well. </p> <p> ---Pittacus</p>"},{"location":"releases/history/#greatvoyage-v471sartre","title":"GreatVoyage-v4.7.1(Sartre)","text":"<p>GreatVoyage-v4.7.1(Sartre) introduces several important optimizations and updates. The optimized block synchronization logic improves the stability of block synchronization; the optimized node IP setting improves the availability of nodes; the optimized node log improves the maintainability of nodes.</p> <p>Please see the details below.</p>"},{"location":"releases/history/#cores","title":"Cores","text":""},{"location":"releases/history/#1-optimize-the-node-ip-setting","title":"1. Optimize the node IP setting","text":"<p>When the node starts, it will obtain the local IP of the node, and then use this IP to communicate with other nodes in the network. If the node cannot access the external network, it will not be able to obtain the local IP. At this time, the node will set its local IP to the default value of 0.0.0.0, and this IP will make the node even unable to communicate with other nodes successfully in the LAN. So the GreatVoyage- v4.7.1 (Sartre) version changes the default IP of the node. If the node cannot obtain the local IP, it will set its local IP to 127.0.0.1, so that even if the node cannot access the external network, it can still communicate with other nodes in the LAN normally. </p> <p>Source code: https://github.com/tronprotocol/java-tron/pull/4990 </p>"},{"location":"releases/history/#2-optimize-block-synchronization-logic","title":"2. Optimize block synchronization logic","text":"<p>During the block synchronization process, the node will maintain a block request list, which contains the IDs of all blocks that have sent requests to other nodes. When the connection between the node and node A is abnormally disconnected with a very small probability, the block ID that is being requested to node A will be deleted from the request list. After that, the node will think that it has not requested the block, and then send the block request to node B and add the block ID to the request list again. Before this node disconnects with node A, the requested block may have already been sent by node A\uff0cand it is received by the node after disconnecting. Since the node found that the block is from node A that has already been disconnected, it will discard the block, and delete the block ID from the request list again, this will lead to the node to send a request for the same block to node B again. When Node B receives the repeated block request, it will consider it an illegal message and disconnect from the node.</p> <p>In order to improve the efficiency of block synchronization in concurrent scenarios, the GreatVoyage-v4.7.1 (Sartre) version optimized the update mechanism of the block request list, and saved the block ID and node information in the request list at the same time. In the above scenario, after receiving a block from node A that has been disconnected, the same block ID requested from node B will not be deleted from the request list to ensure that it will not be disconnected from node B, thereby improving the stability of block synchronization.</p> <p>Source code: https://github.com/tronprotocol/java-tron/pull/4995 </p> <p>When a node synchronizes blocks from other nodes, it needs to obtain the local block chain summary of the node. The summary includes the IDs of several blocks including the local header block. In versions prior to GreatVoyage-v4.7.1 (Sartre), when obtaining the summary, the node will first query the Dynamic database to obtain the block height, and then query the Block database to obtain the ID of the block according to the block height. However, when the node is processing a block, the writing to each database is not carried out at the same time. The node will first update the Dynamic database, and then update other databases such as Block. As a result, in versions prior to GreatVoyage-v4.7.1 (Sartre), the following scenario will occur with a very small probability: when the latest block information is only written into the Dynamic database, but have not yet been written into the block database, the node starts to obtain the summary. In this situation the corresponding block ID will not be found in the block database according to the head block height obtained from the Dynamic database, leading to the summary reading fail. The GreatVoyage-v4.7.1 (Sartre) version optimizes the block chain summary acquisition logic. The ID of the head block is directly obtained from the Dynamic database instead of the Block database, which improves the stability of summary reading.</p> <p>Source code: https://github.com/tronprotocol/java-tron/pull/5009 </p> <p>The GreatVoyage-v4.7.1 (Sartre) version optimizes the lock mechanism during block synchronization and improves the stability of the node connection under concurrency.</p> <p>Source code: https://github.com/tronprotocol/java-tron/pull/4996 </p>"},{"location":"releases/history/#api_5","title":"API","text":""},{"location":"releases/history/#1-optimize-the-list-of-solidified-block-apis","title":"1. Optimize the list of solidified block APIs","text":"<p>GreatVoyage-v4.7.1(Sartre) version deletes the useless solidified block query API to make the code more clearer.</p> <p>Source code: https://github.com/tronprotocol/java-tron/pull/4997 </p>"},{"location":"releases/history/#2-optimize-resource-delegation-relationship-api","title":"2. Optimize resource delegation relationship API","text":"<p>GreatVoyage-v4.7.1 (Sartre) version optimizes the resource delegation relationship query API, adds the check to the interface parameters, and makes the interface more stable.</p>"},{"location":"releases/history/#other-changes_9","title":"Other Changes","text":""},{"location":"releases/history/#1-optimize-litefullnode-detection-logic","title":"1. Optimize LiteFullNode detection logic","text":"<p>In versions prior to GreatVoyage-v4.7.1 (Sartre), different modules of the node have different logics for detecting whether the current node is a LiteFullNode. GreatVoyage-v4.7.1 (Sartre) version unifies the logic of light node judgment, making the code more concise.</p> <p>Source code: https://github.com/tronprotocol/java-tron/pull/4986 </p>"},{"location":"releases/history/#2-optimize-node-log-output","title":"2. Optimize node log output","text":"<p>The Database Log</p> <p>Starting from GreatVoyage-v4.7.0.1 (Aristotle), the logs of LevelDB or RocksDB databases are redirected to the node log file, which simplifies the difficulty of database troubleshooting. GreatVoyage-v4.7.1 (Sartre) further optimizes the log module, Output database logs to a separate db.log file to make node logs clearer.</p> <p>Source code: https://github.com/tronprotocol/java-tron/pull/4985 https://github.com/tronprotocol/java-tron/pull/5001 https://github.com/tronprotocol/java-tron/pull/5010</p> <p>The Event Service Module Log</p> <p>Remove invalid logging output for event service module.</p> <p>Source code: https://github.com/tronprotocol/java-tron/pull/4974 </p> <p>The network module log </p> <p>Optimized the log output of the network module, outputting Error-level logs for received abnormal blocks, and outputting Warn-level logs for network requests that have already timed out, improving the efficiency of troubleshooting network-related problems.</p> <p>Source code: https://github.com/tronprotocol/java-tron/pull/4977</p> <p>The more sand that has escaped from the hourglass of our life, the clearer we should see through it. </p> <p> ---Sartre</p>"},{"location":"releases/history/#greatvoyage-v4701aristotle","title":"GreatVoyage-v4.7.0.1(Aristotle)","text":"<p>GreatVoyage-v4.7.0.1 (Aristotle) introduces several important optimizations and updates. The new stake mechanism, Stake 2.0, improves the flexibility of the resource model and the stability of the stake system; the dynamic energy model helps to promote ecologically balanced development; the secondary cache mechanism optimizes the database reading performance, improves transaction execution performance, and expands the network throughput; uses the libp2p library as the java-tron P2P network module to make the code structure clearer and reduce code coupling; optimizes the log output, redirect the logs of LevelDB and RocksDB to java-tron log files; integrate more tools and functions into the \u2018Toolkit.jar\u2019 toolbox to bring users a more convenient development experience.</p> <p>Please see the details below.</p>"},{"location":"releases/history/#cores_1","title":"Cores","text":""},{"location":"releases/history/#1-a-new-stake-model-stake-20","title":"1. A new stake model - Stake 2.0","text":"<p>GreatVoyage-v4.7.0.1 (Aristotle) version introduces a new stake model, Stake 2.0, aiming to establish a more flexible, efficient and stable stake system. Compared with the current Stake 1.0 model, Stake 2.0 has been improved in the following aspects,</p> <ul> <li> <p>Staking and delegating are separated</p> <p>In Stake 1.0, staking and resource delegating are combined in one operation. The resource recipient must be specified in the operation. After the staking is completed, the resource will be delegated to the designated resource recipient. The unstaking and undelegating are also combined in one operation. If you want to cancel the delegating, you must unstake the corresponding TRX as well. Stake 2.0 separates staking and resource delegating into two independent operations. The user executes the staking first, the resource selected is allocated to the owner now. And then executes the delegate operation to assign the resource to the designated address. Unstaking and undelegating are also separated into two operations. If the user wants to cancel the delegating, he or she can directly perform the undelegate operation without unstaking and then can delegate the resource to others again as needed. Separation of staking/unstaking and delegating/undelegating simplifies user operations and reduces operational complexity.</p> </li> <li> <p>Resource Fragmentation Management</p> <p>In Stake 1.0, one unstake operation will unstake all the staked TRX, and the specified amount of TRX cannot be unstaked. This is optimized in Stake 2.0 now. We can specify an amount of TRX to unstake, as long as the specified amount is less than or equal to the total staked amount. In Stake 1.0, to cancel a certain resource delegate, you can only cancel all delegated resources at once, and you cannot cancel by specifying an amount. Stake 2.0 has also brought partially undelegate, we can now undelegate part of the delegated resources as needed, which improves the flexibility of resource management.</p> </li> <li> <p>Unstake Lock Period and Delayed Arrival of Unstaked TRX</p> <p>In Stake 1.0, after staking TRX, we need to wait 3 days before releasing the TRX. After the release, the TRX staked will immediately arrive in the owner\u2019s account. In Stake 2.0, after the staking is completed, the TRX staked can be released at any time, but it needs to wait for \u2019N\u2019 days. After the \u2019N\u2019 days delay, the TRX released could be withdrawn to the owner\u2019s account. \u2019N\u2019 is the TRON network parameter. When the TRX market fluctuates violently, due to the delayed arrival of funds, it will no longer trigger a large number of stake or unstake operations, which improves the stability of the stake model, and at the same time will not cause a large number of funds to flood into the market and aggravate market volatility. It helps to build a more anticipated future of the entire network circulation for the network participants.</p> </li> <li> <p>TVM Supports Staking and Resource Management</p> <p>In Stake 2.0, the TRON virtual machine integrates instructions related to stake and resource management. Users can perform TRX stake/unstake operations in smart contracts, as well as perform resource delegate/undelegate operations.</p> </li> </ul> <p>For more details on Stake 2.0, please refer to  What is Stake 2.0?</p> <p>The new stake mechanism is a dynamic parameter in the TRON network. After GreatVoyage-v4.7.0.1 (Aristotle) is deployed, it is disabled by default and can be enabled by initiating a proposal vote.</p> <ul> <li>TIP: https://github.com/tronprotocol/tips/issues/467 </li> <li>Source code: https://github.com/tronprotocol/java-tron/pull/4838 </li> </ul>"},{"location":"releases/history/#2enhance-database-query-performance","title":"2.Enhance database query performance","text":"<p>java-tron uses memory and disk databases for data storage. The solidified block data will be stored in multiple disk databases, and the unsolidified data will be stored in memory. When a block is solidified, the corresponding in-memory data is written to the disk databases. When querying data, first query the data in memory, if not found, then query the disk database. The disk database query is time-consuming. Therefore, the GreatVoyage-v4.7.0.1 (Aristotle) version optimizes the database query performance and adds a secondary cache before performing the underlying disk database operation. When data is written to the disk, the data is also written to the second-level cache. When the disk database needs to be queried, if the data to be queried exists in the second-level cache, it will be returned directly without querying the disk database. The second-level cache reduces the number of queries to the disk database, improves transaction execution speed, and improves network throughput.</p> <ul> <li>Source code: https://github.com/tronprotocol/java-tron/pull/4740 </li> </ul>"},{"location":"releases/history/#3-optimize-block-production-process","title":"3. Optimize block production process","text":"<p>When a node produces a block, it will sequentially verify and execute all transactions that can be packaged into the block, and each transaction verification and execution will involve the acquisition of block data, such as block number, block size, block transaction information, etc. In versions prior to GreatVoyage-v4.7.0.1 (Aristotle), when nodes package transactions, block data is recalculated during the process of verifying and executing each transaction, which includes many repeated calculations.</p> <p>In order to improve the efficiency of packaging transactions, the GreatVoyage-v4.7.0.1 (Aristotle) optimizes the block production process, only calculates the block data once and updates the data only when necessary, thus greatly reducing the number of block data calculations and improving the block packaging efficiency.</p> <ul> <li>Source code: https://github.com/tronprotocol/java-tron/pull/4756 </li> </ul>"},{"location":"releases/history/#4-add-transaction-hash-cache","title":"4. Add transaction hash cache","text":"<p>When a node processes a block, it will use the transaction hash value multiple times. In versions before GreatVoyage-v4.7.0.1 (Aristotle), the transaction hash value is calculated as it is used, and the calculation of the transaction hash value is time-consuming, which leads to slower block processing. Therefore, GreatVoyage-v4.7.0.1 (Aristotle) adds a transaction hash cache, the transaction hash will be directly obtained from the cache when used. Only when the transaction data changes, the transaction hash is recalculated. The newly added cache reduces unnecessary transaction hash calculations and improves block processing speed.</p> <ul> <li>Source code: https://github.com/tronprotocol/java-tron/pull/4792 </li> </ul>"},{"location":"releases/history/#5-add-libp2p-module-as-java-tron-p2p-network-protocol-implementation","title":"5. Add <code>libp2p</code> module as java-tron p2p network protocol implementation","text":"<p>Starting from GreatVoyage-v4.7.0.1 (Aristotle), the libp2p library will be directly used as the P2P network module of java-tron, instead of using the original p2p network stack, so that the code structure is clearer, the code coupling is lower, and is easy to maintain.</p> <ul> <li>Source code: https://github.com/tronprotocol/java-tron/pull/4791 </li> </ul>"},{"location":"releases/history/#tvm_3","title":"TVM","text":""},{"location":"releases/history/#1-add-new-instructions-to-support-stake-20","title":"1. Add new instructions to support Stake 2.0","text":"<p>GreatVoyage-v4.7.0.1 (Aristotle) introduces Stake 2.0, TVM will support Stake 2.0 related stake and resource delegate instructions simultaneously. Users can perform stake and resource delegate operations through smart contracts, which further enriches the application scenarios of smart contracts on the TRON network. A total of 6 instructions from 0xda to 0xdf have been added to TVM:</p> ID TVM instruction Description 0xda FREEZEBALANCEV2 Performs the same operation as the system contract FreezeBalanceV2 for contract account 0xdb UNFREEZEBALANCEV2 Performs the same operation as the system contract UnfreezeBalanceV2 for contract account 0xdc CANCELALLUNFREEZEV2 Cancel all pending unfreeze balances for contract account 0xdd WITHDRAWEXPIREUNFREEZE Performs the same operation as the system contract WithdrawExpireUnfreeze for contract account 0xde DELEGATERESOURCE Performs the same operation as the system contract DelegateResource for contract account 0xdf UNDELEGATERESOURCE Performs the same operation as the system contract UnDelegateResource for contract account <p>A total of 11 precompiled contracts from 0x100000b to 0x1000015 have been added to TVM:</p> ID Precompiled Contract Description 0x100000b GetChainParameter Query the specific chain parameters 0x100000c AvailableUnfreezeV2Size Query the size of the available unfreeze queue for target address 0x100000d UnfreezableBalanceV2 Query the unfreezable balance of a specified resourceType for target address 0x100000e ExpireUnfreezeBalanceV2 Query the withdrawal balance at the specified timestamp for target address 0x100000f DelegatableResource Query the amount of delegatable resources(unit: SUN) of the specified resourceType for the target address 0x1000010 ResourceV2 Query the amount of resources(unit: SUN) of a specific resourceType delegated by from address to target address 0x1000011 CheckUnDelegateResource Check whether the contract can recycle the specified amount of resources of a specific resourceType that have been delegated to target address, and return the amount of clean resource(unit: SUN), the amount of dirty resource(unit: SUN) and the restore time 0x1000012 ResourceUsage Query the usage of a specific resourceType of resources for target address, and return the amount of usage(unit: SUN) and the restore time 0x1000013 TotalResource Query the total amount of resources(unit: SUN) of a specific resourceType for target address 0x1000014 TotalDelegatedResource Query the amount of delegated resources of a specific resourceType for target address 0x1000015 TotalAcquiredResource Query the amount of acquired resources(unit: SUN) of a specific resourceType for target address <p>Stake 2.0 is a dynamic parameter in the TRON network. After GreatVoyage-v4.7.0.1 (Aristotle) is deployed, it is disabled by default and can be enabled by initiating a proposal vote.</p> <ul> <li>TIP: https://github.com/tronprotocol/tips/issues/467 </li> <li>Source code: https://github.com/tronprotocol/java-tron/pull/4872 </li> </ul>"},{"location":"releases/history/#2-dynamic-energy-model","title":"2. Dynamic energy model","text":"<p>The dynamic energy model is a scheme to dynamically adjust the future energy consumption of the contract based on the known energy usage of the contract. If a contract uses too many resources in one cycle, then the next cycle in this contract, a certain percentage of punitive consumption will be added, and users who send the same transaction to this contract will cost more energy than before. When the contract uses resources reasonably, the energy consumption generated by the user calling the contract will gradually return to normal. Through this mechanism, the allocation of energy resources on the chain will be more reasonable, and excessive concentration of network resources on a few contracts will be prevented. </p> <p>For more information about the dynamic energy model: Introduction to Dynamic Energy Model</p> <p>The dynamic energy model is a dynamic parameter in the TRON network. After GreatVoyage-v4.7.0.1 (Aristotle) is deployed, it is disabled by default and can be enabled by initiating a proposal vote.</p> <ul> <li>TIP: https://github.com/tronprotocol/tips/issues/491 </li> <li>Source code: https://github.com/tronprotocol/java-tron/pull/4873 </li> </ul>"},{"location":"releases/history/#3-optimize-the-return-value-of-the-chainid-opcode","title":"3. Optimize the return value of the <code>chainId</code> opcode","text":"<p>Starting from the GreatVoyage-v4.7.0.1 (Aristotle) version, the return value of the <code>chainid</code> opcode is changed from the block hash of the genesis block to the last four bytes of the block hash of the genesis block, keeping the return value of the chainid opcode consistent with the return value of the java-tron JSON-RPC <code>eth_chainId</code> API.</p> <p>The return value optimization of the chainId opcode is a dynamic parameter of the TRON network. It is disabled by default after GreatVoyage-v4.7.0.1 (Aristotle) is deployed, and can be enabled by initiating a proposal.</p> <ul> <li>TIP: https://github.com/tronprotocol/tips/issues/474 </li> <li>Source code: https://github.com/tronprotocol/java-tron/pull/4863 </li> </ul>"},{"location":"releases/history/#api_6","title":"API","text":""},{"location":"releases/history/#1-add-apis-to-support-stake-20","title":"1. Add APIs to support Stake 2.0","text":"<p>GreatVoyage-v4.7.0.1 (Aristotle) adds 10 APIs to support Stake 2.0:</p> API Description /wallet/freezebalancev2 Stake TRX to obtain resources /wallet/unfreezebalancev2 Unstake TRX /wallet/delegateresource Delegate resources to other account /wallet/undelegateresource Undelegate resource /wallet/withdrawexpireunfreeze Withdraw the funds that has expired the <code>N</code> lock-up period /wallet/getavailableunfreezecount Query the remaining times of available unstaking operation /wallet/getcanwithdrawunfreezeamount Query the withdrawable balance at the specified timestamp /wallet/getcandelegatedmaxsize Query the amount of delegatable resources of the specified resource type for target address /wallet/getdelegatedresourcev2 Query the resource delegate amount from an address to the target address (unit: sun) /wallet/getdelegatedresourceaccountindexv2 Query the resource delegate amount from an address to the target address (unit: sun) <p>For detailed information of new APIs, please refer to: What is Stake 2.0?</p> <ul> <li>TIP: https://github.com/tronprotocol/tips/issues/467 </li> <li>Source code: https://github.com/tronprotocol/java-tron/pull/4838 </li> </ul>"},{"location":"releases/history/#2-add-energy-estimation-api","title":"2. Add energy estimation API","text":"<p>In versions prior to GreatVoyage-v4.7.0.1 (Aristotle), users can estimate the energy consumption for executing smart contract transactions through the <code>/wallet/triggerconstantcontract</code> interface, and then set the <code>feelimit</code> parameter of the transaction according to the estimated consumption. However, since some smart contract transactions may call other smart contracts, it is possible that the estimated <code>feelimit</code> parameter is inaccurate.</p> <p>Therefore, the GreatVoyage-v4.7.0.1(Aristotle) version adds an energy estimation interface <code>/wallet/estimateenergy</code>, and the <code>feelimit</code> estimated by this interface is reliable in any case. The <code>energy_required</code> field in the return value of this interface indicates the estimated amount of energy required for the successful execution of this smart contract transaction. So user can calculate the <code>feelimit</code> parameter based on this field: <code>feelimit</code> = <code>energy_required</code> * energy unit price, currently the unit price of energy is 100 sun.</p> <p>If the execution of the estimated interface call fails for some reason, the value of the <code>energy_required</code> field will be 0, and this field will not be displayed in the return value. At this time, you can check the reason for the execution failure for the estimated interface call through the <code>result</code> field.</p> <p>After the GreatVoyage-v4.7.0.1 (Aristotle) version is successfully deployed, this API is closed by default. To open this interface, the two configuration items <code>vm.estimateEnergy</code> and <code>vm.supportConstant</code> must be enabled in the node configuration file at the same time. The default values of <code>vm.estimateEnergy</code> and <code>vm.supportConstant</code> are both false.</p> <p>An example of <code>/wallet/estimateenergy</code> call is as follows:</p> <pre><code>curl --location --request POST 'https://api.nileex.io/wallet/estimateenergy' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n     \"owner_address\": \"TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\",\n     \"contract_address\": \"TXLAQ63Xg1NAzckPwKHvzw7CSEmLMEqcdj\",\n     \"function_selector\": \"transfer(address,uint256)\",\n     \"parameter\": \"0000000000000000000000002EEF13ADA48F286066F9066CE84A9AD686A3EA480000000000000000000000000000000000000000000000000000000000000004\",\n     \"visible\": true\n}'\n</code></pre> <ul> <li>Source code: https://github.com/tronprotocol/java-tron/pull/4873 </li> </ul>"},{"location":"releases/history/#other-changes_10","title":"Other Changes","text":""},{"location":"releases/history/#1-optimize-gradle-compilation-parameters","title":"1. Optimize Gradle compilation parameters","text":"<p>GreatVoyage-v4.7.0.1(Aristotle) optimizes the compiling parameters of Gradle, configuring JVM minimum heap size to 1GB, which improves the compilation speed of java-tron.</p> <ul> <li>Source code: https://github.com/tronprotocol/java-tron/pull/4837 </li> </ul>"},{"location":"releases/history/#2-optimize-node-conditional-stop-function","title":"2. Optimize node conditional stop function","text":"<p>In order to facilitate data backup or data statistics for node deployers, starting from GreatVoyage-v4.5.1 (Tertullian), nodes support stopping under specific conditions. Users can set the conditions for node stopping through the node configuration file, and the node will stop running when the conditions are met. It supports three stop conditions to be set at the same time, and the node is stopped when any condition is met. These three conditions include block time, block height, and the number of blocks that need to be synchronized from the start to the stop of the node. However, since multiple stop conditions are allowed to be set at the same time, when the user only needs one condition,  the other 2 conditional configuration items in the configuration file need to be deleted, so if the user forgets to delete, the node may stop on an unexpected block. However, there are actually no application scenarios that require multiple conditions to be set at the same time. Therefore, the GreatVoyage-v4.7.0.1 (Aristotle) version optimizes the node conditional stop function. The optional configuration parameters remain unchanged, but only one valid parameter is allowed to be set at the same time. If the node deployer sets multiple parameters, the node will report an error and exit run. This optimization simplifies the complexity of users\u2019 settings.</p> <ul> <li>Source code:  https://github.com/tronprotocol/java-tron/pull/4853 https://github.com/tronprotocol/java-tron/pull/4858 </li> </ul>"},{"location":"releases/history/#3-delete-code-related-to-database-v1","title":"3. Delete code related to database v1","text":"<p>In versions prior to GreatVoyage-v4.7.0.1 (Aristotle), there are two versions of the database, v1 and v2. Users can choose from them through the configuration item <code>db.version</code>. Since the v2 version adopts the memory + disk database mode, it supports the expansion of the underlying database, the correct data recovery function under abnormal conditions, etc., and has obvious advantages compared with v1. Therefore, in order to make the code structure clearer, starting from GreatVoyage-v4.7.0.1 (Aristotle), the code related to the database v1 version and the database version configuration item <code>db.version</code> has been deleted. Users no longer need to configure the database version, only v2 is available from now on, which reduces the complexity of configuring nodes.</p> <ul> <li>Source code:  https://github.com/tronprotocol/java-tron/pull/4836</li> </ul>"},{"location":"releases/history/#4-optimize-database-log-output","title":"4. Optimize database log output","text":"<p>In versions prior to GreatVoyage-v4.7.0.1 (Aristotle), the node logs do not include the underlying logs output by LevelDB or RocksDB itself, making it difficult to troubleshoot database read and write problems. Therefore, the GreatVoyage-v4.7.0.1 (Aristotle) optimizes the database log and redirects the output of the underlying log of the LevelDB or RocksDB data module to the node log file, which simplifies the difficulty of database troubleshooting and improves the reliability of node operation and maintenance efficiency.</p> <ul> <li>Source code:  https://github.com/tronprotocol/java-tron/pull/4833 </li> </ul>"},{"location":"releases/history/#5-make-snapshot-flush-speed-configurable","title":"5. Make snapshot flush speed configurable","text":"<p>Nodes newly added to the network need to synchronize block data from other nodes, and the nodes will first save the synchronized block data in memory, and then store it on disk. In versions prior to GreatVoyage-v4.7.0.1 (Aristotle), when a node synchronizes the blocks, a flush operation will write the data of 500 blocks from the memory to the disk, so more than 500 blocks data will be kept in the memory, and each block data is associated through a linked list. When querying data, it will first search in these more than 500 blocks in sequence, and then query the disk database when the data to be queried is not found, but traversing more than 500 block data reduces the efficiency of data query.</p> <p>Therefore, starting from the GreatVoyage-v4.7.0.1 (Aristotle) version, the number of snapshot flush can be configured, and the maximum number of snapshot flush at one time can be set through the configuration item: <code>storage.snapshot.maxFlushCount</code> to maximize the efficiency of database query and improve block processing speed. If the configuration item is not set, the maximum number of snapshots flush into the dish is the default value of 1.</p> <ul> <li>Source code: https://github.com/tronprotocol/java-tron/pull/4834 </li> </ul>"},{"location":"releases/history/#6-toolkitjar-integration","title":"6. Toolkit.jar Integration","text":"<p><code>DBConvert.jar</code> is a database conversion tool, which can convert LevelDB into RocksDB; <code>LiteFullNodeTool.jar</code> is a light FullNode tool, which can convert FullNode data into LiteFullNode data. Starting from GreatVoyage-v4.7.0.1 (Aristotle), <code>DBConvert.jar</code> and <code>LiteFullNodeTool.jar</code> have been integrated into the <code>Toolkit.jar</code> toolbox, and a database copy function is added which can realize fast Node database copy. In the future, the tools around java-tron will be gradually integrated into the <code>Toolkit.jar</code> toolbox in order to facilitate tool maintenance and developer use. The commands for using the new functions of the <code>Toolkit.jar</code> toolbox are as follows:</p> <pre><code>// Convert LevelDB data to RocksDB data\njava -jar Toolkit.jar db convert -h\n// convert FullNode data into LiteFullNode data\njava -jar Toolkit.jar db lite -h\n// Database copy\njava -jar Toolkit.jar db copy -h\n</code></pre> <ul> <li>Source code: https://github.com/tronprotocol/java-tron/pull/4813 </li> </ul> <p>Courage is the first of human qualities because it is the quality that guarantees others. </p> <p> --- Aristotle</p>"},{"location":"releases/history/#greatvoyage-v460-socrates","title":"GreatVoyage-v4.6.0 (Socrates)","text":"<p>The GreatVoyage-v4.6.0 (Socrates) introduces several important optimizations and updates, such as an optimized database checkpoint mechanism, which improves the stability of node operation; optimized resource delegate relationship index structure, and an updated voting reward algorithm, which speed up the execution speed of transactions and increase network throughput; a new proposal to add transaction memo fees, increasing the cost of transactions with memo to reduce the number of low-value transactions, so that improves the security and reliability of the TRON network. The integrated toolkit, new network-related Prometheus metrics, and new help command line together bring users a more convenient development experience.</p> <p>Please check below for details.</p>"},{"location":"releases/history/#core_6","title":"Core","text":""},{"location":"releases/history/#1-optimize-delegate-relationship-index-structure","title":"1. Optimize delegate relationship index structure","text":"<p>In the TRON network, accounts can delegate resources to other accounts through staking, and can also accept resources that other accounts stake for themselves. Therefore, each account needs to maintain a record of the delegate relationship, including all the recipient addresses that the account delegated resources to and all the addresses that delegated resources for the account.</p> <p>In versions prior to GreatVoyage-v4.6.0 (Socrates), the delegate relationship is stored in the form of a list. When performing resource delegating, it needs first to check whether the recipient account already exists in the list and then adds the account to the list only if it is not present. If a particular account has delegated resources to multiple accounts or many accounts have delegated the resources to the particular account, then the length of the delegate relationship list for the particular account will be substantial. The lookup operation would be considerably time-consuming, resulting in long transaction execution times. </p> <p>Therefore,  GreatVoyage-v4.6.0 (Socrates) optimizes the index storage structure of the resource delegate relationship and changes it from a list to a key-value pair, so as to complete the querying and modification of its data in a constant time, which greatly speeds up the execution speed of the delegation related transactions and improves network throughput.</p> <p>The delegate relationship storage optimization is a dynamic parameter of the TRON network. It is disabled by default and can be enabled by initiating a proposal.</p> <ul> <li>TIP: https://github.com/tronprotocol/tips/issues/476 </li> <li>Source code: https://github.com/tronprotocol/java-tron/pull/4788 </li> </ul>"},{"location":"releases/history/#2-add-transaction-memo-fee-proposal","title":"2. Add transaction memo fee proposal","text":"<p>Starting from GreatVoyage-v4.6.0 (Socrates), a memo fee will be charged for transactions with a memo. By increasing the cost, the fee will reduce the number of low-value transactions, so as to improve the security and reliability of the TRON network.</p> <p>The memo fee is a dynamic parameter of the TRON network. After GreatVoyage-v4.6.0 (Socrates) is deployed, the default value is \u20180\u2019, and the unit is \u2018sun\u2019. It can be enabled by specifying a non-zero value by initiating a proposal, for example, \u20181000000\u2019, indicating that the transaction with memo will require an additional 1 TRX fee.</p> <ul> <li>TIP: https://github.com/tronprotocol/tips/issues/387 </li> <li>Source code: https://github.com/tronprotocol/java-tron/pull/4758 </li> </ul>"},{"location":"releases/history/#3-add-optimized-reward-algorithm-proposal","title":"3. Add optimized reward algorithm proposal","text":"<p>Many voters in the TRON network will accumulate rewards for a long time before withdrawing them. The interval between two withdrawals of rewards is often very long. In versions prior to GreatVoyage-v4.6.0 (Socrates), for the transaction to withdraw rewards, it will calculate and accumulate rewards for each maintenance period since the last withdrawal of rewards, so the longer the time since the last withdrawal of rewards, the more time-consuming it will be to calculate the reward. Therefore, GreatVoyage-v4.6.0 (Socrates) optimizes the calculation algorithm of voting rewards. Instead of accumulating the rewards of each maintenance period, the sum of unwithdrawn rewards can be obtained by subtracting the total number of rewards recorded in the maintenance period of the last reward withdrawal from the total rewards recorded in the previous maintenance period. This algorithm realizes the calculation of the total number of unclaimed rewards in a constant time, which greatly improves the calculation efficiency and speeds up the execution of reward calculation, thereby improving the throughput of the network.</p> <p>The optimized reward algorithm is a TRON network parameter and is disabled by default once GreatVoyage-v4.6.0 (Socrates) is deployed, and can be enabled by voting through a proposal.</p> <ul> <li>TIP: https://github.com/tronprotocol/tips/issues/465 </li> <li>Source code: https://github.com/tronprotocol/java-tron/pull/4694 </li> </ul>"},{"location":"releases/history/#4-upgrade-checkpoint-mechanism-to-v2-in-database-module","title":"4. Upgrade checkpoint mechanism to v2 in database module","text":"<p>The Checkpoint is a recovery mechanism established to prevent database damage caused by the exceptional shutdown. java-tron uses memory and multi-disk databases for data storage. The data of the solidified block will be stored in multiple business databases. Unsolidified data is stored in the memory. When a block is solidified, the corresponding memory data will be written to relevant databases. However, since the writing to multiple business databases is not an atomic operation, if there is an unexpected downtime due to some reason, then all the data in the block may not be able to be written to the disk, and the node will not be able to restart due to database corruption.</p> <p>Therefore, before the memory data is written to the disk, a checkpoint would be created. The checkpoint contains all the data that needs to be written to each business database this time. After the checkpoint is created, first writes the checkpoint data to an independent Checkpoint database, and then performs the operation of writing the business database, and the Checkpoint database always retains the latest solidified block data. If the business database is damaged due to system shutdown, after the node restarts, the business database will be recovered through the data previously saved in the checkpoint database.</p> <p>At present, the Checkpoint mechanism can deal with the vast majority of downtime situations, but there is still a small probability that the business database will be damaged due to downtime. At present, the data writing of LevelDB is asynchronous. The program calls LevelDB to request to write the data to the disk. In fact, the data is only written into the cache of the operating system, and then the operating system will decide when to actually write to the disk according to its own strategy. If an unexpected downtime occurs at the time when the node just finished writing to the Checkpoint database and continues to write to the business database, it is possible that the data written to the Checkpoint database is not actually written to the disk by the operating system. In this case, the node would fail to restart properly because the Checkpoint database has no recovery data.</p> <p>In order to solve this problem, GreatVoyage-v4.6.0 (Socrates) upgrades the V2 version of Checkpoint implementation. The Checkpoint mechanism V2 will store multiple solidified blocks data. So that even if the latest solidified block data is not written successfully to the Checkpoint database due to abnormal shutdown, the historical solidified block data can be used to restore the business database when the node restarts.</p> <p>The  Checkpoint mechanism V2 is disabled by default in the configuration file. This function can be enabled by modifying the configuration. It should be noted that if a node has enabled the checkpoint V2 and has been running for a certain period of time, it would not be able to roll back to V1 anymore.</p> <ul> <li>TIP: https://github.com/tronprotocol/tips/issues/461 </li> <li>Source code:  https://github.com/tronprotocol/java-tron/pull/4614 </li> </ul>"},{"location":"releases/history/#5-optimize-block-production-priority-between-active-and-backup-nodes","title":"5. Optimize block production priority between active and backup nodes","text":"<p>If the super representative deploys the active and backup nodes, the connection between the nodes will be maintained. When the active and backup nodes are temporarily disconnected due to network problems, the backup node will consider that the active node is invalid and take over the block production. This will cause a duplicate block production process as both the active and backup nodes will produce blocks at the same time. In versions prior to GreatVoyage-v4.6.0 (Socrates), when the active and backup nodes receive blocks of the same height block generated by each other, both of them will suspend for 1-9 block production cycles. That is, the super representative will miss 1-9 blocks.</p> <p>The GreatVoyage-v4.6.0 (Socrates) optimizes the priority of block production logic. When the situation above happens, both nodes will compare the hash value of the block produced by the other node. The node with a larger block hash will continue to produce blocks, and the node with smaller block hash will suspend a block production cycle, then continue to produce blocks, and compare the block hash again. A total of 27 super representatives will generate blocks sequentially, so it takes 81 seconds to skip a block production cycle. During this period, if the connection problem between them is a short-term network failure, there will be enough time to recover it. In addition, after receiving these two blocks, other nodes will also choose the block with a larger hash and discard the one with a smaller hash. This implementation will significantly improve the block production efficiency during obstructed network connections between active and backup nodes and network stability.</p> <ul> <li>Source code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4630 </li> </ul>"},{"location":"releases/history/#6optimize-the-kademlia-algorithm-for-the-network-module","title":"6.Optimize the Kademlia algorithm for the network module","text":"<p>The java-tron node ID is a random number, which will be regenerated every time the node is started. In the implementation of the Kademlia algorithm of java-tron, the distance of the node will be calculated according to the node ID, and then the node information will be put into the corresponding K bucket according to the distance. If the node in the K bucket is restarted for some reason, the node ID will change. When it is detected that the node is offline again, the distance calculated according to the latest node ID has been unable to locate the original K bucket, therefore it is not able to delete the node from the bucket. Too many such nodes restarted will cause too much invalid data to be stored in the K bucket of the node.</p> <p>Therefore, the GreatVoyage-v4.6.0 (Socrates) optimizes the Kademlia algorithm, and uses a hash table to record the discovered nodes. The distance of a node is only calculated once when it is written into the K bucket for the first time and is assigned to the \u2018distance\u2019 field of the node, and then the node is added to the hash table. In the future, the node distance will be obtained directly through this field. Even if the node ID changes after the node is restarted, the distance of the node in the Hash table will not be updated. When the node is detected to be offline, the corresponding node can be found from the hash table according to the node IP, and then the distance to the node can be obtained through the node distance field, at last the node information can be deleted from the K bucket.</p> <ul> <li>Source code: https://github.com/tronprotocol/java-tron/pull/4620 https://github.com/tronprotocol/java-tron/pull/4622 </li> </ul>"},{"location":"releases/history/#other-changes_11","title":"Other Changes","text":""},{"location":"releases/history/#1-merge-archivemanifestjar-into-toolkitjar","title":"1.  Merge ArchiveManifest.jar into Toolkit.jar","text":"<p>ArchiveManifest.jar is an independent LevelDB startup optimization tool, which can optimize the file size of LevelDB manifest, thereby reducing memory usage and greatly improving node startup speed. Starting from the GreatVoyage-v4.6.0 (Socrates), the ArchiveManifest.jar tool has been integrated into the Toolkit.jar. In the future, all the tools around java-tron will be gradually integrated into the Toolkit.jar toolbox to facilitate tool maintenance and developer use.</p> <ul> <li>Source code: https://github.com/tronprotocol/java-tron/pull/4603 </li> </ul>"},{"location":"releases/history/#2-add-prometheus-metrics-for-network-module","title":"2. Add prometheus metrics for network module","text":"<p>GreatVoyage-v4.6.0 (Socrates) adds three new Prometheus metrics related to the network module: block fetching delay, block receiving delay, and message processing delay. New metrics help with network health monitoring of the node.</p> <ul> <li>Source code: https://github.com/tronprotocol/java-tron/pull/4626 </li> </ul>"},{"location":"releases/history/#3-add-the-help-command-option","title":"3. Add the --help command option","text":"<p>GreatVoyage-v4.6.0(Socrates) adds \u2018help\u2019 command line options to check all parameters and instructions. Please check the example below, <pre><code>$ java -jar FullNode.jar --help\n\nName:\n    FullNode - the java-tron command line interface\n\nUsage: java -jar FullNode.jar [options] [seedNode &lt;seedNode&gt; ...]\n\nVERSION:\n4.5.2-d05f766\n\nTRON OPTIONS:\n-v, --version           Output code version\n-h, --help              Show help message\n-c, --config            Config file (default:config.conf)\n--log-config            Logback config file\n--es                    Start event subscribe server\n\nDB OPTIONS:\n-d, --output-directory          Data directory for the databases (default:output-directory)\n\nWITNESS OPTIONS:\n-w, --witness               Is witness node\n-p, --private-key           Witness private key\n\nVIRTUAL MACHINE OPTIONS:\n--debug         Switch for TVM debug mode. In debug model, TVM will not check for timeout. (default: false)\n</code></pre></p> <ul> <li>Source code: https://github.com/tronprotocol/java-tron/pull/4606 </li> </ul>"},{"location":"releases/history/#4-optimize-litefullnodetooljar","title":"4. Optimize LiteFullNodeTool.jar","text":"<p>LiteFullNodeTool.jar is a light node tool of java-tron. Its main function is to convert the fullnode database into a light node database. GreatVoyage-v4.6.0 (Socrates) optimizes the tool and improves the convenience and stability of the tool.</p> <ul> <li>Source code: https://github.com/tronprotocol/java-tron/pull/4607</li> </ul>"},{"location":"releases/history/#5-optimize-the-return-value-of-eth_getblockbyhash-and-eth_getblockbynumber-apis","title":"5. Optimize the return value of  eth_getBlockByHash and eth_getBlockByNumber APIs","text":"<p>In order to be better compatible with Ethereum's JsonRPC 2.0 protocol interface, GreatVoyage-v4.6.0(Socrates) changes the unit of the <code>timestamp</code> field in the return value of the eth_getBlockByHash and eth_getBlockByNumber APIs from milliseconds to seconds, making the return values of these two APIs fully compatible with Ethereum Geth.</p> <ul> <li>Source code: https://github.com/tronprotocol/java-tron/pull/4642 </li> </ul> <p>To move the world we must move ourselves. </p> <p> --- Socrates</p>"},{"location":"releases/history/#greatvoyage-v452aurelius","title":"GreatVoyage-v4.5.2(Aurelius)","text":"<p>The GreatVoyage-v4.5.2 (Aurelius) version introduces several important optimizations. The optimized transaction cache mechanism greatly reduces memory usage and improves node performance; the optimized P2P node connection strategy improves the efficiency of establishing connections between nodes and speeds up the node synchronization process;  the optimized block production and processing logic improve node stability; the newly added database storage partition tool reduces the pressure on data storage; the newly added block header query API and historical bandwidth unit price Query API are to bring users a more convenient development experience.</p>"},{"location":"releases/history/#core_7","title":"Core","text":""},{"location":"releases/history/#1-optimize-block-processing","title":"1. Optimize block processing","text":"<p>In versions prior to GreatVoyage-v4.5.2 (Aurelius), threads such as block production, block processing, and transaction processing compete for synchronization lock at the same time. In the case of high concurrency and transactions executing much time, the block production thread or the block processing thread will take a long time to get to the synchronization lock, which leads to the occurrence of a small probability of a block loss event. In order to improve node stability, the GreatVoyage-v4.5.2 (Aurelius) version optimizes the synchronization lock in the block processing logic, allowing only one transaction processing thread to compete for the synchronization lock with the block production or processing thread, and when the transaction processing thread finds that block-related threads waiting for the synchronization lock, it will voluntarily give in, which greatly increases the probability of block production and block processing threads acquiring synchronization lock, and ensures high throughput and stable operation of the node.</p> <p>TIP: https://github.com/tronprotocol/tips/blob/master/tip-428.md  Source Code: https://github.com/tronprotocol/java-tron/pull/4551 </p>"},{"location":"releases/history/#2-optimize-transaction-cache","title":"2. Optimize transaction cache","text":"<p>The node uses the transaction cache to determine whether the newly received transaction is a duplicate transaction. In versions prior to GreatVoyage-v4.5.2 (Aurelius), the transaction cache is a hashmap data structure, which saves transactions in the latest 65536 blocks. The hashmap allocates memory for each transaction separately. Therefore, the transaction cache will occupy nearly 2GB of memory during program runtime, meanwhile, frequent memory requests will trigger frequent JVM garbage collection which indirectly affects the performance of the node. To solve this issue, the GreatVoyage-v4.5.2 (Aurelius) version optimizes the implementation of the transaction cache, using the bloom filter instead of the hashmap, the bloom filter uses a fixed and extremely small memory space to record recent historical transactions, which greatly reduces the memory usage of the transaction cache and improve the node performance.</p> <p>TIP: https://github.com/tronprotocol/tips/blob/master/tip-440.md Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4538  </p>"},{"location":"releases/history/#3-optimize-nodes-connection-strategy","title":"3. Optimize nodes connection strategy","text":"<p>In versions prior to GreatVoyage-v4.5.2 (Aurelius), when the number of remote nodes connected by a node has reached the maximum value, the node will reject connection requests from new remote nodes. With the increase of such fully connected nodes in the network, it will become more and more difficult for the newly added nodes to establish connections with other nodes in the network.</p> <p>In order to speed up the connection process between nodes in the network, the GreatVoyage-v4.5.2 (Aurelius) version optimizes the P2P node connection strategy. It will periodically check the number of TCP connections of the node. When the number of  connections is full, a certain disconnection strategy is adopted to disconnect one or two nodes to increase the possibility of a newly added node in the network successfully connecting to it, thereby improving the efficiency of establishing connections between P2P nodes in the network and improving network stability. Please note that the nodes configured in the <code>node.active</code> and <code>node.passive</code> lists in the configuration file are trusted nodes and will not be disconnected.</p> <p>TIP: https://github.com/tronprotocol/tips/blob/master/tip-425.md  Source Code: https://github.com/tronprotocol/java-tron/pull/4549   </p>"},{"location":"releases/history/#4-optimize-block-generating-logic","title":"4. Optimize block generating logic","text":"<p>In versions prior to GreatVoyage-v4.5.2 (Aurelius), for pre-executed normal transactions, they may encounter JVM GC pauses during packaging which can result in transaction execution timeout and being discarded. Therefore, the GreatVoyage-v4.5.2 (Aurelius) version optimizes the block generating logic. For a pre-executed normal transaction, if it executes time out during packaging, a retry operation is taken to avoid transaction discard caused by JVM GC pause during the packaging.</p> <p>Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4387 </p>"},{"location":"releases/history/#5-optimize-fork-switching-logic","title":"5. Optimize fork switching logic","text":"<p>Micro-forks occur in the TRON network occasionally. The chain switching behavior will occur when a micro-fork happens.  The chain switching will roll back blocks, and the transactions in the rolled back block will be put back into the transaction pending queue. When these transactions are repackaged and executed, the execution results may be inconsistent due to chain switching. In versions prior to GreatVoyage-v4.5.2 (Aurelius), the entire process refers to the same transaction object, so chain switching may lead to the transaction result in the rolled back block being changed. When the chain switching occurs again and the original chain is switched back, the transaction on the original chain will be executed again, at this time, it will report a <code>Different resultCode</code> error, which will cause the node to stop synchronizing. </p> <p>Therefore, the GreatVoyage-v4.5.2 (Aurelius) version optimizes the chain-switching logic. When a block is rolled back, a new transaction object is created for the transaction in the rolled-back block, so as to avoid the modification of the transaction result and improve the node's stability for fork handling.</p> <p>Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4583 </p>"},{"location":"releases/history/#6-add-database-storage-partition-tool","title":"6. Add database storage partition tool","text":"<p>As the data on the chain grows, the disk space of the FullNode may be insufficient, and a larger capacity disk needs to be replaced. So starting from the GreatVoyage-v4.5.2 (Aurelius) version, a database storage partition tool is provided, which can migrate some databases to other disk partitions according to the user's configuration, so users only need to add disks according to capacity requirements, no need to replace the original disk, that is convenient for users to expand the disk capacity, and at the same time reduces the cost of running a node.</p> <p>Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4545  https://github.com/tronprotocol/java-tron/pull/4559  https://github.com/tronprotocol/java-tron/pull/4563 </p>"},{"location":"releases/history/#api_7","title":"API","text":""},{"location":"releases/history/#1-new-block-header-query-api","title":"1. New block header query API","text":"<p>From the GreatVoyage-v4.5.2 (Aurelius) version, a new block header query API is added, which only returns the block header information, not the transaction information in the block. Users can obtain the block header information without querying the entire block. This not only reduces the network I/O load of the node, and since the block does not carry transaction information, the serialization time is reduced, the interface delay is reduced, and the query efficiency is improved.</p> <p>Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4492  https://github.com/tronprotocol/java-tron/pull/4552 </p>"},{"location":"releases/history/#2-new-historical-bandwidth-unit-price-query-api","title":"2. New historical bandwidth unit price query API","text":"<p>According to the bandwidth consumption rules, if the transaction initiator\u2019s  bandwidth obtained by staking TRX or free bandwidth is insufficient, TRX will be burned to pay for the bandwidth fee. At this time, only the bandwidth fee is recorded in the transaction record, but not the bandwidth consumption number. In order to understand bandwidth consumption of historical transactions, starting from GreatVoyage-v4.5.2 (Aurelius), a new historical bandwidth unit price query API <code>/wallet/getbandwidthprices</code> is added. Users can obtain historical records of bandwidth unit price through this API so that they can calculate bandwidth consumption of historical transactions.</p> <p>Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4556 </p>"},{"location":"releases/history/#other-changes_12","title":"Other Changes","text":""},{"location":"releases/history/#1-optimize-block-synchronization-logic","title":"1. Optimize block synchronization logic","text":"<p>The GreatVoyage-v4.5.2 (Aurelius) version optimizes the block synchronization logic, avoids unnecessary node disconnection in the process of synchronizing blocks, and improves node stability.</p> <p>Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4542  https://github.com/tronprotocol/java-tron/pull/4540 </p>"},{"location":"releases/history/#2-optimize-eth_estimategas-and-eth_call-api","title":"2. Optimize <code>eth_estimateGas</code> and <code>eth_call</code> API","text":"<p>The GreatVoyage-v4.5.2 (Aurelius) version optimizes the <code>eth_estimateGas</code> and <code>eth_cal</code> JSON-RPC interfaces; they can return error information when smart contract transaction execution is interrupted.</p> <p>Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4570 </p>"},{"location":"releases/history/#3-enhance-the-fault-tolerance-of-the-interface","title":"3. Enhance the fault tolerance of the interface","text":"<p>The GreatVoyage-v4.5.2 (Aurelius) version optimizes multiple API interfaces, enhances its fault tolerance for parameters, and improves the stability of API interfaces.</p> <p>Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4560  https://github.com/tronprotocol/java-tron/pull/4556 </p> <p>The universe is change; our life is what our thoughts make it. </p> <p> ---  Aurelius</p>"},{"location":"releases/history/#greatvoyage-v451tertullian","title":"GreatVoyage-v4.5.1(Tertullian)","text":"<p>The GreatVoyage-v4.5.1(Tertullian) version introduces several important optimization updates. The optimized transaction cache loading process shortens the node startup time; the optimized block acquisition logic and light node synchronization logic promote the stability of the node; the optimized account asset structure and TVM cache structure improves the processing speed of transactions, thereby further improving the performance of node; supporting prometheus protocol interface brings users a more convenient development experience and helps to further prosper the TRON ecosystem.</p>"},{"location":"releases/history/#core_8","title":"Core","text":""},{"location":"releases/history/#1-optimize-transaction-cache-loading","title":"1. Optimize transaction cache loading","text":"<p>In versions prior to GreatVoyage-v4.5.1 (Tertullian), it took a long time from node startup to block synchronization, and the loading of the transaction cache took up most of the node startup time. The transaction cache is used by the node to determine whether a transaction is a duplicate transaction, so during the node startup process, the transaction cache needs to be loaded from the database to the memory, and in versions prior to GreatVoyage-v4.5.1 (Tertullian), it adopts transaction as the storage unit to read the database when loading the transaction cache, so the amount of data to be read is large, and the entire reading process is time-consuming.</p> <p>In order to speed up the startup of the node, the GreatVoyage-v4.5.1 (Tertullian) version optimizes the loading of the transaction cache. By adopting the block as the storage unit to read the database reduces the times of database reading,  improves the efficiency of transaction cache loading, and improves the speed of node startup.</p> <p>TIP: https://github.com/tronprotocol/tips/blob/master/tip-383.md  Source Code: https://github.com/tronprotocol/java-tron/pull/4319 </p>"},{"location":"releases/history/#2-optimize-account-trc-10-asset-storage-structure","title":"2. Optimize account TRC-10 asset storage structure","text":"<p>In versions prior to GreatVoyage-v4.5.1 (Tertullian), when there were too many TRC10 assets in the account, the content of the account stored in the database was large, resulting in the deserialization of the account during the transaction execution process is very time-consuming , therefore, the GreatVoyage-v4.5.1 (Tertullian) version adds a new proposal to optimize the asset structure of the account, allowing TRC-10 assets to be separated from the account and stored separately in a key-value data structure. That will reduce the content of the account structure, speed up the deserialization operation of the account and reduce the execution time of the transaction, thereby increasing the network throughput and improving the network performance.</p> <p>TIP: https://github.com/tronprotocol/tips/blob/master/tip-382.md Source Code: https://github.com/tronprotocol/java-tron/pull/4392 </p>"},{"location":"releases/history/#3-optimize-light-node-synchronization","title":"3. Optimize light node synchronization","text":"<p>Since light nodes do not store complete block data, there is a possibility that a node connects to a light node which does not have the block the node wants to synchronize with, in this situation, the light node will actively disconnect the connection. In versions prior to GreatVoyage-v4.5.1 (Tertullian), nodes may repeatedly establish connections with such light nodes, and then be disconnected by the other part, which greatly affects the efficiency of synchronizing blocks between nodes. Therefore, in the GreatVoyage-v4.5.1 (Tertullian) version, the logic of establishing a connection with light nodes has been optimized, and the two fields of \"node type\" and \"node's lowest block\" are added to the handshake message between nodes, and the nodes will save the handshake messages with each node. If the highest block of the current node is lower than the lowest block of the light node, it will actively disconnect from the light node, and the next time it establishes a connection with the node, it will filter out such nodes to avoid more invalidations connection, which improves the efficiency of synchronization between nodes.</p> <p>TIP: https://github.com/tronprotocol/tips/blob/master/tip-388.md  Source Code: https://github.com/tronprotocol/java-tron/pull/4323  </p>"},{"location":"releases/history/#4-optimize-block-broadcasting","title":"4. Optimize block broadcasting","text":"<p>The GreatVoyage-v4.5.1 (Tertullian) version optimizes the block broadcast logic, so that the fast forward node only broadcasts the block to the three super representative nodes that will produce blocks next (the number of broadcasted super representative nodes can be changed through the configuration file) to ensure that the super representative node can obtain the latest block in time, which improves the efficiency of block production.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/4336 </p>"},{"location":"releases/history/#5-optimize-fetch-block-process","title":"5. Optimize fetch block process","text":"<p>Due to network reasons, the node may not receive the new broadcasted block. In versions before GreatVoyage-v4.5.1 (Tertullian), when the block acquisition times out, the node will acquire the block through the P2P synchronization process, but the process is complicated and time-consuming. Therefore, the GreatVoyage-v4.5.1 (Tertullian) version optimizes the process of obtaining the latest block. The node will first select a node according to the status of each node, and then directly send the block obtaining message <code>FetchInvDataMessage</code> to this node to obtain the latest block, which saves most of the time in the block synchronization process, speeds up the acquisition of the latest block, and improves the stability of the node.</p> <p>TIP: https://github.com/tronprotocol/tips/blob/master/tip-391.md Source Code: https://github.com/tronprotocol/java-tron/pull/4326 </p>"},{"location":"releases/history/#6-support-prometheus-metric-protocol-interface","title":"6. Support prometheus metric protocol interface","text":"<p>Starting from the GreatVoyage-v4.5.1 (Tertullian) version, the node provides an open source system monitoring tool - prometheus\u2019s protocol interface, and users can monitor the health status of the node more conveniently.</p> <p>TIP: https://github.com/tronprotocol/tips/blob/master/tip-369.md Source Code: https://github.com/tronprotocol/java-tron/pull/4337 </p>"},{"location":"releases/history/#7-support-node-stop-at-specified-condition","title":"7. Support node stop at specified condition","text":"<p>In order to facilitate node deployers to do data backup or data statistics, starting from the GreatVoyage-v4.5.1 (Tertullian) version, the node could stop running under specific conditions. Users can set the conditions for node stop through the node configuration file, such as the node stop\u2019s block time, block height, and the number of blocks the node needs to synchronize from start to stop. The node will stop running automatically when the set conditions are met.</p> <p>TIP: https://github.com/tronprotocol/tips/blob/master/tip-370.md Source Code: https://github.com/tronprotocol/java-tron/pull/4325 </p>"},{"location":"releases/history/#tvm_4","title":"TVM","text":""},{"location":"releases/history/#1-adjust-the-upper-limit-that-can-be-set-for-the-maximum-execution-time-of-tvm","title":"1. Adjust the upper limit that can be set for the maximum execution time of TVM","text":"<p>\"TVM maximum execution time\" is a dynamic parameter of the TRON network, indicating the maximum time allowed for a smart contract to be executed. Super representatives can change this parameter through proposal voting. In versions prior to GreatVoyage-v4.5.1 (Tertullian), the maximum value that this parameter can be modified is 100ms. With the stability of the TRON network infrastructure and the vigorous development of the ecology, the 100ms upper limit confines the complexity of smart contracts. Therefore, GreatVoyage-v4.5.1 (Tertullian) version adds a new proposal that allows to raise the configurable upper limit of \"TVM maximum execution time\" to 400ms.</p> <p>TIP: https://github.com/tronprotocol/tips/blob/master/tip-397.md  Source Code: https://github.com/tronprotocol/java-tron/pull/4375 </p>"},{"location":"releases/history/#2-optimize-the-cache-structure-of-tvm","title":"2. Optimize the cache structure of TVM","text":"<p>In versions prior to GreatVoyage-v4.5.1 (Tertullian), the cached data in TVM is stored in the form of a byte array. When the data in the cache needs to be changed, the data must first be converted from the form of a byte array to a protobuf object by performing a serialization operation, then change a field of the object (such as account balance, etc.) to generate a new object, then serialize the newly generated protobuf object to byte array, and at last write the result byte array to TVM cache. Since the serialization and deserialization of protobuf is time-consuming, the GreatVoyage-v4.5.1 (Tertullian) version optimizes the data structure in the cache when TVM is executed, and directly saves the protobuf object data to reduce the serialize/deserialize operations when accessing the data in the cache, speeding up TVM execution of bytecode.</p> <p>Source Code: https://github.com/tronprotocol/java-tron/pull/4375   </p> <p>Hope is patience with the lamp lit. </p> <p> --- Tertullian </p>"},{"location":"releases/history/#greatvoyage-v446david","title":"GreatVoyage-v4.4.6(David)","text":"<p>GreatVoyage-v4.4.6 (David) updated the version of the dependency library fastjson to ensure the security of using fastjson.</p>"},{"location":"releases/history/#other-changes_13","title":"Other Changes","text":""},{"location":"releases/history/#1-update-the-fastjson-dependency-library-to-the-latest-version","title":"1. Update the fastjson dependency library to the latest version","text":"<p>Due to security vulnerabilities in fastjson 1.2.80 and earlier versions, GreatVoyage-v4.4.6 (David) updated the version of the fastjson dependency library to 1.2.83, and enabled the <code>safemode</code> mode of fastjson to ensure the safety of using fastjson.</p> <p>Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4393 </p> <p>*Beauty in things exists in the mind which contemplates them. * </p> <p> ---David Hume</p>"},{"location":"releases/history/#greatvoyage-445cicero","title":"GreatVoyage-4.4.5(Cicero)","text":"<p>The GreatVoyage-v4.4.5 (Cicero) version optimizes the query interface of the node to filter out invalid fields, which ensures the stability of the interface for parsing data.</p>"},{"location":"releases/history/#other-changes_14","title":"Other Changes","text":""},{"location":"releases/history/#1-optimize-the-query-interface-of-the-node","title":"1. Optimize the query interface of the node","text":"<p>The GreatVoyage-v4.5.0 (Cicero) version optimizes the query interface of the node. When parsing the obtained data, the node will filter out invalid fields to ensure to return the correct interface data </p> <p>Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4349 </p> <p>No one can give you better advice than yourself. </p> <p> ---Cicero </p>"},{"location":"releases/history/#greatvoyage-444plotinus","title":"GreatVoyage-4.4.4(Plotinus)","text":"<p>The GreatVoyage-v4.4.4 (Plotinus) version introduces several important optimization updates, which reduces the node memory usage; speeds up node startup; Optimized network module, block production threads, improve the stability of nodes; Improved java-tron upgrade mechanism achieves more efficient decentralized governance; TVM supports multi-version program executors, which helps make it more compatible with EVM, brings users a more convenient development experience, and helps further flourish the TRON ecosystem.</p>"},{"location":"releases/history/#core_9","title":"Core","text":""},{"location":"releases/history/#1-optimize-node-startup-time","title":"1. Optimize node startup time","text":"<p>Before the GreatVoyage-v4.4.4 (Plotinus), the node will execute about a minute from startup to block synchronization. The block synchronization thread will first delay 30s to wait for the P2P thread to discover remote nodes, then establish TCP connection with the discovered nodes, and finally perform the block synchronization. This delay time occupies most of the startup time. In fact, every newly discovered node will be persisted to the local database, so there is no need to spend extra time waiting for the node to be discovered when node is started for the second time. So in the GreatVoyage-v4.4.4(Plotinus) version, the waiting time for node discovery has been reduced from 30s to 100ms to improve the speed of node startup.</p> <p>TIP: https://github.com/tronprotocol/tips/blob/master/tip-366.md  Source Code: https://github.com/tronprotocol/java-tron/pull/4254  </p>"},{"location":"releases/history/#2-optimize-memory-usage","title":"2. Optimize memory usage","text":"<p>In order to avoid repeatedly broadcasting a transaction, the node will cache the transaction data into the broadcast data buffer. However,due to the limitation of the JVM's recycling policy, old cached data cannot be deleted in time until the buffer is full. Therefore, a buffer with a larger capacity will occupy a large amount of memory space. Before the GreatVoyage-v4.4.4 (Plotinus) version, the buffer pool size was 100000 transactions. In order to release the memory occupied by expired transactions in time , the GreatVoyage-v4.4.4 (Plotinus) version changed the buffer size to 20000 to reduce memory usage.</p> <p>TIP: https://github.com/tronprotocol/tips/blob/master/tip-362.md  Source Code: https://github.com/tronprotocol/java-tron/pull/4250 </p>"},{"location":"releases/history/#3-optimize-the-block-producing-thread","title":"3. Optimize the block-producing thread","text":"<p>The GreatVoyage-v4.4.4 (Plotinus) version adds the interrupt exceptions handling in block-producing thread, so that when the block-producing node catches the interrupt instruction, it can exit safely.</p> <p>Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4219 </p>"},{"location":"releases/history/#tvm_5","title":"TVM","text":""},{"location":"releases/history/#1-tvm-support-multi-version-program-executors","title":"1. TVM support multi-version program-executors","text":"<p>In order to enable the TRON network to support various types of smart contract transactions in the future, starting from GreatVoyage-v4.4.4 (Plotinus), TVM code is refactored to support multi-version program  executors, it will select different instruction set to interpret and execute the bytecode of smart contract according to the contract version information.</p> <p>Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4257                               https://github.com/tronprotocol/java-tron/pull/4259 </p>"},{"location":"releases/history/#other-changes_15","title":"Other Changes","text":""},{"location":"releases/history/#1-optimize-log-storage","title":"1. Optimize log storage","text":"<p>The GreatVoyage-v4.4.4 (Plotinus) version modifies the node log retention time from 3 days to 7 days to facilitate users to troubleshoot issues.</p> <p>Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4245 </p>"},{"location":"releases/history/#2-optimize-network-service-shutdown-logic","title":"2. Optimize network service shutdown logic","text":"<p>The GreatVoyage-v4.4.4(Plotinus) version optimizes the network service shutdown logic, closing the synchronization service first, and then closing the TCP connection service to ensure that all P2P connection related services exit safely.</p> <p>Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4220 </p>"},{"location":"releases/history/#3-improve-the-java-tron-upgrade-mechenism","title":"3. improve the java-tron upgrade mechenism","text":"<p>For upgrade mechanism of java-tron,Before the GreatVoyage-v4.4.4 (Plotinus) version,all 27 super representative nodes need to complete the code upgrade, TRON network can be upgraded to the new version,TRON is a completely decentralized governance network,Sometimes the 27 super representative nodes cannot complete the code upgrade within a certain period of time, making the version upgrade process slow.In order to achieve more efficient decentralized governance, in GreatVoyage-v4.4.4 (Plotinus), the upgrade mechanism of java-tron has been improved, only 22 super representative nodes are needed to complete the code upgrade, and the TRON network can complete the upgrade.</p> <p>Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4218</p> <p>The world is knowable, harmonious, and good. </p> <p> --- Plotinus </p>"},{"location":"releases/history/#greatvoyage-442augustinus","title":"GreatVoyage-4.4.2(Augustinus)","text":"<p>The GreatVoyage-v4.4.2(Augustinus) has three essential updates: The new execution model of opcode boosts the TVM performance; individualized LevelDB parameters improve the database performance; and the newly added log filter APIs make the JSON-RPC API more comprehensive.</p>"},{"location":"releases/history/#tvm_6","title":"TVM","text":""},{"location":"releases/history/#1-tvm-opcode-execution-model-optimization","title":"1. TVM Opcode Execution Model Optimization","text":"<p>The opcode execution model of the interpreter in TVM is optimized in GreatVoyage-v4.4.2(Augustinus). The performance of TVM is proven to have a great boost through testing.</p> <p>TIP: https://github.com/tronprotocol/tips/blob/master/tip-344.md Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4157</p>"},{"location":"releases/history/#api_8","title":"API","text":""},{"location":"releases/history/#1-newly-adding-eth-compatible-log-filter-for-json-rpc-apis","title":"1. Newly Adding ETH compatible log filter for JSON-RPC APIs.","text":"<p>Log filter related APIs are available from GreatVoyage-v4.4.2 for compatibility with Ethereum JSON-RPC API.</p> <p>TIP: https://github.com/tronprotocol/tips/issues/343  Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4153 </p>"},{"location":"releases/history/#other-changes_16","title":"Other Changes","text":""},{"location":"releases/history/#1-leveldb-databases-performance-optimization","title":"1. LevelDB Databases Performance Optimization","text":"<p>Parameters of each LevelDB database have been individualized by the I/O frequencies from GreatVoyage-v4.4.2(Augustinus). This will significantly boost the database performance.</p> <p>Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4154 </p> <p>Patience is the companion of wisdom. </p> <p> ---  Augustinus </p>"},{"location":"releases/history/#greatvoyage-440rousseau","title":"GreatVoyage-4.4.0(Rousseau)","text":"<p>The GreatVoyage-v4.4.0 (Rousseau) version introduces several important updates: the optimization of block broadcasting will let the block be broadcast to the entire network faster; the query performance optimization of <code>dynamic store</code> and the optimization of database parameters will be greatly improved Block processing speed, thereby improving the performance of java-tron; API customization in FullNode makes node configuration more flexible for different application scenarios; TVM will also be better compatible with EVM and adapt to the Ethereum London upgrade, the new JSON-RPC API will bring developers a better development experience, help developers to join the TRON ecosystem more easily, and promote the prosperity of the TRON ecosystem.</p>"},{"location":"releases/history/#core_10","title":"Core","text":""},{"location":"releases/history/#1-optimize-the-block-broadcasting","title":"1. Optimize the block broadcasting","text":"<p>In the version before GreatVoyage-v4.4.0 (Rousseau), the logic of block processing is: verify block -&gt; process block -&gt; broadcast block. However, due to the long block processing time, there is a delay in block broadcasting. In order to speed up block broadcasting, In GreatVoyage-v4.4.0 (Rousseau) version, the block processing logic is changed to: verify block -&gt; broadcast block -&gt; process block, so that the block can be quickly broadcast to the entire network.</p> <p>TIP: https://github.com/tronprotocol/tips/blob/master/tip-289.md  Source Code:https://github.com/tronprotocol/java-tron/pull/3986  </p>"},{"location":"releases/history/#2-optimize-the-query-performance-of-dynamic-store","title":"2. Optimize the query performance of <code>dynamic store</code>","text":"<p>During the block processing, The frequency of visits to <code>dynamic store</code> is very high. The GreatVoyage-v4.4.0(Rousseau) version optimizes the query performance of the  <code>dynamic store</code> by loading all the data of  <code>dynamic store</code>  into the first-level cache, the cache hit rate of the <code>dynamic store</code>  is improved and the block processing speed is also improved.</p> <p>TIP: https://github.com/tronprotocol/tips/blob/master/tip-290.md Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/3993  </p>"},{"location":"releases/history/#3-optimize-the-transaction-broadcasting-interface","title":"3. Optimize the transaction broadcasting interface","text":"<p>The GreatVoyage-v4.4.0 (Rousseau) version optimizes the processing flow of the transaction broadcast interface. The transaction broadcast is changed from asynchronous to synchronous, and the result will be returned after the broadcast is successful, making the return result of the broadcast more accurate.</p> <p>Source code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4000 </p>"},{"location":"releases/history/#4-optimize-the-parameters-of-the-database","title":"4. Optimize the parameters of the database","text":"<p>The GreatVoyage-v4.4.0 (Rousseau) version optimizes the parameters of the database, which improves the read and write performance of the database, thereby improving the efficiency of block processing.</p> <p>Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4018  https://github.com/tronprotocol/java-tron/pull/3992 </p>"},{"location":"releases/history/#tvm_7","title":"TVM","text":""},{"location":"releases/history/#1-provide-compatibility-with-evm","title":"1. Provide compatibility with EVM","text":"<p>The GreatVoyage-v4.4.0 (Rousseau) version provides compatibility solution for those instructions that are different from EVM, so that the newly deployed contract supports the following features: - The <code>GASPRICE</code> instruction returns the unit price of energy. - The <code>try/catch-statement</code> supports catching all types of TVM exceptions. - Forbid the system contract \u201cTransferContract\u201d to transfer TRX to the smart contract account.</p> <p>TIP: https://github.com/tronprotocol/tips/blob/master/tip-272.md  Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4032 </p> <p>NOTICE\uff1a By default, this feature is disabled, and the super representative or super partner will initiate a vote request to enable it in the future.</p>"},{"location":"releases/history/#2-adapt-to-ethereum-london-release","title":"2. Adapt to Ethereum London Release","text":"<p>In the GreatVoyage-v4.4.0 (Rousseau) version, TVM is also adapted to the Ethereum London upgrade: introduce the <code>BASEFEE</code> opcode; the deployment of new contracts starting with 0xEF is prohibited.</p> <p>TIP: https://github.com/tronprotocol/tips/blob/master/tip-318.md  Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4032 </p> <p>NOTICE\uff1a By default, this feature is disabled, and the super representative or super partner will initiate a vote request to enable it in the future.</p>"},{"location":"releases/history/#3-in-constant-mode-energy-limit-supports-customization-and-the-default-value-is-increased","title":"3. In constant mode, <code>Energy limit</code> supports customization and the default value is increased","text":"<p>Before the GreatVoyage-v4.4.0 (Rousseau) version, the energy limit in constant mode was a fixed value(<code>3,000,000</code>). The GreatVoyage-v4.4.0 (Rousseau) version changed it to configurable, and increase the default value to <code>100,000,000</code>. after upgraded to the latest version, <code>Energy limit</code> can be configured in startup parameters(<code>--max-energy-limit-for-constant</code>) or in the configuration file(<code>vm.maxEnergyLimitForConstant</code>). </p> <p>Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4032 </p>"},{"location":"releases/history/#api_9","title":"API","text":""},{"location":"releases/history/#1-support-ethereum-compatible-json-rpc-api","title":"1. Support Ethereum compatible JSON-RPC API","text":"<p>Starting from the GreatVoyage-v4.4.0 (Rousseau) version, the FullNode supports JSON-RPC APIs. For details, please refer to: https://developers.tron.network/reference#json-rpc-api </p> <p>Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4046 </p>"},{"location":"releases/history/#2-fullnode-supports-disabling-apis","title":"2. FullNode supports disabling APIs","text":"<p>In order to make the FullNode customizable, starting from GreatVoyage-v4.4.0 (Rousseau) version, FullNode supports disabling specific APIs through the configuration file.</p> <p>Source code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4045 </p>"},{"location":"releases/history/#3-optimize-the-triggerconstantcontract-api","title":"3. Optimize the <code>TriggerConstantContract</code> API","text":"<p>In GreatVoyage-v4.4.0 (Rousseau), the following optimizations have been introduced to the <code>TriggerConstantContract</code> interface: -  Execute contract creation when <code>ContractAddress</code> is empty -  Remove the check of the incoming parameters <code>callvalue</code> and <code>tokenvalue</code> -  The log list and internal transaction list are added to <code>TransactionExtention</code></p> <p>Source Code\uff1a https://github.com/tronprotocol/java-tron/pull/4032 </p>"},{"location":"releases/history/#changes","title":"Changes","text":""},{"location":"releases/history/#1-upgrade-event-plugin-to-support-bttc-data","title":"1. Upgrade event plugin to support <code>BTTC</code> data","text":"<p>The event plugin has been upgraded in GreatVoyage-v4.4.0 (Rousseau) to support <code>BTTC</code>.</p> <p>Source code: https://github.com/tronprotocol/java-tron/pull/4067  </p>"},{"location":"releases/history/#2-increase-the-upper-limit-of-the-maxfeelimit-network-parameter","title":"2. Increase the upper limit of the <code>MaxFeeLimit</code> network parameter.","text":"<p>In the version before GreatVoyage-v4.4.0 (Rousseau), the value range of <code>MaxFeeLimit</code> is [0,1e10] sun, in GreatVoyage-v4.4.0 (Rousseau)  the value range of <code>MaxFeeLimit</code> is expanded to [0, 1e17] sun.</p> <p>Source Code\uff1a https://github.com/tronprotocol/java-tron/pull/4032 </p> <p>NOTICE\uff1a By default, this feature is disabled, it will be enabled after the London upgrade proposal takes effect.</p>"},{"location":"releases/history/#3-optimize-the-quick-start-script-startsh","title":"3. Optimize the quick start script <code>start.sh</code>","text":"<p>The quick start script tool is also upgraded in the GreatVoyage-v4.4.0 (Rousseau) version, please refer to the latest user guide from: https://github.com/tronprotocol/java-tron/blob/release_v4.4.0/shell.md</p> <p>The world of reality has its limits; the world of imagination is boundless. </p> <p> ---  Rousseau</p>"},{"location":"releases/history/#greatvoyage-430bacon","title":"GreatVoyage-4.3.0(Bacon)","text":"<p>The release of GreatVoyage-v4.3.0 (Bacon) includes several significant optimization enhancements. The configurability of the parameters <code>FREE_NET_LIMIT</code> and <code>TOTAL_NET_LIMIT</code> will aid the TRON community in achieving improved on-chain governance; The addition of new TVM instructions and ABI types facilitates the use of smart contracts; the new cryptography library strengthens the TRON network's security; the optimization of the account data storage and transaction verification procedures increases transaction processing speed and block verification speed, greatly improving the TRON network's performance; node startup speed improvement will benefit customers and help the TRON ecosystem grow even further.</p>"},{"location":"releases/history/#core_11","title":"Core","text":""},{"location":"releases/history/#1-add-a-proposal-to-adjust-the-free-net-limit-in-an-account","title":"1. Add a proposal to adjust the free net limit in an account.","text":"<p>Prior to GreatVoyage-v4.3.0 (Bacon), the account's daily free bandwidth quota was fixed at 5000. The GreatVoyage-v4.3.0 (Bacon) version includes the #61 proposal <code>FREE_NET_LIMIT</code>, which allows for the customization of the free bandwidth quota. Super representatives and super partners may initiate a vote request for Proposal 61, which modifies the <code>FREE_NET_LIMIT</code> variable, which has the value [0, 100000].</p> <ul> <li>TIP: https://github.com/tronprotocol/tips/blob/master/tip-292.md</li> <li>Source Code: https://github.com/tronprotocol/java-tron/pull/3917 </li> </ul> <p>NOTICE The account's daily free bandwidth quota  is not changed now. The super representative or super partner will initiate a vote request to change the value in the future.</p>"},{"location":"releases/history/#2-add-a-proposal-to-adjust-the-total-net-limit","title":"2. Add a proposal to adjust the total net limit.","text":"<p>Prior to GreatVoyage-v4.3.0 (Bacon), the total bandwidth obtained by staking TRX throughout the entire network was fixed at 43,200,000,000. The GreatVoyage-v4.3.0 (Bacon) version incorporates proposal #62 <code>TOTAL_NET_LIMIT</code>, which allows for configuring the total bandwidth available by staking TRX over the entire network. Super representatives and super partners may initiate a voting request for Proposal 62, which amends <code>TOTAL_NET_LIMIT</code>. <code>TOTAL_NET_LIMIT</code> has a range of [0, 1000000000000].</p> <ul> <li>TIP: https://github.com/tronprotocol/tips/blob/master/tip-293.md </li> <li>Source Code: https://github.com/tronprotocol/java-tron/pull/3917  </li> </ul> <p>NOTICE The total net limit is not changed now. The super representative or super partner will initiate a vote request to change the value in the future.</p>"},{"location":"releases/history/#3-optimize-the-account-data-structure","title":"3. Optimize the Account Data Structure","text":"<p>Account is a database that receives numerous accesses during the node's operation, necessitating frequent deserialization operations on the account data structure. Prior to GreatVoyage-v4.3.0 (Bacon), Account contained not only the account's basic data, but also user TRC-10 asset data. However, for TRX transfers and smart contract-related transactions, only the Account's basic data is used. An excessively large TRC-10 asset list will have a significant impact on the Account data structure's deserialization performance. GreatVoyage-v4.3.0 (Bacon) improves the Account database's storage structure by separating TRC-10 asset data from the Account and storing it independently in the <code>AccountAssetIssue</code>. Reduce the amount of data that is deserialized during Account deserialization and increase the deserialization speed.</p> <ul> <li>TIP: https://github.com/tronprotocol/tips/blob/master/tip-295.md </li> <li>Source Code: https://github.com/tronprotocol/java-tron/pull/3906 </li> </ul> <p>NOTICE By default, this feature is disabled, and the super representative or super partner will initiate a vote request to enable it in the future.</p>"},{"location":"releases/history/#tvm_8","title":"TVM","text":""},{"location":"releases/history/#1-add-vote-instructions-and-precompile-contracts-in-tvm","title":"1. Add Vote Instructions and Precompile Contracts in TVM","text":"<p>Ordinary accounts can earn block rewards and voting rewards in versions prior to GreatVoyage-v4.3.0 (Bacon) by voting for super representatives or super representative candidates. However, because TVM does not accept voting instructions, TRX assets in smart contract accounts are unable to generate revenue via voting. The GreatVoyage-v4.3.0 (Bacon) version adds voting instructions to TVM: <code>VOTE</code> / <code>WITHDRAWBALANCE</code>, allowing smart contract accounts to vote for super representatives or super representative candidates.</p> <ul> <li>TIP: https://github.com/tronprotocol/tips/blob/master/tip-271.md </li> <li>Source Code: https://github.com/tronprotocol/java-tron/pull/3921 </li> </ul> <p>NOTICE By default, this feature is disabled, and the super representative or super partner will initiate a vote request to enable it in the future.</p>"},{"location":"releases/history/#2-add-a-new-type-error-in-smart-contract-abi","title":"2. Add a New Type: <code>Error</code> in Smart Contract ABI","text":"<p>GreatVoyage-v4.3.0 (Bacon) provides a new ABI type Error, which is a custom error type that is compatible with Ethereum solidity 0.8.4's new features.</p> <ul> <li>TIP: https://github.com/tronprotocol/tips/blob/master/tip-306.md </li> <li>Source Code: https://github.com/tronprotocol/java-tron/pull/3921 </li> </ul>"},{"location":"releases/history/#api_10","title":"API","text":""},{"location":"releases/history/#1-add-a-new-field-energy_used-in-transactionextention","title":"1. Add a New Field: <code>energy_used</code> in <code>TransactionExtention</code>","text":"<p>Users cannot forecast the energy usage of smart contract transactions in versions earlier to GreatVoyage-v4.3.0 (Bacon). The version of GreatVoyage-v4.3.0 (Bacon) adds the <code>energy_used</code> field to the <code>TransactionExtension</code>. When the user invokes the contract method via <code>TriggerConstantContract</code>, a sandbox environment based on the most recently synchronized block at the current node is created to supply TVM with this method call. Following the execution, the actual energy consumption figure is written to the <code>energy_used</code> field(this operation will not generate an on-chain transaction, nor will it change the status of the current node).</p> <ul> <li>Source Code: https://github.com/tronprotocol/java-tron/pull/3940 </li> </ul>"},{"location":"releases/history/#changes_1","title":"Changes","text":""},{"location":"releases/history/#1-change-the-cryptography-library-to-bouncy-castle","title":"1. Change the Cryptography Library to Bouncy Castle","text":"<p>Since <code>SpongyCastle</code> is no longer maintained, <code>BouncyCastle</code> is utilized as the encryption library starting with GreatVoyage-v4.3.0 (Bacon).</p> <ul> <li>Source Code: https://github.com/tronprotocol/java-tron/pull/3919 </li> </ul>"},{"location":"releases/history/#2-modify-the-calculation-of-net_usage-value-in-the-transactioninfo-when-creating-new-accounts","title":"2. Modify the Calculation of <code>net_usage</code> Value in the <code>Transactioninfo</code> when Creating New Accounts","text":"<p>When a new account is created in GreatVoyage-v4.3.0 (Bacon), the method for calculating <code>net_usage</code> is altered.</p> <ul> <li>Source Code: https://github.com/tronprotocol/java-tron/pull/3917 </li> </ul>"},{"location":"releases/history/#3-optimize-the-block-verification","title":"3. Optimize the Block Verification","text":"<p>When a node checks a block prior to GreatVoyage-v4.3.0 (Bacon), it verifies each transaction included inside it, regardless of whether it has been verified previously. The transaction verification procedure consumes roughly one-third of the total time required to process a block. The GreatVoyage-v4.3.0 (Bacon) release optimizes the block verification logic. If non-<code>AccountUpdateContract</code> transactions in the block have been validated previously (<code>AccountUpdateContract</code> transactions entail account permission changes), they will no longer be verified to expedite block verification.</p> <ul> <li>TIP: https://github.com/tronprotocol/tips/blob/master/tip-276.md </li> <li>Source Code: https://github.com/tronprotocol/java-tron/pull/3910 </li> </ul>"},{"location":"releases/history/#4-optimize-the-node-startup","title":"4. Optimize the Node Startup","text":"<p>Prior to GreatVoyage-v4.3.0 (Bacon), during node startup, transaction cache and block data from the database are read to complete the RAM transaction cache initialization. The RAM transaction cache initialization process has been streamlined in GreatVoyage-v4.3.0 (Bacon), and some superfluous parsing processes have been deleted. The speed of node startup will be increased following optimization.</p> <ul> <li>TIP: https://github.com/tronprotocol/tips/blob/master/tip-285.md </li> <li>Source Code: https://github.com/tronprotocol/java-tron/pull/3907 </li> </ul>"},{"location":"releases/history/#5-optimize-transaction-processing-flow-to-reduce-memory-usage","title":"5. Optimize Transaction Processing Flow to Reduce Memory Usage","text":"<p>The transaction processing flow is streamlined in GreatVoyage-v4.3.0 (Bacon), unneeded objects are released in advance, and memory utilization is optimized.</p> <ul> <li>Source Code: https://github.com/tronprotocol/java-tron/pull/3911 </li> </ul>"},{"location":"releases/history/#6-add-new-plugins-to-optimize-the-performance-of-levedb-startup","title":"6. Add New Plugins to Optimize the Performance of <code>levedb</code> Startup","text":"<p>In the version before GreatVoyage-v4.3.0 (Bacon), with the running of <code>levedb</code>, the manifest file will continue to grow. Excessive manifest file will not only affect the startup speed of the node but also may cause the memory to continue to grow and lead to insufficient memory and the service was terminated abnormally. GreatVoyage-v4.3.0 (Bacon) introduces the <code>leveldb</code> startup optimization plug-in. The plug-in optimizes the file size of the manifest and the startup process of LevelDB, reduces memory usage, and improves node startup speed.</p> <ul> <li>TIP:  https://github.com/tronprotocol/tips/blob/master/tip-298.md </li> <li>Source Code:  https://github.com/tronprotocol/java-tron/pull/3925</li> <li>Plug-in Usage Guide: https://tronprotocol.github.io/documentation-en/using_javatron/toolkit/#leveldb-startup-optimization</li> </ul> <p>Knowledge is power. </p> <p> --- Francis Bacon </p>"},{"location":"releases/history/#greatvoyage-4221epictetus","title":"GreatVoyage-4.2.2.1(Epictetus)","text":"<p>We have just released the version of GreatVoyage-v4.2.2.1(Epictetus). The main new features and modifications are as follows:</p>"},{"location":"releases/history/#core-protocol","title":"Core Protocol","text":""},{"location":"releases/history/#1-optimize-the-processing-logic-of-pending-transactions","title":"1. Optimize the processing logic of <code>pending transactions</code>.","text":"<p>In the versions before GreatVoyage-v4.2.2.1(Epictetus), if the node has enabled the event subscription service, there will be a small probability of abnormal node synchronization.</p> <p>The GreatVoyage-v4.2.2.1(Epictetus) version optimizes the processing logic of <code>pending transaction</code>, fixes the synchronization exception, and improves the stability of the event subscription service.</p> <ul> <li>Source code: #3874</li> </ul> <p>The update introduced by the GreatVoyage-v4.2.2.1(Epictetus) version optimizes the processing logic of <code>pending transaction</code>, which will greatly improve the stability of the event subscription service, bring a better experience for TRON users, and further prosper the TRON ecosystem.</p> <p>No great thing is created suddenly. </p> <p> --- Epictetus</p>"},{"location":"releases/history/#greatvoyage-422lucretius","title":"GreatVoyage-4.2.2(Lucretius)","text":"<p>The version of GreatVoyage-v4.2.2 (Lucretius) introduces three important optimizations. The optimization of block processing effectively improves the execution speed of the block, thereby significantly improving the performance of the TRON network. Efficient HTTP/RPC query and excellent TVM performance will bring a better experience to TRON DAPP users and further prosper the TRON ecosystem.</p>"},{"location":"releases/history/#core-protocol_1","title":"Core Protocol","text":""},{"location":"releases/history/#1-block-processing-optimization","title":"1. Block Processing optimization","text":"<p>In the versions before GreatVoyage-v4.2.2 (Lucretius), to obtain the witness list during block processing, multiple database queries and deserialization operations were performed, which took up nearly 1/3 of the block processing time.</p> <p>The GreatVoyage-v4.2.2 (Lucretius) version simplifies the query of witnesses. In the block processing process, the witness list can be obtained by only one query. After testing, this optimization has dramatically improved the block processing performance.</p> <ul> <li>TIP: TIP-269</li> <li>Source code: #3827</li> </ul>"},{"location":"releases/history/#2-data-query-optimization","title":"2. Data Query optimization","text":"<p>In the versions before GreatVoyage-v4.2.2 (Lucretius), multiple HTTP or RPC queries for data on the chain are mutually exclusive. If a query request is being processed, a new query request will keep waiting until the previous request is completed. </p> <p>However, data query methods never use shared data, and no lock operation is required. This optimization removes unnecessary synchronization locks in the query process and improves the performance of internal queries, HTTP and RPC query requests of nodes.</p>"},{"location":"releases/history/#3-smart-contract-abi-storage-optimization","title":"3. Smart Contract ABI Storage optimization","text":"<p>In the version before GreatVoyage-v4.2.2 (Lucretius), the ABI other data of the smart contract are stored together in the contract database, and some high-frequency instructions (SLOAD, SSTORE, Etc.) will read all the data of a smart contract from the contract database. However, the execution of the contract does not use these ABI data, and these frequent readings will impact the execution efficiency of these instructions.</p> <p>In the version of GreatVoyage-v4.2.2 (Lucretius), smart contract ABIs are transferred to a particular ABI database. The ABI data will no longer be read during the execution of the contract, thus significantly improving the performance of TVM.</p> <ul> <li>TIP: TIP-268</li> <li>Source code: #3836</li> </ul>"},{"location":"releases/history/#other-changes_17","title":"Other Changes","text":""},{"location":"releases/history/#1-system-contract-batchvalidatesign-initialization-process-optimization","title":"1. System Contract <code>BatchValidateSign</code> Initialization Process optimization","text":"<ul> <li>Source code: #3836</li> </ul> <p>--- Truths kindle light for truths. </p> <p> --- Lucretius</p>"},{"location":"releases/history/#greatvoyage-420plato","title":"GreatVoyage-4.2.0(Plato)","text":"<p>The GreatVoyage-4.2.0 (Plato) version introduces two important updates. The optimization of the resource model will increase the utilization rate of TRON network resources and make the resource acquisition method more reasonable. The new TVM instructions make the use scenarios of smart contracts more abundant and will further enrich the TRON ecosystem.</p>"},{"location":"releases/history/#core-protocol_2","title":"Core Protocol","text":""},{"location":"releases/history/#1-optimize-the-resource-model","title":"1. Optimize the resource model","text":"<p>Before the GreatVoyage-4.2.0 (Plato) version, while users obtained a large amount of TRON power by staking TRX, they also obtained a large amount of energy and bandwidth. The utilization rate of these energies and bandwidth is extremely low, and most of them are not used at all, which increases the cost of obtaining resources. In order to improve the utilization rate of these resources, the GreatVoyage-4.2.0(Plato) version proposes an optimization of the resource model, where staking TRX can only obtain one of the three resources, namely bandwidth, energy, and TRON power. After optimization, users can obtain the corresponding resources based on their own needs, thereby improving the utilization rate of resources.</p> <ul> <li>TIP\uff1a TIP-207</li> <li>Source Code:  #3726</li> </ul> <p>Notes:   * This feature is disabled by default and can be enabled through the proposal system.   * After the feature is enabled, the user's previously obtained resources remain unchanged. The TRON power obtained before the proposal passage will be cleared when the user triggers an unstake  transaction (unstake bandwidth, energy, or TRON power).</p>"},{"location":"releases/history/#tvm_9","title":"TVM","text":""},{"location":"releases/history/#1add-freezeunfreeze-instructions-in-tvm","title":"1\u3001Add Freeze/Unfreeze instructions in TVM","text":"<p>In the TRON network, one non-contract account can stake TRX to obtain resources such as bandwidth, energy, TRON power, and reasonable use of these resources can bring certain benefits to users. At the same time, although smart contract accounts do have TRX, there is no way to stake these TRX to obtain resources.  In order to solve this inconsistency, the GreatVoyage-4.2.0(Plato) version introduces Freeze/Unfreeze instructions in TVM, so that smart contracts can also support staking TRX to obtain resources.</p> <ul> <li>TIP: TIP-157</li> <li>Source Code\uff1a #3728</li> </ul> <p>Notes:   * This feature is disabled by default and can be enabled through the proposal system.   * The TVM <code>freeze</code> instruction can obtain bandwidth and energy. For TRON POWER, it can be obtained and used after the TVM supports the voting instruction.   * The <code>receiving</code> address/<code>target</code> address used in the Freeze/Unfreeze instructions must be <code>address payable</code> type, and the <code>receiving</code> address/<code>target</code> address cannot be a contract address other than itself.   * The inactive account will be automatically activated if the account is the receiver of TVM <code>Freeze</code> instruction, and 25,000 energy will be deducted as the account activation cost.</p>"},{"location":"releases/history/#other-changes_18","title":"Other Changes","text":""},{"location":"releases/history/#1optimize-the-block-synchronization","title":"1\u3001Optimize the block synchronization.","text":"<ul> <li>Source code\uff1a#3732</li> </ul> <p>The beginning is the most important part of the work. </p> <p> --- Plato</p>"},{"location":"releases/history/#greatvoyage-413thales","title":"GreatVoyage-4.1.3(Thales)","text":"<p>GreatVoyage-4.1.3(Thales)  is released with the following new features and modifications:</p>"},{"location":"releases/history/#core-protocol_3","title":"Core Protocol","text":""},{"location":"releases/history/#1sorting-the-transactions-in-pending-pool-sr-will-prioritize-the-transactions-with-high-packing-fee","title":"1.Sorting the transactions in pending pool,  SR will prioritize the transactions with high packing fee","text":"<p>In GreatVoyage-4.1.2 and earlier versions, SR packaging transactions are carried out in accordance with the time sequence of the arrival of the transaction.This will easily be attacked by low transaction fees.</p> <p>After this optimization, block producers sort the transactions to be packaged according to the cost, and then prioritize the transaction with high cost to prevent low-cost transaction attacks.</p>"},{"location":"releases/history/#api_11","title":"API","text":""},{"location":"releases/history/#1add-new-api-to-support-transaction-query-in-pending-pool","title":"1.Add new API to support transaction query in pending pool.","text":"<p>It is currently impossible to query the intermediate state information of a certain transaction from after it is issued to before it is on the chain.After a transaction is sent, if it is not on the chain, we cannot know whether it is waiting for packaging or has been discarded.</p> <p>In this upgrade, the Fullnode node provides 3 API to obtain detailed information about the pending pool: - /wallet/gettransactionfrompending: Obtain the transaction information from pending pool through the - transaction ID - /wallet/gettransactionlistfrompending: Get all transactions from the pending pool - /wallet/getpendingsize: Get the number of transactions in pending pool</p> <p>The optimization of transaction packaging logic of GreatVoyage-4.1.3(Thales)  will effectively reduce low-cost attacks and greatly improve the security of the TRON public chain.</p>"},{"location":"releases/history/#great-voyage-v412","title":"Great Voyage - v4.1.2","text":"<p>GreatVoyage-version 4.1.2 is released with the following new features and modifications:</p>"},{"location":"releases/history/#i-core-protocol","title":"I. Core Protocol","text":""},{"location":"releases/history/#1reward-srs-with-the-transaction-fees-charged-for-bandwidth-and-energy","title":"1\u3001Reward SRs with the transaction fees charged for bandwidth and energy.","text":"<p>After this feature is turned on, the transaction fee from burning TRX which charged for bandwidth/energy (except OUT_OF_TIME) will be transferred to TRANSACTION_FEE_POOL. At the end of each block, the fee of all transactions in this block is rewarded to the block SR and its voters. At the same time, in \"transactioninfo\", the \"packingFee\" field is added to indicate the available fees to the current SR and SR voters. </p> <ul> <li>TIP: TIP-196</li> <li>Source Code:  #3532</li> </ul>"},{"location":"releases/history/#2support-account-history-balance-query","title":"2\u3001Support account history balance query.","text":"<p>The account historical balance query function can facilitate developers to query the account balance information at a specific block height. Developers can obtain the account historical balance information through the following two APIs.</p> <ul> <li>/wallet/getaccountbalance \uff1aquery account balance at a specific block.</li> <li>/wallet/getblockbalance \uff1a Query the balance-changing operations in a specific block.</li> </ul> <p>Note: 1. This function is disabled by default and can be enabled through the node configuration file. 2. After the function is enabled, users can only query the historical balance after the enabled time. If users need to query the complete historical balance information, they can use the data snapshot which contains the historical balance information to resynchronize the node.</p> <ul> <li>Source Code\uff1a#3538</li> <li>Guide \uff1a https://github.com/tronprotocol/documentation-en/blob/master/docs/api/http.md</li> </ul>"},{"location":"releases/history/#3optimized-the-blackhole-account-to-improve-transaction-execution-speed","title":"3\u3001Optimized the blackhole account to improve transaction execution speed","text":"<p>After the feature is turned on, the transaction fee from burning TRX which charged f for bandwidth and energy will no longer be transferred to the black hole address but will be directly accumulated and recorded in the database.</p> <ul> <li>Source code\uff1a #3617</li> </ul>"},{"location":"releases/history/#ii-tvm","title":"II. TVM","text":""},{"location":"releases/history/#1adopt-to-solidity060","title":"1\u3001Adopt to solidity0.6.0.","text":"<p>After this upgrade, TRON will be fully compatible with the new features introduced by solidity 0.6.0, including the new virtual and override keywords, and supporting try/catch. For details, please refer to the TRON Solidity release note: https://github.com/tronprotocol/solidity/releases/tag/tv_0.6.0 </p> <ul> <li>TIP:  TIP-209</li> <li>Source Code\uff1a #3351</li> </ul>"},{"location":"releases/history/#2make-max_fee_limit-configurable-as-a-chain-property","title":"2\u3001Make MAX_FEE_LIMIT configurable as a chain property.","text":"<p>After the new version, SR and SRP can initiate a voting request to modify MAX_FEE_LIMIT. The range of MAX_FEE_LIMIT is [0,10000000000].</p> <ul> <li>TIP\uff1a TIP-204 </li> <li>Source code\uff1a  #3534</li> </ul>"},{"location":"releases/history/#iii-others-changes","title":"III. Others Changes","text":""},{"location":"releases/history/#1use-the-jitpack-repository-to-provide-dependency-support-and-make-it-easy-for-developers-to-use-java-tron-as-a-dependency-for-their-projects","title":"1\u3001Use the jitpack repository to provide dependency support and make it easy for developers to use java-tron as a dependency for their projects.","text":"<ul> <li>Source code: #3554</li> </ul>"},{"location":"releases/history/#greatvoyage-v411","title":"GreatVoyage-v4.1.1","text":"<p>GreatVoyage-version 4.1.1 is released with the following new features and modifications:</p>"},{"location":"releases/history/#i-core-protocol_1","title":"I. Core Protocol","text":""},{"location":"releases/history/#1-new-consensus-protocol","title":"1. New Consensus Protocol","text":"<p>The new consensus mechanism combines TRON's existing DPoS consensus with the PBFT consensus mechanism. PBFT's three-phase voting mechanism is adopted to confirm whether a block should be solidified. It will take an average of 1-2 slots (a slot equals 3s) from creation to confirmation of a TRON block, much shorter than the previous 19 slots. This signifies a remarkable increase in the block confirmation speed. TIP: TICP-Optimized-PBFT Source code: #3082</p>"},{"location":"releases/history/#2-new-node-type","title":"2. New Node Type","text":"<p>We added another type of node to the existing FullNode: Lite FullNode. Lite FullNode executes the same code with the FullNode. What sets it apart is that its launch is based on the status data snapshot, which contains all the status data and data history of the latest 256 blocks. The status data snapshot can be acquired by executing LiteFullNodeTool.jar (please see: Use the LiteFullNode Tool). - TIP: TIP-128 - Source code: #3031</p>"},{"location":"releases/history/#ii-tvm_1","title":"II. TVM","text":""},{"location":"releases/history/#achieved-compatibility-with-ethereum-istanbul-upgrade","title":"Achieved compatibility with Ethereum Istanbul upgrade","text":"<p>a. Added new instruction <code>CHAINID</code> to fetch the genesis block ID of the current chain, which avoids possible replay attacks of one transaction being repeated on different chains. - TIP: TIP-174 - Source code: #3351</p> <p>b. Added new instruction <code>SELFBALANCE</code> to fetch the balance of the current contract address in the smart contract. For obtaining the balance of any address, please stick with instruction BALANCE.SELFBALANCE is safer to use. Energy consumption of using <code>BALANCE</code> might rise in the future. - TIP: TIP-175 - Source code: #3351</p> <p>c. Reduced Energy consumption of three precompiled contract instructions, namely BN128Addition, BN128Multiplication, and BN128Pairing. BN128Addition: from 500 Energy to 150 Energy BN128Multiplication: from 40000 Energy to 6000 Energy BN128Pairing: from (80000 * pairs + 100000) Energy to (34000 * pairs + 45000) Energy - TIP: TIP-176 - Source code: #3351</p>"},{"location":"releases/history/#iii-mechanism","title":"III. Mechanism","text":"<ol> <li>Added two new system contracts, namely MarketSellAssetContract and MarketCancelOrderContract, for on-chain TRX/TRC10 transactions in decentralized exchanges.</li> <li>TIP: TIP-127</li> <li>Source code: #3302</li> </ol>"},{"location":"releases/history/#iv-other-modifications","title":"IV. Other Modifications","text":"<ol> <li>Added a few node performance indicators.</li> <li> <p>Source code: #3350</p> </li> <li> <p>Added market order detail in the original transactionInfo interface.</p> </li> <li>TIP: TIP-127</li> <li> <p>Source code: #3302</p> </li> <li> <p>Improved the script for docker deployment.</p> </li> <li>Source code: #3330</li> </ol>"},{"location":"releases/history/#greatvoyage-v400","title":"GreatVoyage-v4.0.0","text":"<p>Release 4.0.0 has implemented the shielded TRC-20 contract, which can hide the source address, destination address, and the token amount for TRC-20 transactions and provide users with better privacy.  The shielded TRC-20 contract has three core functions: <code>mint</code>, <code>transfer</code> and <code>burn</code>. <code>mint</code> is used to transform the public TRC-20 token to shielded token; <code>transfer</code> is used for shielded token transactions; <code>burn</code> is used to transform the shielded token back to the public TRC-20 token. To support the shielded TRC-20 contract,  four new zero-knowledge instructions (<code>verifyMintProof</code>, <code>verifyTransferProof</code>, <code>verifyBurnProof</code> and <code>pedersenHash</code>) are add in TVM, which make it convenient to provide privacy for arbitrary TRC-20 contract.</p>"},{"location":"releases/history/#notices","title":"Notices","text":"<p>Forced upgrade</p>"},{"location":"releases/history/#new-features","title":"New features","text":"<ul> <li>Add 4 new instructions (<code>verifyMintProof</code>, <code>verifyTransferProof</code>, <code>verifyBurnProof</code> and <code>pedersenHash</code>) in TVM to support TRC20 shielded transactions based on zk-SNARKs (#3172).</li> <li><code>verifyMintProof</code>: used to validate the zero-knowledge proof for <code>mint</code> function.</li> <li><code>verifyTransferProof</code>: used to validate the zero-knowledge proof for <code>transfer</code> function.</li> <li><code>verifyBurnProof</code>: used to validate  the zero-knowledge proof for <code>burn</code> function.</li> <li><code>pedersenHash</code>: used to compute the Pedersen hash.</li> <li>Update the initial parameters of zk-SNARKs scheme generated by the MPC Torch (#3210).</li> <li>Add the APIs to support shielded TRC-20 contract transaction (#3172).</li> </ul> <p>1.\u00a0Create shielded contract parameters   <pre><code>rpc CreateShieldedContractParameters (PrivateShieldedTRC20Parameters) returns (ShieldedTRC20Parameters) {}\n</code></pre>   2.\u00a0Create shielded contract parameters without ask   <pre><code>rpc CreateShieldedContractParametersWithoutAsk (PrivateShieldedTRC20ParametersWithoutAsk) returns (ShieldedTRC20Parameters) {}\n</code></pre>   3.\u00a0Scan shielded TRC20 notes by ivk   <pre><code>rpc ScanShieldedTRC20NotesByIvk (IvkDecryptTRC20Parameters) returns (DecryptNotesTRC20) {}\n</code></pre>   4.\u00a0Scan shielded TRC20 notes by ovk   <pre><code>rpc ScanShieldedTRC20NotesByOvk (OvkDecryptTRC20Parameters) returns (DecryptNotesTRC20) {}\n</code></pre>   5.\u00a0Check if the shielded TRC20 note is spent   <pre><code>rpc IsShieldedTRC20ContractNoteSpent (NfTRC20Parameters) returns (NullifierResult) {}\n</code></pre>   6.\u00a0Get the trigger input for the shielded TRC20 contract   <pre><code>  rpc GetTriggerInputForShieldedTRC20Contract (ShieldedTRC20TriggerContractParameters) returns (BytesMessage) {}\n</code></pre> - Support the <code>ovk</code> to scan the transparent output of  <code>burn</code> transaction (#3203). - Support the <code>burn</code> transaction with zero or one shielded output (#3224). - Add data field in transaction log trigger class for future memo note (#3200).</p> <p>The following TIPs are implemented in this release: - TIP-135: Shielded TRC-20 contract standards, guarantee the privacy of the shielded transfer of TRC-20 tokens. - TIP-137: Implements three zero-knowledge proof instructions in TVM to support the shielded TRC-20 contract (#3172). - TIP-138: Implements the Pedersen hash computation instruction in TVM to support the shielded TRC-20 contract (#3172).</p>"},{"location":"releases/history/#changes_2","title":"Changes","text":"<ul> <li>Check if null before getInstance when get transaction info from DB to fix exception of <code>getTransactioninfoByBlkNum</code> (#3165).</li> </ul>"},{"location":"releases/history/#odyssey-v37","title":"Odyssey-v3.7","text":"<p>Odyssey-v3.7 is a non-mandatory upgrade, includes the following new features and improvements.</p>"},{"location":"releases/history/#modularization","title":"Modularization","text":"<p>Odyssey-v3.7 has modularized the code organization structure, making it much easier for developers to develop customized module\uff0cseveral mainly modules are listed as follows\uff1a</p>"},{"location":"releases/history/#framework","title":"Framework","text":"<p>As the core module, Framework performs as both a gateway to the blockchain and an adhesive that effectively connects all other modules. In other words, the framework module initializes each module and facilitates communication between modules.</p>"},{"location":"releases/history/#protocol","title":"Protocol","text":"<p>The decentralized TRON protocol can be implemented by any teams without limitation of programming languages. Any clients in accordance with the TRON protocol can communicate with each other. A concise and efficient data transfer protocol is essential to a distributed network, even more for the blockchain. So, the implementation of the protocol is based on the Protocol Buffers, an open-source and excellent software protocol maintained by Google.  The specific business logic of the blockchain defined by the protocol includes: - the data format of message\uff0cincluding block, transaction, proposal, witness, vote, account, exchange and so on. - the communication protocols between blockchain nodes, including the node discovery protocol, the node data synchronization protocol, the node scoring protocol and so on. - the interface protocols that the blockchain provides to the external system or clients</p>"},{"location":"releases/history/#consensus","title":"Consensus","text":"<p>The consensus mechanism is an essential part of the blockchain. The TRON blockchain chooses the DPoS as the core consensus mechanism and it has been running steadily for a long time. But replaceable consensus module is essential if we want to redefine the java-tron as the powerful infrastructure for building application-specific blockchains. The developers of blockchain should determine to choose the consensus mechanism that considered to be most suitable to the specific application scenario. The ultimate goal of the replaceable consensus module is that the consensus mechanism can be determined by configuring some necessary parameters. In addition, the developers can implement a customized consensus module as long as several essential interfaces implemented.</p>"},{"location":"releases/history/#crypto","title":"Crypto","text":"<p>Encryption is also one of the core modules of the blockchain. It is the foundation of the blockchain data security. such as public and private key deduction, transaction verification, zero-knowledge proof, etc. The java-tron abstracts the encryption module and supports the replacement of encryption algorithms. A suitable encryption algorithm can be chosen according to different business needs.</p>"},{"location":"releases/history/#actuator","title":"Actuator","text":"<p>Actuator is the core module used for handling various kinds of transactions. As you know, every transaction in the TRON blockchain contains a contract. On a high level, there are two types of contracts in the TRON blockchain, the system contract and the smart contract. A large number of applications are implemented by the smart contracts and ran in an internal virtual machine of the blockchain. Unfortunately, smart contracts are constrained in terms of their functions and not flexible enough to accommodate the needs of complex applications. Customized actuators offer application developers a brand new way of development. They can choose to implant their application codes into the chain instead of running them on virtual machines.</p>"},{"location":"releases/history/#chainbase","title":"Chainbase","text":"<p>Chainbase is specially designed for data storage in the blockchain. Nodes always consider the longest chain to be the correct one and will keep working on extending it. So switching to the longest chain is a common scenario for the blockchain unless it uses a deterministic consensus algorithm like PBFT. For this reason, supporting data rollback is the most distinctive feature of the chainbase module. Several well-designed abstract interfaces are defined in this module. So, the developers can choose the storage engine freely and then implement corresponding interfaces. The LevelDB and RocksDB are two existing implementation.</p>"},{"location":"releases/history/#new-event-subscription-trigger-for-solidified-block","title":"New event subscription trigger for solidified block","text":"<p>Added a subscription trigger for the updating a solidified block, which triggers the solidified block update event to the message queue, so that users can get the latest solidified block information on time. A solidified block is a block that regarded as can not be revocable. So, when the block becomes a solidified block, it means that the transactions packed in this block are accepted by the blockchain.</p>"},{"location":"releases/history/#two-new-http-apis-added","title":"Two new HTTP APIs added","text":"<p>gettransactioninfobyblocknum</p> <p>This api is both added in the context: /wallet &amp; /walletsolidity. * Description: Query the list of information of transactions in a specific block. * Parameter num: the height of the block. * Return: The list of transaction information.</p> <p>broadcasthex</p> <p>/wallet/broadcasthex * Description: broadcast signed transaction with the format of the hex string * Parameter: signed transaction with the format of the hex string * Return: the result of the broadcast</p>"},{"location":"releases/history/#a-new-rpc-api-added","title":"A new RPC API added","text":"<p>Adding the <code>GetTransactionInfoByBlockNum</code> method both in <code>Wallet</code> <code>WalletSolidity</code> services\uff1a <pre><code>rpc GetTransactionInfoByBlockNum (NumberMessage) returns (TransactionInfoList) {\n}\n</code></pre> a code snippet\uff1a <pre><code>NumberMessage.Builder builder = NumberMessage.newBuilder();\nbuilder.setNum(blockNum);\nTransactionInfoList transactionInfoList = blockingStubFull.getTransactionInfoByBlockNum(builder.build());\n</code></pre></p>"},{"location":"releases/history/#odyssey-v365","title":"Odyssey-v3.6.5","text":"<p>Odyssey v3.6.5 Update includes the following new features and improvements   </p>"},{"location":"releases/history/#1-new-delegation-mechanism","title":"1. New delegation mechanism","text":"<p>The new delegation mechanism enables SRs to set commission rates by themselves, which will serve as a reference for users when they vote for SRs. Meanwhile, traceability of the SR\u2019s commission rate on the chain makes the amount of rewards that users receive through voting more transparent. Moreover, the new delegation mechanism lays a foundation for more complex consensus mechanisms and incentive schemes in the near future. </p>"},{"location":"releases/history/#2-fairer-and-more-efficient-staking-rewards-mechanism","title":"2. Fairer and more efficient staking rewards mechanism","text":"<p>Staking rewards are now distributed in a fully-decentralized way, a step forward from the old partially-decentralized mechanism. With this change, staking rewards are now distributed entirely through the blockchain, ensuring complete supervision from the chain and thus true decentralization. Moreover, the new mechanism cuts unnecessary reward distribution transactions, signaling lower bandwidth consumption and higher efficiency on the TRON network.</p>"},{"location":"releases/history/#3-fairer-incentive-mechanism","title":"3. Fairer incentive mechanism","text":"<p>Block rewards decreased from 32 TRX to 16 TRX, while voting rewards increased from 16 TRX to 160 TRX. The adjustment will boost voter turnout in the community, with more TRX locked up by users in the TRON ecosystem. This move is accompanied by the new staking rewards mechanism to guarantee real staking revenues to users.</p>"},{"location":"releases/history/#4-improvement-and-optimization-of-tvm","title":"4. Improvement and optimization of TVM","text":"<p>(1) Added a new VM instruction ISCONTRACT(0xd4), which has made smart contract development more flexible by allowing developers to identify the type of the target address in VMs when writing contracts.  batchvalidatesign(bytes32 hash, bytes[] memory signatures, address[] memory addresses) </p> <p>(2) Adopted a multi-thread method for VMs to verify signatures, which is faster than ecrecover of Ethereum while cutting Energy consumption by half. Contract address: 0x09. To use it in solidity: batchvalidatesign(bytes32 hash, bytes[] memory signatures, address[] memory addresses)  validatemultisign(address accountAddress, uint256 permissionId, bytes32 content, bytes[] signatures)</p> <p>(3) Added a new pre-compiled contract to boost multi-signature verification in TVM, speeding up the verification process and reducing Energy consumption.</p> <p>(4) Banned transfer TRX to smart contract address by two system contract TransferContract and TransferAssetContract. The transfer would fail if the target address is a smart    address when using TransferContract and TransferAssetContract. This can prevent general users from transferring assets to smart contract address by mistake, avoiding users\u2019 asset loss.</p> <p>(5) Allowed automatic activation of inactive accounts when transferring TRX/ TRC10 tokens to accounts in smart contracts. </p> <p>(6) Added triggerConstantContract feature for SolidityNode and FullNode so as to improve the functionality of node APIs.</p>"},{"location":"releases/history/#5-improvement-of-the-dynamic-adjustment-scheme-of-energy-upper-limit","title":"5. Improvement of the dynamic adjustment scheme of Energy upper limit","text":"<p>The method of calculating Energy consumed per unit of time shifted from only calculating the staked Energy consumed to all Energy consumed. With this change, statistics of Energy consumption will be more accurate and effective, providing reference for adjusting Energy upper limit, saving users\u2019 costs of using TRON blockchain network and improving network efficiency.</p>"},{"location":"releases/signature_verification/","title":"java-tron Release Package Signature Verification","text":"<p>This document provides developers with instructions on how to verify the signature of the TRON java-tron executable file to ensure its authenticity and integrity. The signature verification process requires three key pieces of information: the executable file to be verified, its digital signature, and the public key corresponding to the private key used for signing. The verification principle is to use the content of the executable file and its signature to derive the signing public key and compare it with the public key officially released on the java-tron GitHub repository. If they match, it confirms that the java-tron executable you obtained is consistent with the one published on GitHub and has not been tampered with.</p> <p>TRON's signing method for java-tron release packages has been adjusted:</p> <ul> <li>For new versions released on or after January 3, 2023: GPG is used for signing and verification.</li> <li>For versions released before January 3, 2023: A specific TRON account's public and private keys were used for signing and verification.</li> </ul> <p>This document will detail both of these signature verification processes.</p>"},{"location":"releases/signature_verification/#gpg-signature-verification-process","title":"GPG Signature Verification Process","text":"<p>For java-tron versions released after January 3, 2023, you must use GPG for signature verification. The java-tron executable and its corresponding signature file are published together on the GitHub Releases page. Please follow the steps below to perform GPG signature verification.</p>"},{"location":"releases/signature_verification/#1-install-gpg","title":"1. Install GPG","text":"<p>If you have already installed GPG, you can skip this step. Otherwise, install it using the command for your operating system:</p> <p><pre><code>brew install gpg\n</code></pre> * Debian, Ubuntu, or other Linux distributions: <pre><code>sudo apt install gpg\n</code></pre></p>"},{"location":"releases/signature_verification/#2-import-the-public-key","title":"2. Import the Public Key","text":"<p>If you have previously imported the public key, you can skip this step, as it only needs to be imported once.</p> <p>First, get the public key hash and UID of the java-tron release package GPG signature from the java-tron GitHub repository. For example:</p> <pre><code>pub: 1254 F859 D2B1 BD9F 66E7 107D F859 BCB4 4A28 290B\nuid: build@tron.network\n</code></pre> <p>Then, import the public key from the GPG public key server to your local machine using the public key hash:</p> <pre><code>gpg --recv-keys \"1254 F859 D2B1 BD9F 66E7 107D F859 BCB4 4A28 290B\"\n</code></pre> <p>If the public key import is successful, you will see output similar to this:</p> <pre><code>gpg: key 785FB96D2C7C3CA5: \"build_tron &lt;build@tron.network&gt;\" public key imported\ngpg: Total number processed: 1\ngpg:               imported: 1\n</code></pre>"},{"location":"releases/signature_verification/#3-verify-the-signature","title":"3. Verify the Signature","text":"<p>Assuming the executable you want to verify is <code>FullNode.jar</code> and its corresponding signature file is <code>FullNode.jar.sig</code>, run the following command to verify the signature:</p> <pre><code>gpg --verify FullNode.jar.sig FullNode.jar\n</code></pre> <p>If the signature verification passes, you will see the following text:</p> <pre><code>gpg: Signature made Wed Jan  6 12:21:51 2023 CST\ngpg:                using RSA key 1254F859D2B1BD9F66E7107D F859BCB44A28290B\ngpg: Good signature from \"build_tron &lt;build@tron.network&gt;\" [unknown]\ngpg: WARNING: This key is not certified with a trusted signature!\ngpg:          There is no indication that the signature belongs to the owner.\nPrimary key fingerprint: 07B2 3298 AEA4 E006 BD9A  42DE 785F B96D 2C7C 3CA5\nSubkey fingerprint: 1254 F859 D2B1 BD9F 66E7  107D F859 BCB4 4A28 290B\n</code></pre> <p>If the verification fails, it will display text like <code>Bad signature from \"build_tron &lt;build@tron.network&gt;\"</code>.</p>"},{"location":"releases/signature_verification/#tron-address-signature-verification-process","title":"TRON Address Signature Verification Process","text":"<p>For java-tron versions released before January 3, 2023, the release packages were signed by the TRON account <code>TKeAcHxgErbVXrG3N3TZiSV6AT566BHTj2</code>. The signing process is as follows:</p> <ol> <li>First, the SHA256 hash of the executable file is calculated.</li> <li>Then, the SHA256 hash is signed with the private key of the TRON account.</li> </ol> <p>The SHA256 hash and signature result for the release packages can be found in the Historical Version Signature Information section of this document or on the GitHub Releases page.</p> <p>Here, we will use the popular TRON JavaScript library, TronWeb, to demonstrate the signature verification process. TronWeb provides the <code>Trx.verifySignature</code> interface to verify signatures. A successful verification will return <code>true</code>; otherwise, it returns <code>false</code>. Please follow the process below to verify.</p>"},{"location":"releases/signature_verification/#1-install-tronweb","title":"1. Install TronWeb","text":"<p>If you have already installed TronWeb, you can skip this step. Otherwise, install it using the following command:</p> <pre><code>npm install -g tronweb\n</code></pre>"},{"location":"releases/signature_verification/#2-verify-the-release-packages-integrity","title":"2. Verify the Release Package's Integrity","text":"<p>To ensure the integrity of the release package, you need to check if its SHA256 hash matches the hash provided in the release information.</p> <p>For the <code>Odyssey-3.7</code> version, for example:</p> <ul> <li>The release package file name is: <code>FullNode.jar</code></li> <li>The release package's SHA256 is: <code>2fca93b09da4ac62641e03838e77fce99b4711ddb0c09aa91656c80fc9556d2e</code></li> <li>The signature is: <code>21435e32131feb6d00ba8048df04e112e02569ec851064d8ecad2d4dd5da44b7628ddce16823dadfff6fd683fc58cee74964970621a845ee459e2c96a750de551b</code></li> </ul> <p>On your system, execute the following command to calculate the SHA256 hash of <code>FullNode.jar</code>:</p> <ul> <li>macOS: <pre><code>shasum -a 256 FullNode.jar\n</code></pre></li> <li>Debian, Ubuntu, and other Debian-derived systems: <pre><code>sha256sum FullNode.jar\n</code></pre></li> </ul> <p>Compare the hash value from the command's output with the hash provided in the release information.</p>"},{"location":"releases/signature_verification/#3-check-the-release-package-signature","title":"3. Check the Release Package Signature","text":"<p>Use the <code>tronweb</code>'s <code>Trx.verifySignature</code> interface to verify the release package's signature. Execute the following JavaScript code in your command line:</p> <pre><code># Trx.verifySignature(SHA256, ADDRESS, SIGNATURE));\nnode -e 'console.log(require(\"tronweb\").Trx.verifySignature(\n    \"2fca93b09da4ac62641e03838e77fce99b4711ddb0c09aa91656c80fc9556d2e\",\n    \"TKeAcHxgErbVXrG3N3TZiSV6AT566BHTj2\",\n    \"21435e32131feb6d00ba8048df04e112e02569ec851064d8ecad2d4dd5da44b7628ddce16823dadfff6fd683fc58cee74964970621a845ee459e2c96a750de551b\"\n))'\n</code></pre> <p>If the signature verification passes, it will output <code>true</code>; otherwise, it will output <code>false</code>.</p>"},{"location":"releases/signature_verification/#historical-version-signature-information","title":"Historical Version Signature Information","text":""},{"location":"releases/signature_verification/#odyssey-37","title":"Odyssey-3.7","text":"<pre><code>FullNode sha256sum: 2fca93b09da4ac62641e03838e77fce99b4711ddb0c09aa91656c80fc9556d2e\nFullNode signature: 21435e32131feb6d00ba8048df04e112e02569ec851064d8ecad2d4dd5da44b7628ddce16823dadfff6fd683fc58cee74964970621a845ee459e2c96a750de551b\nSolidityNode sha256sum: fcdea8b3e511306218ba442fb0828f0413574012d646c39c212a59f6ba5844bc\nSolidityNode signature: 6dcad6e02f17467e5cfebeefa0f9963da08e7da10feebefdec47d689fecc30f104c9b7f5e784b883e7ceb786fe55188356c42c306d727fb7819eed2a71f788361c\n</code></pre>"},{"location":"releases/signature_verification/#greatvoyage-400","title":"GreatVoyage-4.0.0","text":"<pre><code>FullNode sha256sum: d3f8f9fde64bdefaadae784d09de97172e5e8a3fe539217e12b89963983a530d\nFullNode signature: e788dbaf2fe35f099f65b2403cfb0d7cbe7f4611f8c5ff8151e4bd84ae468d2e541043c9cde9e74500003027ae9f25cdda81a9bcd60abb45ca7a69f965f4dcc71c\nSolidityNode sha256sum: adddf88423c6c31f1f25ed39b10779c24dd7cdcf37f2325c02b2f2ecfc97e1f6\nSolidityNode signature: e3b9859f178f7851dedb7a0a8deb715e5f1e3af10b1064c36f2727ec2b8825510df4fd7b09d7d049204e5df3e8d5b87778e83a15ca96ce786f7977a6cb48bca91b\n</code></pre>"},{"location":"releases/signature_verification/#greatvoyage-411","title":"GreatVoyage-4.1.1","text":"<pre><code>FullNode sha256sum: 30e716b86b879af1e006c2b463903ae3835e239e32e2b01c2a1b903a153897fe\nFullNode signature: 5faee65a448bb9aa77835992ca3d24e50d8a76b7934f80664ad38e83179c8114278fdef4494de7231f8e40de86461676a7aa4a54c795f4c692e91d90e156ec471b\nSolidityNode sha256sum: 10a160181053b421109ecace74df5fc0f8860bc8a70181add65fd9a292c35a44\nSolidityNode signature: 1d1413b13adf7778f9a720294eca066ac728ad636d166505276f5ff1f63973c100c04778f937f240f10107edb7de477604857867fc4dbdb68238169c978fc3da1b\n</code></pre>"},{"location":"releases/signature_verification/#greatvoyage-v412","title":"GreatVoyage-v4.1.2","text":"<pre><code>FullNode sha256sum: 4ded44b6c1a3dbd25212e14ab413142b5463dcbf30a528f83ded529048542547\nFullNode signature: 57a094c1b8a5ec301ef913eb718de2498b5695eb999530863df05252ba8919ba6866c8490e29d36f7dbf34537c898ece5ef0111efb134419c3a5fd6fc9ec03b81c\nSolidityNode sha256sum: 3db36cadbd1f7641aafc8164983f28df4b7ceff8174e090327ed407012cf12cb\nSolidityNode signature: d07604f6811cbed628dd6e5c07880c2fdd3025848fd5365925531c7748467d5228fea2e18326864acc27f3b51c73b364fa44c450d8ec4b5080a7ddb7566724701c\n</code></pre>"},{"location":"releases/signature_verification/#greatvoyage-v413thales","title":"GreatVoyage-v4.1.3(Thales)","text":"<pre><code>FullNode sha256sum: c5fb99ad5b024bb7877118f30fb6065f6e6febd11a3cfa241521cbed73cca181\nFullNode signature: d80ec371e791c4316925d80ff3400cf51b14c8a4d4c696b7817c517eb094823622932b45b9b37f9e9657513c3eddb1134fbbb1ee56727c0957e8a3b40c67409b1c\nSolidityNode sha256sum: 4b941d71b561a8b2e0b97d7498823d900eaf287910eea1eaafc649f5aad14036\nSolidityNode signature: f8a8e8d411b009d02986cad1e19e745f8107384a274f146bcae60c570111b13556ff9ab528eb5d1fb4734bd4ef488ade4038781d06ab6420e35f28be6135fe9b1c\n</code></pre>"},{"location":"releases/signature_verification/#greatvoyage-v420plato","title":"GreatVoyage-v4.2.0(Plato)","text":"<pre><code>FullNode sha256sum:\nbbf103432be016b582452137b4862140af15ccf7c5daa9be738450705317fdb8\nFullNode signature:\n326701699a5eb8d497eb454b5b74c1559961417fb6f262b4e6314052d73f5977312e0450937fa485236f51f706b434acf8659ce1325d704097c5748629e736ef1c\nSolidityNode sha256sum:\n1db544cbca9dc814683ccf9bef28f7d6ca4469289052230394aaf4e3bcd08615\nSolidityNode signature:\n47fea27df940db0d2a4c0abf6d06969882c027bc4f17449205a28ae5cd25b8ba5339e21f105fe1c25e799d0f4ffea64a15046b9baf5b54341411b5180da439011b\n</code></pre>"},{"location":"releases/signature_verification/#greatvoyage-v421origen","title":"GreatVoyage-v4.2.1(Origen)","text":"<pre><code>FullNode sha256sum:\n9888710c915a4027f1bc3dcb1d5d983e0c00d4c438f6fa307d412f62ff6862ea\nFullNode signature:\n6e7d8ef9d033ebf9213118b7511f4ecc5def97442844fbd34de3ef76dd417a0d45da3e2e70fc213475d7fc0a44df1c54732874d858ec980159c5dbffc975680a1c\nSolidityNode sha256sum:\nc70edffa3022e9c25bf845ee978e3500c3ada89b473d895a715acf1738b83f10\nSolidityNode signature:\n0e366acce33bb7c6b02fa143a57d9380c94d3513a9fba8692efe2862a8f7df93156edbddd075f1844f2f81398b14f2db6a03e21f0f6b8ab25649fae4dc16ae731b\n</code></pre>"},{"location":"releases/signature_verification/#greatvoyage-v422lucretius","title":"GreatVoyage-v4.2.2(Lucretius)","text":"<pre><code>FullNode sha256sum:\n8a7f8143b3351ea6b5d8e3dfc857b09256d363d4907ba3ab0288f67f77c2a58f\nFullNode signature:\n71c6300ace5cbf16d78a32aa4602c3f129cb768e32acffaecd17b4134b5955bf37efda1d27025e894e521184a21174e5eddf4e7d1f86761657827795cbddfcfd1c\nSolidityNode sha256sum:\n2d0d5334a232b7b74df8ed3211d9e0ac957894f81e9172010732f2159da261ad\nSolidityNode signature:\n0696f8cb3c65324c4b04f9ecf89d939bf7e1b955144e3fe75eeca6bd4c639e463afbe24e31ae38a6889d4d0649ae03fafeeb7c337b34a36fbac33962f64651671b\n</code></pre>"},{"location":"releases/signature_verification/#greatvoyage-v4221epictetus","title":"GreatVoyage-v4.2.2.1(Epictetus)","text":"<pre><code>FullNode sha256sum:\n8bd040a8db16ccba3e957ed3558b82d145928153a53f9688302849658a72f9bc\nFullNode signature:\n3137a8ba8fa5556e4c4a7597aec8f5f46ebb79a64edcf9e2925d2e3314afde3e0f42fd4080e5e4f4d3d1eff263d30478b0322e6dbcc71c43b534f614004b5c561b\nSolidityNode sha256sum:\nee8abd39732e4901828a61124880f1d2eab62f7f3d97150f1e1921bf7da10e54\nSolidityNode signature:\n092b08184677449dd283a31cc486f994166cd9f5ad312a9c80d3e06689ec540774ac9a1334dffeb6412039ed70ee912ead39c4025dd69b688ea9df4dd831b5771c\n</code></pre>"},{"location":"releases/signature_verification/#greatvoyage-v430bacon","title":"GreatVoyage-v4.3.0(Bacon)","text":"<pre><code>FullNode sha256sum:\nb5e993800cea5ca040758dd6b3c7438def03cbf1358468beb76ea45399a59298\nFullNode signature:\n8da6ac58129d78d948810e4bc7372dd8aef5232bfbc4c33ad8fb21e88314e3d97dd77509e0f03a98da32679495152ccd4a9d07541589822e5cf5d3d4f61877191b\nSolidityNode sha256sum:\n446a4736901958a450e4e95aaca99a63957163854fb32d25eed84600e6996668\nSolidityNode signature:\nc27ffde8ce88ee14689e15a9d5c3fb2d2a9d180ea43b45046131df8ac5481fae2588621b395ad7031ed49d65ddd020b3ce084537e3f527d8a5a979f8c65265561c\n</code></pre>"},{"location":"releases/signature_verification/#greatvoyage-v440rousseau","title":"GreatVoyage-v4.4.0(Rousseau)","text":"<pre><code>FullNode sha256sum:\nbf7f962846f75139dd89ac6da32074cad33b2e172c0749abbed8773cc1ab1a37\nFullNode signature:\n56ed97f3451e3d731f799bad952750d56aa78a9a91a2688b4d6b956328ede7e01bae78037ad6ef1f9c682b566e954dfb958271f006e5cf0dcace5768d76fda6e1b\nSolidityNode sha256sum:\n9dac37763ddf75c07335ec070f837b63ee46b698066dd25c4756ad40f8750d5f\nSolidityNode signature:\ncc4325c085719e3e5045b5c6c2553d7adc9c735419618f7afad06c3a532da0ed46906ae9b2dadb15d7f94150268d5ecdc7fd2741693991586d50da30a8d917071b\n</code></pre>"},{"location":"releases/signature_verification/#greatvoyage-v441protagoras","title":"GreatVoyage-v4.4.1(Protagoras)","text":"<pre><code>FullNode sha256sum:\n4a32918849dc8a7fedcb637ff4939389363726cb16c6a581e39253260668ee04\nFullNode signature:\nfd747f61705ef045143bd2d55b278ca347904323711e2e86b11cf1dd203f198443ab1a399767a570005bd5b2ea283187ccc41557ffb79c959b018e8d798b96f81c\nSolidityNode sha256sum:\nb6a06d3b19f41591bd8c01f35e78b316ab8e9ad4c0740128fc95ba52d3106f34\nSolidityNode signature:\nd2836bda30fd25c89494ae7a12b5357bc9e725c9e2c655fb0a9158a4bee881693ea869defe650b0b4f190458a5268f1c121e73c8305cc81a408e62fca0d234c51b\n</code></pre>"},{"location":"releases/signature_verification/#greatvoyage-v442augustinus","title":"GreatVoyage-v4.4.2(Augustinus)","text":"<pre><code>FullNode sha256sum:\n70eba12350fa21e1b261927093090e7bdf0765592d19433c594149bd3707ef0a\nFullNode signature:\n14430f463e6fab3dd247aca6267b6aaf2f1869b455d95aee297208bd1561c6c67559d9c535e63e74bbef604141cc4ceec78367a75e6ca4d4ceb6513019329c9b1b\nSolidityNode sha256sum:\nf08438e093cc1091859f0ee9dbc7e79b0d5d9068facd4e6485374baa3acf59d1\nSolidityNode signature:\nf3935dfe4af9601cf102c975ed2eebbd4b42160e8746c0d0b21ffbd2fbd4b6f374257b1bc0e948909a9ef343d2cc70671961c8f7a992b6cd123f9ad3c8c323391c\n</code></pre>"},{"location":"releases/signature_verification/#greatvoyage-v443pythagoras","title":"GreatVoyage-v4.4.3(Pythagoras)","text":"<pre><code>FullNode sha256sum:\nc07637a1a4a9a289218554f4714caef90032e267b068411c7dd818d4af45e39f\nFullNode signature:\n2bf8d65adf556fe2c04b739c1f4e6e73058914cf642a7806ff85e57be2ff122e35cbf3d67b0bc8bad4fb827198ffd8e06f60111a167ecb0b3db0d8e571b8c67b1c\nSolidityNode sha256sum:\n64f4614160b9330d0a9e984686b66fa16e9aecf7ae16e32b8cc7c32f52694eef\nSolidityNode signature:\ndc0f910555a23667d682a6775588de90592ede44f76a32b12ea8f89fa7dcc937274cc3a44b20da49726323cc9f476d42caa318c338858474f02bf98cc398bca81c\n</code></pre>"},{"location":"releases/signature_verification/#greatvoyage-v444plotinus","title":"GreatVoyage-v4.4.4(Plotinus)","text":"<pre><code>FullNode sha256sum:\n0264d382489dae5bf1d340030c1892b0a7aeb9364cb9380c034e159c9eb9a269\nFullNode signature:\n70cdece8c3510ce4d7d84d5d2c8b53895397c0134d73d681b6b41d4de80d74ce2c2760fdf080ff0ce8c0989246377fca529cb1a2e85e1936755abef4be64f0971b\nSolidityNode sha256sum:\nb58e7b8b0f97eb2a7a0ce5c5aeb2ce070192ca82c96adc8568aabe4f3407d873\nSolidityNode signature:\n26da2e507bbd7e82e0170039cc1c0e42332fb2dfc755aeb385240f0a93125b6c0f1e943ccf1a4e9bfec7fdd4d8a26375a38e030e0b8b69af3e2c181bf08444111b\n</code></pre>"},{"location":"releases/signature_verification/#greatvoyage-v445cicero","title":"GreatVoyage-v4.4.5(Cicero)","text":"<pre><code>FullNode sha256sum:\n8115e887e5af5768e8ab967f8e7bc024af94bda31be7f3dbc30934b42489d988\nFullNode signature:\n1a02f26eb6065efe5697123528f32ea352d813f9e5acf5936407ad8899c4019539e31b257cafe34b9f8045602f5a4f381b3dd8252a30bb9daf52aeeb078b54711b\nSolidityNode sha256sum:\n95884a07dcbb1531ec7ae20b7162cab3bb9c4bd2e300447c01c4772e02b24a20\nSolidityNode signature:\n8adab9501bbb2a3d9f3055c91e819f86081df9b92228a86afb7f0a27165a42690dbeb50f0f1fd1f7180b51809a291c5ff3860e49f888cf0ba87b401d3dda6e271c\n</code></pre>"},{"location":"releases/signature_verification/#greatvoyage-v446david","title":"GreatVoyage-v4.4.6(David)","text":"<pre><code>FullNode sha256sum:\neaf213f6e6cd9913f9f27bf72a42209c1a0f0fce9841c1d6bd680d879d7d6f85\nFullNode signature:\n064abe833436b3a2e9b66406abf81d12a20f9d28ef669abe7c87c0d750e58cf10c1e65de6fbd0fc368022f93e4c330b42ea9775ead91962480436985c90ad3b11c\nSolidityNode sha256sum:\nc3e9ccc1a4d2aac4c081ae01db86a0901b6f3506e3f8a953315e47ae274a98c1\nSolidityNode signature:\na03d5d6f0e6c6b869f2e545d8c3ff8a4fed569508e9abe4219271d8bf25dfb015e242add8fd2ab6b8b412dd6b393639517957877e8eb7c07ff43a1351a88d62f1b\n</code></pre>"},{"location":"releases/signature_verification/#greatvoyage-v451tertullian","title":"GreatVoyage-v4.5.1(Tertullian)","text":"<pre><code>FullNode sha256sum:\ndb3c75d7854dcf241558c2942b9a582f478c00a88b6f7a7e5ff8a653a8d4c59a\nFullNode signature:\n61ba205f28c3bc7fa228c27e4e3b4d460ef4fad75ca1d38d82540d45eea2d3d720196b607cd45c560db7a749d05bfe8089c61fba5843e98d61fec90f1591f2861b\nSolidityNode sha256sum:\n537a81bd781d416229de5e0875247160f2569c378c8eed703203d0acca5be5f1\nSolidityNode signature:\na736f9de5425562a2af188c547245f9b4da6d793728bc767242e3df75fa104f61ce978b62fc5cea7f6008bdb51faa9510ff5633702cdb1ddca29cb06a18920d21c\n</code></pre>"},{"location":"releases/signature_verification/#greatvoyage-v452-aurelius","title":"GreatVoyage-v4.5.2 (Aurelius)","text":"<pre><code>FullNode sha256sum:\n60e959ccde3ff90c10b503bb25edf37684845e358df2ad64b2b330712b30c177\nFullNode signature:\nf2f4b6050e639047857c5b5331eb006dcc9c1e0427bac4ae3d934f7436080785472ead691aa16e6a5aed3c2932fb279ce8ab3580449071b878e0d31fdf01f0371c\nSolidityNode sha256sum:\n4783b8abef12a6c7b8319f3e8960c1d3126edcc521ac1fc3429fe2870cab91b0\nSolidityNode signature:\nafb5db2467ce9f5445679df53e2fecfaed3c4a2d0ca2ba88b65e621aa2d37a9e6aab06b30052a9381087d0164cb5c347d710b2b1c59e6f7c7107deacfd1cfc961b\n</code></pre>"},{"location":"releases/signature_verification/#greatvoyage-v460-socrates","title":"GreatVoyage-v4.6.0 (Socrates)","text":"<pre><code>FullNode sha256sum:\n598589d428085e25c838552970844b0ba00248ad92873bd2ad25b35f37db7a5b\nFullNode signature:\nd3bcfa1bea64b7e58cb94603563cb0c5e47bc20316f61b0dfc966fb64ae846f21b8f917a63328416993f524f4de55ddf5083f163b1fe1b811a9a6f4532725c8e1c\nSolidityNode sha256sum:\nee37a425a84677063b6ea44ed073b8260e336586a61debc10ce0b1544bf7db6a\nSolidityNode signature:\n332c273ef1cdae8dc39c76a83b38750a74b3dd1b915e49698e4ae6870cfed49a1449e8d8db995c7a6be2295e2603efedb0f3e8e906ac7681583c5023b28a521d1b\n</code></pre>"},{"location":"releases/upgrade-instruction/","title":"java-tron Node Upgrade Guide","text":"<p>This guide provides detailed instructions on how to safely upgrade your java-tron node to the latest version.</p> <p>For mandatory upgrades, it is crucial to strictly follow this guide to complete the deployment. For optional upgrades, you may choose whether to upgrade based on your specific needs.</p> <ul> <li>For standard nodes, please refer to the Standard Node Upgrade Process.</li> <li>For nodes configured with a primary/backup high-availability setup, please follow the Primary/Backup Node Upgrade Guide to ensure a seamless service transition.</li> </ul> <p></p>"},{"location":"releases/upgrade-instruction/#standard-node-upgrade-process","title":"Standard Node Upgrade Process","text":"<p>All FullNodes, including block-producing Super Representative nodes, should follow these steps to complete the upgrade.</p> <p> </p>"},{"location":"releases/upgrade-instruction/#step-1-prepare-the-new-version-package","title":"Step 1: Prepare the New Version Package","text":"<p>You can either download the compiled java-tron executable directly or download the new version's source code and compile it yourself to obtain the new executable file. Please perform the following operations in a directory outside of the current java-tron running directory.</p>"},{"location":"releases/upgrade-instruction/#option-1-download-the-executable-recommended","title":"Option 1: Download the Executable (Recommended)","text":"<ol> <li>Visit the java-tron GitHub Releases page to download the latest version of the <code>FullNode.jar</code> executable.</li> <li>Security Check: To ensure the integrity and security of the file, it is essential to perform a signature verification on the downloaded JAR file according to the java-tron Signature Verification guide.</li> </ol>"},{"location":"releases/upgrade-instruction/#option-2-compile-from-source-code","title":"Option 2: Compile from Source Code","text":"<ol> <li>Clone the <code>java-tron</code> repository and switch to the target version's branch.     <pre><code># clone the repository\n$ git clone https://github.com/tronprotocol/java-tron.git\n\n# Switch to the specified version branch\n$ cd java-tron\n$ git checkout -b release_vx.x.x\n</code></pre></li> <li>Run the build command. Upon successful compilation, the new executable file, <code>FullNode.jar</code>, will be generated in the <code>build/libs/</code> directory.     <pre><code>$ ./gradlew clean build -x test\n</code></pre></li> </ol>"},{"location":"releases/upgrade-instruction/#step-2-stop-the-running-node","title":"Step 2: Stop the Running Node","text":"<p>Note: If this is your first time deploying the node, please skip directly to Step 5: Start the Node.</p> <ol> <li> <p>Use the following command to find the <code>PID</code> of the java-tron process.</p> <pre><code>$ ps -ef | grep java\n</code></pre> </li> <li> <p>Stop the node process.     <pre><code>$ kill -15 &lt;PID&gt;\n</code></pre></p> </li> </ol> <p> </p>"},{"location":"releases/upgrade-instruction/#step-3-back-up-critical-data","title":"Step 3: Back Up Critical Data","text":"<p>A full backup is strongly recommended before upgrading. Please perform the following backup steps in the specified order:</p> <ol> <li>Back up the current executable file <pre><code>$ mv $JAVA_TRON.jar $JAVA_TRON.jar.`date \"+%Y%m%d%H%M%S\"`\n</code></pre></li> <li>Back up the current <code>output-directory</code> database <pre><code>$ tar cvzf output-directory.`date \"+%Y%m%d%H%M%S\"`.etgz output-directory\n</code></pre></li> <li>Back up the current configuration file <pre><code>$ mv $config.conf $config.conf.`date \"+%Y%m%d%H%M%S\"`\n</code></pre></li> </ol> <p>This ensures that if the upgrade fails, you can quickly roll back to the previous version using the backup.</p>"},{"location":"releases/upgrade-instruction/#step-4-replace-old-files","title":"Step 4: Replace Old Files","text":"<p>After preparing the new version of the executable file and backing up the original node data, follow these steps to replace the old files:</p> <ol> <li>Copy the new <code>FullNode.jar</code> obtained in Step 1 to the java-tron working directory.</li> <li>Update the Configuration File (optional)<ul> <li>We recommend replacing your existing configuration file with the new version from the release. After replacing it, merge your previous custom settings (e.g., private key, keystore path) into the new file.</li> <li>Configuration Update Strategy<ul> <li>This step is optional. You can decide whether to update the configuration file based on your specific needs. However, we highly recommend using the latest file to ensure full compatibility and access to new features.</li> <li>If an update is required for a specific release, it will be explicitly stated in the release notes. Always review the release notes before upgrading.</li> </ul> </li> </ul> </li> </ol> <p>Note on the Database: The existing database in the working directory can be used as-is. Alternatively, you may restore from a pre-built database snapshot.</p> <p> </p>"},{"location":"releases/upgrade-instruction/#step-5-start-the-node","title":"Step 5: Start the Node","text":"<p>Please select the appropriate startup command based on your node type.</p> <ul> <li> <p>Super Representative (Block-Producing Node)</p> <pre><code>nohup java -Xmx24g -XX:+UseConcMarkSweepGC -jar FullNode.jar  -p &lt;your private key&gt; --witness -c config.conf &lt;/dev/null &amp;&gt;/dev/null &amp;\n</code></pre> <p>Note: We recommend managing your private key using a <code>keystore</code> file or within the configuration file, rather than passing it directly as a command-line argument.</p> </li> <li> <p>Regular FullNode</p> <pre><code>nohup java -Xmx24g -XX:+UseConcMarkSweepGC -jar FullNode.jar -c config.conf &lt;/dev/null &amp;&gt;/dev/null &amp;\n</code></pre> </li> </ul>"},{"location":"releases/upgrade-instruction/#step-6-verify-and-monitor","title":"Step 6: Verify and Monitor","text":"<ol> <li>Wait for Node Synchronization: After the node starts, it will begin to synchronize block data. Please wait patiently for it to catch up to the latest block height of the network.</li> <li>Check the Logs: Monitor the log output to ensure the node is running normally and without any error messages.</li> <li> <p>Confirm Synchronization Status: You need to verify that synchronization is complete by comparing the latest block height of your local node with that of the TRON Mainnet. The upgrade is successful when the two heights are nearly identical.</p> <ul> <li>To query local node block height, call the <code>/wallet/getnowblock</code> API:     <pre><code>curl http://127.0.0.1:8090/wallet/getnowblock\n</code></pre></li> <li>To check the real-time block height of the Mainnet, use the TRONSCAN block explorer.</li> </ul> </li> </ol> <p>Contingency Plan: If you encounter any issues during the upgrade process that prevent the node from starting or running correctly, immediately use the data backed up in Step 3 to restore the previous version. Please submit a GitHub Issue or report the problem to the TRON community for assistance.</p> <p> </p>"},{"location":"releases/upgrade-instruction/#primarybackup-node-upgrade-guide","title":"Primary/Backup Node Upgrade Guide","text":"<p>To ensure high availability of the service, the upgrade of primary/backup nodes should adopt a rolling upgrade strategy.</p> <ol> <li>Upgrade the Backup Node<ul> <li>First, perform all the steps in the Standard Node Upgrade Process on the Backup Node.</li> </ul> </li> <li>Perform the Switchover<ul> <li>After confirming that the Backup Node has been successfully upgraded and has completed block synchronization, stop the process on the Master Node.</li> <li>At this point, the Backup Node will automatically take over, becoming the new Active Node and serving traffic.</li> </ul> </li> <li>Upgrade the Original Master Node<ul> <li>After confirming that the new Active Node (the former Backup Node) is running stably, perform the Standard Node Upgrade Process on the original Master Node.</li> <li>Error Handling: If the new Active Node fails during this period, immediately stop its upgrade process and restart the original Master Node to restore service. At the same time, please save the complete logs from the failed node for troubleshooting. For further support, please submit a GitHub Issue with the relevant logs or report it to the community.</li> </ul> </li> <li>Restore the Primary/Backup Architecture<ul> <li>After the original Master Node has been upgraded, started, and fully synchronized, stop the currently active node (the former Backup Node).</li> <li>The original Master Node will automatically take over again, resuming its role as the Active Node.</li> </ul> </li> <li>Restart the Backup Node<ul> <li>Finally, restart the upgraded Backup Node to restore it to its backup status. This completes the entire primary/backup upgrade process.</li> </ul> </li> </ol>"},{"location":"using_javatron/backup_restore/","title":"Node Data Backup and Restore","text":"<p>java-tron nodes store their persistent data in a specified data directory, which defaults to <code>/output-directory/</code>. You can specify a different data storage location by adding the <code>-d</code> or <code>--output-directory</code> parameter to the java-tron node startup command. For example:</p> <pre><code>java -jar fullnode.jar -d ./outputdir\n</code></pre>"},{"location":"using_javatron/backup_restore/#backing-up-node-data","title":"Backing Up Node Data","text":"<p>Before backing up node data, it's crucial to shut down the node process. You can do this by following these steps:</p> <p>First, get the PID of the java-tron process using the following command:</p> <pre><code>ps -ef | grep FullNode.jar | grep -v grep | awk '{print $2}'\n</code></pre> <p>Then, use the obtained PID to terminate the process. It's recommended to use the following shutdown script to safely close the java-tron process and avoid database corruption:</p> <pre><code>#!/bin/bash\nwhile true; do\n\u00a0 pid=`ps -ef |grep FullNode.jar |grep -v grep |awk '{print $2}'`\n\u00a0 if [ -n \"$pid\" ]; then\n\u00a0 \u00a0 kill -15 $pid\n\u00a0 \u00a0 echo \"The java-tron process is exiting, it may take some time, forcing the exit may cause damage to the database, please wait patiently...\"\n\u00a0 \u00a0 sleep 1\n\u00a0 else\n\u00a0 \u00a0 echo \"java-tron killed successfully!\"\n\u00a0 \u00a0 break\n\u00a0 fi\ndone\n</code></pre> <p>Once the java-tron process has successfully shut down, you can back up the data using the following command:</p> <pre><code>tar cvzf output-directory.`date \"+%Y%m%d%H%M%S\"`.etgz output-directory\n</code></pre>"},{"location":"using_javatron/backup_restore/#restoring-node-data","title":"Restoring Node Data","text":"<p>Restoring data is straightforward: simply copy the backed-up data to the node's data directory.</p> <p>If your database backup file is named <code>output-directory.20220628152402.etgz</code>, you can use the following command to restore the database files:</p> <pre><code>tar xzvf output-directory.20220628152402.etgz\n</code></pre>"},{"location":"using_javatron/backup_restore/#using-public-backup-data-data-snapshots","title":"Using Public Backup Data (Data Snapshots)","text":"<p>For the Mainnet and Nile Testnet, new nodes require a significant amount of data to synchronize, leading to a lengthy synchronization process. To facilitate faster node deployment for developers, the TRON community regularly provides data snapshots.</p> <p>A data snapshot is a compressed database backup file of a TRON network node at a specific point in time. Developers can significantly accelerate the node synchronization process by downloading and using these data snapshots.</p>"},{"location":"using_javatron/backup_restore/#mainnet-data-snapshots","title":"Mainnet Data Snapshots","text":""},{"location":"using_javatron/backup_restore/#fullnode-data-snapshots","title":"FullNode Data Snapshots","text":"<p>The table below lists the download addresses for FullNode data snapshots. Please choose the most suitable data snapshot based on your geographical location, node database type, and whether you need to query historical internal transactions.</p> FullNode Node Data Source Download Address Description Official Data Source (Americas: Virginia, USA) http://34.86.86.229/ LevelDB data, does not include internal transactions Official Data Source (Asia: Singapore) http://34.143.247.77/ LevelDB data, does not include internal transactions Official Data Source (Americas: USA) http://35.197.17.205/ RocksDB data, does not include internal transactions Official Data Source (Asia: Singapore) http://35.247.128.170/ LevelDB data, includes internal transactions Official Data Source (Americas: Virginia, USA) http://34.48.6.163/ LevelDB data, does not include internal transactions, includes historical account balances <p>Note: LevelDB and RocksDB data are not interchangeable. The database type for a FullNode is specified by the <code>db.engine</code> configuration item in the configuration file, with selectable values being <code>LEVELDB</code> or <code>ROCKSDB</code>.</p>"},{"location":"using_javatron/backup_restore/#lite-fullnode-data-snapshots","title":"Lite FullNode Data Snapshots","text":"<p>The TRON network has supported Lite FullNode type nodes since the GreatVoyage-V4.1.0 version. Compared to a regular FullNode, a Lite FullNode has a smaller database and faster startup speed because it only requires state data and necessary historical data to start. The table below lists the download addresses for Lite FullNode data snapshots.</p> Lite FullNode Node Data Source Download Address Description Official Data Source (Asia: Singapore) http://34.143.247.77/ LevelDB data <p>Tip: If you already have full data from a FullNode, you can use the Lite FullNode Data Trimming Tool to trim your FullNode data into Lite FullNode data yourself.</p>"},{"location":"using_javatron/backup_restore/#data-snapshot-decompression-methods","title":"Data Snapshot Decompression Methods","text":"<p>TRON network snapshot data typically exceeds 2TB in size. We strongly recommend using a streaming method (i.e., downloading and decompressing simultaneously) to effectively save disk space. The specific command is as follows:</p> <pre><code>wget -q -O - SNAPSHOT_URL/FullNode_output-directory.tgz | tar -zxvf -\n</code></pre>"},{"location":"using_javatron/backup_restore/#method-1-stream-download-and-decompress-recommended-saves-space","title":"Method 1: Stream Download and Decompress (Recommended, Saves Space)","text":"<p>This method does not require storing the complete compressed archive first. Instead, it directly decompresses the data into the target directory, significantly reducing disk usage.</p>"},{"location":"using_javatron/backup_restore/#method-2-download-first-then-decompress-requires-ample-storage-space","title":"Method 2: Download First, Then Decompress (Requires Ample Storage Space)","text":"<pre><code># 1. Download the complete snapshot file\nwget SNAPSHOT_URL/FullNode_output-directory.tgz\n\n# 2. Decompress the file\ntar -zxvf FullNode_output-directory.tgz\n</code></pre> <p>This method downloads the complete snapshot file first and then decompresses it. Please note that during decompression, you will need to keep both the compressed archive and the decompressed files. Therefore, it's advisable to prepare at least two 3TB or larger disks (one for the compressed archive and one for the decompressed data. After decompression, you can free up the disk used for the compressed archive, thereby saving costs).</p>"},{"location":"using_javatron/backup_restore/#data-snapshot-usage-steps","title":"Data Snapshot Usage Steps","text":"<p>Whether it's a FullNode data snapshot or a Lite FullNode data snapshot, the usage steps are the same:</p> <ol> <li>Download the corresponding compressed backup database file based on your needs.</li> <li>Decompress the backed-up database compressed file into the <code>output-directory</code>. If you wish to specify another directory, you can decompress it into your designated target directory.</li> <li>Start the node. The node will default to reading from the <code>output-directory</code>. If your data was decompressed to another directory, add the <code>-d</code> parameter and specify the database directory name when starting the node.</li> </ol>"},{"location":"using_javatron/backup_restore/#nile-testnet-data-snapshots","title":"Nile Testnet Data Snapshots","text":"<p>For detailed information on Nile Testnet data snapshots, please refer to the official website. The usage method is the same as for Mainnet data snapshots.</p>"},{"location":"using_javatron/connecting_to_tron/","title":"Connect to the TRON Network","text":"<p>The TRON network is mainly divided into:</p> <ul> <li>Mainnet</li> <li>Nile Testnet</li> <li>Shasta Testnet (currently does not support node joining)</li> <li>Private Network</li> </ul> <p>This guide explains how to configure the java-tron client to connect to these networks, covering basic network configuration, node discovery, node connection, log and node status verification, and how to troubleshoot connection issues.</p>"},{"location":"using_javatron/connecting_to_tron/#basic-network-configuration","title":"Basic Network Configuration","text":"<p>You can connect a java-tron node to a specific network by modifying the following key items in the config file:</p>"},{"location":"using_javatron/connecting_to_tron/#network-id","title":"Network ID","text":"<p>The P2P Network ID(<code>p2p.version</code>) specifies the network you want to join. Mainnet configuration:</p> <pre><code>node {\n  ...\n  p2p {\n    version = 11111        # Mainnet\n  }\n  ...\n}\n</code></pre> <p>In particular:</p> <ul> <li>Mainnet: version = <code>11111</code></li> <li>Nile Testnet: version = <code>201910292</code></li> <li>Shasta Testnet: version = <code>1</code></li> <li>Private Network: Custom value (set to a different ID)</li> </ul>"},{"location":"using_javatron/connecting_to_tron/#genesis-block","title":"Genesis Block","text":"<p>The <code>genesis.block</code> configuration must be consistent with other nodes in the target network, otherwise the node will not be able to connect to peers. Mainnet configuration:</p> <pre><code>genesis.block = {\n  # Reserve balance\n  assets = [\n    {\n      accountName = \"Zion\"\n      accountType = \"AssetIssue\"\n      address = \"TLLM21wteSPs4hKjbxgmH1L6poyMjeTbHm\"\n      balance = \"99000000000000000\"\n    },\n    {\n      accountName = \"Sun\"\n      accountType = \"AssetIssue\"\n      address = \"TXmVpin5vq5gdZsciyyjdZgKRUju4st1wM\"\n      balance = \"0\"\n    },\n    {\n      accountName = \"Blackhole\"\n      accountType = \"AssetIssue\"\n      address = \"TLsV52sRDL79HXGGm9yzwKibb6BeruhUzy\"\n      balance = \"-9223372036854775808\"\n    }\n  ]\n  witnesses = [\n    {\n      address: THKJYuUmMKKARNf7s2VT51g5uPY6KEqnat,\n      url = \"http://GR1.com\",\n      voteCount = 100000026\n    },\n    {\n      address: TVDmPWGYxgi5DNeW8hXrzrhY8Y6zgxPNg4,\n      url = \"http://GR2.com\",\n      voteCount = 100000025\n    },\n    {\n      address: TWKZN1JJPFydd5rMgMCV5aZTSiwmoksSZv,\n      url = \"http://GR3.com\",\n      voteCount = 100000024\n    },\n    {\n      address: TDarXEG2rAD57oa7JTK785Yb2Et32UzY32,\n      url = \"http://GR4.com\",\n      voteCount = 100000023\n    },\n    {\n      address: TAmFfS4Tmm8yKeoqZN8x51ASwdQBdnVizt,\n      url = \"http://GR5.com\",\n      voteCount = 100000022\n    },\n    {\n      address: TK6V5Pw2UWQWpySnZyCDZaAvu1y48oRgXN,\n      url = \"http://GR6.com\",\n      voteCount = 100000021\n    },\n    {\n      address: TGqFJPFiEqdZx52ZR4QcKHz4Zr3QXA24VL,\n      url = \"http://GR7.com\",\n      voteCount = 100000020\n    },\n    {\n      address: TC1ZCj9Ne3j5v3TLx5ZCDLD55MU9g3XqQW,\n      url = \"http://GR8.com\",\n      voteCount = 100000019\n    },\n    {\n      address: TWm3id3mrQ42guf7c4oVpYExyTYnEGy3JL,\n      url = \"http://GR9.com\",\n      voteCount = 100000018\n    },\n    {\n      address: TCvwc3FV3ssq2rD82rMmjhT4PVXYTsFcKV,\n      url = \"http://GR10.com\",\n      voteCount = 100000017\n    },\n    {\n      address: TFuC2Qge4GxA2U9abKxk1pw3YZvGM5XRir,\n      url = \"http://GR11.com\",\n      voteCount = 100000016\n    },\n    {\n      address: TNGoca1VHC6Y5Jd2B1VFpFEhizVk92Rz85,\n      url = \"http://GR12.com\",\n      voteCount = 100000015\n    },\n    {\n      address: TLCjmH6SqGK8twZ9XrBDWpBbfyvEXihhNS,\n      url = \"http://GR13.com\",\n      voteCount = 100000014\n    },\n    {\n      address: TEEzguTtCihbRPfjf1CvW8Euxz1kKuvtR9,\n      url = \"http://GR14.com\",\n      voteCount = 100000013\n    },\n    {\n      address: TZHvwiw9cehbMxrtTbmAexm9oPo4eFFvLS,\n      url = \"http://GR15.com\",\n      voteCount = 100000012\n    },\n    {\n      address: TGK6iAKgBmHeQyp5hn3imB71EDnFPkXiPR,\n      url = \"http://GR16.com\",\n      voteCount = 100000011\n    },\n    {\n      address: TLaqfGrxZ3dykAFps7M2B4gETTX1yixPgN,\n      url = \"http://GR17.com\",\n      voteCount = 100000010\n    },\n    {\n      address: TX3ZceVew6yLC5hWTXnjrUFtiFfUDGKGty,\n      url = \"http://GR18.com\",\n      voteCount = 100000009\n    },\n    {\n      address: TYednHaV9zXpnPchSywVpnseQxY9Pxw4do,\n      url = \"http://GR19.com\",\n      voteCount = 100000008\n    },\n    {\n      address: TCf5cqLffPccEY7hcsabiFnMfdipfyryvr,\n      url = \"http://GR20.com\",\n      voteCount = 100000007\n    },\n    {\n      address: TAa14iLEKPAetX49mzaxZmH6saRxcX7dT5,\n      url = \"http://GR21.com\",\n      voteCount = 100000006\n    },\n    {\n      address: TBYsHxDmFaRmfCF3jZNmgeJE8sDnTNKHbz,\n      url = \"http://GR22.com\",\n      voteCount = 100000005\n    },\n    {\n      address: TEVAq8dmSQyTYK7uP1ZnZpa6MBVR83GsV6,\n      url = \"http://GR23.com\",\n      voteCount = 100000004\n    },\n    {\n      address: TRKJzrZxN34YyB8aBqqPDt7g4fv6sieemz,\n      url = \"http://GR24.com\",\n      voteCount = 100000003\n    },\n    {\n      address: TRMP6SKeFUt5NtMLzJv8kdpYuHRnEGjGfe,\n      url = \"http://GR25.com\",\n      voteCount = 100000002\n    },\n    {\n      address: TDbNE1VajxjpgM5p7FyGNDASt3UVoFbiD3,\n      url = \"http://GR26.com\",\n      voteCount = 100000001\n    },\n    {\n      address: TLTDZBcPoJ8tZ6TTEeEqEvwYFk2wgotSfD,\n      url = \"http://GR27.com\",\n      voteCount = 100000000\n    }\n  ]\n  timestamp = \"0\" #2017-8-26 12:00:00\n  parentHash = \"0xe58f33f9baf9305dc6f82b9f1934ea8f0ade2defb951258d50167028c780351f\"\n}\n</code></pre>"},{"location":"using_javatron/connecting_to_tron/#node-discovery","title":"Node Discovery","text":""},{"location":"using_javatron/connecting_to_tron/#enable-node-discovery","title":"Enable Node Discovery","text":"<p>Node discovery is enabled or disabled via the configuration file. It is enabled by default:</p> <pre><code>node.discovery = {\n  ...\n  enable = true\n  ...\n}\n</code></pre>"},{"location":"using_javatron/connecting_to_tron/#boot-nodes","title":"Boot Nodes","text":"<p>Java-tron uses the Kademlia protocol to discover peers. Discovery requires boot nodes, which consist of seed nodes and actively configured peers, see Active Connection (Active Peers). </p>"},{"location":"using_javatron/connecting_to_tron/#seednode","title":"seed.node","text":"<p><code>seed.node</code> is used to initialize connections. It should point to online and stable Fullnode:</p> <p><pre><code>seed.node = {\n  ip.list = [\n    \"3.225.171.164:18888\",\n    \"52.8.46.215:18888\",\n    ...\n    \"18.163.230.203:18888\"\n    #\"[2a05:d014:1f2f:2600:1b15:921:d60b:4c60]:18888\", // use this if support ipv6\n    #\"[2600:1f18:7260:f400:8947:ebf3:78a0:282b]:18888\", // use this if support ipv6\n  ]\n}\n</code></pre> For TRON Mainnet, you can use community public nodes as seed nodes. To get the latest <code>seed.node</code> list, refer to the official config file. If your network interface supports IPv6, you can remove the comment symbol <code>#</code> in the list.</p>"},{"location":"using_javatron/connecting_to_tron/#persistent-nodes-from-database","title":"Persistent Nodes from Database","text":"<p>When persistence is enabled, nodes in the routing table are periodically written to the database and reused on restart:</p> <p><pre><code>node.discovery = {\n  ...\n  persist = true\n  ...\n}\n</code></pre> By default, node discovery uses the User Datagram Protocol (UDP) on port <code>18888</code>:</p> <pre><code>node {\n  ...\n  listen.port = 18888\n  ...\n}\n</code></pre>"},{"location":"using_javatron/connecting_to_tron/#disable-node-discovery","title":"Disable Node Discovery","text":"<p>In some cases (e.g., local testing or a fixed private network), you may disable discovery by setting:<code>node.discovery.enable = false</code> or by blocking UDP port 18888 via firewall.</p>"},{"location":"using_javatron/connecting_to_tron/#node-connection","title":"Node Connection","text":""},{"location":"using_javatron/connecting_to_tron/#number-of-node-connections","title":"Number of Node Connections","text":"<p><code>node.maxConnections</code>  defines the maximum number of peer connections (default: 30). Higher values improve network joining and broadcasting efficiency but require more bandwidth and resources:  <pre><code>node {\n  ...\n  maxConnections = 30           # max connections\n  ...\n}\n</code></pre></p>"},{"location":"using_javatron/connecting_to_tron/#active-connection-active-peers","title":"Active Connection (Active Peers)","text":"<p>Active peers come from three sources:</p> <ul> <li>Configured active peers (high priority). These connections are made regardless of discovery settings:</li> </ul> <pre><code>node {\n  ...\n  active = [\n    # Active establish connection in any case\n    # Sample entries:\n    # \"ip:port\",\n    # \"ip:port\"\n  ]\n  ...\n }\n</code></pre> <ul> <li>Peers discovered via node discovery (medium priority)</li> <li>DNS tree nodes (low priority). Rarely used, requires <code>treeUrls</code>\uff1a</li> </ul> <pre><code>dns {\n...\n# dns urls to get nodes, url format tree://{pubkey}@{domain}, default empty\ntreeUrls = [\n  #\"tree://AKMQMNAJJBL73LXWPXDI4I5ZWWIZ4AWO34DWQ636QOBBXNFXH3LQS@main.trondisco.net\",\n]\n...\n}\n</code></pre> <p>Compared with the traditional static seed node list, the DNS tree mechanism has advantages in P2P network bootstrapping, such as dynamic node updates and resistance to attacks.</p> <p>It can be seen that currently, the target nodes for active connection only come from two categories: one is the configured active nodes, and the other is the connectable nodes obtained through node discovery.</p>"},{"location":"using_javatron/connecting_to_tron/#passive-connections","title":"Passive Connections","text":"<ul> <li>The current node will always accept connection requests from nodes listed under <code>node.passive</code></li> </ul> <pre><code>node {\n  ...\n  passive = [\n    # Passive accept connection in any case\n    # Sample entries:\n    # \"ip:port\",\n    # \"ip:port\"\n  ]\n  ...\n }\n</code></pre> <ul> <li>Other nodes: While a node is discovering other nodes, it will also be discovered by other nodes, and these nodes may also initiate connections to the current node actively.</li> </ul> <p>Unlike node discovery, which uses UDP, peer connections use Transmission Control Protocol (TCP) on the same port (18888 by default). However, the port number bound for passive connection is the same as that bound for node discovery. If a node does not want to accept passive connections for security reasons, it can close the TCP 18888 port through the firewall. If a node disables passive connections, the entire network topology will be as shown in the figure below:</p> <p></p>"},{"location":"using_javatron/connecting_to_tron/#logs-and-node-status-verification","title":"Logs and Node Status Verification","text":""},{"location":"using_javatron/connecting_to_tron/#view-sync-logs","title":"View Sync Logs","text":"<p>TRON node logs are stored in <code>logs/tron.log</code>\uff1a</p> <pre><code>$ tail -f logs/tron.log\n</code></pre>"},{"location":"using_javatron/connecting_to_tron/#example-sync-logs","title":"Example Sync Logs\uff1a","text":"<pre><code>pushBlock block number:76, cost/txs:13/0 false\nSuccess process block Num:76,ID:000000000000004c9e3899ee9952a7f0d9e4f692c7070a48390e6fea8099432f.\n</code></pre>"},{"location":"using_javatron/connecting_to_tron/#example-block-production-logs-for-super-representatives","title":"Example Block Production Logs (for Super Representatives):","text":"<pre><code>Generate block 79336 begin\nGenerate block 79336 success, trxs:0, pendingCount: 0, rePushCount: 0, postponedCount: 0\n</code></pre>"},{"location":"using_javatron/connecting_to_tron/#check-node-status","title":"Check Node Status","text":"<p>Use the HTTP API:</p> <p><pre><code>$ curl http://127.0.0.1:16887/wallet/getnodeinfo\n</code></pre> Example response\uff1a <pre><code>{\n  \"activeConnectCount\": 3,\n    \"beginSyncNum\": 42518346,\n    \"block\": \"Num:42518365,ID:000000000288c75d1967232f1efe606ff90b9dd76660d7de8cc091849be6bf10\",\n    \"cheatWitnessInfoMap\": {\n        ...\n    },\n    \"configNodeInfo\": {\n        ...\n        \"codeVersion\": \"4.5.1\",\n        \"dbVersion\": 2,\n        \"discoverEnable\": true,\n        \"listenPort\": 18888,\n        ...\n    },\n    \"currentConnectCount\": 18,\n    \"machineInfo\": {\n        ...\n    },\n    \"passiveConnectCount\": 15,\n    \"peerList\": [\n        ...\n    ],\n    \"solidityBlock\": \"Num:42518347,ID:000000000288c74b723398aef104c585bad1c7cbade7793c5551466bd916feee\",\n    \"totalFlow\": 8735314\n}\n</code></pre></p>"},{"location":"using_javatron/connecting_to_tron/#verify-node-synchronization","title":"Verify Node Synchronization","text":"<p>Compare your local block height with TRONSCAN \uff1a <pre><code>curl http://127.0.0.1:16887/wallet/getnowblock\n</code></pre> If the heights match, synchronization is normal.</p>"},{"location":"using_javatron/connecting_to_tron/#troubleshooting-common-connection-issues","title":"Troubleshooting Common Connection Issues","text":"<p>There are occasions when java-tron simply fails to connect to peers. The common reasons for this are:</p> <ul> <li> <p>Local clock offset</p> <p>Sync system time with: <pre><code>sudo ntpdate -s time.nist.gov\n</code></pre></p> </li> <li> <p>UDP blocked by firewall</p> <p>Use <code>node.active</code> to specify fixed peers.</p> </li> <li> <p>Not accepting inbound connections</p> <p>Configure <code>node.passive</code> to accept connections from trusted peers.</p> </li> <li> <p>Shasta Testnet unsupported</p> <p>Use Nile Testnet instead.</p> </li> </ul>"},{"location":"using_javatron/connecting_to_tron/#connecting-to-a-private-network","title":"Connecting to a Private Network","text":"<p>Developers can deploy a private instance of the TRON network.</p>"},{"location":"using_javatron/connecting_to_tron/#key-configuration","title":"Key Configuration:","text":"<ul> <li>Use a custom <code>node.p2p.version</code> to avoid conflicts with existing public networks.</li> </ul>"},{"location":"using_javatron/connecting_to_tron/#reference-guide","title":"Reference Guide:","text":"<ul> <li>Please refer to Private Network for full instructions.</li> </ul>"},{"location":"using_javatron/installing_javatron/","title":"Deploying a java-tron Node","text":"<p>This document guides developers on how to deploy a TRON java-tron node on <code>Linux</code> or <code>macOS</code> operating systems.</p> <p>Important Note: The java-tron node currently requires Oracle JDK 1.8. Other JDK versions are not supported.</p>"},{"location":"using_javatron/installing_javatron/#hardware-configuration-requirements","title":"Hardware Configuration Requirements","text":"<p>The minimum hardware configuration required to run a java-tron node is as follows:</p> <ul> <li>CPU: 8 Cores</li> <li>Memory: 16 GB</li> <li>SSD: 3 TB</li> <li>Network Bandwidth: 100 Mbps</li> </ul> <p>The recommended configuration is:</p> <ul> <li>CPU: 16 Cores</li> <li>Memory: 32 GB</li> <li>SSD: 3.5 TB+</li> <li>Network Bandwidth: 100 Mbps</li> </ul> <p>For a Super Representative (SR) node acting as a block production node, the recommended configuration is:</p> <ul> <li>CPU: 32 Cores</li> <li>Memory: 64 GB</li> <li>SSD: 3.5 TB+</li> <li>Network Bandwidth: 100 Mbps</li> </ul>"},{"location":"using_javatron/installing_javatron/#obtaining-the-java-tron-client","title":"Obtaining the java-tron Client","text":"<p>You can directly download the official client here, or you can compile the source code yourself to package the client.</p>"},{"location":"using_javatron/installing_javatron/#compiling-java-tron-source-code","title":"Compiling java-tron Source Code","text":"<p>Before you begin compiling, ensure that git is installed on your system.</p> <ol> <li>First, clone the java-tron source code to your local machine using the <code>git</code> command and switch to the <code>master</code> branch:</li> </ol> <pre><code>git clone https://github.com/tronprotocol/java-tron.git\ngit checkout -t origin/master\n</code></pre> <ol> <li>Then, execute the following commands to compile the java-tron source code:</li> </ol> <pre><code>cd java-tron\n./gradlew clean build -x test\n</code></pre> <ul> <li>The parameter <code>-x test</code> indicates skipping the execution of test cases. You can remove this parameter to execute test code during compilation, but this will extend the compilation time.</li> <li>After compilation is complete, the <code>FullNode.jar</code> file will be generated in the <code>java-tron/build/libs/</code> directory.</li> </ul>"},{"location":"using_javatron/installing_javatron/#starting-a-java-tron-node","title":"Starting a java-tron Node","text":"<p>You can choose different configuration files to connect the java-tron node to different TRON networks:</p> <ul> <li>For Mainnet FullNode configuration file: config.conf</li> <li> <p>For other network node configuration:</p> </li> <li> <p>Nile Testnet: https://nileex.io/</p> </li> <li>Private Network: please refer to Private Network</li> </ul>"},{"location":"using_javatron/installing_javatron/#starting-a-fullnode","title":"Starting a FullNode","text":"<p>A FullNode serves as an entry point to the TRON network, possesses complete historical data, and provides external access via HTTP API, gRPC API, and JSON-RPC API. You can interact with the TRON network through a FullNode for activities such as asset transfers, smart contract deployments, and smart contract interactions.</p> <p>Below is the command to start a Mainnet FullNode, specifying the configuration file with the <code>-c</code> parameter:</p> <pre><code>java -Xmx24g -XX:+UseConcMarkSweepGC -jar FullNode.jar -c config.conf\n</code></pre> <ul> <li><code>-XX:+UseConcMarkSweepGC</code>: Specifies the Concurrent Mark Sweep (CMS) garbage collector. This parameter must be placed before the <code>-jar</code> parameter.</li> <li><code>-Xmx</code>: Sets the maximum Java Virtual Machine (JVM) heap size, typically recommended to be 80% of physical memory.</li> <li>To start a Nile Testnet FullNode or Private Network FullNode, use the corresponding configuration file links provided at the beginning of this section.</li> </ul>"},{"location":"using_javatron/installing_javatron/#starting-a-block-production-node","title":"Starting a Block Production Node","text":"<p>By adding the <code>--witness</code> parameter to the FullNode startup command above, the <code>FullNode</code> will run as a Block Production Node (SR Node). In addition to supporting all FullNode functionalities, a Block Production Node also supports block production and transaction packaging.</p> <p>Important Notes:</p> <ul> <li>Ensure that you own a Super Representative (SR) account and have received sufficient votes. If your vote count ranks among the top 27, you need to start an SR Node to participate in block production.</li> <li>Note that even if your node doesn't make it into the top 27, a node started with the <code>--witness</code> parameter will still operate as a regular node; once its ranking reaches the top 27, it can immediately begin producing blocks.</li> <li>Fill in the private key of your Super Representative account in the <code>localwitness</code> list of <code>config.conf</code>.</li> </ul> <p>Here is an example of the <code>localwitness</code> configuration:</p> <pre><code>localwitness = [\n    650950B1...295BD812\n]\n</code></pre> <p>Then execute the following command to start the Block Production Node:</p> <pre><code>java -Xmx24g -XX:+UseConcMarkSweepGC -jar FullNode.jar --witness -c config.conf\n</code></pre>"},{"location":"using_javatron/installing_javatron/#master-slave-mode-for-block-production-fullnodes","title":"Master-Slave Mode for Block Production FullNodes","text":"<p>To enhance the reliability of block production FullNodes, you can deploy multiple block production FullNodes for the same account, forming a master-slave mode. When an account with block production rights deploys two or more nodes, it's necessary to configure <code>node.backup</code> in each node's configuration file. The description of <code>node.backup</code> configuration items is as follows:</p> <pre><code>node.backup {\n  # udp listen port, each member should have the same configuration\n  port = 10001\n\n  # my priority, each member should use different priority\n  priority = 8\n\n  # time interval to send keepAlive message, each member should have the same configuration unit: ms\n  keepAliveInterval = 3000\n\n  # peer's ip list, can't contain myself\n  members = [\n    # \"ip\",\n    # \"ip\"\n  ]\n}\n```ini\nFor example, if an account with block production rights deploys three nodes with IPs 192.168.0.100, 192.168.0.101, and 192.168.0.102 respectively, their `node.backup` configurations should be as follows:\n\n- Configuration for IP 192.168.0.100\n```ini\nnode.backup {\n  port = 10001\n  priority = 8\n  keepAliveInterval = 3000\n  members = [\n    \"192.168.0.101\",\n    \"192.168.0.102\"\n  ]\n}\n</code></pre> <ul> <li>Configuration for IP 192.168.0.101</li> </ul> <pre><code>node.backup {\n  port = 10001\n  priority = 7\n  keepAliveInterval = 3000\n  members = [\n    \"192.168.0.100\",\n    \"192.168.0.102\"\n  ]\n}\n</code></pre> <ul> <li>Configuration for IP 192.168.0.102</li> </ul> <pre><code>node.backup {\n  port = 10001\n  priority = 6\n  keepAliveInterval = 3000\n  members = [\n    \"192.168.0.100\",\n    \"192.168.0.101\"\n  ]\n}\n</code></pre> <p>Note:</p> <ul> <li>A node will only start the backup service when it has synchronized to the latest state. The latest state is defined as: (Node's system time - Latest successfully synchronized block time) &lt; Block production interval (time per slot, currently 3s).</li> <li>When a node with high priority fails and loses its master node status, other slave nodes will compete to become the master node. When the high-priority node recovers and meets the conditions for block production again, it will not automatically regain master node status; it needs to wait until the current master node fails before it can compete for the role again.</li> <li>Time required for master-slave switchover: When the master node fails, the time it takes for a slave node to switch to a master node is at least 2 * <code>keepAliveTimeout</code>, where <code>keepAliveTimeout</code> = <code>keepAliveInterval</code> * 6. Two <code>keepAliveTimeout</code> periods are needed because the slave node needs to transition through an intermediate \"preparatory\" state (INIT) to become the master node: Slave -&gt; INIT -&gt; Master.</li> </ul>"},{"location":"using_javatron/installing_javatron/#optimizations-and-considerations","title":"Optimizations and Considerations","text":""},{"location":"using_javatron/installing_javatron/#speeding-up-node-data-synchronization","title":"Speeding Up Node Data Synchronization","text":"<p>For Mainnet and Nile Testnet, a newly launched node needs to synchronize a large amount of data, which will take a significant amount of time. You can use data snapshots to accelerate node synchronization.</p> <p>The operational steps are as follows:</p> <ol> <li>Download the latest data snapshot.</li> <li>Unzip it to the <code>output-directory</code> within your <code>tron</code> project.</li> <li>Then start the node; the node will continue to synchronize based on the data snapshot.</li> </ol>"},{"location":"using_javatron/installing_javatron/#specifying-super-representative-account-private-key-using-keystore-password","title":"Specifying Super Representative Account Private Key Using Keystore + Password","text":"<p>To avoid specifying the private key in plaintext within the configuration file, you can choose to use a <code>keystore</code> file and password.</p> <ol> <li> <p>Configuration Steps:</p> <ul> <li>Comment out the <code>localwitness</code> configuration item in the node configuration file.</li> <li>Uncomment the <code>localwitnesskeystore</code> configuration item and fill in the path to the <code>keystore</code> file.</li> <li> <p>Note that the <code>keystore</code> file needs to be placed in the current directory where the startup command is executed, or in its subdirectory.</p> <ul> <li>For example, if the current directory is <code>A</code>, and the <code>keystore</code> file path is <code>A/B/localwitnesskeystore.json</code>, the configuration should be:</li> </ul> <pre><code>localwitnesskeystore = [\"B/localwitnesskeystore.json\"]\n</code></pre> </li> <li> <p>You can generate the <code>keystore</code> file and password using the <code>registerwallet</code> command from the <code>wallet-cli</code> project.</p> </li> </ul> </li> <li> <p>Starting a Block Production Node:</p> <ul> <li> <p>Starting the node interactively without <code>nohup</code> (Recommended)</p> <ul> <li>Important Notes: This method requires human interaction to enter the password during node startup. It is recommended to use a session persistence tool, such as <code>screen</code> or <code>tmux</code>.</li> </ul> <pre><code>java -Xmx24g -XX:+UseConcMarkSweepGC -jar FullNode.jar --witness -c config.conf\n</code></pre> <ul> <li>During node startup, the system will prompt you to enter the password. After entering the password correctly, the node will complete its startup.</li> </ul> </li> <li> <p>Using <code>nohup</code> to pass the password directly in the command line via <code>--password</code></p> <pre><code>nohup java -Xmx24g -XX:+UseConcMarkSweepGC -jar FullNode.jar --witness -c config.conf --password \"your_password\" &gt; start.log 2&gt;&amp;1 &amp;\n</code></pre> </li> </ul> </li> </ol>"},{"location":"using_javatron/installing_javatron/#optimizing-memory-usage-with-tcmalloc","title":"Optimizing Memory Usage with <code>tcmalloc</code>","text":"<p>To achieve optimal memory usage, use Google's <code>tcmalloc</code> instead of the system's <code>glibc malloc</code>.</p> <ol> <li> <p>Install <code>tcmalloc</code>:</p> <ul> <li>Ubuntu 20.04 LTS / Ubuntu 18.04 LTS / Debian stable:</li> </ul> <pre><code>sudo apt install libgoogle-perftools4\n</code></pre> <ul> <li>Ubuntu 16.04 LTS:</li> </ul> <pre><code>sudo apt install libgoogle-perftools4\n</code></pre> <ul> <li>CentOS 7:</li> </ul> <pre><code>sudo yum install gperftools-libs\n</code></pre> </li> <li> <p>Modify the Startup Script:</p> <ul> <li>Add the following two lines to your node's startup script. Please note that the path to <code>libtcmalloc.so.4</code> might vary slightly across different Linux distributions.</li> </ul> <pre><code>#!/bin/bash\n\nexport LD_PRELOAD=\"/usr/lib/libtcmalloc.so.4\" # Adjust path according to your system\nexport TCMALLOC_RELEASE_RATE=10\n\n# original start command\njava -jar .....\n</code></pre> <ul> <li>Ubuntu 20.04 LTS / Ubuntu 18.04 LTS / Debian stable:</li> </ul> <pre><code>export LD_PRELOAD=\"/usr/lib/x86_64-linux-gnu/libtcmalloc.so.4\"\nexport TCMALLOC_RELEASE_RATE=10\n</code></pre> <ul> <li>Ubuntu 16.04 LTS:</li> </ul> <pre><code>export LD_PRELOAD=\"/usr/lib/libtcmalloc.so.4\"\nexport TCMALLOC_RELEASE_RATE=10\n</code></pre> <ul> <li>CentOS 7:</li> </ul> <pre><code>export LD_PRELOAD=\"/usr/lib64/libtcmalloc.so.4\"\nexport TCMALLOC_RELEASE_RATE=10\n</code></pre> </li> </ol>"},{"location":"using_javatron/litefullnode/","title":"Lite Fullnode","text":"<p>For any user who wants to achieve the highest level of security and autonomy on the TRON network, running a Fullnode is undoubtedly the best choice. This not only means the user will hold a complete and continuously synchronized copy of the TRON ledger, able to independently validate every transaction and block, but it also grants them direct access to the entire network and the ability to query all historical data, free from reliance on any third-party services.</p> <p>However, running a Fullnode requires high memory, terabytes of storage, and significant CPU resources, making it impractical for everyone. To allow more people to participate in the TRON ecosystem, TRON offers a more flexible solution. This solution makes a clever trade-off: it forgoes the local storage of complete historical data in exchange for a significant optimization in hardware resources, enabling the node to run smoothly on lower-spec devices. In TRON's technical ecosystem, this type of node, designed for efficiency and accessibility, is what we call a Lite Fullnode.</p>"},{"location":"using_javatron/litefullnode/#what-is-a-lite-fullnode","title":"What is a Lite Fullnode","text":"<p>Lite Fullnodes run the exact same code as Fullnodes, but they are designed with the primary goal of rapid deployment and low resource consumption.</p>"},{"location":"using_javatron/litefullnode/#core-features","title":"Core Features","text":"<ul> <li>Starts from a State Data Snapshot: A Lite Fullnode does not sync from the genesis block. Instead, it directly loads a \"state data snapshot\" that contains only the state of all network accounts and the historical data of the most recent ~65,536 blocks.</li> <li>Significant Resource Advantages: Due to the minimal initial data size (about 3% of a Fullnode's data), Lite Fullnodes have the distinct advantages of occupying less disk space and starting up fast.</li> <li>Provides a Subset of Fullnode APIs: By default, to save resources, a Lite Fullnode does not provide historical data query (for data outside the snapshot's range). For a list of unsupported APIs, please refer to HTTP and GRPC.</li> <li>Extendable Functionality: These unsupported APIs can be enabled by setting openHistoryQueryWhenLiteFN = true in the configuration file. Since a Lite Fullnode saves data in the same way as a Fullnode after startup, once this option is enabled, the Lite Fullnode will offer the same functionalities as a Fullnode. It will support querying block data synchronized after the node started up, but it will still not support querying block data from before the node's startup snapshot.</li> </ul> <p>Therefore, if developers only need to use a node for block synchronization, processing, and broadcasting transactions, a Lite Fullnode is a better choice.</p>"},{"location":"using_javatron/litefullnode/#lite-fullnode-deployment","title":"Lite Fullnode Deployment","text":"<p>The deployment steps, configuration file, and startup command for a Lite Fullnode are the same as a Fullnode's. Please refer to the Deployment Guide to deploy a Lite Fullnode. The only difference is the database. You have two ways to obtain the required Lite Fullnode database:</p> <ul> <li>Download the Lite Fullnode data snapshot from the Public Backup Data and use it directly.</li> <li>Use the Lite Fullnode Pruning Tool to convert a Fullnode's database into a Lite Fullnode's database.</li> </ul>"},{"location":"using_javatron/litefullnode/#lite-fullnode-maintenance","title":"Lite Fullnode Maintenance","text":"<p>Although a Lite Fullnode starts with a very small amount of data, it will continuously sync and save new block data just like a Fullnode after it's running. As a result, its data expansion rate is the same as a Fullnode's, and its disk usage will grow over time.</p> <p>To manage disk space, you can perform periodic maintenance (pruning) on the Lite Fullnode's data. This maintenance is also done using the Lite Fullnode Pruning Tool, which re-prunes the current node data into a new snapshot dataset containing only the latest state.</p>"},{"location":"using_javatron/metrics/","title":"java-tron Node Metrics Monitoring","text":"<p>Starting from the GreatVoyage-4.5.1 (Tertullian) version, the node provides a series of interfaces compatible with the prometheus protocol, so that the node deployer can monitor the health status of the node more conveniently. If you want to monitor various indicators of the node, you first need to deploy a prometheus service to communicate with the java-tron node, and obtain the indicator data of the node through the node interface. Then you need to deploy a visualization tool, such as Grafana, to display the node data obtained by prometheus in the form of a graphical interface. The following will introduce the deployment process of the java-tron node monitoring system in detail.</p>"},{"location":"using_javatron/metrics/#configure-java-tron","title":"Configure java-tron","text":"<p>To use the Prometheus tool to monitor the java-tron node, you first need to enable prometheus metric monitoring in the node configuration file and set the http port:</p> <pre><code>node {\n  ... ...\n  p2p {\n    version = 11111 # 11111: mainnet; 20180622: testnet\n  }\n ####### add for prometheus start.\n metrics{\n  prometheus{\n  enable=true \n  port=\"9527\"\n  }\n }\n ####### add for prometheus end.\n}\n</code></pre>"},{"location":"using_javatron/metrics/#start-java-tron-node","title":"Start java-tron node","text":"<p>Start java-tron node using below command\uff1a</p> <pre><code>$  java -Xmx24g -XX:+UseConcMarkSweepGC -jar FullNode.jar -c main_net_config.conf\n</code></pre>"},{"location":"using_javatron/metrics/#deploy-prometheus-service","title":"Deploy prometheus service","text":"<p>prometheus officially provides precompiled binaries and docker images, you can download them directly from the official website or pull the docker images on dockerhub. For more detailed installation and configuration instructions, Please refer to the prometheus documentation. As a simple deployment instruction, this article will adopt the docker image deployment:</p> <ol> <li> <p>After installing docker, enter the following command to pull the prometheus image:</p> <pre><code>$ docker pull prom/prometheus\n</code></pre> </li> <li> <p>Download the prometheus configuration file</p> <p>The following is a prometheus configuration file template <code>prometheus.yaml</code>: <pre><code>global:\n  scrape_interval: 30s\n  scrape_timeout: 10s\n  evaluation_interval: 30s\nscrape_configs:\n- job_name: java-tron\n  honor_timestamps: true\n  scrape_interval: 3s\n  scrape_timeout: 2s\n  metrics_path: /metrics\n  scheme: http\n  follow_redirects: true\n  static_configs:\n  - targets:\n    - 127.0.0.1:9527\n    labels:\n      group: group-xxx\n      instance: xxx-01\n  - targets:\n    - 172.0.0.2:9527\n    labels:\n      group: group-xxx\n      instance: xxx-02\n</code></pre> You can download and use this template and modify the configuration items <code>targets</code>, it is used to configure the ip and prometheus port of the java-tron node. If you deploy multiple java-tron nodes, you can configure multiple <code>targets</code> to monitor multiple nodes.</p> </li> <li> <p>Start a Prometheus container</p> <p>Start a Prometheus container with the following command and specify to use the user-defined configuration file in the previous step:<code>/Users/test/deploy/prometheus/prometheus.yaml</code> </p> <pre><code>$ docker run --name prometheus \\\n    -d -p :9090:9090 \\\n    -v  /Users/test/deploy/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml \\\n    prom/prometheus:latest\n</code></pre> <p>After the container starts, you can view the running status of the prometheus service through <code>http://localhost:9090/</code>.</p> <p>Click \"Status\" -&gt; \"Configuration\" to check whether the configuration file used by the container is correct:</p> <p></p> <p>Click \"Status\" -&gt; \"Targets\" to view the status of each monitored java-tron node:</p> <p></p> <p>In this example, the status of the first endpoint is <code>UP</code>, which means that Prometheus can fetch the data of this node normally. The second endpoint, whose status is <code>DOWN</code>, indicates an exception. For details, please refer to the description in \"Error\".</p> <p>When the status of the monitored java-tron nodes is normal, you can monitor the indicator data through visualization tools such as Grafana or Promdash, etc. This article will use grafana to display the data:</p> </li> </ol>"},{"location":"using_javatron/metrics/#deploy-grafana","title":"Deploy Grafana","text":"<p>The deployment process of the Grafana visualization tool is as follows:</p> <ol> <li> <p>Install Grafana     Please refer to the official documentation to install Grafana. This article will adopt the docker image deployment, and the pulled image version is the open source version:</p> <pre><code>$ docker pull grafana/grafana-oss\n</code></pre> </li> <li> <p>Start Grafana</p> <p>You can use the below command to start Grafana: <pre><code>$ docker run -d --name=grafana -p 3000:3000 grafana/grafana-oss\n</code></pre></p> </li> <li> <p>Log in to the Grafana web UI</p> <p>After startup, you can login the Grafana web UI through <code>http://localhost:3000/</code>. The initial user name and password are both <code>admin</code>. After login, change the password according to the prompts, and then you can enter the main interface. Click the settings icon on the left side of the main page and select \"Data Sources\" to configure Grafana's data sources:</p> <p></p> <p>Enter the ip and port of the prometheus service in <code>URL</code>:</p> <p></p> <p>Then click the \"Save &amp; test\" button at the bottom of the page to save the settings. After clicking save, Grafana will detect the connection with the data source, and if the connection is successful, you will find the words <code>Data source is working</code>.</p> </li> <li> <p>Import Dashboard</p> <p>Grafana's dashboard needs to be configured. For the convenience of java-tron node deployers, the TRON community provides a comprehensive dashboard configuration file java-tron-template_rev1.json, which you can download directly and then import into Grafana.</p> <p>Click the Dashboards icon on the left, then select \"+Import\", then click \"Upload JSON file\" to import the downloaded dashboard configuration file:</p> <p></p> <p>Then you can see the following types of monitoring metrics on the dashboard, and monitor the running status of the nodes in real time:</p> <p></p> </li> </ol>"},{"location":"using_javatron/private_network/","title":"Private Network","text":"<p>This document will guide you through setting up a basic TRON private network. This network will consist of one Super Representative (SR) node responsible for block production and one regular FullNode used only for syncing block data and broadcasting transactions.</p>"},{"location":"using_javatron/private_network/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, please ensure your development environment meets the following requirements:</p> <ul> <li>Java Development Kit (JDK): You must have Oracle JDK 1.8 installed.</li> <li>TRON Accounts: You need to create at least two TRON network addresses in advance and securely store the addresses and their corresponding private keys. One address will serve as the initial SR node (Block Production), and the other will be a regular account.</li> <li>Address Creation Tools: You can use any of the following tools to generate and manage your TRON accounts:<ul> <li>Wallet-cli: An official command-line wallet tool, suitable for server environments.</li> <li>TronLink: A multi-chain wallet that supports the TRON network, featuring a user-friendly graphical interface for easy address creation and management.</li> <li>TronWeb: A JavaScript library for developers to interact with the TRON network and build dApps.</li> <li>Trident: A lightweight Java SDK designed to help developers easily and efficiently integrate TRON blockchain functionality into Java applications.</li> </ul> </li> </ul>"},{"location":"using_javatron/private_network/#deployment-guide","title":"Deployment Guide","text":"<p>The operational steps for deploying a private network node are fundamentally the same as deploying a Mainnet node. The primary difference lies in the node's configuration file. The most crucial part of setting up a private network is modifying the configuration items in this file to allow the nodes to form a private network, enabling network discovery, block synchronization, and transaction broadcasting.</p> <ol> <li> <p>Prepare Node Directories</p> <p>To keep configurations and data isolated, it is recommended to create separate deployment directories for each node.</p> <pre><code># Create the Super Representative (SR) node directory\n$ mkdir SR\n\n# Create the regular FullNode directory\n$ mkdir FullNode\n</code></pre> </li> <li> <p>Get the java-tron Client</p> <ul> <li>Download the latest <code>FullNode.jar</code> from the java-tron GitHub Releases page.</li> <li> <p>Copy the downloaded <code>JAR</code> file into each of the two node directories:</p> <pre><code>$ cp FullNode.jar ./SR\n$ cp FullNode.jar ./FullNode\n</code></pre> </li> </ul> </li> <li> <p>Prepare Configuration Files</p> <ul> <li>Download the official configuration file template (config.conf) and change the <code>p2p.version</code> to any value other than 11111 or 20180622.</li> <li>Copy it into each node directory and rename the files for distinction.     <pre><code># Configuration file for the SR node\n$ cp private_net_config.conf ./SR/supernode.conf\n\n#  Configuration file for the regular Fullnode\n$ cp private_net_config.conf ./FullNode/fullnode.conf\n</code></pre></li> </ul> </li> <li> <p>Modify Node Configurations</p> <p>This is the most critical step in setting up a private network. Please edit the <code>supernode.conf</code> and <code>fullnode.conf</code> files according to the instructions in the table below.</p> Config Item SR Node (<code>supernode.conf</code>) Fullnode (<code>fullnode.conf</code>) Description <code>localwitness</code> The private key of Super Representative (SR) address Leave empty Generating blocks requires signing with a private key <code>genesis.block.witnesses</code> SR address(es) Same as SR configuration Genesis block-related configuration <code>genesis.block.Assets</code> Preset TRX for specific accounts. Add the pre-prepared address to the end and specify its TRX balance as required Same as SR configuration Genesis block related configuration <code>p2p.version</code> Any positive integer except 11111 Same as SR configuration Only nodes of the same <code>p2p.version</code> can shake hands successfully <code>seed.node</code> Leave empty Set <code>ip.list</code> to the IP address of the SR node and the port number specified in its <code>listen.port</code> configuration Enables FullNode to establish connection with SR node for data synchronization <code>needSyncCheck</code> <code>false</code> <code>true</code> Set the first SR\u2019s <code>needSyncCheck</code> to <code>false</code>, other SRs <code>true</code> <code>node.discovery.enable</code> <code>true</code> <code>true</code> If set to <code>false</code>, the current node will not be discovered by other nodes <code>block.proposalExpireTime</code> <code>600000</code> Same as SR configuration The default proposal effective time is 3 days: 259200000 (ms). Can be set to a lower value, such as 600,000(ms) (10 minutes), to pass the proposal faster. <code>block.maintenanceTimeInterval</code> <code>300000</code> Same as SR configuration The default maintenance time interval is 6 hours: 21600000 (ms). Can be set to a smaller value, such as 300000(ms) (5 minutes), to pass the proposal faster. <code>committee.allowSameTokenName</code> <code>1</code> <code>1</code> If set to <code>1</code> (true), the creation of tokens with identical names is allowed <code>committee.allowTvmTransferTrc10</code> <code>1</code> <code>1</code> If set to 1 (true), the TVM is allowed to execute transfers of TRC-10 tokens via smart contracts. </li> <li> <p>Adjust Network Ports (If Necessary)</p> <p>Modify the port numbers in the configuration files to be different for the SR and the Full Node. This step is only required when running multiple nodes on the same machine to avoid port conflicts. Otherwise, you can skip it.</p> <ul> <li><code>listen.port</code>: P2P listening port</li> <li><code>http port</code>: HTTP listening port</li> <li><code>rpc port</code>: RPC listening port</li> </ul> </li> <li> <p>Start the Nodes</p> <p>The startup commands for the Super Representative (block-producing node) and the regular Full Node are slightly different.</p> <ul> <li> <p>Start the Super Representative (SR) Node:  <pre><code>$ cd SR\n$ java -Xmx6g -XX:+HeapDumpOnOutOfMemoryError -jar FullNode.jar  --witness  -c supernode.conf\n</code></pre></p> </li> <li> <p>Start the regular FullNode:   <pre><code>$ cd FullNode\n$ java -Xmx6g -XX:+HeapDumpOnOutOfMemoryError -jar FullNode.jar  -c fullnode.conf\n# After starting, monitor the console logs to ensure the Full Node successfully connects to the SR node and begins syncing blocks.\n</code></pre></p> </li> </ul> </li> <li> <p>Advanced Operation: Modifying Dynamic Network Parameters</p> <p>Dynamic network parameters can be retrieved via the getchainparameters API. The current Mainnet dynamic parameters and related proposals can be viewed on the TRONSCAN Parameters &amp; Proposals page. If you want your private network's dynamic parameters to match the Mainnet's, you can use the dbfork tool, which can capture the latest state of the Mainnet.</p> <p>After your private network is running, you may need to adjust certain network parameters (e.g., transaction fees, energy price). This can be achieved in two ways:</p> <ul> <li> <p>Method 1: Set via Configuration File (For Initial Deployment)</p> <p>Some dynamic parameters can be set directly in the configuration file. You can find a list of these parameters here.</p> <p>Example: Add the following <code>committee</code> block to your <code>.conf</code> file to enable multi-signature and contract creation:</p> <pre><code>committee = {\n  allowCreationOfContracts = 1\n  allowAdaptiveEnergy = 0\n  allowMultiSign = 1\n  allowDelegateResource = 1\n  allowSameTokenName = 0\n  allowTvmTransferTrc10 = 1\n }\n</code></pre> </li> <li> <p>Method 2: Modify via On-Chain Proposals (For a Running Network)</p> <p>This is the standard method for on-chain governance. Any Super Representative (SR), SR Partner, or SR Candidate has the right to create a proposal, but only SRs have the right to vote for its approval.</p> <ul> <li>Create a Proposal: Any SR, SR Partner, or SR Candidate uses the proposalcreate API, specifying the parameter to be modified by its ID and the new value. (List of parameter IDs).</li> <li>Approve a Proposal: An SR uses the proposalapprove API to vote on the proposal. (Only 'approve' votes are supported; if an SR does not vote, it is considered a 'disapprove').</li> <li>Related APIs:<ul> <li>Get all proposals: listproposals</li> <li>Get a proposal by ID: getproposalbyid</li> </ul> </li> </ul> <p>Example Code (using TronWeb):</p> <p>The following code snippet demonstrates how to create a proposal to modify two network parameters and then vote on it. In proposalcreate, dynamic parameters are represented by their IDs. The mapping between parameter IDs and names can be found here.</p> <pre><code>var TronWeb = require('tronweb');\nvar tronWeb = new TronWeb({\n    fullHost: 'http://localhost:16887',\n    privateKey: 'privateKey'\n})\n\nvar parametersForProposal1 = [{\"key\":9,\"value\":1},{\"key\":10,\"value\":1}];\n\nasync function modifyChainParameters(parameters,proposalID){\n\n    parameters.sort((a, b) =&gt; {\n            return a.key.toString() &gt; b.key.toString() ? 1 : a.key.toString() === b.key.toString() ? 0 : -1;\n        })\n   var unsignedProposal1Txn = await tronWeb.transactionBuilder.createProposal(parameters,\"41D0B69631440F0A494BB51F7EEE68FF5C593C00F0\");\n    var signedProposal1Txn = await tronWeb.trx.sign(unsignedProposal1Txn);\n    var receipt1 = await tronWeb.trx.sendRawTransaction(signedProposal1Txn);\n\n    setTimeout(async function() {\n        console.log(receipt1)\n        console.log(\"Vote proposal 1 !\")\n        var unsignedVoteP1Txn = await tronWeb.transactionBuilder.voteProposal(proposalID, true, tronWeb.defaultAddress.hex)\n        var signedVoteP1Txn = await tronWeb.trx.sign(unsignedVoteP1Txn);\n        var rtn1 = await tronWeb.trx.sendRawTransaction(signedVoteP1Txn);\n    }, 4000)\n\n}\n\nmodifyChainParameters(parametersForProposal1, 1) \n</code></pre> <p>Once the proposal is approved and the maintenance period has passed, the new network parameters will take effect. You can verify the changes using listproposals or getchainparameters.</p> <p>It is important to note that dynamic parameters with interdependencies cannot be included in the same proposal. The correct approach is to separate them into different proposals and pay attention to their order of submission.</p> </li> </ul> </li> </ol>"},{"location":"using_javatron/toolkit/","title":"Toolkit: A Java-tron Node Maintenance Suite","text":"<p>The TRON Toolkit is a comprehensive utility that integrates various ecosystem tools for <code>java-tron</code>, designed to streamline node maintenance and management operations. We are committed to expanding its functionality in future releases to improve the developer experience. The Toolkit currently offers the following core features:</p> <ul> <li>Database Partitioning: Alleviates storage pressure caused by on-chain data growth.</li> <li>Lite Fullnode Data Pruning: Enables periodic pruning of Lite Fullnode data.</li> <li>Fast Data Copy: Implements rapid database copying.</li> <li>Data Conversion: Supports data format conversion from LevelDB to RocksDB.</li> <li>LevelDB Startup Optimization: Accelerates the startup speed for nodes using LevelDB.</li> </ul> <p>This document provides a detailed guide on how to acquire and use the TRON Toolkit.</p>"},{"location":"using_javatron/toolkit/#obtaining-the-toolkit","title":"Obtaining the Toolkit","text":"<p>You can obtain the <code>Toolkit.jar</code> file either by compiling the <code>java-tron</code> source code or by downloading a pre-compiled binary from the official releases. We recommend downloading the latest version from GitHub Releases.</p>"},{"location":"using_javatron/toolkit/#compiling-from-source","title":"Compiling from Source","text":"<ol> <li>Clone the <code>java-tron</code> source repository\uff1a    <pre><code>$ git clone https://github.com/tronprotocol/java-tron.git\n$ git checkout -t origin/master\n</code></pre></li> <li>Build the project\uff1a    <pre><code>$ cd java-tron\n$ ./gradlew clean build -x test\n</code></pre> Upon successful compilation, the <code>Toolkit.jar</code> artifact will be located in the <code>java-tron/build/libs/</code> directory.</li> </ol>"},{"location":"using_javatron/toolkit/#database-partitioning-tool","title":"Database Partitioning Tool","text":"<p>The continuous growth of TRON's on-chain data (Mainnet Fullnode database currently exceeds 2TB and grows by approximately 1.2GB daily) places increasing storage demands on nodes. To address the limitations of single-disk capacity, the TRON Toolkit includes a database storage partitioning tool. This tool enables you to migrate specific database components to different storage disks based on a configuration file. This allows you to expand storage capacity by adding new devices rather than replacing existing ones when disk space becomes insufficient.</p>"},{"location":"using_javatron/toolkit/#command-and-parameters","title":"Command and Parameters","text":"<p>Use the <code>db mv</code> command to execute the data migration\uff1a <pre><code># full command\njava -jar Toolkit.jar db mv [-h] [-c=&lt;config&gt;] [-d=&lt;database&gt;]\n# examples\njava -jar Toolkit.jar db mv -c main_net_config.conf -d /data/tron/output-directory\n</code></pre></p> <p>Optional Parameters\uff1a</p> <ul> <li><code>-c | --config &lt;string&gt;</code>: Specifies the FullNode configuration file path. Default: <code>config.conf</code>\u3002</li> <li><code>-d | --database-directory &lt;string&gt;</code>: Specifies the FullNode database directory. Default: <code>output-directory</code>\u3002</li> <li><code>-h | --help &lt;boolean&gt;</code>: Displays help information. Default: <code>false</code>\u3002</li> </ul>"},{"location":"using_javatron/toolkit/#usage-instructions","title":"Usage Instructions","text":"<p>To use the database partitioning tool, follow these steps:</p> <ol> <li>Stop the FullNode service</li> <li>Configure database migration settings</li> <li>Execute the migration command</li> <li>Restart the FullNode service</li> </ol>"},{"location":"using_javatron/toolkit/#1-stop-the-fullnode-service","title":"1. Stop the FullNode Service","text":"<p>Before performing a database migration, you must stop the currently running FullNode service. You can use the following command to find the FullNode process ID (PID) and kill it:</p> <pre><code>kill -15 $(ps -ef | grep FullNode.jar | grep -v grep | awk '{print $2}')\n</code></pre>"},{"location":"using_javatron/toolkit/#2-configure-database-storage-migration","title":"2. Configure Database Storage Migration","text":"<p>Database migration is configured via the <code>storage.properties</code>field in the <code>java-tron</code> node configuration file. You can find an example configuration in the tron-deployment repository.</p> <p>The following example demonstrates how to migrate the <code>block</code> and <code>trans</code> databases to the <code>/data1/tron</code> directory:</p> <p><pre><code>storage {\n ......\n  properties = [\n    {\n     name = \"block\",\n     path = \"/data1/tron\",\n\n    },\n    {\n     name = \"trans\",\n     path = \"/data1/tron\",\n   }\n  ]\n ......\n}\n</code></pre> *   <code>name</code>\uff1aThe name of the database to be migrated. *   <code>path</code>\uff1aThe target directory for the database migration.</p> <p>The tool will move the database specified by <code>name</code> to the <code>path</code> directory and create a soft link in the original location pointing to the new directory. After the Fullnode restart, it will use this link to locate the data.</p>"},{"location":"using_javatron/toolkit/#3-execute-the-database-migration","title":"3. Execute the Database Migration","text":"<p>After configuration, run the following command to perform the migration. The command will display the current progress.</p> <pre><code>java -jar Toolkit.jar db mv -c main_net_config.conf -d /data/tron/output-directory\n</code></pre>"},{"location":"using_javatron/toolkit/#4-restart-the-fullnode-service","title":"4. Restart the FullNode Service","text":"<p>Once the migration is complete, restart your <code>java-tron</code> node. </p> <p>FullNode Startup Command Example\uff1a</p> <p><pre><code>nohup java -Xms9G -Xmx9G -XX:ReservedCodeCacheSize=256m \\\n                -XX:MetaspaceSize=256m -XX:MaxMetaspaceSize=512m \\\n                -XX:MaxDirectMemorySize=1G -XX:+PrintGCDetails \\\n                -XX:+PrintGCDateStamps  -Xloggc:gc.log \\\n                -XX:+UseConcMarkSweepGC -XX:NewRatio=2 \\\n                -XX:+CMSScavengeBeforeRemark -XX:+ParallelRefProcEnabled \\\n                -XX:+HeapDumpOnOutOfMemoryError \\\n                -XX:+UseCMSInitiatingOccupancyOnly  -XX:CMSInitiatingOccupancyFraction=70 \\\n                -jar FullNode.jar -c main_net_config.conf &gt;&gt; start.log 2&gt;&amp;1 &amp;\n</code></pre> Super Representative (SR) FullNode Startup Command Example\uff1a <pre><code>nohup java -Xms9G -Xmx9G -XX:ReservedCodeCacheSize=256m \\\n               -XX:MetaspaceSize=256m -XX:MaxMetaspaceSize=512m \\\n               -XX:MaxDirectMemorySize=1G -XX:+PrintGCDetails \\\n               -XX:+PrintGCDateStamps  -Xloggc:gc.log \\\n               -XX:+UseConcMarkSweepGC -XX:NewRatio=2 \\\n               -XX:+CMSScavengeBeforeRemark -XX:+ParallelRefProcEnabled \\\n               -XX:+HeapDumpOnOutOfMemoryError \\\n               -XX:+UseCMSInitiatingOccupancyOnly  -XX:CMSInitiatingOccupancyFraction=70 \\\n               -jar FullNode.jar --witness -c main_net_config.conf &gt;&gt; start.log 2&gt;&amp;1 &amp;\n</code></pre></p>"},{"location":"using_javatron/toolkit/#lite-fullnode-data-pruning","title":"Lite Fullnode Data Pruning","text":"<p>The TRON Toolkit provides a data pruning tool primarily used for generating and managing lite FullNode data.</p> <p>A FullNode's complete data can be split into two parts: a snapshot dataset (Snapshot Dataset) or a historical dataset (History Dataset).</p> <ul> <li>Snapshot Dataset: Used to start a lite FullNode. It does not contain historical data prior to the block height at the time of pruning.</li> <li>History Dataset: Used for querying historical data.</li> </ul> <p>The snapshot dataset contains all account state data plus the history of the most recent 65,536 blocks. It occupies a small amount of space (approximately 3% of a FullNode's data). Since a Lite Fullnode starts using only the snapshot dataset, it has the advantages of low disk usage and fast startup speeds.</p> <p>The data pruning tool can split a FullNode's data into a Snapshot Dataset or a History Dataset. It also supports merging a history dataset back with a snapshot dataset. This enables the following use cases: * Convert FullNode Data into Lite Fullnode Data: Split the full node data to generate a snapshot dataset, which is all that's needed to run a light node. * Periodically Pruning a Lite FullNode: As a light node runs, its data grows. You can periodically prune it by using the tool to create a new, smaller snapshot dataset from the existing lite FullNode data. * Converting Lite FullNode Data Back to FullNode Data: To enable historical queries on a lite FullNode, you can convert it back to a FullNode. First, split a FullNode to create a history dataset. Then, merge that history dataset with your lite FullNode's snapshot dataset to create a complete FullNode database.</p> <p>Important Note: Before using this tool for any operation, you need to stop the currently running node first.</p>"},{"location":"using_javatron/toolkit/#command-and-parameters_1","title":"Command and Parameters","text":"<p>Use the <code>db lite</code> command to perform data pruning operations: <pre><code># full command\n  java -jar Toolkit.jar db lite [-h] -ds=&lt;datasetPath&gt; -fn=&lt;fnDataPath&gt; [-o=&lt;operate&gt;] [-t=&lt;type&gt;]\n# examples\n  #split and get a snapshot dataset\n  java -jar Toolkit.jar db lite -o split -t snapshot --fn-data-path output-directory/database --dataset-path /tmp\n  #split and get a history dataset\n  java -jar Toolkit.jar db lite -o split -t history --fn-data-path output-directory/database --dataset-path /tmp\n  #merge history dataset and snapshot dataset\n  java -jar Toolkit.jar db lite -o merge --fn-data-path /tmp/snapshot --dataset-path /tmp/history\n</code></pre> Optional Parameters\uff1a</p> <ul> <li><code>-o | --operation &lt;split | merge&gt;</code>: Specifies the operation type. Default: <code>split</code>\u3002</li> <li><code>-t | --type &lt;snapshot | history&gt;</code>\uff1aUsed only with <code>-o split</code>. <code>snapshot</code> creates a snapshot dataset; <code>history</code> creates a history dataset.</li> <li><code>-fn | --fn-data-path &lt;string&gt;</code>\uff1a<ul> <li>For <code>split</code>, this is the source directory of the data to be pruned.</li> <li>For <code>merge</code>, this is the directory of the lite FullNode's database (the snapshot dataset).</li> </ul> </li> <li><code>-ds | --dataset-path &lt;string&gt;</code>\uff1a<ul> <li>For <code>split</code>, this is the output directory for the generated snapshot or history dataset.</li> <li>For <code>merge</code>, this is the directory of the history dataset.</li> </ul> </li> </ul>"},{"location":"using_javatron/toolkit/#usage-examples","title":"Usage Examples","text":"<p>The node database is typically located in the <code>output-directory/database</code> directory by default. The following examples will use this default directory for illustration.</p>"},{"location":"using_javatron/toolkit/#split-to-create-a-snapshot-dataset","title":"Split to Create a Snapshot Dataset","text":"<p>This feature can be used to convert FullNode data into Lite FullNode data, or to periodically prune the data of a running Lite FullNode. Follow these steps:</p> <p>First, stop the node, then execute the following command:</p> <pre><code># For simplicity, the snapshot dataset will be stored in the /tmp directory\njava -jar Toolkit.jar db lite -o split -t snapshot --fn-data-path output-directory/database --dataset-path /tmp\n</code></pre> <ul> <li><code>--fn-data-path</code>: The source directory of the data to be pruned (the node's database directory).</li> <li><code>--dataset-path</code>: The output directory for the generated snapshot dataset.</li> </ul> <p>After the command completes, a directory named <code>snapshot</code> will be created in the <code>/tmp</code> directory. This directory contains the Lite FullNode data. To use it, copy the data from the snapshot directory to your node's database directory (e.g., rename the <code>snapshot</code> directory to database and move it to the Lite FullNode's <code>output-directory</code>), and then restart the node.</p>"},{"location":"using_javatron/toolkit/#split-to-create-a-history-dataset","title":"Split to Create a History Dataset","text":"<p>To split and create a history dataset, use the following command:</p> <pre><code># For simplicity, the history dataset will be stored in the /tmp directory\njava -jar Toolkit.jar db lite -o split -t history --fn-data-path output-directory/database --dataset-path /tmp\n</code></pre> <ul> <li><code>--fn-data-path</code>: The FullNode's database directory.</li> <li><code>--dataset-path</code>: The output directory for the generated history dataset.</li> </ul> <p>After the command completes, a directory named <code>history</code> will be created in the /tmp directory, containing the generated history dataset.</p>"},{"location":"using_javatron/toolkit/#merge-a-history-dataset-and-a-snapshot-dataset","title":"Merge a History Dataset and a Snapshot Dataset","text":"<p>Both the history dataset and the snapshot dataset contain an <code>info.properties</code> file that records the block height at which the split occurred. </p> <p>Please Note: To merge the two datasets, the block height of the history dataset must be greater than or equal to that of the snapshot dataset. After the <code>merge</code> operation, the Lite FullNode will be converted into a complete FullNode.</p> <p>Use the following command to merge a history dataset and a snapshot dataset:</p> <p><pre><code># Assuming the snapshot dataset is in /tmp/snapshot and the history dataset is in /tmp/history\njava -jar Toolkit.jar db lite -o merge --fn-data-path /tmp/snapshot --dataset-path /tmp/history\n</code></pre> *   <code>--fn-data-path</code>: The directory of the snapshot dataset. *   <code>--dataset-path</code>: The directory of the history dataset.</p> <p>When the command finishes, the merged data will overwrite the snapshot dataset in the directory specified by <code>--fn-data-path</code>. Copy this merged data to your node's database directory to convert the Lite FullNode into a FullNode.</p>"},{"location":"using_javatron/toolkit/#fast-data-copy-tool","title":"Fast Data Copy Tool","text":"<p>Node databases are often large, and traditional copy operations can be time-consuming. The TRON Toolkit provides a fast database copy feature that uses hard links to efficiently copy a LevelDB or RocksDB database within a single disk partition.</p>"},{"location":"using_javatron/toolkit/#command-and-parameters_2","title":"Command and Parameters","text":"<p>Use the <code>db cp</code> command to perform a data copy operation:</p> <pre><code># full command\n  java -jar Toolkit.jar db cp [-h] &lt;src&gt; &lt;dest&gt;\n# examples\n  java -jar Toolkit.jar db cp  output-directory/database /tmp/databse\n</code></pre> <p>Optional Parameters:</p> <ul> <li><code>&lt;src&gt;</code>: Specifies the source database directory. Default: <code>output-directory/database</code>.</li> <li><code>&lt;dest&gt;</code>: Specifies the target directory for the copy. Default: <code>output-directory-cp/database</code>.</li> <li><code>-h | --help &lt;boolean&gt;</code>: Displays help information. Default: <code>false</code>.</li> </ul> <p>Important Note: Before performing any operation with this tool, you must stop the currently running node.</p>"},{"location":"using_javatron/toolkit/#data-conversion-tool","title":"Data Conversion Tool","text":"<p>The TRON Toolkit includes a data conversion feature that allows you to convert a database from LevelDB format to RocksDB format.</p>"},{"location":"using_javatron/toolkit/#command-and-parameters_3","title":"Command and Parameters","text":"<p>Use the <code>db convert</code> command to perform the data conversion:</p> <pre><code># full command\n  java -jar Toolkit.jar db convert [-h] [--safe] &lt;src&gt; &lt;dest&gt;\n# examples\n  java -jar Toolkit.jar db convert  output-directory/database /tmp/database\n</code></pre> <p>Optional Parameters:</p> <ul> <li><code>&lt;src&gt;</code>: Specifies the source LevelDB data directory. Default: <code>output-directory/database</code>.</li> <li><code>&lt;dest&gt;</code>: Specifies the output directory for the RocksDB data. Default: <code>output-directory-dst/database</code>.</li> <li><code>--safe &lt;boolean&gt;</code>: Toggles safe mode for the conversion. The default is <code>false</code>, but we recommended setting this to <code>true</code> for better data compatibility.<ul> <li>If safe mode is enabled, the tool reads all data from LevelDB and writes it to RocksDB. This process is slower but more thorough.</li> <li>If safe mode is disabled (default), the tool performs a much faster conversion. Because the current version of RocksDB is compatible with LevelDB, this mode simply changes the <code>engine.properties</code> file setting from <code>leveldb</code> to <code>rocksdb</code>.</li> </ul> </li> <li><code>-h | --help &lt;boolean&gt;</code>: Displays help information. Default: <code>false</code>.</li> </ul> <p>Important Note: Before performing any operation with this tool, you must stop the currently running node.</p>"},{"location":"using_javatron/toolkit/#leveldb-startup-optimization-tool","title":"LevelDB Startup Optimization Tool","text":"<p>As a LevelDB database operates, its <code>manifest</code> file continuously grows. An excessively large <code>manifest</code> file can slow down node startup and lead to persistent memory growth, which may cause the service to terminate unexpectedly. To solve these problems, the TRON Toolkit provides a LevelDB Startup Optimization Tool. It optimizes the <code>manifest</code> file size and the LevelDB startup process, reducing memory usage and accelerating node startup.</p>"},{"location":"using_javatron/toolkit/#command-and-parameters_4","title":"Command and Parameters","text":"<p>Use the <code>db archive</code> command to perform the LevelDB startup optimization:</p> <pre><code># full command\n   java -jar Toolkit.jar db archive [-h] [-b=&lt;maxBatchSize&gt;] [-d=&lt;databaseDirectory&gt;] [-m=&lt;maxManifestSize&gt;]\n# examples\n   #1. use default settings\n   java -jar Toolkit.jar db archive \n   #2. specify the database directory as /tmp/db/database\n   java -jar Toolkit.jar db archive -d /tmp/db/database \n   #3. specify the batch size to 64000 when optimizing manifest\n   java -jar Toolkit.jar db archive -b 64000\n   #4. specify optimization only when Manifest exceeds 128M\n   java -jar Toolkit.jar db archive -m 128 \n</code></pre> <p>Optional Parameters:</p> <ul> <li><code>-b | --batch-size &lt;integer&gt;</code>: Specifies the batch size for <code>manifest</code> processing. Default: <code>80000</code>.</li> <li><code>-d | --database-directory &lt;string&gt;</code>: Specifies the LevelDB database directory. Default: <code>output-directory/database</code>.</li> <li><code>-m | --manifest-size &lt;integer&gt;</code>: The minimum size of the <code>manifest</code> file (in MB) to trigger the optimization. The tool will only process the file if its size exceeds this value. Default: <code>0</code>.</li> <li><code>-h | --help &lt;boolean&gt;</code>: Displays help information. Default: <code>false</code>.</li> </ul> <p>Important Note: Before performing any operation with this tool, you must stop the currently running node.</p>"}]}