{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the java-tron user manual! \u00b6 java-tron is a TRON client implemented in Java, it provides completely open source code, you can download the java-tron source code on Github. This article will introduce the knowledge related to java-tron. Through this article, you will learn how to use java-tron and how to participate in the development and maintenance of java-tron, including the following parts: Getting Started Guide Using java-tron Protocol Guide java-tron Development DAPP Development APIs Wallet-CLI For other TRON related information, please visit the official website tron.network or the following resource links: TRON Whitepaper TRON Architecture TRON Improvement Proposals (TIPs) TRON Developer Hub","title":"Welcome to the java-tron user manual!"},{"location":"#welcome-to-the-java-tron-user-manual","text":"java-tron is a TRON client implemented in Java, it provides completely open source code, you can download the java-tron source code on Github. This article will introduce the knowledge related to java-tron. Through this article, you will learn how to use java-tron and how to participate in the development and maintenance of java-tron, including the following parts: Getting Started Guide Using java-tron Protocol Guide java-tron Development DAPP Development APIs Wallet-CLI For other TRON related information, please visit the official website tron.network or the following resource links: TRON Whitepaper TRON Architecture TRON Improvement Proposals (TIPs) TRON Developer Hub","title":"Welcome to the java-tron user manual!"},{"location":"glossary/","text":"Glossary \u00b6 energyUsage The Energy conumption of the contract caller in one contract trigger. energyFee The number of TRX burned from the contract caller for Energy conumption in one contract trigger. originEnergyUsage The total Energy conumption of the contract developer in one contract trigger. energyUsageTotal The total Energy conumption of the contract developer and the contract caller combined. Feelimit When the user triggers or create the contract, this is used to set the usage limit of the Energy consumption got from burning TRX or staking TRX, Energy got from staking TRX will be used first. CallValue When the user triggers or create the contract, this can be used to send TRX to the contract. consume_user_resource_percent For a contract, Resource consumption is composed of two parts, one part is afforded by contract developer and the other part is afforded by contract caller. This is the percentage of the two parts in the Resource consumption. origin_energy_limit The usage limit of the Energy consumption of the developer in one contract trigger, should be greater than 0. net_usage The Bandwidth consumption in one contract trigger. (NetFee not included) net_fee The TRX burned for Bandwidth consumption in one contract trigger. Bandwidth The Bandwidth Points consumed by a transaction is the size of the byte array in this transaction. If the byte array length of a transaction is 100, then the transaction needs to consume 100 Bandwidth Points. Energy The creation and operation of a smart contract consume CPU resources. It takes time for smart contracts to operate in virtual machines (VMs), and the time consumed in the system is calculated in microseconds. CPU resources are consumed in energy, which means 1 Energy = 1 Microsecond (\u03bcs). If a contract takes 100 \u03bcs to execute in a VM, it needs to consume 100 Energy. TRON Power(TP) 1 staked TRX = 1 TP, TP can be used to vote, 1 TP = 1 vote. Super Representative(SR) The current block producing Top 27 nodes.","title":"Glossary"},{"location":"glossary/#glossary","text":"energyUsage The Energy conumption of the contract caller in one contract trigger. energyFee The number of TRX burned from the contract caller for Energy conumption in one contract trigger. originEnergyUsage The total Energy conumption of the contract developer in one contract trigger. energyUsageTotal The total Energy conumption of the contract developer and the contract caller combined. Feelimit When the user triggers or create the contract, this is used to set the usage limit of the Energy consumption got from burning TRX or staking TRX, Energy got from staking TRX will be used first. CallValue When the user triggers or create the contract, this can be used to send TRX to the contract. consume_user_resource_percent For a contract, Resource consumption is composed of two parts, one part is afforded by contract developer and the other part is afforded by contract caller. This is the percentage of the two parts in the Resource consumption. origin_energy_limit The usage limit of the Energy consumption of the developer in one contract trigger, should be greater than 0. net_usage The Bandwidth consumption in one contract trigger. (NetFee not included) net_fee The TRX burned for Bandwidth consumption in one contract trigger. Bandwidth The Bandwidth Points consumed by a transaction is the size of the byte array in this transaction. If the byte array length of a transaction is 100, then the transaction needs to consume 100 Bandwidth Points. Energy The creation and operation of a smart contract consume CPU resources. It takes time for smart contracts to operate in virtual machines (VMs), and the time consumed in the system is calculated in microseconds. CPU resources are consumed in energy, which means 1 Energy = 1 Microsecond (\u03bcs). If a contract takes 100 \u03bcs to execute in a VM, it needs to consume 100 Energy. TRON Power(TP) 1 staked TRX = 1 TP, TP can be used to vote, 1 TP = 1 vote. Super Representative(SR) The current block producing Top 27 nodes.","title":"Glossary"},{"location":"api/http/","text":"HTTP API \u00b6 This article introduces FullNode's HTTP APIs and their usage. Note Although TRON has avoided XSS by setting the Content-Type of HTTP APIs to application/json, there are a few APIs that don't have input validation. To better protect user data security, we recommend that you correctly encode any data from APIs before they use it in any UI, especially when the parameter visible equals true. Here is a typical XSS protection method: Encode all data from the APIs in HTML. Use methods such as encodeURIComponent() or escape() to encode the data, which can convert special characters into their HTML entities and prevent them from being interpreted as HTML code by the browser. Please be sure to implement XSS protection for all data from the APIs to ensure the security of user data. We understand that you may need more information about XSS protection. It is recommended that you refer to the following resources: OWASP XSS Prevention Cheat Sheet . First, Let's explain the selection of the address format in the HTTP API: Account addresses of the TRON network have two formats: HexString format and Base58 format. The Fullnode HTTP API supports address format selection. Users can set the address format through the visible parameter. The default value is false and the address format in the parameter and return value is hex format. When visible is set to true , the address format in the parameter and return value are in Base58 format. If the parameter format does not match the visible setting, an error will be reported. Setting method: For HTTP GET API or the api needs no parameter: by adding visible=true parameter to the url http://127.0.0.1:8090/wallet/listexchanges?visible=true For POST API: By adding \"visible\": true parameter to the most out layer of the json curl - X POST h tt p : //127.0.0.1:8090/wallet/createtransaction -d ' { \"owner_address\" : \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\" , \"to_address\" : \"TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\" , \"amount\" : 1000000 , \"visible\" : true } ' Fullnode HTTP API \u00b6 The FullNode HTTP API is categorized as follows: Accounts Transfer and Transactions Account Resources Query The Network Smart Contracts TRC-10 Token Voting & SRs Proposals DEX Exchange TRONZ Shielded Smart Contract Pending Pool Accounts \u00b6 The following are the APIs related to on-chain accounts: wallet/validateaddress wallet/createaccount wallet/getaccount wallet/updateaccount wallet/accountpermissionupdate wallet/getaccountbalance wallet/setaccountid wallet/getaccountbyid wallet/validateaddress \u00b6 Description: Check the validity of the address curl -X POST http://127.0.0.1:8090/wallet/validateaddress -d '{\"address\": \"4189139CB1387AF85E3D24E212A008AC974967E561\"}' Parameters: address Return: the address is correct or not wallet/createaccount \u00b6 Description: Create an account. Uses an already activated account to create a new account. If the owner_address has enough bandwidth obtained by freezing TRX, then creating an account will only consume bandwidth , otherwise, 0.1 TRX will be burned to pay for bandwidth, and at the same time, 1 TRX will be required to be created. curl -X POST http://127.0.0.1:8090/wallet/createaccount -d '{\"owner_address\":\"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"account_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\"}' Parameters: owner_address Owner address, default hexString account_address New address, default hexString Permission_id Optional, for multi-signature use Return: Unsigned transaction object wallet/getaccount \u00b6 Description: Query an account information curl -X POST http://127.0.0.1:8090/wallet/getaccount -d '{\"address\": \"41E552F6487585C2B58BC2C9BB4492BC1F17132CD0\"}' Parameters: address - account address Return: Account object wallet/updateaccount \u00b6 Description: Update the name of an account curl -X POST http://127.0.0.1:8090/wallet/updateaccount -d '{\"account_name\": \"0x7570646174654e616d6531353330383933343635353139\" ,\"owner_address\":\"41d1e7a6bc354106cb410e65ff8b181c600ff14292\"}' Parameters: account_name Account name, default hexString owner_address Owner address, default hexString Permission_id Optional, for multi-signature use Return:\u672a\u7b7e\u540d\u7684\u4fee\u6539\u540d\u79f0Transaction wallet/accountpermissionupdate \u00b6 Description: Update the account's permission. curl -X POST http://127.0.0.1:8090/wallet/accountpermissionupdate -d '{ \"owner_address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"owner\": { \"type\": 0, \"permission_name\": \"owner\", \"threshold\": 1, \"keys\": [{ \"address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"weight\": 1 }] }, \"witness\": { \"type\": 1, \"permission_name\": \"witness\", \"threshold\": 1, \"keys\": [{ \"address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"weight\": 1 }] }, \"actives\": [{ \"type\": 2, \"permission_name\": \"active12323\", \"threshold\": 2, \"operations\": \"7fff1fc0033e0000000000000000000000000000000000000000000000000000\", \"keys\": [{ \"address\": \"TNhXo1GbRNCuorvYu5JFWN3m2NYr9QQpVR\", \"weight\": 1 }, { \"address\": \"TKwhcDup8L2PH5r6hxp5CQvQzZqJLmKvZP\", \"weight\": 1 }] }], \"visible\": true}' Parameters: owner_address: Owner address of the account, default hexString owner: Account owner permission witness: Account witness permission, only for witness actives: List of active permissions for the account Return: Unsigned transaction wallet/getaccountbalance \u00b6 Description\uff1a Get the account balance in a specific block. curl -X POST http://127.0.0.1:8090/wallet/getaccountbalance -d '{ \"account_identifier\": { \"address\": \"TLLM21wteSPs4hKjbxgmH1L6poyMjeTbHm\" }, \"block_identifier\": { \"hash\": \"0000000000010c4a732d1e215e87466271e425c86945783c3d3f122bfa5affd9\", \"number\": 68682 }, \"visible\": true }' Parameters: account_identifier : The account address. block_identifier : The block number. Return: The balance object of the account in a specific block, the block_identifier is the block hash. { \"balance\": 64086449348265042, \"block_identifier\": { \"hash\": \"0000000000010c4a732d1e215e87466271e425c86945783c3d3f122bfa5affd9\", \"number\": 68682 } } wallet/setaccountid \u00b6 Description: To set an account id for an account curl -X POST http://127.0.0.1:8090/wallet/setaccountid -d '{ \"owner_address\":\"41a7d8a35b260395c14aa456297662092ba3b76fc0\",\"account_id\":\"6161616162626262\"}' Parameters: owner_address : Owner address, default hexString account_id :Account id, default hexString Return: Unsigned transaction wallet/getaccountbyid \u00b6 Description: Query an account information by account id curl -X POST http://127.0.0.1:8090/wallet/getaccountbyid -d '{\"account_id\":\"6161616162626262\"}' Parameters: account_id Account id, default hexString Return:Account object Transfers and transactions \u00b6 The following are transfer and transaction related APIs: wallet/createtransaction wallet/broadcasttransaction wallet/broadcasthex wallet/getsignweight wallet/getapprovedlist wallet/createtransaction \u00b6 Description: Create a transfer transaction, if to address is not existed, then create the account on the blockchain curl -X POST http://127.0.0.1:8090/wallet/createtransaction -d '{\"to_address\": \"41e9d79cc47518930bc322d9bf7cddd260a0260a8d\", \"owner_address\": \"41D1E7A6BC354106CB410E65FF8B181C600FF14292\", \"amount\": 1000 }' Parameters: to_address To address, default hexString owner_address Owner address, default hexString amount Transfer amount Permission_id Optional, for multi-signature use Return: Unsigned transaction wallet/broadcasttransaction \u00b6 Description: Broadcast transaction after sign curl -X POST http://127.0.0.1:8090/wallet/broadcasttransaction -d '{\"signature\":[\"97c825b41c77de2a8bd65b3df55cd4c0df59c307c0187e42321dcc1cc455ddba583dd9502e17cfec5945b34cad0511985a6165999092a6dec84c2bdd97e649fc01\"],\"txID\":\"454f156bf1256587ff6ccdbc56e64ad0c51e4f8efea5490dcbc720ee606bc7b8\",\"raw_data\":{\"contract\":[{\"parameter\":{\"value\":{\"amount\":1000,\"owner_address\":\"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\",\"to_address\":\"41d1e7a6bc354106cb410e65ff8b181c600ff14292\"},\"type_url\":\"type.googleapis.com/protocol.TransferContract\"},\"type\":\"TransferContract\"}],\"ref_block_bytes\":\"267e\",\"ref_block_hash\":\"9a447d222e8de9f2\",\"expiration\":1530893064000,\"timestamp\":1530893006233}}' Parameters: Transaction after sign Return:The result of the broadcast wallet/broadcasthex \u00b6 Description: Broadcast transaction hex string after sign curl -X POST http://127.0.0.1:8090/wallet/broadcasthex -d '{\"transaction\":\"0A8A010A0202DB2208C89D4811359A28004098A4E0A6B52D5A730802126F0A32747970652E676F6F676C65617069732E636F6D2F70726F746F636F6C2E5472616E736665724173736574436F6E747261637412390A07313030303030311215415A523B449890854C8FC460AB602DF9F31FE4293F1A15416B0580DA195542DDABE288FEC436C7D5AF769D24206412418BF3F2E492ED443607910EA9EF0A7EF79728DAAAAC0EE2BA6CB87DA38366DF9AC4ADE54B2912C1DEB0EE6666B86A07A6C7DF68F1F9DA171EEE6A370B3CA9CBBB00\"}' Parameters: Transaction hex after sign Return: The result of the broadcast wallet/getsignweight \u00b6 Description: Query the current signatures total weight of a transaction after sign curl -X POST http://127.0.0.1:8090/wallet/getsignweight -d '{ \"signature\": [ \"e0bd4a60f1b3c89d4da3894d400e7e32385f6dd690aee17fdac4e016cdb294c5128b66f62f3947a7182c015547496eba95510c113bda2a361d811b829343c36501\", \"596ead6439d0f381e67f30b1ed6b3687f2bd53ce5140cdb126cfe4183235804741eeaf79b4e91f251fd7042380a9485d4d29d67f112d5387bc7457b355cd3c4200\" ], \"txID\": \"0ae84a8439f5aa8fd2c458879a4031a7452aebed8e6e99ffbccd26842d4323c4\", \"raw_data\": { \"contract\": [{ \"parameter\": { \"value\": { \"amount\": 1000000, \"owner_address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"to_address\": \"TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\" }, \"type_url\": \"type.googleapis.com/protocol.TransferContract\" }, \"type\": \"TransferContract\" }], \"ref_block_bytes\": \"163d\", \"ref_block_hash\": \"77ef4ace148b05ba\", \"expiration\": 1555664823000, \"timestamp\": 1555664763418 }, \"raw_data_hex\": \"0a02163d220877ef4ace148b05ba40d8c5e5a6a32d5a69080112630a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412320a1541a7d8a35b260395c14aa456297662092ba3b76fc01215415a523b449890854c8fc460ab602df9f31fe4293f18c0843d2802709af4e1a6a32d\", \"visible\": true}' Parameters: Transaction object after sign Return: The current signatures total weight wallet/getapprovedlist \u00b6 Description: Query the signatures list of a transaction after sign curl -X POST http://127.0.0.1:8090/wallet/getapprovedlist -d '{ \"signature\": [ \"e0bd4a60f1b3c89d4da3894d400e7e32385f6dd690aee17fdac4e016cdb294c5128b66f62f3947a7182c015547496eba95510c113bda2a361d811b829343c36501\", \"596ead6439d0f381e67f30b1ed6b3687f2bd53ce5140cdb126cfe4183235804741eeaf79b4e91f251fd7042380a9485d4d29d67f112d5387bc7457b355cd3c4200\" ], \"txID\": \"0ae84a8439f5aa8fd2c458879a4031a7452aebed8e6e99ffbccd26842d4323c4\", \"raw_data\": { \"contract\": [{ \"parameter\": { \"value\": { \"amount\": 1000000, \"owner_address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"to_address\": \"TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\" }, \"type_url\": \"type.googleapis.com/protocol.TransferContract\" }, \"type\": \"TransferContract\" }], \"ref_block_bytes\": \"163d\", \"ref_block_hash\": \"77ef4ace148b05ba\", \"expiration\": 1555664823000, \"timestamp\": 1555664763418 }, \"raw_data_hex\": \"0a02163d220877ef4ace148b05ba40d8c5e5a6a32d5a69080112630a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412320a1541a7d8a35b260395c14aa456297662092ba3b76fc01215415a523b449890854c8fc460ab602df9f31fe4293f18c0843d2802709af4e1a6a32d\", \"visible\": true}' Parameter: Transaction object after sign Return: The list of the signatures Account Resources \u00b6 The following are account resource related APIs: wallet/getaccountresource wallet/getaccountnet wallet/unfreezebalance wallet/getdelegatedresource wallet/getdelegatedresourceaccountindex wallet/freezebalancev2 wallet/unfreezebalancev2 wallet/cancelallunfreezev2 wallet/delegateresource wallet/undelegateresource wallet/withdrawexpireunfreeze wallet/getavailableunfreezecount wallet/getcanwithdrawunfreezeamount wallet/getcandelegatedmaxsize wallet/getdelegatedresourcev2 wallet/getdelegatedresourceaccountindexv2 wallet/getaccountresource \u00b6 Description: Query the resource information of an account curl -X POST http://127.0.0.1:8090/wallet/getaccountresource -d {\"address\" : \"419844f7600e018fd0d710e2145351d607b3316ce9\"} Parameters: address : Address, default hexString Return: The resource information wallet/getaccountnet \u00b6 Description: Query the bandwidth information of an account curl -X POST http://127.0.0.1:8090/wallet/getaccountnet -d '{\"address\": \"4112E621D5577311998708F4D7B9F71F86DAE138B5\"}' Parameters: address - Address, default hexString Return: Bandwidth information wallet/freezebalance \u00b6 Description: Stake TRX. This interface has been deprecated, please use FreezeBalanceV2 to stake TRX to obtain resources. wallet/unfreezebalance \u00b6 Description: Unstake the TRX that staked during stake1.0 phase. curl -X POST http://127.0.0.1:8090/wallet/unfreezebalance -d '{ \"owner_address\":\"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", \"resource\": \"BANDWIDTH\", \"receiver_address\":\"414332f387585c2b58bc2c9bb4492bc1f17342cd1\" }' Parameters: owner_address Owner address, default hexString resource unstake type 'BANDWIDTH' or 'ENERGY' receiverAddress The address that will lose the resource, default hexString Permission_id Optional, for multi-signature use Return: Unsigned transaction wallet/getdelegatedresource \u00b6 Description: Query the resource delegation information curl -X POST http://127.0.0.1:8090/wallet/getdelegatedresource -d ' { \"fromAddress\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", \"toAddress\": \"41c6600433381c731f22fc2b9f864b14fe518b322f\" }' Parameters: fromAddress : from address, default hexString toAddress : to address, default hexString Return: Resource delegation information wallet/getdelegatedresourceaccountindex \u00b6 Description: Query the resource delegation by an account during stake1.0 phase. i.e. list all addresses that have delegated resources to an account. curl -X POST http://127.0.0.1:8090/wallet/getdelegatedresourceaccountindex -d ' { \"value\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", }' Parameters: value : account address Return:resource delegation index wallet/freezebalancev2 \u00b6 Description: Stake TRX curl -X POST http://127.0.0.1:8090/wallet/freezebalancev2 -d '{ \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", \"frozen_balance\": 10000, \"resource\": \"BANDWIDTH\" }' Parameters: owner_address : Owner address, default hexString frozen_balance : TRX stake amount, the unit is sun resource : TRX stake type, 'BANDWIDTH' or 'ENERGY' permission_id : Optional, for multi-signature use Return: Unsigned transaction wallet/unfreezebalancev2 \u00b6 Description: Unstake some TRX staked in Stake2.0, release the corresponding amount of bandwidth or energy, and voting rights (TP) curl -X POST http://127.0.0.1:8090/wallet/unfreezebalancev2 -d '{ \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", \"unfreeze_balance\": 1000000, \"resource\": \"BANDWIDTH\" }' Parameters: owner_address : Owner address, default hexString resource : Resource type: 'BANDWIDTH' or 'ENERGY' unfreeze_balance : The amount of TRX to unstake, in sun permission_id : Optional, for multi-signature use Return:Unsigned transaction wallet/cancelallunfreezev2 \u00b6 Description: Cancel unstakings, all unstaked funds still in the waiting period will be re-staked, all unstaked funds that exceeded the 14-day waiting period will be automatically withdrawn to the owner\u2019s account curl -X POST http://127.0.0.1:8090/wallet/cancelallunfreezev2 -d '{ \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\" }' Parameters: owner_address : Owner address, default hexString permission_id : Optional, for multi-signature use Return:Unsigned transaction wallet/delegateresource \u00b6 Description: Delegate bandwidth or energy resources to other accounts in Stake2.0. curl -X POST http://127.0.0.1:8090/wallet/delegateresource -d '{ \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", \"receiver_address\": \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"balance\": 1000000, \"resource\": \"BANDWIDTH\", \"lock\": false }' Parameters: owner_address : Account address receiver_address : Resource receiver address balance : Amount of TRX staked for resources to be delegated, unit is sun resource : Resource type: 'BANDWIDTH' or 'ENERGY' lock : Whether it is locked, if it is set to true, the delegated resources cannot be undelegated within 3 days. When the lock time is not over, if the owner delegates the same type of resources using the lock to the same address, the lock time will be reset to 3 days lock_period : lock time,The unit is block interval(3 seconds), indicates the time of how many blocks will be produced from the moment the transaction is executed. Only when lock is true, this field is valid. If the delegate lock period is 1 day, the lock_period is: 28800 permission_id : Optional, for multi-signature use Return:Unsigned transaction wallet/undelegateresource \u00b6 Description: Cancel the delegation of bandwidth or energy resources to other account curl -X POST http://127.0.0.1:8090/wallet/undelegateresource -d '{ \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", \"receiver_address\": \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"balance\": 1000000, \"resource\": \"BANDWIDTH\" }' Parameters: owner_address : Account address receiver_address : Resource receiver address balance : Amount of TRX staked for resources to be delegated, unit is sun resource : Resource type: 'BANDWIDTH' or 'ENERGY' permission_id : Optional, for multi-signature use Return:Unsigned transaction wallet/withdrawexpireunfreeze \u00b6 Description: Withdraw unfrozen balance in Stake2.0, the user can call this API to get back their funds after executing /wallet/unfreezebalancev2 transaction and waiting N days, N is a network parameter curl -X POST http://127.0.0.1:8090/wallet/withdrawexpireunfreeze -d '{ \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", }' Parameters: owner_address : Account address permission_id : Optional, for multi-signature use Return: Unsigned transaction wallet/getavailableunfreezecount \u00b6 Description:Remaining times of executing unstake operation in Stake2.0 curl -X POST http://127.0.0.1:8090/wallet/getavailableunfreezecount -d '{ \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\", \"visible\": true } ' Parameters: owner_address : Account address Return:Remaining times of available unstaking. wallet/getcanwithdrawunfreezeamount \u00b6 Description:Query the withdrawable balance at the specified timestamp In Stake2.0 curl -X POST http://127.0.0.1:8090/wallet/getcanwithdrawunfreezeamount -d '{ \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\", \"timestamp\": 1667977444000, \"visible\": true } ' Parameters: owner_address : Account address timestamp : query cutoff timestamp, in milliseconds. Return: withdrawable balance, unit is sun. wallet/getcandelegatedmaxsize \u00b6 Description: In Stake2.0, query the amount of delegatable resources share of the specified resource type for an address, unit is sun. curl -X POST http://127.0.0.1:8090/wallet/getcandelegatedmaxsize -d '{ \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\", \"type\": 0, \"visible\": true } ' Parameters: owner_address : Account address type : resource type, 0 is bandwidth, 1 is energy Return:the amount of delegatable resource share, unit is sun. wallet/getdelegatedresourcev2 \u00b6 In Stake2.0, query the detail of resource share delegated from fromAddress to toAddress curl -X POST http://127.0.0.1:8090/wallet/getdelegatedresourcev2 -d '{ \"fromAddress\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\", \"toAddress\": \"TPswDDCAWhJAZGdHPidFg5nEf8TkNToDX1\", \"visible\": true } ' Parameters: fromAddress : resource from address, default hexString toAddress : resource to address Return:Resource delegation list wallet/getdelegatedresourceaccountindexv2 \u00b6 In Stake2.0, query the resource delegation index by an account. Two lists will return, one is the list of addresses the account has delegated its resources(toAddress), and the other is the list of addresses that have delegated resources to the account(fromAddress). curl -X POST http://127.0.0.1:8090/wallet/getdelegatedresourceaccountindexv2 -d '{ \"value\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\", \"visible\": true } ' Parameters: value : account address Return:Two lists will return, one is the list of addresses the account has delegated its resources(toAddress), and the other is the list of addresses that have delegated resources to the account(fromAddress). Query The Network \u00b6 The following is the API for querying data on the chain: wallet/getnowblock wallet/getblock wallet/getblockbynum wallet/getblockbyid wallet/getblockbylatestnum wallet/getblockbylimitnext wallet/getblockbalance wallet/gettransactionbyid wallet/gettransactioninfobyid wallet/gettransactioncountbyblocknum wallet/gettransactioninfobyblocknum wallet/listnodes wallet/getnodeinfo wallet/getchainparameters wallet/getenergyprices wallet/getbandwidthprices wallet/getburntrx wallet/getnowblock \u00b6 Description: Query the latest block information curl -X POST http://127.0.0.1:8090/wallet/getnowblock Parameters: N/A Return: The latest block wallet/getblock \u00b6 Query block header information or entire block information according to block height or block hash curl -X POST http://127.0.0.1:8090/wallet/getblock -d '{\"detail\":false}' Parameters: id_or_num : id_or_num can be the block height or the block hash. No value entered means to query the latest block. detail : true means query the entire block information include the header and body. false means only query the block header information. Return: block or block header wallet/getblockbynum \u00b6 Description: Query a block information by block height curl -X POST http://127.0.0.1:8090/wallet/getblockbynum -d '{\"num\": 1}' Parameters: Block height Return: block wallet/getblockbyid \u00b6 Description: Query a block information by block id curl -X POST http://127.0.0.1:8090/wallet/getblockbyid -d '{\"value\": \"0000000000038809c59ee8409a3b6c051e369ef1096603c7ee723c16e2376c73\"}' Parameters: Block id Return: block wallet/getblockbylatestnum \u00b6 Description: Query the several latest blocks curl -X POST http://127.0.0.1:8090/wallet/getblockbylatestnum -d '{\"num\": 5}' Parameters: The number of the blocks expected to return Return:The list of the blocks wallet/getblockbylimitnext \u00b6 Description: Query a list of blocks by range curl -X POST http://127.0.0.1:8090/wallet/getblockbylimitnext -d '{\"startNum\": 1, \"endNum\": 2}' Parameters: startNum : The start block height, itself included endNum : The end block height, itself not included Return: The list of the blocks wallet/getblockbalance \u00b6 Description\uff1aGet all balance change operations in a block. curl -X POST http://127.0.0.1:8090/wallet/getblockbalance -d '{ \"hash\": \"000000000000dc2a3731e28a75b49ac1379bcc425afc95f6ab3916689fbb0189\", \"number\": 56362, \"visible\": true }' Parameters: The hash and block number must match. Return: { \"block_identifier\": { \"hash\": \"000000000000dc2a3731e28a75b49ac1379bcc425afc95f6ab3916689fbb0189\", \"number\": 56362 }, \"timestamp\": 1530060672000, \"transaction_balance_trace\": [ { \"transaction_identifier\": \"e6cabb1833cd1f795eed39d8dd7689eaa70e5bb217611766c74c7aa9feea80df\", \"operation\": [ { \"operation_identifier\": 0, \"address\": \"TPttBLmFuykRi83y9HxDoEWxTQw6CCcQ4p\", \"amount\": -100000 }, { \"operation_identifier\": 1, \"address\": \"TLsV52sRDL79HXGGm9yzwKibb6BeruhUzy\", \"amount\": 100000 }, { \"operation_identifier\": 2, \"address\": \"TPttBLmFuykRi83y9HxDoEWxTQw6CCcQ4p\", \"amount\": -10000000 }, { \"operation_identifier\": 3, \"address\": \"TMrysg7DbwR1M8xqhpaPdVCHCuWFhw7uk1\", \"amount\": 10000000 } ], \"type\": \"TransferContract\", \"status\": \"SUCCESS\" } ] } wallet/gettransactionbyid \u00b6 Description: Query a transaction information by transaction id curl -X POST http://127.0.0.1:8090/wallet/gettransactionbyid -d '{\"value\": \"d5ec749ecc2a615399d8a6c864ea4c74ff9f523c2be0e341ac9be5d47d7c2d62\"}' Parameters: Transaction id Return: Transaction information wallet/gettransactioninfobyid \u00b6 Description: Query the transaction fee, block height by transaction id curl -X POST http://127.0.0.1:8090/wallet/gettransactioninfobyid -d '{\"value\" : \"309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2\"}' Parameters: value - Transaction id Return: Transaction fee & block height wallet/gettransactioncountbyblocknum \u00b6 Description: Query th the number of transactions in a specific block curl -X POST http://127.0.0.1:8090/wallet/gettransactioncountbyblocknum -d '{\"num\" : 100}' Parameters: num - Block height Return: The number of transactions wallet/gettransactioninfobyblocknum \u00b6 Description: Query the list of transaction information in a specific block curl -X POST http://127.0.0.1:8090/wallet/gettransactioninfobyblocknum -d '{\"num\" : 100}' Parameters: num is the Block height Return:The list of transaction information wallet/listnodes \u00b6 Description: Query the list of nodes connected to the ip of the api curl -X POST http://127.0.0.1:8090/wallet/listnodes Parameters: N/A Return: The list of nodes wallet/getnodeinfo \u00b6 Description: Query the current node information curl http://127.0.0.1:8090/wallet/getnodeinfo Return: The node information wallet/getchainparameters \u00b6 Description: Query the parameters of the blockchain used for SR(Super Representatives) to create a proposal curl -X POST http://127.0.0.1:8090/wallet/getchainparameters Return: The list of parameters of the blockchain wallet/getenergyprices \u00b6 Description: Query historical energy unit price curl -X POST http://127.0.0.1:8090/wallet/getenergyprices Return: All historical energy unit price information. Each unit price change is separated by a comma. Before the colon is the millisecond timestamp, and after the colon is the energy unit price in sun. wallet/getbandwidthprices \u00b6 Description: Query historical bandwidth unit price curl -X POST http://127.0.0.1:8090/wallet/getbandwidthprices Return: All historical bandwidth unit price information. Each unit price change is separated by a comma. Before the colon is the millisecond timestamp, and after the colon is the bandwidth unit price in sun. wallet/getburntrx \u00b6 Description: Query the amount of TRX burned due to on-chain transaction fees since No. 54 Committee Proposal took effect curl -X POST http://127.0.0.1:8090/wallet/getburntrx Return: Amount of TRX burned, in sun. Smart Contracts \u00b6 The following are smart contract related APIs: wallet/getcontract wallet/getcontractinfo wallet/deploycontract wallet/triggersmartcontract wallet/triggerconstantcontract wallet/updatesetting wallet/updateenergylimit wallet/clearabi wallet/estimateenergy wallet/getcontract \u00b6 Queries a contract's information from the blockchain, including the bytecode of the contract, ABI, configuration parameters, etc. curl -X POST http://127.0.0.1:8090/wallet/getcontract -d '{\"value\":\"4189139CB1387AF85E3D24E212A008AC974967E561\"}' Parameters: value - Contract address Return:SmartContract wallet/getcontractinfo \u00b6 Queries a contract's information from the blockchain. The difference from the wallet/getcontract interface is that this interface returns not only the bytecode but also the runtime bytecode of the contract. Compared with bytecode, runtime bytecode does not contain constructor and constructor parameter information. curl -X POST http://127.0.0.1:8090/wallet/getcontractinfo -d '{\"value\":\"4189139CB1387AF85E3D24E212A008AC974967E561\"}' Parameters: value - Contract address Return: contract's information wallet/deploycontract \u00b6 Description: Deploy a smart contract curl -X POST http://127.0.0.1:8090/wallet/deploycontract -d '{\"abi\":\"[{\\\"constant\\\":false,\\\"inputs\\\":[{\\\"name\\\":\\\"key\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"set\\\",\\\"outputs\\\":[],\\\"payable\\\":false,\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"constant\\\":true,\\\"inputs\\\":[{\\\"name\\\":\\\"key\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"get\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"payable\\\":false,\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"}]\",\"bytecode\":\"608060405234801561001057600080fd5b5060de8061001f6000396000f30060806040526004361060485763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631ab06ee58114604d5780639507d39a146067575b600080fd5b348015605857600080fd5b506065600435602435608e565b005b348015607257600080fd5b50607c60043560a0565b60408051918252519081900360200190f35b60009182526020829052604090912055565b600090815260208190526040902054905600a165627a7a72305820fdfe832221d60dd582b4526afa20518b98c2e1cb0054653053a844cf265b25040029\",\"parameter\":\"\",\"call_value\":100,\"name\":\"SomeContract\",\"consume_user_resource_percent\":30,\"fee_limit\":10,\"origin_energy_limit\": 10,\"owner_address\":\"41D1E7A6BC354106CB410E65FF8B181C600FF14292\"}' Parameters: abi :abi bytecode :bytecode\uff0chexString parameter :The list of the parameters of the constructor, It should be converted hexString after encoded according to ABI encoder. If constructor has no parameter, this can be optional consume_user_resource_percent : Consume user's resource percentage. It should be an integer between [0, 100]. if 0, means it does not consume user's resource until the developer's resource has been used up fee_limit : The maximum TRX burns for resource consumption call_value : The TRX transfer to the contract for each call owner_address :Owner address of the contract, default hexString name :Contract name origin_energy_limit : The maximum resource consumption of the creator in one execution or creation call_token_value : The amount of trc10 token transfer to the contract for each call (Optional) token_id :The id of trc10 token transfer to the contract (Optional) Permission_id : Optional, for multi-signature use Return:Unsigned transaction wallet/triggersmartcontract \u00b6 Description: Trigger smart contract $ curl -X POST http://127.0.0.1:8090/wallet/triggersmartcontract -d '{ \"contract_address\": \"4189139CB1387AF85E3D24E212A008AC974967E561\", \"function_selector\": \"set(uint256,uint256)\", \"parameter\": \"00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002\", \"fee_limit\": 10, \"call_value\": 100, \"owner_address\": \"41D1E7A6BC354106CB410E65FF8B181C600FF14292\" }' Parameters: contract_address : Contract address, default hexString function_selector : Function call, must not leave a blank space parameter : The parameter passed to 'function_selector', the format must match with the VM's requirement. You can use a js tool provided by remix to convert a parameter like [1,2] to the format that VM requires data : The data for interacting with smart contracts, including the contract function and parameters. You can choose to use this field, or you can choose to use function_selector and parameter for contract interaction. When both of data and function_selector exist, function_selector is preferred fee_limit : The maximum TRX burns for resource consumption call_value : The TRX transfer to the contract for each call call_token_value : The amount of trc10 token transfer to the contract for each call token_id : The id of trc10 token transfer to the contract owner_address : Owner address that triggers the contract, default hexString permission_id : Optional, for multi-signature use Return:Unsigned transaction wallet/triggerconstantcontract \u00b6 Description: Trigger the constant of the smart contract, the transaction is off the blockchain $ curl -X POST http://127.0.0.1:8090/wallet/triggerconstantcontract -d '{ \"contract_address\": \"4189139CB1387AF85E3D24E212A008AC974967E561\", \"function_selector\": \"set(uint256,uint256)\", \"parameter\": \"00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002\", \"call_value\": 100, \"owner_address\": \"41D1E7A6BC354106CB410E65FF8B181C600FF14292\" }' Parameters: contract_address : Smart contract address, default hexString function_selector : Function call, must not leave a blank space parameter : The parameter passed to 'function_selector', the format must match with the VM's requirement. You can use a hs tool provided by remix to convert a parameter like [1,2] to the format that VM requires data : The data for interacting with smart contracts, including the contract function and parameters. You can choose to use this field, or you can choose to use function_selector and parameter for contract interaction. When both of data and function_selector exist, function_selector is preferred call_value : The TRX transfer to the contract for each call owner_address : Owner address that triggers the contract, default hexString call_token_value : The amount of trc10 token transfer to the contract for each call token_id : The id of trc10 token transfer to the contract Return: Transaction object Note: The unit of TRX in the parameters is SUN wallet/updatesetting \u00b6 Description: Update the consume_user_resource_percent parameter of a smart contract $ curl -X POST http://127.0.0.1:8090/wallet/updatesetting -d '{ \"owner_address\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", \"contract_address\": \"41c6600433381c731f22fc2b9f864b14fe518b322f\", \"consume_user_resource_percent\": 7 }' owner_address :Owner address of the smart contract, default hexString contract_address :Smart contract address, default hexString consume_user_resource_percent :Consume user's resource percentage Permission_id : Optional, for multi-signature use Return: Transaction object wallet/updateenergylimit \u00b6 Description: Update the origin_energy_limit parameter of a smart contract $ curl -X POST http://127.0.0.1:8090/wallet/updateenergylimit -d '{ \"owner_address\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", \"contract_address\": \"41c6600433381c731f22fc2b9f864b14fe518b322f\", \"origin_energy_limit\": 7 }' Parameters: owner_address : Owner address of the smart contract, default hexString contract_address : Smart contract address, default hexString origin_energy_limit : The maximum resource consumption of the creator in one execution or creation permission_id : Optional, for multi-signature use Return: Transaction object wallet/clearabi \u00b6 Description: To clear the abi of a smart contract $ curl -X POST http://127.0.0.1:8090/wallet/clearabi -d '{ \"owner_address\": \"41a7d8a35b260395c14aa456297662092ba3b76fc0\", \"contract_address\": \"417bcb781f4743afaacf9f9528f3ea903b3782339f\" }' Parameters: owner_address :Owner address of the smart contract contract_address : Smart contract address, default hexString Return: Transaction object wallet/estimateenergy \u00b6 Estimate the energy required for the successful execution of smart contract transactions curl -X POST http://127.0.0.1:8090/wallet/estimateenergy -d '{ \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\", \"contract_address\": \"TG3XXyExBkPp9nzdajDZsozEu4BkaSJozs\", \"function_selector\": \"transfer(address,uint256)\", \"parameter\": \"00000000000000000000004115208EF33A926919ED270E2FA61367B2DA3753DA0000000000000000000000000000000000000000000000000000000000000032\", \"visible\": true }' Parameters: contract_address : Smart contract address. If visible=true, use base58check format, otherwise use hex format. function_selector : Function call, must not be left blank. parameter : Parameter encoding needs to be in accordance with the ABI rules, the rules are more complicated, users can use the ethers library to encode data : The data for interacting with smart contracts, including the contract function and parameters. You can choose to use this field, or you can choose to use function_selector and parameter for contract interaction. When both of data and function_selector exist, function_selector is preferred call_value : The TRX transfer to the contract for each call owner_address :Owner address that triggers the contract. If visible=true, use base58check format, otherwise use hex call_token_value : The amount of trc10 token transfer to the contract for each call token_id : The id of trc10 token transfer to the contract Return:Estimated the energy value TRC10 token \u00b6 The following are TRC10 token-related APIs: wallet/getassetissuebyaccount wallet/getassetissuebyname wallet/getassetissuelistbyname wallet/getassetissuebyid wallet/getassetissuelist wallet/getpaginatedassetissuelist wallet/transferasset wallet/participateassetissue wallet/createassetissue wallet/unfreezeasset wallet/updateasset wallet/getassetissuebyaccount \u00b6 Description: Query the token issue information of an account $ curl -X POST http://127.0.0.1:8090/wallet/getassetissuebyaccount -d '{ \"address\": \"41F9395ED64A6E1D4ED37CD17C75A1D247223CAF2D\" }' Parameter address: Token issuer's address, default hexString Return: Token object wallet/getassetissuebyname \u00b6 Description: Query a token by token name $ curl -X POST http://127.0.0.1:8090/wallet/getassetissuebyname -d '{ \"value\": \"44756354616E\" }' Parameter value: Token name, default hexString Return: Token object wallet/getassetissuelistbyname \u00b6 Description: Query the list of tokens by name $ curl -X POST http://127.0.0.1:8090/wallet/getassetissuelistbyname -d '{ \"value\": \"44756354616E\" }' Parameter value: Token name, default hexString Return: The list of tokens wallet/getassetissuebyid \u00b6 Description: Query a token by token id $ curl -X POST http://127.0.0.1:8090/wallet/getassetissuebyid -d '{ \"value\": \"1000001\" }' Parameter value: Token id Return: Token object wallet/getassetissuelist \u00b6 Description: Query the list of all the tokens $ curl -X GET http://127.0.0.1:8090/wallet/getassetissuelist Parameter: No parameter Return: The list of all the tokens wallet/getpaginatedassetissuelist \u00b6 Description: Query the list of all the tokens by pagination $ curl -X POST http://127.0.0.1:8090/wallet/getpaginatedassetissuelist -d '{ \"offset\": 0, \"limit\": 10 }' Parameters: offset : The index of the start token limit : The amount of tokens per page Return: The list of tokens by pagination wallet/transferasset \u00b6 Description: Transfer token $ curl -X POST http://127.0.0.1:8090/wallet/transferasset -d '{ \"owner_address\": \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"to_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"asset_name\": \"31303030303031\", \"amount\": 100 }' Parameters: owner_address : Owner address, default hexString to_address : To address, default hexString asset_name : Token id, default hexString amount : Token transfer amount permission_id : Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token wallet/participateassetissue \u00b6 Description: Participate a token $ curl -X POST http://127.0.0.1:8090/wallet/participateassetissue -d '{ \"to_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", \"amount\": 100, \"asset_name\": \"3230313271756265696a696e67\" }' Parameters: to_address : The issuer address of the token, default hexString owner_address : The participant address, default hexString amount : Participate token amount asset_name : Token id, default hexString permission_id : Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token wallet/createassetissue \u00b6 Description: Issue a token $ curl -X POST http://127.0.0.1:8090/wallet/createassetissue -d '{ \"owner_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"name\": \"0x6173736574497373756531353330383934333132313538\", \"abbr\": \"0x6162627231353330383934333132313538\", \"total_supply\": 4321, \"trx_num\": 1, \"num\": 1, \"start_time\": 1530894315158, \"end_time\": 1533894312158, \"description\": \"007570646174654e616d6531353330363038383733343633\", \"url\": \"007570646174654e616d6531353330363038383733343633\", \"free_asset_net_limit\": 10000, \"public_free_asset_net_limit\": 10000, \"frozen_supply\": { \"frozen_amount\": 1, \"frozen_days\": 2 } }' Parameters: owner_address : Owner address, default hexString name : Token name, default hexString abbr : Token name abbreviation, default hexString total_supply : Token total supply trx_num : Define the price by the ratio of trx_num/num num : Define the price by the ratio of trx_num/num start_time : ICO start time end_time : ICO end time description : Token description, default hexString url : Token official website url, default hexString free_asset_net_limit : Token free asset net limit public_free_asset_net_limit : Token public free asset net limit frozen_supply : Token staked supply permission_id : Optional, for multi-signature use Return: Transaction object Note: The unit of 'trx_num' is SUN wallet/unfreezeasset \u00b6 Description: Unstake the staked token that is due $ curl -X POST http://127.0.0.1:8090/wallet/unfreezeasset -d '{ \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\" }' Parameters: - owner_address : Owner address, default hexString - permission_id : Optional, for multi-signature use Return: Transaction object wallet/updateasset \u00b6 Description: Update token information $ curl -X POST http://127.0.0.1:8090/wallet/updateasset -d '{ \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", \"description\": \"\", \"url\": \"\", \"new_limit\": 1000000, \"new_public_limit\": 100 }' Parameters: owner_address : The issuers address of the token, default hexString description : The description of token, default hexString url : The token's website url, default hexString new_limit : Each token holder's free bandwidth new_public_limit : The total free bandwidth of the token permission_id : Optional, for multi-signature use Return: Transaction object Vote and SR \u00b6 The following are voting and SR related APIs: wallet/createwitness wallet/updatewitness wallet/listwitnesses wallet/withdrawbalance wallet/votewitnessaccount wallet/getBrokerage wallet/updateBrokerage wallet/getReward wallet/getnextmaintenancetime wallet/createwitness \u00b6 Description: Apply to become a super representative $ curl -X POST http://127.0.0.1:8090/wallet/createwitness -d '{ \"owner_address\": \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"url\": \"007570646174654e616d6531353330363038383733343633\" }' Parameters: owner_address : Owner address, default hexString url : Website url, default hexString permission_id : Optional, for multi-signature use Return: Transaction object wallet/updatewitness \u00b6 Description: Update the super representative' website url $ curl -X POST http://127.0.0.1:8090/wallet/updatewitness -d '{ \"owner_address\": \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"update_url\": \"007570646174654e616d6531353330363038383733343633\" }' Parameters: owner_address : Owner address, default hexString update_url : Website url, default hexString permission_id : Optional, for multi-signature use Return: Transaction object wallet/listwitnesses \u00b6 Description: Qyery the list of the super representatives curl -X POST http://127.0.0.1:8090/wallet/listwitnesses Parameters: N/A Return:SR(Super Representatives) list wallet/withdrawbalance \u00b6 Description: Withdraw reward to account balance for super representatives $ curl -X POST http://127.0.0.1:8090/wallet/withdrawbalance -d '{ \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\" }' Parameters: owner_address : Owner address, default hexString permission_id : Optional, for multi-signature use Return: Transaction object Note: It can only withdraw once for every 24 hours wallet/votewitnessaccount \u00b6 Description: Vote for super representatives $ curl -X POST http://127.0.0.1:8090/wallet/votewitnessaccount -d '{ \"owner_address\": \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"votes\": [ { \"vote_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"vote_count\": 5 } ] }' Parameters: owner_address : Owner address, default hexString votes : 'vote_address' stands for the address of the super representative you want to vote, default hexString, 'vote_count' stands for the number of votes you want to vote permission_id : Optional, for multi-signature use Return: Transaction object wallet/getBrokerage \u00b6 Description: Query the ratio of brokerage of the super representative $ curl -X GET http://127.0.0.1:8090/wallet/getBrokerage -d ' { \"address\":\"41E552F6487585C2B58BC2C9BB4492BC1F17132CD0\"}' Parameter address : The address of the SR's account, default hexString Return: The ratio of brokerage of the SR wallet/updateBrokerage \u00b6 Description: Update the ratio of brokerage $ curl -X POST http://127.0.0.1:8090/wallet/updateBrokerage -d ' { \"owner_address\":\"41E552F6487585C2B58BC2C9BB4492BC1F17132CD0\", \"brokerage\":30 }' Parameters: owner_address : The address of the SR's account, default hexString brokerage : The ratio of brokerage you want to update to Return: Transaction object wallet/getReward \u00b6 Description: Query unclaimed reward $ curl -X GET http://127.0.0.1:8090/wallet/getReward -d '{ \"address\":\"41E552F6487585C2B58BC2C9BB4492BC1F17132CD0\"}' Parameter address : The address of the voter's account, default hexString Return: Unclaimed reward wallet/getnextmaintenancetime \u00b6 Description: Query the time interval till the next vote round curl -X POST http://127.0.0.1:8090/wallet/getnextmaintenancetime Parameters: N/A Return: The time interval till the next vote round(unit: ms) Proposals \u00b6 The following are proposal-related APIs: wallet/proposalcreate wallet/getproposalbyid wallet/listproposals wallet/proposalapprove wallet/proposaldelete wallet/getpaginatedproposallist wallet/proposalcreate \u00b6 Description: Create a proposal $ curl -X POST http://127.0.0.1:8090/wallet/proposalcreate -d '{ \"owner_address\": \"419844F7600E018FD0D710E2145351D607B3316CE9\", \"parameters\": [ { \"key\": 0, \"value\": 100000 }, { \"key\": 1, \"value\": 2 } ] }' Parameters: owner_address : Creator address parameters : Proposal parameters permission_id : Optional, for multi-signature use Return: Transaction object wallet/getproposalbyid \u00b6 Description: Query a proposal by proposal id $ curl -X POST http://127.0.0.1:8090/wallet/getproposalbyid -d '{ \"id\": 1 }' Parameter id : Proposal id Return: The proposal information wallet/listproposals \u00b6 Description: Query all the proposals $ curl -X POST http://127.0.0.1:8090/wallet/listproposals Parameter: No parameter Return: The list of all the proposals wallet/proposalapprove \u00b6 Description: To approve a proposal $ curl -X POST http://127.0.0.1:8090/wallet/proposalapprove -d '{ \"owner_address\": \"419844F7600E018FD0D710E2145351D607B3316CE9\", \"proposal_id\": 1, \"is_add_approval\": true }' Parameters: owner_address : The address that makes the approve action, default hexString proposal_id : Proposal id is_add_approval : Whether to approve permission_id : Optional, for multi-signature use Return: Transaction object wallet/proposaldelete \u00b6 Description: To delete a proposal $ curl -X POST http://127.0.0.1:8090/wallet/proposaldelete -d '{ \"owner_address\": \"419844F7600E018FD0D710E2145351D607B3316CE9\", \"proposal_id\": 1 }' Parameters: owner_address : Owner address of the proposal, default hexString proposal_id : Proposal id permission_id : Optional, for multi-signature use Return: Transaction object wallet/getpaginatedproposallist \u00b6 Description: Query the list of all the proposals by pagination $ curl -X POST http://127.0.0.1:8090/wallet/getpaginatedproposallist -d '{ \"offset\": 0, \"limit\": 10 }' Parameters: offset : The index of the start proposal limit : The amount of proposals per page Return: The list of proposals by pagination DEX Exchange \u00b6 The following are the APIs related to decentralized exchanges: wallet/exchangecreate wallet/exchangeinject wallet/exchangewithdraw wallet/exchangetransaction wallet/getexchangebyid wallet/listexchanges wallet/getpaginatedexchangelist wallet/marketsellasset wallet/marketcancelorder wallet/getmarketorderbyaccount wallet/getmarketpairlist wallet/getmarketorderlistbypair wallet/getmarketpricebypair wallet/getmarketorderbyid wallet/exchangecreate \u00b6 Description: Create an exchange pair $ curl -X POST http://127.0.0.1:8090/wallet/exchangecreate -d '{ \"owner_address\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", \"first_token_id\": \"token_a\", \"first_token_balance\": 100, \"second_token_id\": \"token_b\", \"second_token_balance\": 200 }' Parameters: owner_address : address first_token_id : The first token's id, default hexString first_token_balance : The first token's balance second_token_id : The second token's id, default hexString second_token_balance : The second token's balance permission_id : Optional, for multi-signature use Return: Transaction object Note: The unit of 'first_token_balance' and 'second_token_balance' is the smallest unit of the token wallet/exchangeinject \u00b6 Description: Inject funds for exchange pair $ curl -X POST http://127.0.0.1:8090/wallet/exchangeinject -d '{ \"owner_address\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", \"exchange_id\": 1, \"token_id\": \"74726f6e6e616d65\", \"quant\": 100 }' Parameters: owner_address : Owner address of the exchange pair, default hexString exchange_id : Exchange pair id token_id : Token id, default hexString quant : Token inject amount permission_id : Optional, for multi-signature use Return: Transaction object Note: The unit of 'quant' is the smallest unit of the token wallet/exchangewithdraw \u00b6 Description: Withdraw from exchange pair $ curl -X POST http://127.0.0.1:8090/wallet/exchangewithdraw -d '{ \"owner_address\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", \"exchange_id\": 1, \"token_id\": \"74726f6e6e616d65\", \"quant\": 100 }' Parameters: owner_address : Owner address of the exchange pair, default hexString exchange_id : Exchange pair id token_id : Token id, default hexString quant : Token withdraw amount permission_id : Optional, for multi-signature use Return: Transaction object Note: The unit of 'quant' is the smallest unit of the token wallet/exchangetransaction \u00b6 Description: Participate the transaction of exchange pair $ curl -X POST http://127.0.0.1:8090/wallet/exchangetransaction -d '{ \"owner_address\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", \"exchange_id\": 1, \"token_id\": \"74726f6e6e616d65\", \"quant\": 100, \"expected\": 10 }' Parameters: owner_address : Owner address of the exchange pair, default hexString exchange_id : Exchange pair id token_id : Token id, default hexString quant : Sell token amount expected : Expected token amount to get permission_id : Optional, for multi-signature use Return: Transaction object Note: The unit of 'quant' and 'expected' is the smallest unit of the token wallet/getexchangebyid \u00b6 Description: Query an exchange pair by exchange pair id $ curl -X POST http://127.0.0.1:8090/wallet/getexchangebyid -d '{ \"id\": 1 }' Parameter id: Exchange pair id Return: Exchange pair information wallet/listexchanges \u00b6 Description: Query the list of all the exchange pairs $ curl -X GET http://127.0.0.1:8090/wallet/listexchanges Parameter: No parameter Return: The list of all the exchange pairs wallet/getpaginatedexchangelist \u00b6 Description: Query the list of all the exchange pairs by pagination $ curl -X POST http://127.0.0.1:8090/wallet/getpaginatedexchangelist -d '{ \"offset\": 0, \"limit\": 10 }' Parameters: offset : The index of the start exchange pair limit : The amount of exchange pairs per page Return: The list of exchange pairs by pagination wallet/marketsellasset \u00b6 Description\uff1aCreate an market order curl -X POST http://127.0.0.1:8090/wallet/marketsellasset -d '{ \"owner_address\": \"4184894b42f66dce8cb84aec2ed11604c991351ac8\", \"sell_token_id\": \"5f\", \"sell_token_quantity\": 100, \"buy_token_id\": \"31303030303031\", \"buy_token_quantity\": 200 }' Parameters\uff1a owner_address \uff1aowner address, default hexString sell_token_id \uff1asell token id, default hexString sell_token_quantity \uff1asell token quantity buy_token_id \uff1abuy token id, default hexString buy_token_quantity \uff1abuy token quantity (min to receive) Return\uff1aTransaction object wallet/marketcancelorder \u00b6 Description\uff1aCancel the order curl -X POST http://127.0.0.1:8090/wallet/marketcancelorder -d '{ \"owner_address\": \"4184894b42f66dce8cb84aec2ed11604c991351ac8\", \"order_id\": \"0a7af584a53b612bcff1d0fc86feab05f69bc4528f26a4433bb344d453bd6eeb\" }' Parameters\uff1a owner_address \uff1aowner address, default hexString order_id \uff1aorder id Return\uff1aTransaction object wallet/getmarketorderbyaccount \u00b6 Description\uff1aGet all orders for the account curl -X POST http://127.0.0.1:8090/wallet/getmarketorderbyaccount -d '{ \"value\": \"4184894b42f66dce8cb84aec2ed11604c991351ac8\" }' Parameters\uff1a value - owner address, default hexString Return\uff1aorder list wallet/getmarketpairlist \u00b6 Description\uff1aGet all trading pairs curl -X get http://127.0.0.1:8090/wallet/getmarketpairlist Parameters: N/A Return: makket pair list wallet/getmarketorderlistbypair \u00b6 Description\uff1aGet all orders for the trading pair demo: curl -X POST http://127.0.0.1:8090/wallet/getmarketorderlistbypair -d '{ \"sell_token_id\": \"5f\" , \"buy_token_id\": \"31303030303031\" }' Parameters\uff1a sell_token_id \uff1asell token id, default hexString buy_token_id \uff1abuy token id, default hexString Return\uff1aorder list wallet/getmarketpricebypair \u00b6 Description\uff1aGet all prices for the trading pair curl -X POST http://127.0.0.1:8090/wallet/getmarketpricebypair -d '{ \"sell_token_id\": \"5f\" \"buy_token_id\": \"31303030303031\" }' Parameters\uff1a sell_token_id \uff1asell token id, default hexString buy_token_id \uff1abuy token id, default hexString Return\uff1aprice list wallet/getmarketorderbyid \u00b6 Description\uff1aGet all orders for the account curl -X POST http://127.0.0.1:8090/wallet/getmarketorderbyid -d '{ \"value\": \"orderid\" }' Parameters\uff1a value - order id, default hexString Return\uff1aorder TRONZ Shielded Smart Contract \u00b6 The following are TRONZ anonymous smart contract related APIs: wallet/getexpandedspendingkey wallet/getakfromask wallet/getnkfromnsk wallet/getspendingkey wallet/getdiversifier wallet/getincomingviewingkey wallet/getzenpaymentaddress wallet/createshieldedtransactionwithoutspendauthsig wallet/scannotebyivk wallet/scanandmarknotebyivk wallet/scannotebyovk wallet/createshieldnullifier wallet/getshieldtransactionhash wallet/createshieldedtransaction wallet/getnewshieldedaddress wallet/createshieldedcontractparameters wallet/createshieldedcontractparameterswithoutask wallet/scanshieldedtrc20notesbyivk wallet/scanshieldedtrc20notesbyovk wallet/isshieldedtrc20contractnotespent wallet/gettriggerinputforshieldedtrc20contract wallet/getrcm wallet/getmerkletreevoucherinfo wallet/isspend wallet/createspendauthsig wallet/getexpandedspendingkey \u00b6 Description: To get expanded spending keys from spending key curl -X POST http://127.0.0.1:8090/wallet/getexpandedspendingkey -d '{ \"value\": \"06b02aaa00f230b0887ff57a6609d76691369972ac3ba568fe7a8a0897fce7c4\" }' Parameters: value:Spending key Return: Expanded spending keys, it consists of three keys: ask, nsk and ovk. wallet/getakfromask \u00b6 Description: To get ak key from ask key curl -X POST http://127.0.0.1:8090/wallet/getakfromask -d '{ \"value\": \"653b3a3fdd40b60d2f53ba121df8840f6590384993f8fa9a0ecb0dfb23496604\" }' Parameters: value:Ask Return:Ak wallet/getnkfromnsk \u00b6 Description: To get nk key from nsk key curl -X POST http://127.0.0.1:8090/wallet/getnkfromnsk -d '{ \"value\": \"428ff3c9e101dc1fca08f7b0e3387b23b68016746ae565aefc19d112b696db01\" }' Parameters: value:Nsk Return:Nk wallet/getspendingkey \u00b6 Description: To get spending key curl -X GET http://127.0.0.1:8090/wallet/getspendingkey Parameters: N/A Return:Spending key wallet/getdiversifier \u00b6 Description: To get diversifier curl -X GET http://127.0.0.1:8090/wallet/getdiversifier Parameters: N/A Return: Diversifier wallet/getincomingviewingkey \u00b6 Description: To get incoming viewing key curl -X POST http://127.0.0.1:8090/wallet/getincomingviewingkey -d '{ \"ak\":\"b443f1a303ef5837ba95750b48b6fef15f9c77f63a8c28c161bcd6613f423b5c\", \"nk\":\"632137e69179df3d10e252fcce85d13464c3163fe7a619edf8d43ebefa8162d9\" }' Parameters: ak :Ak nk :Nk Return:Incoming viewing key wallet/getzenpaymentaddress \u00b6 Description: To get payment address curl -X POST http://127.0.0.1:8090/wallet/getzenpaymentaddress -d '{ \"ivk\":\"8c7852e10862d8eec058635974f70f24c1f8d73819131bb5b54028d0a9408a03\", \"d\":\"736ba8692ed88a5473e009\" }' Parameters: ivk :Ivk d :D Return: Payment address wallet/createshieldedtransactionwithoutspendauthsig \u00b6 Description: To create shielded transaction without using ask $ curl -X POST http://127.0.0.1:8090/wallet/createshieldedtransactionwithoutspendauthsig -d '{ \"ivk\":\"8c7852e10862d8eec058635974f70f24c1f8d73819131bb5b54028d0a9408a03\", \"d\":\"736ba8692ed88a5473e009\" }' Parameters: transparent_from_address : Transparent sender's address from_amount : Send amount from transparent address ask : Ask nsk : Nsk ovk : Ovk shielded_receives : Shielded receive information shieldedSpends : Shielded spend information transparent_to_address : Transparent receiver's address to_amount : Send amount to transparent address Return: Transaction object wallet/createshieldedtransactionwithoutspendauthsig \u00b6 Description: To create shielded transaction with using ask curl -X POST http://127.0.0.1:8090/wallet/createshieldedtransactionwithoutspendauthsig -d '{ \"ak\": \"bf051629fd8122cd9dd8591d72947b026c214cf7cdac1f68eff97179727d38e9\", \"nsk\": \"42963d26af8122204273fa3489d9efd6babf1f7179ff193c955a1f3d9c2df10c\", \"ovk\": \"bc9848a83966709655b12efadc9e978785858316045e0115a0e72567a9a2a823\", \"shielded_spends\": [ { \"note\": { \"value\": 500000000, \"payment_address\": \"ztron1jld8fmvujrz2vgkc867zuwklmewy4ypw0wtwgweqs2paee0uhc8f3azy90el770arksa2kunl02\", \"rcm\": \"723053bcbfecdf5da66c18ab0376476ef308c61b7abe891b2c01e903bcb87c0e\" }, \"alpha\": \"2608999c3a97d005a879ecdaa16fd29ae434fb67b177c5e875b0c829e6a1db04\", \"voucher\": { \"tree\": { \"left\": { \"content\": \"a3d5c9b2db9699f32afec5febbd5586ce9ff33a0bef6fee5691028313b8e1f6a\" }, \"parents\": [ { \"content\": \"d9c38484296b3aa8f5e8b59d418a3775e2bb414e75498ad352e4614f05aae548\" }, { \"content\": \"d0420777afdc4151c3f14fbe4c714d82dc15873edb1ca65ebb3887334a4bae15\" } ] }, \"rt\": \"fb1115d5ddd16c5427c3a608d6b5add5967e70f51c890307c6142083a2c28565\" }, \"path\": \"2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20d0420777afdc4151c3f14fbe4c714d82dc15873edb1ca65ebb3887334a4bae1520d9c38484296b3aa8f5e8b59d418a3775e2bb414e75498ad352e4614f05aae5482001000000000000000000000000000000000000000000000000000000000000000600000000000000\" } ], \"shielded_receives\": [ { \"note\": { \"value\": 40000000, \"payment_address\": \"ztron1wd46s6fwmz99gulqpxul6zffqtevzfpl93ng3s5834fhwf6e7w5l6zmjhmpvtwsc4wxa7dusmvr\", \"rcm\": \"ccced07d36641fc93cba33cddda7064cb82f6962a0bdf15a4240a4a742770e03\" } } ] }' Parameters: transparent_from_address : Transparent sender's address from_amount : Send amount from transparent address ak : Ak nsk : Nsk ovk : Ovk shielded_receives : Shielded receive information shieldedSpends : Shielded spend information transparent_to_address : Transparent receiver's address to_amount : Send amount to transparent address Return: Transaction object wallet/scannotebyivk \u00b6 Description: To get all the notes by ivk $ curl -X POST http://127.0.0.1:8090/wallet/scannotebyivk -d '{ \"start_block_index\": 0, \"end_block_index\": 100, \"ivk\": \"80a481c3c739e54b4e0608090b3a1a6e9f8dce42346e95bf5a2d8a487bf45c05\" }' Parameters: start_block_index : The start block height, itself included end_block_index : The end block height, itself not included ivk : Incoming viewing key Return: Notes list Note: Range limit (end_block_index - start_block_index <= 1000) wallet/scanandmarknotebyivk \u00b6 Description: To get all the notes with spent status by ivk $ curl -X POST http://127.0.0.1:8090/wallet/scanandmarknotebyivk -d '{ \"start_block_index\": 0, \"end_block_index\": 100, \"ivk\": \"80a481c3c739e54b4e0608090b3a1a6e9f8dce42346e95bf5a2d8a487bf45c05\", \"ak\": \"1d4f9b5551f4aa9443ceb263f0e208eb7e26080264571c5ef06de97a646fe418\", \"nk\": \"748522c7571a9da787e43940c9a474aa0c5c39b46c338905deb6726fa3678bdb\" }' Parameters: start_block_index : The start block height, itself included end_block_index : The end block height, itself not included ivk : Incoming viewing key ak : Ak key nk : Nk key Return: Notes list Note: Range limit (end_block_index - start_block_index <= 1000) wallet/scannotebyovk \u00b6 Description: To get all the notes by ovk $ curl -X POST http://127.0.0.1:8090/wallet/scannotebyovk -d '{ \"start_block_index\": 0, \"end_block_index\": 100, \"ovk\": \"705145aa18cbe6c11d5d0011419a98f3d5b1d341eb4727f1315597f4bdaf8539\" }' Parameters: start_block_index : The start block height, itself included end_block_index : The end block height, itself not included ovk : Outgoing viewing key Return: Notes list Note: Range limit (end_block_index - start_block_index <= 1000) wallet/createshieldnullifier \u00b6 Description: To create a shielded nullifier $ curl -X POST http://127.0.0.1:8090/wallet/createshieldnullifier -d '{ \"note\": { \"payment_address\": \"ztron1aqgauawtkelxfu2w6s48cwh0mchjt6kwpj44l4wym3pullx0294j4r4v7kpm75wnclzycsw73mq\", \"rcm\": \"74a16c1b27ec7fbf06881d9d35ddaab1554838b1bddcd54f6bd8a9fb4ba0b80a\", \"value\": 500000000 }, \"voucher\": { \"tree\": { \"left\": { \"content\": \"a4d763fae3fee78964ccdf7567ec3062c95a5b97825d731202d3dfa6cb01c143\" } }, \"rt\": \"7dc3652c2a16e8518a8be0e3e038f9d28c3eb96f13e8da8acc2a9b650702f33e\" }, \"ak\": \"a3e65d509b675aaa2aeda977ceff11eebd76218079b6f543d78a615e396ca129\", \"nk\": \"62cfda9bea09a53cf2a21022057913734a8458969e11e0bb9c59ead48fbce83e\" }' Parameters: note : Note information voucher : Voucher information ak : Ak nk : Nk Return: A shielded nullifier wallet/getshieldtransactionhash \u00b6 Description: To get a shielded transaction hash curl -X POST http://127.0.0.1:8090/wallet/getshieldtransactionhash -d '{ \"txID\": \"de639a64497d86bb27e34a2953093a0cc488ec4c7bc9624ac5857d3799748595\", \"raw_data\": { \"contract\": [ { \"parameter\": { \"value\": { \"binding_signature\": \"2b8ae5e11ecad3e6946f54b7ad513bd8692a3edae72d29e266b28e47c9b37ccdb38e3b6433575694b6681136b1734f85afcfe672061d2ee7368755ad0b96a80b\", \"spend_description\": [ { \"value_commitment\": \"cbe1063adbe7e10919421fa6133f03150253913f5aff02d165e2c019cea4a869\", \"anchor\": \"fb1115d5ddd16c5427c3a608d6b5add5967e70f51c890307c6142083a2c28565\", \"nullifier\": \"93e329d464e1dbddc8bb4d2dcc939a796dfe11e985d4e9033a15edf0e3df4f35\", \"rk\": \"10c702d6dff1509502ee5acc0b01d4b4531b2ff53b0dd54488aea6031b5e6d16\", \"zkproof\": \"abf64b3beacfd873b1db764c3da9f739993518f3f740e761cb8af60682b7171892895c3ccfb550c3cf757e906dbf5313a3676b8226b0b84960f76a185c8d3fdfc3fa9c08479a704852d7b3dfeb913cf13e01c25657561e00a06c61e7c65b50b812902ddc4f17bfe2bcb2f247c2dc6132d0f0e0abcecc0332fdd99077af10d07bbdb88c4fd257948428e233c57f84eee8b2eeab2162c1aeccf2e1dfaa306d5803a8b2d281a549440fbd5a3657a830c1ca07a384cea446aa077b195b29b23023b1\" } ], \"receive_description\": [ { \"value_commitment\": \"f6d45db8ec5a1c8dbbde040b4ea138efbe8db2d0597ed2306ff3fdd0620b3c5a\", \"note_commitment\": \"ec3f5472ac8114a9a07987d1c2a0e1254504e352d9574971e77084293900312e\", \"epk\": \"719eeb5ebaeeccc55c9f0d73767aadf0c0513603400ccb50bd789637d984b8e6\", \"c_enc\": \"3a6c4fe0e79f5b23fed34a419c4728d0b26bca23180a22871743b0a9444c27663cf07c55a0ea6db504d70421768bf17384e180b2ad8b8be88ff5cf662c53a4ba086effc3a4b1df39265f71dfac884bff5a69e1dcdcae8aecf6ae443168ffab692a5c1e4908b415dd830dcf6432fae1c32461132080da74d6b83d3d00887eb2ce9965a749f8d8410ea4182969371ac2fd5e0e74d27d883492a08e6209cd9959d74bb67c2a9fe7faac5a4777f1bff19cf0b6398a2faa9b194bbb93d60f132f382f7d693a722e8cbca1da084ee7e0c371397419a7259d1fa0943078cfe5ea352e4b53907bb6c04ca8ad409fb0ae0b110a6b312200e21ab79d543ae7aeb16802cf87afdac1e8954038caa42818f4ca2847fd642360c098accfeeade4abd1cc9ca3315a4336be224ba3516973c7dae3f41875457236675993df38d3a544470c4f9335d77b005e6a9aec40fd881b34852ec9bbbcc3d24ee92930eae770a5462ce04c4e37b0524ef07e00e8d58c810d6aefb19fa7bc2c3a2fdfab6dd4fe73dbecc0795a280f9b7ca35cc8bc1062aed8e26bd81ba33c6f4c318974636f6d796723e77772ced3dbc1f42afec6fc9bb61f8beac704affea9baf2e2de226250c1d427c7d78b1eb1d239e1f3eb6af0f017b80541333f4fce17340048d826b9b0be8477c996ad8bfc3440dc686fdff6d0d63986db4d95962d7977289cbfd14c745de7c79d4dc0bcd220e5b4ced5b409e79142e0f336e44ca29a9a87f6f43707d8c4936e895236dd2b393a478a8bc27b1f682496ba84a0ddc549da06cb7855c4d8680dc66ac40240733b7f\", \"c_out\": \"50be6e77854d4c427b2af4f16e5275f0b0c206b3ea2d2a24ffb287ea356f323523354cd83d15e7c48e6f1fa103dfca3d49ca2263dbb0cd8bfb35d72cdcad1351de6fba7a30aea27184a68bcda19cc6da\", \"zkproof\": \"a4e6c50d5753092d005689922c2bdeafc98775bce59db840974163ace23c13fec18112e32aae1c39842c645ed172ad8fa277e63c1e3d6d7fb12eb15d56b573237b776f562a81d0e6be362d147d8604fdfec421482270ca82950de1883fda06e719f5d256d7a039769bffc570a1778d70c17295d1c0336a6ae0903d2460dc139a9563c2d40f37bffefa73003a55af1ff0861b6f79ef40099b6a0cb25ab3f40727210e4629647d0711abff125712a5f0d64fcb6e6a6b0b34478d7da0552b493a80\" } ] }, \"type_url\": \"type.googleapis.com/protocol.ShieldedTransferContract\" }, \"type\": \"ShieldedTransferContract\" } ], \"ref_block_bytes\": \"0d59\", \"ref_block_hash\": \"7356ce5c35d8265e\", \"expiration\": 1559237283000, \"timestamp\": 1559201285590 }, \"raw_data_hex\": \"0a020d5922087356ce5c35d8265e40b899a3ceb02d5a940b0833128f0b0a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412d50a1acb020a20cbe1063adbe7e10919421fa6133f03150253913f5aff02d165e2c019cea4a8691220fb1115d5ddd16c5427c3a608d6b5add5967e70f51c890307c6142083a2c285651a2093e329d464e1dbddc8bb4d2dcc939a796dfe11e985d4e9033a15edf0e3df4f35222010c702d6dff1509502ee5acc0b01d4b4531b2ff53b0dd54488aea6031b5e6d162ac001abf64b3beacfd873b1db764c3da9f739993518f3f740e761cb8af60682b7171892895c3ccfb550c3cf757e906dbf5313a3676b8226b0b84960f76a185c8d3fdfc3fa9c08479a704852d7b3dfeb913cf13e01c25657561e00a06c61e7c65b50b812902ddc4f17bfe2bcb2f247c2dc6132d0f0e0abcecc0332fdd99077af10d07bbdb88c4fd257948428e233c57f84eee8b2eeab2162c1aeccf2e1dfaa306d5803a8b2d281a549440fbd5a3657a830c1ca07a384cea446aa077b195b29b23023b122c2070a20f6d45db8ec5a1c8dbbde040b4ea138efbe8db2d0597ed2306ff3fdd0620b3c5a1220ec3f5472ac8114a9a07987d1c2a0e1254504e352d9574971e77084293900312e1a20719eeb5ebaeeccc55c9f0d73767aadf0c0513603400ccb50bd789637d984b8e622c4043a6c4fe0e79f5b23fed34a419c4728d0b26bca23180a22871743b0a9444c27663cf07c55a0ea6db504d70421768bf17384e180b2ad8b8be88ff5cf662c53a4ba086effc3a4b1df39265f71dfac884bff5a69e1dcdcae8aecf6ae443168ffab692a5c1e4908b415dd830dcf6432fae1c32461132080da74d6b83d3d00887eb2ce9965a749f8d8410ea4182969371ac2fd5e0e74d27d883492a08e6209cd9959d74bb67c2a9fe7faac5a4777f1bff19cf0b6398a2faa9b194bbb93d60f132f382f7d693a722e8cbca1da084ee7e0c371397419a7259d1fa0943078cfe5ea352e4b53907bb6c04ca8ad409fb0ae0b110a6b312200e21ab79d543ae7aeb16802cf87afdac1e8954038caa42818f4ca2847fd642360c098accfeeade4abd1cc9ca3315a4336be224ba3516973c7dae3f41875457236675993df38d3a544470c4f9335d77b005e6a9aec40fd881b34852ec9bbbcc3d24ee92930eae770a5462ce04c4e37b0524ef07e00e8d58c810d6aefb19fa7bc2c3a2fdfab6dd4fe73dbecc0795a280f9b7ca35cc8bc1062aed8e26bd81ba33c6f4c318974636f6d796723e77772ced3dbc1f42afec6fc9bb61f8beac704affea9baf2e2de226250c1d427c7d78b1eb1d239e1f3eb6af0f017b80541333f4fce17340048d826b9b0be8477c996ad8bfc3440dc686fdff6d0d63986db4d95962d7977289cbfd14c745de7c79d4dc0bcd220e5b4ced5b409e79142e0f336e44ca29a9a87f6f43707d8c4936e895236dd2b393a478a8bc27b1f682496ba84a0ddc549da06cb7855c4d8680dc66ac40240733b7f2a5050be6e77854d4c427b2af4f16e5275f0b0c206b3ea2d2a24ffb287ea356f323523354cd83d15e7c48e6f1fa103dfca3d49ca2263dbb0cd8bfb35d72cdcad1351de6fba7a30aea27184a68bcda19cc6da32c001a4e6c50d5753092d005689922c2bdeafc98775bce59db840974163ace23c13fec18112e32aae1c39842c645ed172ad8fa277e63c1e3d6d7fb12eb15d56b573237b776f562a81d0e6be362d147d8604fdfec421482270ca82950de1883fda06e719f5d256d7a039769bffc570a1778d70c17295d1c0336a6ae0903d2460dc139a9563c2d40f37bffefa73003a55af1ff0861b6f79ef40099b6a0cb25ab3f40727210e4629647d0711abff125712a5f0d64fcb6e6a6b0b34478d7da0552b493a802a402b8ae5e11ecad3e6946f54b7ad513bd8692a3edae72d29e266b28e47c9b37ccdb38e3b6433575694b6681136b1734f85afcfe672061d2ee7368755ad0b96a80b70d68b8ebdb02d\" }' Parameter transaction: Transaction object Return: a shielded transaction hash wallet/createshieldedtransaction \u00b6 Description: To create shielded transaction Please refer to The Demo Parameters: transparent_from_address : Transparent sender's address from_amount : Send amount from transparent address ask : Ask nsk : Nsk ovk : Ovk shielded_receives : Shielded receive information shieldedSpends : Shielded spend information transparent_to_address : Transparent receiver's address to_amount : Send amount to transparent address Return: Transaction object wallet/getnewshieldedaddress \u00b6 Description: To get new shieldedAddress curl -X GET http://127.0.0.1:8090/wallet/getnewshieldedaddress Parameters: N/A Return: Spending key Ask key Nsk key Outgoing viewing key Ak Key Nk key incoming viewing key Diversifier pkD payment address wallet/createshieldedcontractparameters \u00b6 Description: create the shielded TRC-20 transaction parameters, which has three types: mint, transfer and burn demo: curl -X POST http://127.0.0.1:8090/wallet/createshieldedcontractparameters -d '{ \"ask\": \"0f63eabdfe2bbfe08012f6bb2db024e6809c16e8ed055aa41a6095424f192005\", \"nsk\": \"cd43d722fd4b6b01f19449ea826c3e935609648520fcc2a95c0026f0fa9ee404\", \"ovk\": \"1797de3b7f33cafffe3fe18c6b43ec6760add2ad81b10978d1fca5290497ede9\", \"from_amount\": \"5000\", \"shielded_receives\": { \"note\": { \"value\": 50, \"payment_address\": \"ztron15js0jkuxczt8caq5hp59rnh6rgf34sek7vqn9u6ljelxv4nuzz2x9qe3ffm2wzz6ck53yxyhxs6\", \"rcm\": \"74baec30dfac8ed59968955ff245ae002009005194e5b824c35ab88c52e5170e\" } }, \"shielded_TRC20_contract_address\": \"41f3392eaa7d38749176e0671dbc6912f8ef956943\" }' Parameters: ask : Ask nsk : Nsk ovk : Outgoing view key from_amount : the amount for mint, which is scaled by scalingfactor with note value , namely from_amount = value * scalingFactor . In the above example, the value of scalingFactor is 100 shielded_receives : the shielded notes to be created shielded_TRC20_contract_address : shielded TRC-20 contract address Return: the shielded TRC-20 transaction parameters Note: the input parameters will differ according to the variety of shielded TRC-20 transaction type wallet/createshieldedcontractparameterswithoutask \u00b6 Description: create the shielded TRC-20 transaction parameters without Ask, which has three types: mint, transfer and burn demo: curl -X POST http://127.0.0.1:8090/wallet/createshieldedcontractparameterswithoutask -d '{ \"ovk\": \"cd361834b3adc06f130de24f7d0c18f92a093cc885d9ce492cc6c02071f7a4f0\", \"from_amount\": \"5000\", \"shielded_receives\": { \"note\": { \"value\": 50, \"payment_address\": \"ztron13lvfnt4rau4ad9mmgztd3aftw49e3amz8gm2kvyzrsaw0ugz2grxwkvcfys5e2gkchj7cnnetjz\", \"rcm\": \"499e73f2f8aaf05fac41a35b8343bde27f6629cbe66d35da5364a99b94a55a06\" } }, \"shielded_TRC20_contract_address\": \"41f3392eaa7d38749176e0671dbc6912f8ef956943\" }' Parameters: ovk : Outgoing view key from_amount : the amount for mint, which is scaled by scalingfactor with note value , namely from_amount = value * scalingFactor . In the above example, the value of scalingFactor is 100 shielded_receives : the shielded notes to be created shielded_TRC20_contract_address : shielded TRC-20 contract address Return: the shielded TRC-20 transaction parameters Note: the input parameters will differ according to the variety of shielded TRC-20 transaction type wallet/scanshieldedtrc20notesbyivk \u00b6 Description: scan the shielded TRC-20 notes by ivk and mark their status of whether spent demo: curl -X POST http://127.0.0.1:8090/wallet/scanshieldedtrc20notesbyivk -d '{ \"start_block_index\": 9200, \"end_block_index\": 9240, \"shielded_TRC20_contract_address\": \"41274fc7464fadac5c00c893c58bce6c39bf59e4c7\", \"ivk\": \"9f8e74bb3d7188a2781dc1db38810c6914eef4570a79e8ec8404480948e4e305\", \"ak\":\"8072d9110c9de9d9ade33d5d0f5890a7aa65b0cde42af7816d187297caf2fd64\", \"nk\":\"590bf33f93f792be659fd404df91e75c3b08d38d4e08ee226c3f5219cf598f14\" }' Parameters: start_block_index : the start block index, inclusive end_block_index : the end block index, exclusive shielded_TRC20_contract_address : shielded TRC-20 contract address ivk : Incoming viewing key ak : Ak key nk : Nk key Return: notes list Note: block limit\uff08end_block_index - start_block_index <= 1000\uff09 wallet/scanshieldedtrc20notesbyovk \u00b6 Description: scan the shielded TRC-20 notes by ovk demo: curl -X POST http://127.0.0.1:8090/wallet/scanshieldedtrc20notesbyovk -d '{ \"start_block_index\": 9200, \"end_block_index\": 9240, \"shielded_TRC20_contract_address\": \"41274fc7464fadac5c00c893c58bce6c39bf59e4c7\", \"ovk\": \"0ff58efd75e083fe4fd759c8701e1c8cb6961c4297a12b2c800bdb7b2bcab889\" }' Parameters: start_block_index : start block index, inclusive end_block_index : end block index, exclusive shielded_TRC20_contract_address : shielded TRC-20 contract address ovk : Outgoing viewing key Return: notes list Note: block limit\uff08end_block_index - start_block_index <= 1000\uff09 wallet/isshieldedtrc20contractnotespent \u00b6 Description: check the status whether the specified shielded TRC-20 note is spent Parameters: note : the specified note ak : Ak nk : Nk position : the leaf position index of note commitment in the Merkle tree shielded_TRC20_contract_address : the shielded TRC-20 contract address Return: note status Note: the value in note is the scaled value by scalingFactor set in the shielded TRC-20 contract, namely real_amount = value * scalingFactor . wallet/gettriggerinputforshieldedtrc20contract \u00b6 Description: get the trigger input data of shielded TRC-20 contract for the shielded TRC-20 parameters without spend authority signature. demo: curl -X POST http://127.0.0.1:8090/wallet/gettriggerinputforshieldedtrc20contract -d '{ \"shielded_TRC20_Parameters\": {\"spend_description\": [{\"value_commitment\": \"e3fcc8609ff6a4b00b77a00ef624f305cec5f55cc7312ff5526d0b3057f2ef9e\",\"anchor\": \"4c9cbebece033dc1d253b93e4a3682187daae4f905515761d10287b801e69816\",\"nullifier\": \"74edce8798a3976ee41e045bb666f3a121c27235b0f1b44b3456d2c84bc725dc\",\"rk\": \"9dcf4254aa7c4fb7c8bc6956d4b0c7c6c87c37a2552e7bf4e60c12cb5bc6c8cd\",\"zkproof\": \"9926045cd1442a7d20153e6abda9f77a6526895f0a29a57cb1bc76ef6b7cacef2d0f4c94aa97c3acacdb95cabb065057b7edb4cbea098149a8aa7114a6a6b340c58007ac64b64e592eb18fdd299de5962a2a32ab0caebb2ab198704c751a9d0e143d68a50257d7c9e2230a7420fa46450299fd167141367e201726532d8e815413d8571d6c8c12937674dec92caf1f4583ebe560ac4c7eba290deee0a1c0da5f72c0b9df89fb3b338c683b654b3dc2373a4c2a4fef7f4fa489b44405fb7d2bfb\"}],\"binding_signature\": \"11e949887d9ec92eb32c78f0bc48afdc9a16a2ecbd5a0eca1be070fb900eeda347918bd6e9521d4baf1f74963bee0c1956559623a9e7cbc886941b227341ea06\",\"message_hash\": \"7e6a00736c4f9e0036cb74c7fa3b1e3cd8f6bf0f038edeb03b668c4c5536a357\",\"parameter_type\": \"burn\"}, \"spend_authority_signature\": [ { \"value\": \"eeaaecd725ac80ec398b95cf188b769c1be66cc8e76e6c90843b7f23818704595719ce8bf694ffb8cd7aaa8739d50fe8eea7ba39d5026c4b019c973185ca7201\" } ], \"amount\": \"6000\", \"transparent_to_address\": \"4140cd765f8e637a2bbe00f9bc458f6b21eb0e648f\" }' Parameters: shielded_TRC20_Parameters : the generated shielded TRC-20 parameters spend_authority_signature : the spend authority signatures amount : the amount transparent_to_address : the receiver for the burn operation. Return: the input data for triggering shielded TRC-20 contract. wallet/getrcm \u00b6 Description: To get a random commitment trapdoor curl -X GET http://127.0.0.1:8090/wallet/getrcm Parameters: N/A Return:rcm wallet/getmerkletreevoucherinfo \u00b6 Description: To get a merkle tree information of a note $ curl -X POST http://127.0.0.1:8090/wallet/getmerkletreevoucherinfo -d '{ \"out_points\":[{ \"hash\":\"185b3e085723f5862b3a3c3cf54d52f5c1eaf2541e3a1e0ecd08bc12cd958d74\", \"index\":0 }] }' Parameter out_points : Note information Return: A merkle tree of a note wallet/isspend \u00b6 Description: To check whether a note is spent or not $ curl -X POST http://127.0.0.1:8090/wallet/isspend -d '{ \"ak\": \"a3e65d509b675aaa2aeda977ceff11eebd76218079b6f543d78a615e396ca129\", \"nk\": \"62cfda9bea09a53cf2a21022057913734a8458969e11e0bb9c59ead48fbce83e\", \"note\": { \"payment_address\": \"ztron1aqgauawtkelxfu2w6s48cwh0mchjt6kwpj44l4wym3pullx0294j4r4v7kpm75wnclzycsw73mq\", \"rcm\": \"74a16c1b27ec7fbf06881d9d35ddaab1554838b1bddcd54f6bd8a9fb4ba0b80a\", \"value\": 500000000 }, \"txid\": \"7d09e471bb047d3ac044d5d6691b3721a2dddbb683ac02c207fbe78af6302463\", \"index\": 1 }' Parameters: ak : Ak key nk : Nk key note : Note information txid : Transaction id index : Note index Return: Note status wallet/createspendauthsig \u00b6 Description: To create a signature for a transaction $ curl -X POST http://127.0.0.1:8090/wallet/createspendauthsig -d '{ \"ask\": \"e3ebcba1531f6d9158d9c162660c5d7c04dadf77d85d7436a9c98b291ff69a09\", \"tx_hash\": \"3b78fee6e956f915ffe082284c5f18640edca9c57a5f227e5f7d7eb65ad61502\", \"alpha\": \"2608999c3a97d005a879ecdaa16fd29ae434fb67b177c5e875b0c829e6a1db04\" }' Parameters: ask : Ask key tx_hash : Transaction hash alpha : Alpha Return: A signature Pending Pool \u00b6 The following are Pending Pool related APIs: wallet/gettransactionfrompending wallet/gettransactionlistfrompending wallet/getpendingsize wallet/gettransactionfrompending \u00b6 Get transaction details from the pending pool curl -X POST http://127.0.0.1:8090/wallet/gettransactionfrompending -d '{ \"value\": \"txId\" }' Parameters: value: transaction id Return: Transaction details wallet/gettransactionlistfrompending \u00b6 Get transaction list information from pending pool curl -X get http://127.0.0.1:8090/wallet/gettransactionlistfrompending Parameters: N/A Return: Pending transaction IDs in the pool wallet/getpendingsize \u00b6 Get the size of the pending pool queue curl -X get http://127.0.0.1:8090/wallet/getpendingsize Parameters: N/A Return:pending pool size FullNode Solidity HTTP API \u00b6 Account Resources \u00b6 walletsolidity/getaccount \u00b6 Description: Query an account information curl -X POST http://127.0.0.1:8091/walletsolidity/getaccount -d '{\"address\": \"41E552F6487585C2B58BC2C9BB4492BC1F17132CD0\"}' Parameters: address - Account to query, default hexString Return: Account object walletsolidity/getdelegatedresource \u00b6 Description: Query the energy delegation information curl -X POST http://127.0.0.1:8091/walletsolidity/getdelegatedresource -d ' { \"fromAddress\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", \"toAddress\": \"41c6600433381c731f22fc2b9f864b14fe518b322f\" }' Parameters: fromAddress : Energy from address, default hexString toAddress : Energy to address, default hexString Return: Energy delegation information list, the elements of the list is DelegatedResource walletsolidity/getdelegatedresourceaccountindex \u00b6 Description: Query the energy delegation index by an account curl -X POST http://127.0.0.1:8091/walletsolidity/getdelegatedresourceaccountindex -d ' { \"value\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", }' Parameters: value : Address, default hexString Return: DelegatedResourceAccountIndex of the address walletsolidity/getaccountbyid \u00b6 Description: Query an account information by account id curl -X POST http://127.0.0.1:8091/walletsolidity/getaccountbyid -d '{\"account_id\":\"6161616162626262\"}' Parameters: account_id - Account id, default hexString Return: Account object walletsolidity/getavailableunfreezecount \u00b6 Description:Remaining times of executing unstake operation in Stake2.0 curl -X POST http://127.0.0.1:8090/walletsolidity/getavailableunfreezecount -d '{ \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\", \"visible\": true } ' Parameters: owner_address : Account address Return:Remaining times of available unstaking. walletsolidity/getcanwithdrawunfreezeamount \u00b6 Description: Query the withdrawable balance at the specified timestamp In Stake2.0 curl -X POST http://127.0.0.1:8090/walletsolidity/getcanwithdrawunfreezeamount -d '{ \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\", \"timestamp\": 1667977444000, \"visible\": true } ' Parameters: owner_address : Account address timestamp : query cutoff timestamp, in milliseconds. Return: Withdrawable balance, unit is sun. walletsolidity/getcandelegatedmaxsize \u00b6 Description: In Stake2.0, query the amount of delegatable resources share of the specified resource type for an address, unit is sun. curl -X POST http://127.0.0.1:8090/walletsolidity/getcandelegatedmaxsize -d '{ \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\", \"type\": 0, \"visible\": true } ' Parameters: owner_address : Account address type : Resource type, 0 is bandwidth, 1 is energy Return: The amount of delegatable resource share, unit is sun. walletsolidity/getdelegatedresourcev2 \u00b6 In Stake2.0, query the detail of resource share delegated from fromAddress to toAddress curl -X POST http://127.0.0.1:8090/walletsolidity/getdelegatedresourcev2 -d '{ \"fromAddress\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\", \"toAddress\": \"TPswDDCAWhJAZGdHPidFg5nEf8TkNToDX1\", \"visible\": true } ' Parameters: fromAddress : resource from address, default hexString toAddress : resource to address Return: Resource delegation list walletsolidity/getdelegatedresourceaccountindexv2 \u00b6 In Stake2.0, query the resource delegation index by an account. Two lists will return, one is the list of addresses the account has delegated its resources( toAddress ), and the other is the list of addresses that have delegated resources to the account( fromAddress ). curl -X POST http://127.0.0.1:8090/walletsolidity/getdelegatedresourceaccountindexv2 -d '{ \"value\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\", \"visible\": true } ' Parameters: value : account address Return: Two lists will return, one is the list of addresses the account has delegated its resources( toAddress ), and the other is the list of addresses that have delegated resources to the account( fromAddress ). Voting & SRs \u00b6 walletsolidity/listwitnesses \u00b6 Description: Query the list of super representatives curl -X POST http://127.0.0.1:8091/walletsolidity/listwitnesses Parameters: N/A Return: List of all super representatives TRC10 Token \u00b6 walletsolidity/getassetissuelist \u00b6 Description: Query the list of all tokens curl -X POST http://127.0.0.1:8091/walletsolidity/getassetissuelist Parameters: N/A Return: The list of all tokens walletsolidity/getpaginatedassetissuelist \u00b6 Description: Query the list of all the tokens by pagination curl -X POST http://127.0.0.1:8091/walletsolidity/getpaginatedassetissuelist -d '{\"offset\": 0, \"limit\":10}' Parameters: - offset : The index of the start token - limit : The amount of tokens per page Return: List of tokens walletsolidity/getassetissuebyname \u00b6 Description: Query a token by token name curl -X POST http://127.0.0.1:8091/walletsolidity/getassetissuebyname -d '{\"value\": \"44756354616E\"}' Parameters: value - Token name, default hexString Return: Token object Note: Since Odyssey-v3.2, getassetissuebyid or getassetissuelistbyname is recommended, as since v3.2, token name can be repeatable. If the token name you query is not unique, this api will throw out an error. walletsolidity/getassetissuelistbyname \u00b6 Description: Query the token list by name curl -X POST http://127.0.0.1:8091/walletsolidity/getassetissuelistbyname -d '{\"value\": \"44756354616E\"}' Parameters: value - Token name, default hexString Return: Token list walletsolidity/getassetissuebyid \u00b6 Description: Query a token by token id curl -X POST http://127.0.0.1:8091/walletsolidity/getassetissuebyid -d '{\"value\": \"1000001\"}' Parameters: value - Token id Return: Token object Blocks \u00b6 walletsolidity/getnowblock \u00b6 Description: Query the latest block information curl -X POST http://127.0.0.1:8091/walletsolidity/getnowblock Parameters: N/A Return: The latest block from solidityNode walletsolidity/getblockbynum \u00b6 Description: Query a block information by block height curl -X POST http://127.0.0.1:8091/walletsolidity/getblockbynum -d '{\"num\" : 100}' Parameters: num - Block height Return: Block information walletsolidity/getblockbyid \u00b6 Description: Query a block information by block id curl -X POST http://127.0.0.1:8091/walletsolidity/getblockbyid-d '{\"value\": \"0000000000038809c59ee8409a3b6c051e369ef1096603c7ee723c16e2376c73\"}' Parameters: value - Block id Return: The block object walletsolidity/getblockbylimitnext \u00b6 Description: Query a list of blocks by range curl -X POST http://127.0.0.1:8091/walletsolidity/getblockbylimitnext -d '{\"startNum\": 1, \"endNum\": 2}' Parameters: startNum : The start block height, inclusive endNum : The end block height, exclusive Return: List of blocks walletsolidity/getblockbylatestnum \u00b6 Description: Query the latest few blocks curl -X POST http://127.0.0.1:8091/walletsolidity/getblockbylatestnum -d '{\"num\": 5}' Parameters: num - The number of blocks expected to return Return: List of blocks wallet/getnodeinfo \u00b6 Description: Query the current node information curl -X GET http://127.0.0.1:8091/wallet/getnodeinfo Parameters: N/A Return: NodeInfo of the current node Transactions \u00b6 walletsolidity/gettransactionbyid \u00b6 Description: Query an transaction information by transaction id curl -X POST http://127.0.0.1:8091/walletsolidity/gettransactionbyid -d '{\"value\" : \"309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2\"}' Parameters: value - Transaction id Return: Transaction information walletsolidity/gettransactioncountbyblocknum \u00b6 Description: Query th the number of transactions in a specific block curl -X POST http://127.0.0.1:8091/walletsolidity/gettransactioncountbyblocknum -d '{\"num\" : 100}' Parameters: num - Block height Return: The number of transactions walletsolidity/gettransactioninfobyid \u00b6 Description: Query the transaction fee, block height by transaction id curl -X POST http://127.0.0.1:8091/walletsolidity/gettransactioninfobyid -d '{\"value\" : \"309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2\"}' Parameters: value - Transaction id Return: Transaction fee, block height and the time of creation walletsolidity/gettransactioninfobyblocknum \u00b6 Description: Query the list of transaction information in a specific block curl -X POST http://127.0.0.1:8091/walletsolidity/gettransactioninfobyblocknum -d '{\"num\" : 100}' Parameters: num - Block height Return: The list of transaction information inside the queried block DEX Exchanges \u00b6 walletsolidity/getexchangebyid \u00b6 Description: Query an exchange pair by exchange pair id curl -X POST http://127.0.0.1:8091/walletsolidity/getexchangebyid -d {\"id\":1} Parameters: id: Exchange pair id Return: Exchange pair information walletsolidity/listexchanges \u00b6 Description: Query the list of all the exchange pairs curl -X POST http://127.0.0.1:8091/walletsolidity/listexchanges Parameters: N/A Return: The list of all the exchange pairs TRONZ Shielded Smart Contract \u00b6 walletsolidity/getmerkletreevoucherinfo \u00b6 Description: Get the Merkle tree information of a note curl -X POST http://127.0.0.1:8090/walletsolidity/getmerkletreevoucherinfo -d '{ \"out_points\":[{ \"hash\":\"185b3e085723f5862b3a3c3cf54d52f5c1eaf2541e3a1e0ecd08bc12cd958d74\", \"index\":0 }] }' Parameters: out_points : Note information Return: Merkle tree information of a note walletsolidity/scannotebyivk \u00b6 Description: Get all notes related to ivk curl -X POST http://127.0.0.1:8090/walletsolidity/scannotebyivk -d '{ \"start_block_index\": 0, \"end_block_index\": 100, \"ivk\": \"80a481c3c739e54b4e0608090b3a1a6e9f8dce42346e95bf5a2d8a487bf45c05\" }' Parameters: start_block_index : The start block height, inclusive end_block_index : The end block height, exclusive ivk : Incoming viewing key Return: Notes list Note: Range limit (end_block_index - start_block_index <= 1000) walletsolidity/scanandmarknotebyivk \u00b6 Description: Get all notes with spent status related to ivk curl -X POST http://127.0.0.1:8090/walletsolidity/scanandmarknotebyivk -d '{ \"start_block_index\": 0, \"end_block_index\": 100, \"ivk\": \"80a481c3c739e54b4e0608090b3a1a6e9f8dce42346e95bf5a2d8a487bf45c05\", \"ak\": \"1d4f9b5551f4aa9443ceb263f0e208eb7e26080264571c5ef06de97a646fe418\", \"nk\": \"748522c7571a9da787e43940c9a474aa0c5c39b46c338905deb6726fa3678bdb\" }' Parameters: start_block_index : The start block height, inclusive end_block_index : The end block height, exclusive ivk : Incoming viewing key ak : Ak key nk : Nk key Return: Notes list Note: Range limit (end_block_index - start_block_index <= 1000) walletsolidity/scannotebyovk \u00b6 Description: Query all notes related to ovk curl -X POST http://127.0.0.1:8090/walletsolidity/scannotebyovk -d '{ \"start_block_index\": 0, \"end_block_index\": 100, \"ovk\": \"705145aa18cbe6c11d5d0011419a98f3d5b1d341eb4727f1315597f4bdaf8539\" }' Parameters: start_block_index : The start block height, inclusive end_block_index : The end block height, exclusive ovk : Outgoing viewing key Return: Notes list Note: Range limit (end_block_index - start_block_index <= 1000) walletsolidity/isspend \u00b6 Description: Check whether a note has been spent curl -X POST http://127.0.0.1:8090/walletsolidity/isspend -d '{ \"ak\": \"a3e65d509b675aaa2aeda977ceff11eebd76218079b6f543d78a615e396ca129\", \"nk\": \"62cfda9bea09a53cf2a21022057913734a8458969e11e0bb9c59ead48fbce83e\", \"note\": { \"payment_address\": \"ztron1aqgauawtkelxfu2w6s48cwh0mchjt6kwpj44l4wym3pullx0294j4r4v7kpm75wnclzycsw73mq\", \"rcm\": \"74a16c1b27ec7fbf06881d9d35ddaab1554838b1bddcd54f6bd8a9fb4ba0b80a\", \"value\": 500000000 }, \"txid\": \"7d09e471bb047d3ac044d5d6691b3721a2dddbb683ac02c207fbe78af6302463\", \"index\": 1 }' Parameters: ak : Ak nk : Nk note : Note information txid : Transaction id index : Note index Return: Whether a note has been spent walletsolidity/scanshieldedtrc20notesbyivk \u00b6 Description: Scan the shielded TRC-20 notes by ivk, and mark whether it has been spent curl -X POST http://127.0.0.1:8091/walletsolidity/scanshieldedtrc20notesbyivk -d '{ \"start_block_index\": 9200, \"end_block_index\": 9240, \"shielded_TRC20_contract_address\": \"41274fc7464fadac5c00c893c58bce6c39bf59e4c7\", \"ivk\": \"9f8e74bb3d7188a2781dc1db38810c6914eef4570a79e8ec8404480948e4e305\", \"ak\":\"8072d9110c9de9d9ade33d5d0f5890a7aa65b0cde42af7816d187297caf2fd64\", \"nk\":\"590bf33f93f792be659fd404df91e75c3b08d38d4e08ee226c3f5219cf598f14\" }' Parameters: start_block_index : The start block index, inclusive end_block_index : The end block index, exclusive shielded_TRC20_contract_address : Shielded TRC-20 contract address ivk : Incoming viewing key ak : Ak key nk : Nk key Return: Notes list Note: Block limit\uff08end_block_index - start_block_index <= 1000\uff09 walletsolidity/scanshieldedtrc20notesbyovk \u00b6 Description: Scan the shielded TRC-20 notes by ovk curl -X POST http://127.0.0.1:8091/walletsolidity/scanshieldedtrc20notesbyovk -d '{ \"start_block_index\": 9200, \"end_block_index\": 9240, \"shielded_TRC20_contract_address\": \"41274fc7464fadac5c00c893c58bce6c39bf59e4c7\", \"ovk\": \"0ff58efd75e083fe4fd759c8701e1c8cb6961c4297a12b2c800bdb7b2bcab889\" }' Parameters: start_block_index : Start block index, inclusive end_block_index : Start block index, inclusive shielded_TRC20_contract_address : Shielded TRC-20 contract address ovk : Outgoing viewing key Return: Notes list Note: Block limit (end_block_index - start_block_index <= 1000) walletsolidity/isshieldedtrc20contractnotespent \u00b6 Description: Check the status whether the specified shielded TRC-20 note is spent curl -X POST http://127.0.0.1:8091/walletsolidity/scanshieldedtrc20notesbyovk -d '{ \"note\": { \"value\": 40, \"payment_address\":\"ztron1768kf7dy4qquefp46szk978d65eeua66yhr4zv260c0uzj68t3tfjl3en9lhyyfxalv4jus30xs\", \"rcm\": \"296070782a94c6936b0b4f6daf8d7c7605a4374fe595b96148dc0f4b59015d0d\" }, \"ak\": \"8072d9110c9de9d9ade33d5d0f5890a7aa65b0cde42af7816d187297caf2fd64\", \"nk\": \"590bf33f93f792be659fd404df91e75c3b08d38d4e08ee226c3f5219cf598f14\", \"position\": 272, \"shielded_TRC20_contract_address\": \"41274fc7464fadac5c00c893c58bce6c39bf59e4c7\" }' Parameters: note : The specified note ak : Ak nk : Nk position : The leaf position index of note commitment in the Merkle tree shielded_TRC20_contract_address : The shielded TRC-20 contract address Return: Note status Note: The value in note is the scaled value by scalingFactor set in the shielded TRC-20 contract, namely real_amount = value * scalingFactor .","title":"HTTP API"},{"location":"api/http/#http-api","text":"This article introduces FullNode's HTTP APIs and their usage. Note Although TRON has avoided XSS by setting the Content-Type of HTTP APIs to application/json, there are a few APIs that don't have input validation. To better protect user data security, we recommend that you correctly encode any data from APIs before they use it in any UI, especially when the parameter visible equals true. Here is a typical XSS protection method: Encode all data from the APIs in HTML. Use methods such as encodeURIComponent() or escape() to encode the data, which can convert special characters into their HTML entities and prevent them from being interpreted as HTML code by the browser. Please be sure to implement XSS protection for all data from the APIs to ensure the security of user data. We understand that you may need more information about XSS protection. It is recommended that you refer to the following resources: OWASP XSS Prevention Cheat Sheet . First, Let's explain the selection of the address format in the HTTP API: Account addresses of the TRON network have two formats: HexString format and Base58 format. The Fullnode HTTP API supports address format selection. Users can set the address format through the visible parameter. The default value is false and the address format in the parameter and return value is hex format. When visible is set to true , the address format in the parameter and return value are in Base58 format. If the parameter format does not match the visible setting, an error will be reported. Setting method: For HTTP GET API or the api needs no parameter: by adding visible=true parameter to the url http://127.0.0.1:8090/wallet/listexchanges?visible=true For POST API: By adding \"visible\": true parameter to the most out layer of the json curl - X POST h tt p : //127.0.0.1:8090/wallet/createtransaction -d ' { \"owner_address\" : \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\" , \"to_address\" : \"TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\" , \"amount\" : 1000000 , \"visible\" : true } '","title":"HTTP API"},{"location":"api/http/#fullnode-http-api","text":"The FullNode HTTP API is categorized as follows: Accounts Transfer and Transactions Account Resources Query The Network Smart Contracts TRC-10 Token Voting & SRs Proposals DEX Exchange TRONZ Shielded Smart Contract Pending Pool","title":"Fullnode HTTP API"},{"location":"api/http/#accounts","text":"The following are the APIs related to on-chain accounts: wallet/validateaddress wallet/createaccount wallet/getaccount wallet/updateaccount wallet/accountpermissionupdate wallet/getaccountbalance wallet/setaccountid wallet/getaccountbyid","title":"Accounts"},{"location":"api/http/#walletvalidateaddress","text":"Description: Check the validity of the address curl -X POST http://127.0.0.1:8090/wallet/validateaddress -d '{\"address\": \"4189139CB1387AF85E3D24E212A008AC974967E561\"}' Parameters: address Return: the address is correct or not","title":"wallet/validateaddress"},{"location":"api/http/#walletcreateaccount","text":"Description: Create an account. Uses an already activated account to create a new account. If the owner_address has enough bandwidth obtained by freezing TRX, then creating an account will only consume bandwidth , otherwise, 0.1 TRX will be burned to pay for bandwidth, and at the same time, 1 TRX will be required to be created. curl -X POST http://127.0.0.1:8090/wallet/createaccount -d '{\"owner_address\":\"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"account_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\"}' Parameters: owner_address Owner address, default hexString account_address New address, default hexString Permission_id Optional, for multi-signature use Return: Unsigned transaction object","title":"wallet/createaccount"},{"location":"api/http/#walletgetaccount","text":"Description: Query an account information curl -X POST http://127.0.0.1:8090/wallet/getaccount -d '{\"address\": \"41E552F6487585C2B58BC2C9BB4492BC1F17132CD0\"}' Parameters: address - account address Return: Account object","title":"wallet/getaccount"},{"location":"api/http/#walletupdateaccount","text":"Description: Update the name of an account curl -X POST http://127.0.0.1:8090/wallet/updateaccount -d '{\"account_name\": \"0x7570646174654e616d6531353330383933343635353139\" ,\"owner_address\":\"41d1e7a6bc354106cb410e65ff8b181c600ff14292\"}' Parameters: account_name Account name, default hexString owner_address Owner address, default hexString Permission_id Optional, for multi-signature use Return:\u672a\u7b7e\u540d\u7684\u4fee\u6539\u540d\u79f0Transaction","title":"wallet/updateaccount"},{"location":"api/http/#walletaccountpermissionupdate","text":"Description: Update the account's permission. curl -X POST http://127.0.0.1:8090/wallet/accountpermissionupdate -d '{ \"owner_address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"owner\": { \"type\": 0, \"permission_name\": \"owner\", \"threshold\": 1, \"keys\": [{ \"address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"weight\": 1 }] }, \"witness\": { \"type\": 1, \"permission_name\": \"witness\", \"threshold\": 1, \"keys\": [{ \"address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"weight\": 1 }] }, \"actives\": [{ \"type\": 2, \"permission_name\": \"active12323\", \"threshold\": 2, \"operations\": \"7fff1fc0033e0000000000000000000000000000000000000000000000000000\", \"keys\": [{ \"address\": \"TNhXo1GbRNCuorvYu5JFWN3m2NYr9QQpVR\", \"weight\": 1 }, { \"address\": \"TKwhcDup8L2PH5r6hxp5CQvQzZqJLmKvZP\", \"weight\": 1 }] }], \"visible\": true}' Parameters: owner_address: Owner address of the account, default hexString owner: Account owner permission witness: Account witness permission, only for witness actives: List of active permissions for the account Return: Unsigned transaction","title":"wallet/accountpermissionupdate"},{"location":"api/http/#walletgetaccountbalance","text":"Description\uff1a Get the account balance in a specific block. curl -X POST http://127.0.0.1:8090/wallet/getaccountbalance -d '{ \"account_identifier\": { \"address\": \"TLLM21wteSPs4hKjbxgmH1L6poyMjeTbHm\" }, \"block_identifier\": { \"hash\": \"0000000000010c4a732d1e215e87466271e425c86945783c3d3f122bfa5affd9\", \"number\": 68682 }, \"visible\": true }' Parameters: account_identifier : The account address. block_identifier : The block number. Return: The balance object of the account in a specific block, the block_identifier is the block hash. { \"balance\": 64086449348265042, \"block_identifier\": { \"hash\": \"0000000000010c4a732d1e215e87466271e425c86945783c3d3f122bfa5affd9\", \"number\": 68682 } }","title":"wallet/getaccountbalance"},{"location":"api/http/#walletsetaccountid","text":"Description: To set an account id for an account curl -X POST http://127.0.0.1:8090/wallet/setaccountid -d '{ \"owner_address\":\"41a7d8a35b260395c14aa456297662092ba3b76fc0\",\"account_id\":\"6161616162626262\"}' Parameters: owner_address : Owner address, default hexString account_id :Account id, default hexString Return: Unsigned transaction","title":"wallet/setaccountid"},{"location":"api/http/#walletgetaccountbyid","text":"Description: Query an account information by account id curl -X POST http://127.0.0.1:8090/wallet/getaccountbyid -d '{\"account_id\":\"6161616162626262\"}' Parameters: account_id Account id, default hexString Return:Account object","title":"wallet/getaccountbyid"},{"location":"api/http/#transfers-and-transactions","text":"The following are transfer and transaction related APIs: wallet/createtransaction wallet/broadcasttransaction wallet/broadcasthex wallet/getsignweight wallet/getapprovedlist","title":"Transfers and transactions"},{"location":"api/http/#walletcreatetransaction","text":"Description: Create a transfer transaction, if to address is not existed, then create the account on the blockchain curl -X POST http://127.0.0.1:8090/wallet/createtransaction -d '{\"to_address\": \"41e9d79cc47518930bc322d9bf7cddd260a0260a8d\", \"owner_address\": \"41D1E7A6BC354106CB410E65FF8B181C600FF14292\", \"amount\": 1000 }' Parameters: to_address To address, default hexString owner_address Owner address, default hexString amount Transfer amount Permission_id Optional, for multi-signature use Return: Unsigned transaction","title":"wallet/createtransaction"},{"location":"api/http/#walletbroadcasttransaction","text":"Description: Broadcast transaction after sign curl -X POST http://127.0.0.1:8090/wallet/broadcasttransaction -d '{\"signature\":[\"97c825b41c77de2a8bd65b3df55cd4c0df59c307c0187e42321dcc1cc455ddba583dd9502e17cfec5945b34cad0511985a6165999092a6dec84c2bdd97e649fc01\"],\"txID\":\"454f156bf1256587ff6ccdbc56e64ad0c51e4f8efea5490dcbc720ee606bc7b8\",\"raw_data\":{\"contract\":[{\"parameter\":{\"value\":{\"amount\":1000,\"owner_address\":\"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\",\"to_address\":\"41d1e7a6bc354106cb410e65ff8b181c600ff14292\"},\"type_url\":\"type.googleapis.com/protocol.TransferContract\"},\"type\":\"TransferContract\"}],\"ref_block_bytes\":\"267e\",\"ref_block_hash\":\"9a447d222e8de9f2\",\"expiration\":1530893064000,\"timestamp\":1530893006233}}' Parameters: Transaction after sign Return:The result of the broadcast","title":"wallet/broadcasttransaction"},{"location":"api/http/#walletbroadcasthex","text":"Description: Broadcast transaction hex string after sign curl -X POST http://127.0.0.1:8090/wallet/broadcasthex -d '{\"transaction\":\"0A8A010A0202DB2208C89D4811359A28004098A4E0A6B52D5A730802126F0A32747970652E676F6F676C65617069732E636F6D2F70726F746F636F6C2E5472616E736665724173736574436F6E747261637412390A07313030303030311215415A523B449890854C8FC460AB602DF9F31FE4293F1A15416B0580DA195542DDABE288FEC436C7D5AF769D24206412418BF3F2E492ED443607910EA9EF0A7EF79728DAAAAC0EE2BA6CB87DA38366DF9AC4ADE54B2912C1DEB0EE6666B86A07A6C7DF68F1F9DA171EEE6A370B3CA9CBBB00\"}' Parameters: Transaction hex after sign Return: The result of the broadcast","title":"wallet/broadcasthex"},{"location":"api/http/#walletgetsignweight","text":"Description: Query the current signatures total weight of a transaction after sign curl -X POST http://127.0.0.1:8090/wallet/getsignweight -d '{ \"signature\": [ \"e0bd4a60f1b3c89d4da3894d400e7e32385f6dd690aee17fdac4e016cdb294c5128b66f62f3947a7182c015547496eba95510c113bda2a361d811b829343c36501\", \"596ead6439d0f381e67f30b1ed6b3687f2bd53ce5140cdb126cfe4183235804741eeaf79b4e91f251fd7042380a9485d4d29d67f112d5387bc7457b355cd3c4200\" ], \"txID\": \"0ae84a8439f5aa8fd2c458879a4031a7452aebed8e6e99ffbccd26842d4323c4\", \"raw_data\": { \"contract\": [{ \"parameter\": { \"value\": { \"amount\": 1000000, \"owner_address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"to_address\": \"TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\" }, \"type_url\": \"type.googleapis.com/protocol.TransferContract\" }, \"type\": \"TransferContract\" }], \"ref_block_bytes\": \"163d\", \"ref_block_hash\": \"77ef4ace148b05ba\", \"expiration\": 1555664823000, \"timestamp\": 1555664763418 }, \"raw_data_hex\": \"0a02163d220877ef4ace148b05ba40d8c5e5a6a32d5a69080112630a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412320a1541a7d8a35b260395c14aa456297662092ba3b76fc01215415a523b449890854c8fc460ab602df9f31fe4293f18c0843d2802709af4e1a6a32d\", \"visible\": true}' Parameters: Transaction object after sign Return: The current signatures total weight","title":"wallet/getsignweight"},{"location":"api/http/#walletgetapprovedlist","text":"Description: Query the signatures list of a transaction after sign curl -X POST http://127.0.0.1:8090/wallet/getapprovedlist -d '{ \"signature\": [ \"e0bd4a60f1b3c89d4da3894d400e7e32385f6dd690aee17fdac4e016cdb294c5128b66f62f3947a7182c015547496eba95510c113bda2a361d811b829343c36501\", \"596ead6439d0f381e67f30b1ed6b3687f2bd53ce5140cdb126cfe4183235804741eeaf79b4e91f251fd7042380a9485d4d29d67f112d5387bc7457b355cd3c4200\" ], \"txID\": \"0ae84a8439f5aa8fd2c458879a4031a7452aebed8e6e99ffbccd26842d4323c4\", \"raw_data\": { \"contract\": [{ \"parameter\": { \"value\": { \"amount\": 1000000, \"owner_address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"to_address\": \"TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\" }, \"type_url\": \"type.googleapis.com/protocol.TransferContract\" }, \"type\": \"TransferContract\" }], \"ref_block_bytes\": \"163d\", \"ref_block_hash\": \"77ef4ace148b05ba\", \"expiration\": 1555664823000, \"timestamp\": 1555664763418 }, \"raw_data_hex\": \"0a02163d220877ef4ace148b05ba40d8c5e5a6a32d5a69080112630a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412320a1541a7d8a35b260395c14aa456297662092ba3b76fc01215415a523b449890854c8fc460ab602df9f31fe4293f18c0843d2802709af4e1a6a32d\", \"visible\": true}' Parameter: Transaction object after sign Return: The list of the signatures","title":"wallet/getapprovedlist"},{"location":"api/http/#account-resources","text":"The following are account resource related APIs: wallet/getaccountresource wallet/getaccountnet wallet/unfreezebalance wallet/getdelegatedresource wallet/getdelegatedresourceaccountindex wallet/freezebalancev2 wallet/unfreezebalancev2 wallet/cancelallunfreezev2 wallet/delegateresource wallet/undelegateresource wallet/withdrawexpireunfreeze wallet/getavailableunfreezecount wallet/getcanwithdrawunfreezeamount wallet/getcandelegatedmaxsize wallet/getdelegatedresourcev2 wallet/getdelegatedresourceaccountindexv2","title":"Account Resources"},{"location":"api/http/#walletgetaccountresource","text":"Description: Query the resource information of an account curl -X POST http://127.0.0.1:8090/wallet/getaccountresource -d {\"address\" : \"419844f7600e018fd0d710e2145351d607b3316ce9\"} Parameters: address : Address, default hexString Return: The resource information","title":"wallet/getaccountresource"},{"location":"api/http/#walletgetaccountnet","text":"Description: Query the bandwidth information of an account curl -X POST http://127.0.0.1:8090/wallet/getaccountnet -d '{\"address\": \"4112E621D5577311998708F4D7B9F71F86DAE138B5\"}' Parameters: address - Address, default hexString Return: Bandwidth information","title":"wallet/getaccountnet"},{"location":"api/http/#walletfreezebalance","text":"Description: Stake TRX. This interface has been deprecated, please use FreezeBalanceV2 to stake TRX to obtain resources.","title":"wallet/freezebalance"},{"location":"api/http/#walletunfreezebalance","text":"Description: Unstake the TRX that staked during stake1.0 phase. curl -X POST http://127.0.0.1:8090/wallet/unfreezebalance -d '{ \"owner_address\":\"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", \"resource\": \"BANDWIDTH\", \"receiver_address\":\"414332f387585c2b58bc2c9bb4492bc1f17342cd1\" }' Parameters: owner_address Owner address, default hexString resource unstake type 'BANDWIDTH' or 'ENERGY' receiverAddress The address that will lose the resource, default hexString Permission_id Optional, for multi-signature use Return: Unsigned transaction","title":"wallet/unfreezebalance"},{"location":"api/http/#walletgetdelegatedresource","text":"Description: Query the resource delegation information curl -X POST http://127.0.0.1:8090/wallet/getdelegatedresource -d ' { \"fromAddress\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", \"toAddress\": \"41c6600433381c731f22fc2b9f864b14fe518b322f\" }' Parameters: fromAddress : from address, default hexString toAddress : to address, default hexString Return: Resource delegation information","title":"wallet/getdelegatedresource"},{"location":"api/http/#walletgetdelegatedresourceaccountindex","text":"Description: Query the resource delegation by an account during stake1.0 phase. i.e. list all addresses that have delegated resources to an account. curl -X POST http://127.0.0.1:8090/wallet/getdelegatedresourceaccountindex -d ' { \"value\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", }' Parameters: value : account address Return:resource delegation index","title":"wallet/getdelegatedresourceaccountindex"},{"location":"api/http/#walletfreezebalancev2","text":"Description: Stake TRX curl -X POST http://127.0.0.1:8090/wallet/freezebalancev2 -d '{ \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", \"frozen_balance\": 10000, \"resource\": \"BANDWIDTH\" }' Parameters: owner_address : Owner address, default hexString frozen_balance : TRX stake amount, the unit is sun resource : TRX stake type, 'BANDWIDTH' or 'ENERGY' permission_id : Optional, for multi-signature use Return: Unsigned transaction","title":"wallet/freezebalancev2"},{"location":"api/http/#walletunfreezebalancev2","text":"Description: Unstake some TRX staked in Stake2.0, release the corresponding amount of bandwidth or energy, and voting rights (TP) curl -X POST http://127.0.0.1:8090/wallet/unfreezebalancev2 -d '{ \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", \"unfreeze_balance\": 1000000, \"resource\": \"BANDWIDTH\" }' Parameters: owner_address : Owner address, default hexString resource : Resource type: 'BANDWIDTH' or 'ENERGY' unfreeze_balance : The amount of TRX to unstake, in sun permission_id : Optional, for multi-signature use Return:Unsigned transaction","title":"wallet/unfreezebalancev2"},{"location":"api/http/#walletcancelallunfreezev2","text":"Description: Cancel unstakings, all unstaked funds still in the waiting period will be re-staked, all unstaked funds that exceeded the 14-day waiting period will be automatically withdrawn to the owner\u2019s account curl -X POST http://127.0.0.1:8090/wallet/cancelallunfreezev2 -d '{ \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\" }' Parameters: owner_address : Owner address, default hexString permission_id : Optional, for multi-signature use Return:Unsigned transaction","title":"wallet/cancelallunfreezev2"},{"location":"api/http/#walletdelegateresource","text":"Description: Delegate bandwidth or energy resources to other accounts in Stake2.0. curl -X POST http://127.0.0.1:8090/wallet/delegateresource -d '{ \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", \"receiver_address\": \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"balance\": 1000000, \"resource\": \"BANDWIDTH\", \"lock\": false }' Parameters: owner_address : Account address receiver_address : Resource receiver address balance : Amount of TRX staked for resources to be delegated, unit is sun resource : Resource type: 'BANDWIDTH' or 'ENERGY' lock : Whether it is locked, if it is set to true, the delegated resources cannot be undelegated within 3 days. When the lock time is not over, if the owner delegates the same type of resources using the lock to the same address, the lock time will be reset to 3 days lock_period : lock time,The unit is block interval(3 seconds), indicates the time of how many blocks will be produced from the moment the transaction is executed. Only when lock is true, this field is valid. If the delegate lock period is 1 day, the lock_period is: 28800 permission_id : Optional, for multi-signature use Return:Unsigned transaction","title":"wallet/delegateresource"},{"location":"api/http/#walletundelegateresource","text":"Description: Cancel the delegation of bandwidth or energy resources to other account curl -X POST http://127.0.0.1:8090/wallet/undelegateresource -d '{ \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", \"receiver_address\": \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"balance\": 1000000, \"resource\": \"BANDWIDTH\" }' Parameters: owner_address : Account address receiver_address : Resource receiver address balance : Amount of TRX staked for resources to be delegated, unit is sun resource : Resource type: 'BANDWIDTH' or 'ENERGY' permission_id : Optional, for multi-signature use Return:Unsigned transaction","title":"wallet/undelegateresource"},{"location":"api/http/#walletwithdrawexpireunfreeze","text":"Description: Withdraw unfrozen balance in Stake2.0, the user can call this API to get back their funds after executing /wallet/unfreezebalancev2 transaction and waiting N days, N is a network parameter curl -X POST http://127.0.0.1:8090/wallet/withdrawexpireunfreeze -d '{ \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", }' Parameters: owner_address : Account address permission_id : Optional, for multi-signature use Return: Unsigned transaction","title":"wallet/withdrawexpireunfreeze"},{"location":"api/http/#walletgetavailableunfreezecount","text":"Description:Remaining times of executing unstake operation in Stake2.0 curl -X POST http://127.0.0.1:8090/wallet/getavailableunfreezecount -d '{ \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\", \"visible\": true } ' Parameters: owner_address : Account address Return:Remaining times of available unstaking.","title":"wallet/getavailableunfreezecount"},{"location":"api/http/#walletgetcanwithdrawunfreezeamount","text":"Description:Query the withdrawable balance at the specified timestamp In Stake2.0 curl -X POST http://127.0.0.1:8090/wallet/getcanwithdrawunfreezeamount -d '{ \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\", \"timestamp\": 1667977444000, \"visible\": true } ' Parameters: owner_address : Account address timestamp : query cutoff timestamp, in milliseconds. Return: withdrawable balance, unit is sun.","title":"wallet/getcanwithdrawunfreezeamount"},{"location":"api/http/#walletgetcandelegatedmaxsize","text":"Description: In Stake2.0, query the amount of delegatable resources share of the specified resource type for an address, unit is sun. curl -X POST http://127.0.0.1:8090/wallet/getcandelegatedmaxsize -d '{ \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\", \"type\": 0, \"visible\": true } ' Parameters: owner_address : Account address type : resource type, 0 is bandwidth, 1 is energy Return:the amount of delegatable resource share, unit is sun.","title":"wallet/getcandelegatedmaxsize"},{"location":"api/http/#walletgetdelegatedresourcev2","text":"In Stake2.0, query the detail of resource share delegated from fromAddress to toAddress curl -X POST http://127.0.0.1:8090/wallet/getdelegatedresourcev2 -d '{ \"fromAddress\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\", \"toAddress\": \"TPswDDCAWhJAZGdHPidFg5nEf8TkNToDX1\", \"visible\": true } ' Parameters: fromAddress : resource from address, default hexString toAddress : resource to address Return:Resource delegation list","title":"wallet/getdelegatedresourcev2"},{"location":"api/http/#walletgetdelegatedresourceaccountindexv2","text":"In Stake2.0, query the resource delegation index by an account. Two lists will return, one is the list of addresses the account has delegated its resources(toAddress), and the other is the list of addresses that have delegated resources to the account(fromAddress). curl -X POST http://127.0.0.1:8090/wallet/getdelegatedresourceaccountindexv2 -d '{ \"value\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\", \"visible\": true } ' Parameters: value : account address Return:Two lists will return, one is the list of addresses the account has delegated its resources(toAddress), and the other is the list of addresses that have delegated resources to the account(fromAddress).","title":"wallet/getdelegatedresourceaccountindexv2"},{"location":"api/http/#query-the-network","text":"The following is the API for querying data on the chain: wallet/getnowblock wallet/getblock wallet/getblockbynum wallet/getblockbyid wallet/getblockbylatestnum wallet/getblockbylimitnext wallet/getblockbalance wallet/gettransactionbyid wallet/gettransactioninfobyid wallet/gettransactioncountbyblocknum wallet/gettransactioninfobyblocknum wallet/listnodes wallet/getnodeinfo wallet/getchainparameters wallet/getenergyprices wallet/getbandwidthprices wallet/getburntrx","title":"Query The Network"},{"location":"api/http/#walletgetnowblock","text":"Description: Query the latest block information curl -X POST http://127.0.0.1:8090/wallet/getnowblock Parameters: N/A Return: The latest block","title":"wallet/getnowblock"},{"location":"api/http/#walletgetblock","text":"Query block header information or entire block information according to block height or block hash curl -X POST http://127.0.0.1:8090/wallet/getblock -d '{\"detail\":false}' Parameters: id_or_num : id_or_num can be the block height or the block hash. No value entered means to query the latest block. detail : true means query the entire block information include the header and body. false means only query the block header information. Return: block or block header","title":"wallet/getblock"},{"location":"api/http/#walletgetblockbynum","text":"Description: Query a block information by block height curl -X POST http://127.0.0.1:8090/wallet/getblockbynum -d '{\"num\": 1}' Parameters: Block height Return: block","title":"wallet/getblockbynum"},{"location":"api/http/#walletgetblockbyid","text":"Description: Query a block information by block id curl -X POST http://127.0.0.1:8090/wallet/getblockbyid -d '{\"value\": \"0000000000038809c59ee8409a3b6c051e369ef1096603c7ee723c16e2376c73\"}' Parameters: Block id Return: block","title":"wallet/getblockbyid"},{"location":"api/http/#walletgetblockbylatestnum","text":"Description: Query the several latest blocks curl -X POST http://127.0.0.1:8090/wallet/getblockbylatestnum -d '{\"num\": 5}' Parameters: The number of the blocks expected to return Return:The list of the blocks","title":"wallet/getblockbylatestnum"},{"location":"api/http/#walletgetblockbylimitnext","text":"Description: Query a list of blocks by range curl -X POST http://127.0.0.1:8090/wallet/getblockbylimitnext -d '{\"startNum\": 1, \"endNum\": 2}' Parameters: startNum : The start block height, itself included endNum : The end block height, itself not included Return: The list of the blocks","title":"wallet/getblockbylimitnext"},{"location":"api/http/#walletgetblockbalance","text":"Description\uff1aGet all balance change operations in a block. curl -X POST http://127.0.0.1:8090/wallet/getblockbalance -d '{ \"hash\": \"000000000000dc2a3731e28a75b49ac1379bcc425afc95f6ab3916689fbb0189\", \"number\": 56362, \"visible\": true }' Parameters: The hash and block number must match. Return: { \"block_identifier\": { \"hash\": \"000000000000dc2a3731e28a75b49ac1379bcc425afc95f6ab3916689fbb0189\", \"number\": 56362 }, \"timestamp\": 1530060672000, \"transaction_balance_trace\": [ { \"transaction_identifier\": \"e6cabb1833cd1f795eed39d8dd7689eaa70e5bb217611766c74c7aa9feea80df\", \"operation\": [ { \"operation_identifier\": 0, \"address\": \"TPttBLmFuykRi83y9HxDoEWxTQw6CCcQ4p\", \"amount\": -100000 }, { \"operation_identifier\": 1, \"address\": \"TLsV52sRDL79HXGGm9yzwKibb6BeruhUzy\", \"amount\": 100000 }, { \"operation_identifier\": 2, \"address\": \"TPttBLmFuykRi83y9HxDoEWxTQw6CCcQ4p\", \"amount\": -10000000 }, { \"operation_identifier\": 3, \"address\": \"TMrysg7DbwR1M8xqhpaPdVCHCuWFhw7uk1\", \"amount\": 10000000 } ], \"type\": \"TransferContract\", \"status\": \"SUCCESS\" } ] }","title":"wallet/getblockbalance"},{"location":"api/http/#walletgettransactionbyid","text":"Description: Query a transaction information by transaction id curl -X POST http://127.0.0.1:8090/wallet/gettransactionbyid -d '{\"value\": \"d5ec749ecc2a615399d8a6c864ea4c74ff9f523c2be0e341ac9be5d47d7c2d62\"}' Parameters: Transaction id Return: Transaction information","title":"wallet/gettransactionbyid"},{"location":"api/http/#walletgettransactioninfobyid","text":"Description: Query the transaction fee, block height by transaction id curl -X POST http://127.0.0.1:8090/wallet/gettransactioninfobyid -d '{\"value\" : \"309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2\"}' Parameters: value - Transaction id Return: Transaction fee & block height","title":"wallet/gettransactioninfobyid"},{"location":"api/http/#walletgettransactioncountbyblocknum","text":"Description: Query th the number of transactions in a specific block curl -X POST http://127.0.0.1:8090/wallet/gettransactioncountbyblocknum -d '{\"num\" : 100}' Parameters: num - Block height Return: The number of transactions","title":"wallet/gettransactioncountbyblocknum"},{"location":"api/http/#walletgettransactioninfobyblocknum","text":"Description: Query the list of transaction information in a specific block curl -X POST http://127.0.0.1:8090/wallet/gettransactioninfobyblocknum -d '{\"num\" : 100}' Parameters: num is the Block height Return:The list of transaction information","title":"wallet/gettransactioninfobyblocknum"},{"location":"api/http/#walletlistnodes","text":"Description: Query the list of nodes connected to the ip of the api curl -X POST http://127.0.0.1:8090/wallet/listnodes Parameters: N/A Return: The list of nodes","title":"wallet/listnodes"},{"location":"api/http/#walletgetnodeinfo","text":"Description: Query the current node information curl http://127.0.0.1:8090/wallet/getnodeinfo Return: The node information","title":"wallet/getnodeinfo"},{"location":"api/http/#walletgetchainparameters","text":"Description: Query the parameters of the blockchain used for SR(Super Representatives) to create a proposal curl -X POST http://127.0.0.1:8090/wallet/getchainparameters Return: The list of parameters of the blockchain","title":"wallet/getchainparameters"},{"location":"api/http/#walletgetenergyprices","text":"Description: Query historical energy unit price curl -X POST http://127.0.0.1:8090/wallet/getenergyprices Return: All historical energy unit price information. Each unit price change is separated by a comma. Before the colon is the millisecond timestamp, and after the colon is the energy unit price in sun.","title":"wallet/getenergyprices"},{"location":"api/http/#walletgetbandwidthprices","text":"Description: Query historical bandwidth unit price curl -X POST http://127.0.0.1:8090/wallet/getbandwidthprices Return: All historical bandwidth unit price information. Each unit price change is separated by a comma. Before the colon is the millisecond timestamp, and after the colon is the bandwidth unit price in sun.","title":"wallet/getbandwidthprices"},{"location":"api/http/#walletgetburntrx","text":"Description: Query the amount of TRX burned due to on-chain transaction fees since No. 54 Committee Proposal took effect curl -X POST http://127.0.0.1:8090/wallet/getburntrx Return: Amount of TRX burned, in sun.","title":"wallet/getburntrx"},{"location":"api/http/#smart-contracts","text":"The following are smart contract related APIs: wallet/getcontract wallet/getcontractinfo wallet/deploycontract wallet/triggersmartcontract wallet/triggerconstantcontract wallet/updatesetting wallet/updateenergylimit wallet/clearabi wallet/estimateenergy","title":"Smart Contracts"},{"location":"api/http/#walletgetcontract","text":"Queries a contract's information from the blockchain, including the bytecode of the contract, ABI, configuration parameters, etc. curl -X POST http://127.0.0.1:8090/wallet/getcontract -d '{\"value\":\"4189139CB1387AF85E3D24E212A008AC974967E561\"}' Parameters: value - Contract address Return:SmartContract","title":"wallet/getcontract"},{"location":"api/http/#walletgetcontractinfo","text":"Queries a contract's information from the blockchain. The difference from the wallet/getcontract interface is that this interface returns not only the bytecode but also the runtime bytecode of the contract. Compared with bytecode, runtime bytecode does not contain constructor and constructor parameter information. curl -X POST http://127.0.0.1:8090/wallet/getcontractinfo -d '{\"value\":\"4189139CB1387AF85E3D24E212A008AC974967E561\"}' Parameters: value - Contract address Return: contract's information","title":"wallet/getcontractinfo"},{"location":"api/http/#walletdeploycontract","text":"Description: Deploy a smart contract curl -X POST http://127.0.0.1:8090/wallet/deploycontract -d '{\"abi\":\"[{\\\"constant\\\":false,\\\"inputs\\\":[{\\\"name\\\":\\\"key\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"set\\\",\\\"outputs\\\":[],\\\"payable\\\":false,\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"constant\\\":true,\\\"inputs\\\":[{\\\"name\\\":\\\"key\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"get\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"payable\\\":false,\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"}]\",\"bytecode\":\"608060405234801561001057600080fd5b5060de8061001f6000396000f30060806040526004361060485763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631ab06ee58114604d5780639507d39a146067575b600080fd5b348015605857600080fd5b506065600435602435608e565b005b348015607257600080fd5b50607c60043560a0565b60408051918252519081900360200190f35b60009182526020829052604090912055565b600090815260208190526040902054905600a165627a7a72305820fdfe832221d60dd582b4526afa20518b98c2e1cb0054653053a844cf265b25040029\",\"parameter\":\"\",\"call_value\":100,\"name\":\"SomeContract\",\"consume_user_resource_percent\":30,\"fee_limit\":10,\"origin_energy_limit\": 10,\"owner_address\":\"41D1E7A6BC354106CB410E65FF8B181C600FF14292\"}' Parameters: abi :abi bytecode :bytecode\uff0chexString parameter :The list of the parameters of the constructor, It should be converted hexString after encoded according to ABI encoder. If constructor has no parameter, this can be optional consume_user_resource_percent : Consume user's resource percentage. It should be an integer between [0, 100]. if 0, means it does not consume user's resource until the developer's resource has been used up fee_limit : The maximum TRX burns for resource consumption call_value : The TRX transfer to the contract for each call owner_address :Owner address of the contract, default hexString name :Contract name origin_energy_limit : The maximum resource consumption of the creator in one execution or creation call_token_value : The amount of trc10 token transfer to the contract for each call (Optional) token_id :The id of trc10 token transfer to the contract (Optional) Permission_id : Optional, for multi-signature use Return:Unsigned transaction","title":"wallet/deploycontract"},{"location":"api/http/#wallettriggersmartcontract","text":"Description: Trigger smart contract $ curl -X POST http://127.0.0.1:8090/wallet/triggersmartcontract -d '{ \"contract_address\": \"4189139CB1387AF85E3D24E212A008AC974967E561\", \"function_selector\": \"set(uint256,uint256)\", \"parameter\": \"00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002\", \"fee_limit\": 10, \"call_value\": 100, \"owner_address\": \"41D1E7A6BC354106CB410E65FF8B181C600FF14292\" }' Parameters: contract_address : Contract address, default hexString function_selector : Function call, must not leave a blank space parameter : The parameter passed to 'function_selector', the format must match with the VM's requirement. You can use a js tool provided by remix to convert a parameter like [1,2] to the format that VM requires data : The data for interacting with smart contracts, including the contract function and parameters. You can choose to use this field, or you can choose to use function_selector and parameter for contract interaction. When both of data and function_selector exist, function_selector is preferred fee_limit : The maximum TRX burns for resource consumption call_value : The TRX transfer to the contract for each call call_token_value : The amount of trc10 token transfer to the contract for each call token_id : The id of trc10 token transfer to the contract owner_address : Owner address that triggers the contract, default hexString permission_id : Optional, for multi-signature use Return:Unsigned transaction","title":"wallet/triggersmartcontract"},{"location":"api/http/#wallettriggerconstantcontract","text":"Description: Trigger the constant of the smart contract, the transaction is off the blockchain $ curl -X POST http://127.0.0.1:8090/wallet/triggerconstantcontract -d '{ \"contract_address\": \"4189139CB1387AF85E3D24E212A008AC974967E561\", \"function_selector\": \"set(uint256,uint256)\", \"parameter\": \"00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002\", \"call_value\": 100, \"owner_address\": \"41D1E7A6BC354106CB410E65FF8B181C600FF14292\" }' Parameters: contract_address : Smart contract address, default hexString function_selector : Function call, must not leave a blank space parameter : The parameter passed to 'function_selector', the format must match with the VM's requirement. You can use a hs tool provided by remix to convert a parameter like [1,2] to the format that VM requires data : The data for interacting with smart contracts, including the contract function and parameters. You can choose to use this field, or you can choose to use function_selector and parameter for contract interaction. When both of data and function_selector exist, function_selector is preferred call_value : The TRX transfer to the contract for each call owner_address : Owner address that triggers the contract, default hexString call_token_value : The amount of trc10 token transfer to the contract for each call token_id : The id of trc10 token transfer to the contract Return: Transaction object Note: The unit of TRX in the parameters is SUN","title":"wallet/triggerconstantcontract"},{"location":"api/http/#walletupdatesetting","text":"Description: Update the consume_user_resource_percent parameter of a smart contract $ curl -X POST http://127.0.0.1:8090/wallet/updatesetting -d '{ \"owner_address\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", \"contract_address\": \"41c6600433381c731f22fc2b9f864b14fe518b322f\", \"consume_user_resource_percent\": 7 }' owner_address :Owner address of the smart contract, default hexString contract_address :Smart contract address, default hexString consume_user_resource_percent :Consume user's resource percentage Permission_id : Optional, for multi-signature use Return: Transaction object","title":"wallet/updatesetting"},{"location":"api/http/#walletupdateenergylimit","text":"Description: Update the origin_energy_limit parameter of a smart contract $ curl -X POST http://127.0.0.1:8090/wallet/updateenergylimit -d '{ \"owner_address\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", \"contract_address\": \"41c6600433381c731f22fc2b9f864b14fe518b322f\", \"origin_energy_limit\": 7 }' Parameters: owner_address : Owner address of the smart contract, default hexString contract_address : Smart contract address, default hexString origin_energy_limit : The maximum resource consumption of the creator in one execution or creation permission_id : Optional, for multi-signature use Return: Transaction object","title":"wallet/updateenergylimit"},{"location":"api/http/#walletclearabi","text":"Description: To clear the abi of a smart contract $ curl -X POST http://127.0.0.1:8090/wallet/clearabi -d '{ \"owner_address\": \"41a7d8a35b260395c14aa456297662092ba3b76fc0\", \"contract_address\": \"417bcb781f4743afaacf9f9528f3ea903b3782339f\" }' Parameters: owner_address :Owner address of the smart contract contract_address : Smart contract address, default hexString Return: Transaction object","title":"wallet/clearabi"},{"location":"api/http/#walletestimateenergy","text":"Estimate the energy required for the successful execution of smart contract transactions curl -X POST http://127.0.0.1:8090/wallet/estimateenergy -d '{ \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\", \"contract_address\": \"TG3XXyExBkPp9nzdajDZsozEu4BkaSJozs\", \"function_selector\": \"transfer(address,uint256)\", \"parameter\": \"00000000000000000000004115208EF33A926919ED270E2FA61367B2DA3753DA0000000000000000000000000000000000000000000000000000000000000032\", \"visible\": true }' Parameters: contract_address : Smart contract address. If visible=true, use base58check format, otherwise use hex format. function_selector : Function call, must not be left blank. parameter : Parameter encoding needs to be in accordance with the ABI rules, the rules are more complicated, users can use the ethers library to encode data : The data for interacting with smart contracts, including the contract function and parameters. You can choose to use this field, or you can choose to use function_selector and parameter for contract interaction. When both of data and function_selector exist, function_selector is preferred call_value : The TRX transfer to the contract for each call owner_address :Owner address that triggers the contract. If visible=true, use base58check format, otherwise use hex call_token_value : The amount of trc10 token transfer to the contract for each call token_id : The id of trc10 token transfer to the contract Return:Estimated the energy value","title":"wallet/estimateenergy"},{"location":"api/http/#trc10-token","text":"The following are TRC10 token-related APIs: wallet/getassetissuebyaccount wallet/getassetissuebyname wallet/getassetissuelistbyname wallet/getassetissuebyid wallet/getassetissuelist wallet/getpaginatedassetissuelist wallet/transferasset wallet/participateassetissue wallet/createassetissue wallet/unfreezeasset wallet/updateasset","title":"TRC10 token"},{"location":"api/http/#walletgetassetissuebyaccount","text":"Description: Query the token issue information of an account $ curl -X POST http://127.0.0.1:8090/wallet/getassetissuebyaccount -d '{ \"address\": \"41F9395ED64A6E1D4ED37CD17C75A1D247223CAF2D\" }' Parameter address: Token issuer's address, default hexString Return: Token object","title":"wallet/getassetissuebyaccount"},{"location":"api/http/#walletgetassetissuebyname","text":"Description: Query a token by token name $ curl -X POST http://127.0.0.1:8090/wallet/getassetissuebyname -d '{ \"value\": \"44756354616E\" }' Parameter value: Token name, default hexString Return: Token object","title":"wallet/getassetissuebyname"},{"location":"api/http/#walletgetassetissuelistbyname","text":"Description: Query the list of tokens by name $ curl -X POST http://127.0.0.1:8090/wallet/getassetissuelistbyname -d '{ \"value\": \"44756354616E\" }' Parameter value: Token name, default hexString Return: The list of tokens","title":"wallet/getassetissuelistbyname"},{"location":"api/http/#walletgetassetissuebyid","text":"Description: Query a token by token id $ curl -X POST http://127.0.0.1:8090/wallet/getassetissuebyid -d '{ \"value\": \"1000001\" }' Parameter value: Token id Return: Token object","title":"wallet/getassetissuebyid"},{"location":"api/http/#walletgetassetissuelist","text":"Description: Query the list of all the tokens $ curl -X GET http://127.0.0.1:8090/wallet/getassetissuelist Parameter: No parameter Return: The list of all the tokens","title":"wallet/getassetissuelist"},{"location":"api/http/#walletgetpaginatedassetissuelist","text":"Description: Query the list of all the tokens by pagination $ curl -X POST http://127.0.0.1:8090/wallet/getpaginatedassetissuelist -d '{ \"offset\": 0, \"limit\": 10 }' Parameters: offset : The index of the start token limit : The amount of tokens per page Return: The list of tokens by pagination","title":"wallet/getpaginatedassetissuelist"},{"location":"api/http/#wallettransferasset","text":"Description: Transfer token $ curl -X POST http://127.0.0.1:8090/wallet/transferasset -d '{ \"owner_address\": \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"to_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"asset_name\": \"31303030303031\", \"amount\": 100 }' Parameters: owner_address : Owner address, default hexString to_address : To address, default hexString asset_name : Token id, default hexString amount : Token transfer amount permission_id : Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token","title":"wallet/transferasset"},{"location":"api/http/#walletparticipateassetissue","text":"Description: Participate a token $ curl -X POST http://127.0.0.1:8090/wallet/participateassetissue -d '{ \"to_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", \"amount\": 100, \"asset_name\": \"3230313271756265696a696e67\" }' Parameters: to_address : The issuer address of the token, default hexString owner_address : The participant address, default hexString amount : Participate token amount asset_name : Token id, default hexString permission_id : Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token","title":"wallet/participateassetissue"},{"location":"api/http/#walletcreateassetissue","text":"Description: Issue a token $ curl -X POST http://127.0.0.1:8090/wallet/createassetissue -d '{ \"owner_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"name\": \"0x6173736574497373756531353330383934333132313538\", \"abbr\": \"0x6162627231353330383934333132313538\", \"total_supply\": 4321, \"trx_num\": 1, \"num\": 1, \"start_time\": 1530894315158, \"end_time\": 1533894312158, \"description\": \"007570646174654e616d6531353330363038383733343633\", \"url\": \"007570646174654e616d6531353330363038383733343633\", \"free_asset_net_limit\": 10000, \"public_free_asset_net_limit\": 10000, \"frozen_supply\": { \"frozen_amount\": 1, \"frozen_days\": 2 } }' Parameters: owner_address : Owner address, default hexString name : Token name, default hexString abbr : Token name abbreviation, default hexString total_supply : Token total supply trx_num : Define the price by the ratio of trx_num/num num : Define the price by the ratio of trx_num/num start_time : ICO start time end_time : ICO end time description : Token description, default hexString url : Token official website url, default hexString free_asset_net_limit : Token free asset net limit public_free_asset_net_limit : Token public free asset net limit frozen_supply : Token staked supply permission_id : Optional, for multi-signature use Return: Transaction object Note: The unit of 'trx_num' is SUN","title":"wallet/createassetissue"},{"location":"api/http/#walletunfreezeasset","text":"Description: Unstake the staked token that is due $ curl -X POST http://127.0.0.1:8090/wallet/unfreezeasset -d '{ \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\" }' Parameters: - owner_address : Owner address, default hexString - permission_id : Optional, for multi-signature use Return: Transaction object","title":"wallet/unfreezeasset"},{"location":"api/http/#walletupdateasset","text":"Description: Update token information $ curl -X POST http://127.0.0.1:8090/wallet/updateasset -d '{ \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", \"description\": \"\", \"url\": \"\", \"new_limit\": 1000000, \"new_public_limit\": 100 }' Parameters: owner_address : The issuers address of the token, default hexString description : The description of token, default hexString url : The token's website url, default hexString new_limit : Each token holder's free bandwidth new_public_limit : The total free bandwidth of the token permission_id : Optional, for multi-signature use Return: Transaction object","title":"wallet/updateasset"},{"location":"api/http/#vote-and-sr","text":"The following are voting and SR related APIs: wallet/createwitness wallet/updatewitness wallet/listwitnesses wallet/withdrawbalance wallet/votewitnessaccount wallet/getBrokerage wallet/updateBrokerage wallet/getReward wallet/getnextmaintenancetime","title":"Vote and SR"},{"location":"api/http/#walletcreatewitness","text":"Description: Apply to become a super representative $ curl -X POST http://127.0.0.1:8090/wallet/createwitness -d '{ \"owner_address\": \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"url\": \"007570646174654e616d6531353330363038383733343633\" }' Parameters: owner_address : Owner address, default hexString url : Website url, default hexString permission_id : Optional, for multi-signature use Return: Transaction object","title":"wallet/createwitness"},{"location":"api/http/#walletupdatewitness","text":"Description: Update the super representative' website url $ curl -X POST http://127.0.0.1:8090/wallet/updatewitness -d '{ \"owner_address\": \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"update_url\": \"007570646174654e616d6531353330363038383733343633\" }' Parameters: owner_address : Owner address, default hexString update_url : Website url, default hexString permission_id : Optional, for multi-signature use Return: Transaction object","title":"wallet/updatewitness"},{"location":"api/http/#walletlistwitnesses","text":"Description: Qyery the list of the super representatives curl -X POST http://127.0.0.1:8090/wallet/listwitnesses Parameters: N/A Return:SR(Super Representatives) list","title":"wallet/listwitnesses"},{"location":"api/http/#walletwithdrawbalance","text":"Description: Withdraw reward to account balance for super representatives $ curl -X POST http://127.0.0.1:8090/wallet/withdrawbalance -d '{ \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\" }' Parameters: owner_address : Owner address, default hexString permission_id : Optional, for multi-signature use Return: Transaction object Note: It can only withdraw once for every 24 hours","title":"wallet/withdrawbalance"},{"location":"api/http/#walletvotewitnessaccount","text":"Description: Vote for super representatives $ curl -X POST http://127.0.0.1:8090/wallet/votewitnessaccount -d '{ \"owner_address\": \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"votes\": [ { \"vote_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"vote_count\": 5 } ] }' Parameters: owner_address : Owner address, default hexString votes : 'vote_address' stands for the address of the super representative you want to vote, default hexString, 'vote_count' stands for the number of votes you want to vote permission_id : Optional, for multi-signature use Return: Transaction object","title":"wallet/votewitnessaccount"},{"location":"api/http/#walletgetbrokerage","text":"Description: Query the ratio of brokerage of the super representative $ curl -X GET http://127.0.0.1:8090/wallet/getBrokerage -d ' { \"address\":\"41E552F6487585C2B58BC2C9BB4492BC1F17132CD0\"}' Parameter address : The address of the SR's account, default hexString Return: The ratio of brokerage of the SR","title":"wallet/getBrokerage"},{"location":"api/http/#walletupdatebrokerage","text":"Description: Update the ratio of brokerage $ curl -X POST http://127.0.0.1:8090/wallet/updateBrokerage -d ' { \"owner_address\":\"41E552F6487585C2B58BC2C9BB4492BC1F17132CD0\", \"brokerage\":30 }' Parameters: owner_address : The address of the SR's account, default hexString brokerage : The ratio of brokerage you want to update to Return: Transaction object","title":"wallet/updateBrokerage"},{"location":"api/http/#walletgetreward","text":"Description: Query unclaimed reward $ curl -X GET http://127.0.0.1:8090/wallet/getReward -d '{ \"address\":\"41E552F6487585C2B58BC2C9BB4492BC1F17132CD0\"}' Parameter address : The address of the voter's account, default hexString Return: Unclaimed reward","title":"wallet/getReward"},{"location":"api/http/#walletgetnextmaintenancetime","text":"Description: Query the time interval till the next vote round curl -X POST http://127.0.0.1:8090/wallet/getnextmaintenancetime Parameters: N/A Return: The time interval till the next vote round(unit: ms)","title":"wallet/getnextmaintenancetime"},{"location":"api/http/#proposals","text":"The following are proposal-related APIs: wallet/proposalcreate wallet/getproposalbyid wallet/listproposals wallet/proposalapprove wallet/proposaldelete wallet/getpaginatedproposallist","title":"Proposals"},{"location":"api/http/#walletproposalcreate","text":"Description: Create a proposal $ curl -X POST http://127.0.0.1:8090/wallet/proposalcreate -d '{ \"owner_address\": \"419844F7600E018FD0D710E2145351D607B3316CE9\", \"parameters\": [ { \"key\": 0, \"value\": 100000 }, { \"key\": 1, \"value\": 2 } ] }' Parameters: owner_address : Creator address parameters : Proposal parameters permission_id : Optional, for multi-signature use Return: Transaction object","title":"wallet/proposalcreate"},{"location":"api/http/#walletgetproposalbyid","text":"Description: Query a proposal by proposal id $ curl -X POST http://127.0.0.1:8090/wallet/getproposalbyid -d '{ \"id\": 1 }' Parameter id : Proposal id Return: The proposal information","title":"wallet/getproposalbyid"},{"location":"api/http/#walletlistproposals","text":"Description: Query all the proposals $ curl -X POST http://127.0.0.1:8090/wallet/listproposals Parameter: No parameter Return: The list of all the proposals","title":"wallet/listproposals"},{"location":"api/http/#walletproposalapprove","text":"Description: To approve a proposal $ curl -X POST http://127.0.0.1:8090/wallet/proposalapprove -d '{ \"owner_address\": \"419844F7600E018FD0D710E2145351D607B3316CE9\", \"proposal_id\": 1, \"is_add_approval\": true }' Parameters: owner_address : The address that makes the approve action, default hexString proposal_id : Proposal id is_add_approval : Whether to approve permission_id : Optional, for multi-signature use Return: Transaction object","title":"wallet/proposalapprove"},{"location":"api/http/#walletproposaldelete","text":"Description: To delete a proposal $ curl -X POST http://127.0.0.1:8090/wallet/proposaldelete -d '{ \"owner_address\": \"419844F7600E018FD0D710E2145351D607B3316CE9\", \"proposal_id\": 1 }' Parameters: owner_address : Owner address of the proposal, default hexString proposal_id : Proposal id permission_id : Optional, for multi-signature use Return: Transaction object","title":"wallet/proposaldelete"},{"location":"api/http/#walletgetpaginatedproposallist","text":"Description: Query the list of all the proposals by pagination $ curl -X POST http://127.0.0.1:8090/wallet/getpaginatedproposallist -d '{ \"offset\": 0, \"limit\": 10 }' Parameters: offset : The index of the start proposal limit : The amount of proposals per page Return: The list of proposals by pagination","title":"wallet/getpaginatedproposallist"},{"location":"api/http/#dex-exchange","text":"The following are the APIs related to decentralized exchanges: wallet/exchangecreate wallet/exchangeinject wallet/exchangewithdraw wallet/exchangetransaction wallet/getexchangebyid wallet/listexchanges wallet/getpaginatedexchangelist wallet/marketsellasset wallet/marketcancelorder wallet/getmarketorderbyaccount wallet/getmarketpairlist wallet/getmarketorderlistbypair wallet/getmarketpricebypair wallet/getmarketorderbyid","title":"DEX Exchange"},{"location":"api/http/#walletexchangecreate","text":"Description: Create an exchange pair $ curl -X POST http://127.0.0.1:8090/wallet/exchangecreate -d '{ \"owner_address\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", \"first_token_id\": \"token_a\", \"first_token_balance\": 100, \"second_token_id\": \"token_b\", \"second_token_balance\": 200 }' Parameters: owner_address : address first_token_id : The first token's id, default hexString first_token_balance : The first token's balance second_token_id : The second token's id, default hexString second_token_balance : The second token's balance permission_id : Optional, for multi-signature use Return: Transaction object Note: The unit of 'first_token_balance' and 'second_token_balance' is the smallest unit of the token","title":"wallet/exchangecreate"},{"location":"api/http/#walletexchangeinject","text":"Description: Inject funds for exchange pair $ curl -X POST http://127.0.0.1:8090/wallet/exchangeinject -d '{ \"owner_address\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", \"exchange_id\": 1, \"token_id\": \"74726f6e6e616d65\", \"quant\": 100 }' Parameters: owner_address : Owner address of the exchange pair, default hexString exchange_id : Exchange pair id token_id : Token id, default hexString quant : Token inject amount permission_id : Optional, for multi-signature use Return: Transaction object Note: The unit of 'quant' is the smallest unit of the token","title":"wallet/exchangeinject"},{"location":"api/http/#walletexchangewithdraw","text":"Description: Withdraw from exchange pair $ curl -X POST http://127.0.0.1:8090/wallet/exchangewithdraw -d '{ \"owner_address\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", \"exchange_id\": 1, \"token_id\": \"74726f6e6e616d65\", \"quant\": 100 }' Parameters: owner_address : Owner address of the exchange pair, default hexString exchange_id : Exchange pair id token_id : Token id, default hexString quant : Token withdraw amount permission_id : Optional, for multi-signature use Return: Transaction object Note: The unit of 'quant' is the smallest unit of the token","title":"wallet/exchangewithdraw"},{"location":"api/http/#walletexchangetransaction","text":"Description: Participate the transaction of exchange pair $ curl -X POST http://127.0.0.1:8090/wallet/exchangetransaction -d '{ \"owner_address\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", \"exchange_id\": 1, \"token_id\": \"74726f6e6e616d65\", \"quant\": 100, \"expected\": 10 }' Parameters: owner_address : Owner address of the exchange pair, default hexString exchange_id : Exchange pair id token_id : Token id, default hexString quant : Sell token amount expected : Expected token amount to get permission_id : Optional, for multi-signature use Return: Transaction object Note: The unit of 'quant' and 'expected' is the smallest unit of the token","title":"wallet/exchangetransaction"},{"location":"api/http/#walletgetexchangebyid","text":"Description: Query an exchange pair by exchange pair id $ curl -X POST http://127.0.0.1:8090/wallet/getexchangebyid -d '{ \"id\": 1 }' Parameter id: Exchange pair id Return: Exchange pair information","title":"wallet/getexchangebyid"},{"location":"api/http/#walletlistexchanges","text":"Description: Query the list of all the exchange pairs $ curl -X GET http://127.0.0.1:8090/wallet/listexchanges Parameter: No parameter Return: The list of all the exchange pairs","title":"wallet/listexchanges"},{"location":"api/http/#walletgetpaginatedexchangelist","text":"Description: Query the list of all the exchange pairs by pagination $ curl -X POST http://127.0.0.1:8090/wallet/getpaginatedexchangelist -d '{ \"offset\": 0, \"limit\": 10 }' Parameters: offset : The index of the start exchange pair limit : The amount of exchange pairs per page Return: The list of exchange pairs by pagination","title":"wallet/getpaginatedexchangelist"},{"location":"api/http/#walletmarketsellasset","text":"Description\uff1aCreate an market order curl -X POST http://127.0.0.1:8090/wallet/marketsellasset -d '{ \"owner_address\": \"4184894b42f66dce8cb84aec2ed11604c991351ac8\", \"sell_token_id\": \"5f\", \"sell_token_quantity\": 100, \"buy_token_id\": \"31303030303031\", \"buy_token_quantity\": 200 }' Parameters\uff1a owner_address \uff1aowner address, default hexString sell_token_id \uff1asell token id, default hexString sell_token_quantity \uff1asell token quantity buy_token_id \uff1abuy token id, default hexString buy_token_quantity \uff1abuy token quantity (min to receive) Return\uff1aTransaction object","title":"wallet/marketsellasset"},{"location":"api/http/#walletmarketcancelorder","text":"Description\uff1aCancel the order curl -X POST http://127.0.0.1:8090/wallet/marketcancelorder -d '{ \"owner_address\": \"4184894b42f66dce8cb84aec2ed11604c991351ac8\", \"order_id\": \"0a7af584a53b612bcff1d0fc86feab05f69bc4528f26a4433bb344d453bd6eeb\" }' Parameters\uff1a owner_address \uff1aowner address, default hexString order_id \uff1aorder id Return\uff1aTransaction object","title":"wallet/marketcancelorder"},{"location":"api/http/#walletgetmarketorderbyaccount","text":"Description\uff1aGet all orders for the account curl -X POST http://127.0.0.1:8090/wallet/getmarketorderbyaccount -d '{ \"value\": \"4184894b42f66dce8cb84aec2ed11604c991351ac8\" }' Parameters\uff1a value - owner address, default hexString Return\uff1aorder list","title":"wallet/getmarketorderbyaccount"},{"location":"api/http/#walletgetmarketpairlist","text":"Description\uff1aGet all trading pairs curl -X get http://127.0.0.1:8090/wallet/getmarketpairlist Parameters: N/A Return: makket pair list","title":"wallet/getmarketpairlist"},{"location":"api/http/#walletgetmarketorderlistbypair","text":"Description\uff1aGet all orders for the trading pair demo: curl -X POST http://127.0.0.1:8090/wallet/getmarketorderlistbypair -d '{ \"sell_token_id\": \"5f\" , \"buy_token_id\": \"31303030303031\" }' Parameters\uff1a sell_token_id \uff1asell token id, default hexString buy_token_id \uff1abuy token id, default hexString Return\uff1aorder list","title":"wallet/getmarketorderlistbypair"},{"location":"api/http/#walletgetmarketpricebypair","text":"Description\uff1aGet all prices for the trading pair curl -X POST http://127.0.0.1:8090/wallet/getmarketpricebypair -d '{ \"sell_token_id\": \"5f\" \"buy_token_id\": \"31303030303031\" }' Parameters\uff1a sell_token_id \uff1asell token id, default hexString buy_token_id \uff1abuy token id, default hexString Return\uff1aprice list","title":"wallet/getmarketpricebypair"},{"location":"api/http/#walletgetmarketorderbyid","text":"Description\uff1aGet all orders for the account curl -X POST http://127.0.0.1:8090/wallet/getmarketorderbyid -d '{ \"value\": \"orderid\" }' Parameters\uff1a value - order id, default hexString Return\uff1aorder","title":"wallet/getmarketorderbyid"},{"location":"api/http/#tronz-shielded-smart-contract","text":"The following are TRONZ anonymous smart contract related APIs: wallet/getexpandedspendingkey wallet/getakfromask wallet/getnkfromnsk wallet/getspendingkey wallet/getdiversifier wallet/getincomingviewingkey wallet/getzenpaymentaddress wallet/createshieldedtransactionwithoutspendauthsig wallet/scannotebyivk wallet/scanandmarknotebyivk wallet/scannotebyovk wallet/createshieldnullifier wallet/getshieldtransactionhash wallet/createshieldedtransaction wallet/getnewshieldedaddress wallet/createshieldedcontractparameters wallet/createshieldedcontractparameterswithoutask wallet/scanshieldedtrc20notesbyivk wallet/scanshieldedtrc20notesbyovk wallet/isshieldedtrc20contractnotespent wallet/gettriggerinputforshieldedtrc20contract wallet/getrcm wallet/getmerkletreevoucherinfo wallet/isspend wallet/createspendauthsig","title":"TRONZ Shielded Smart Contract"},{"location":"api/http/#walletgetexpandedspendingkey","text":"Description: To get expanded spending keys from spending key curl -X POST http://127.0.0.1:8090/wallet/getexpandedspendingkey -d '{ \"value\": \"06b02aaa00f230b0887ff57a6609d76691369972ac3ba568fe7a8a0897fce7c4\" }' Parameters: value:Spending key Return: Expanded spending keys, it consists of three keys: ask, nsk and ovk.","title":"wallet/getexpandedspendingkey"},{"location":"api/http/#walletgetakfromask","text":"Description: To get ak key from ask key curl -X POST http://127.0.0.1:8090/wallet/getakfromask -d '{ \"value\": \"653b3a3fdd40b60d2f53ba121df8840f6590384993f8fa9a0ecb0dfb23496604\" }' Parameters: value:Ask Return:Ak","title":"wallet/getakfromask"},{"location":"api/http/#walletgetnkfromnsk","text":"Description: To get nk key from nsk key curl -X POST http://127.0.0.1:8090/wallet/getnkfromnsk -d '{ \"value\": \"428ff3c9e101dc1fca08f7b0e3387b23b68016746ae565aefc19d112b696db01\" }' Parameters: value:Nsk Return:Nk","title":"wallet/getnkfromnsk"},{"location":"api/http/#walletgetspendingkey","text":"Description: To get spending key curl -X GET http://127.0.0.1:8090/wallet/getspendingkey Parameters: N/A Return:Spending key","title":"wallet/getspendingkey"},{"location":"api/http/#walletgetdiversifier","text":"Description: To get diversifier curl -X GET http://127.0.0.1:8090/wallet/getdiversifier Parameters: N/A Return: Diversifier","title":"wallet/getdiversifier"},{"location":"api/http/#walletgetincomingviewingkey","text":"Description: To get incoming viewing key curl -X POST http://127.0.0.1:8090/wallet/getincomingviewingkey -d '{ \"ak\":\"b443f1a303ef5837ba95750b48b6fef15f9c77f63a8c28c161bcd6613f423b5c\", \"nk\":\"632137e69179df3d10e252fcce85d13464c3163fe7a619edf8d43ebefa8162d9\" }' Parameters: ak :Ak nk :Nk Return:Incoming viewing key","title":"wallet/getincomingviewingkey"},{"location":"api/http/#walletgetzenpaymentaddress","text":"Description: To get payment address curl -X POST http://127.0.0.1:8090/wallet/getzenpaymentaddress -d '{ \"ivk\":\"8c7852e10862d8eec058635974f70f24c1f8d73819131bb5b54028d0a9408a03\", \"d\":\"736ba8692ed88a5473e009\" }' Parameters: ivk :Ivk d :D Return: Payment address","title":"wallet/getzenpaymentaddress"},{"location":"api/http/#walletcreateshieldedtransactionwithoutspendauthsig","text":"Description: To create shielded transaction without using ask $ curl -X POST http://127.0.0.1:8090/wallet/createshieldedtransactionwithoutspendauthsig -d '{ \"ivk\":\"8c7852e10862d8eec058635974f70f24c1f8d73819131bb5b54028d0a9408a03\", \"d\":\"736ba8692ed88a5473e009\" }' Parameters: transparent_from_address : Transparent sender's address from_amount : Send amount from transparent address ask : Ask nsk : Nsk ovk : Ovk shielded_receives : Shielded receive information shieldedSpends : Shielded spend information transparent_to_address : Transparent receiver's address to_amount : Send amount to transparent address Return: Transaction object","title":"wallet/createshieldedtransactionwithoutspendauthsig"},{"location":"api/http/#walletcreateshieldedtransactionwithoutspendauthsig_1","text":"Description: To create shielded transaction with using ask curl -X POST http://127.0.0.1:8090/wallet/createshieldedtransactionwithoutspendauthsig -d '{ \"ak\": \"bf051629fd8122cd9dd8591d72947b026c214cf7cdac1f68eff97179727d38e9\", \"nsk\": \"42963d26af8122204273fa3489d9efd6babf1f7179ff193c955a1f3d9c2df10c\", \"ovk\": \"bc9848a83966709655b12efadc9e978785858316045e0115a0e72567a9a2a823\", \"shielded_spends\": [ { \"note\": { \"value\": 500000000, \"payment_address\": \"ztron1jld8fmvujrz2vgkc867zuwklmewy4ypw0wtwgweqs2paee0uhc8f3azy90el770arksa2kunl02\", \"rcm\": \"723053bcbfecdf5da66c18ab0376476ef308c61b7abe891b2c01e903bcb87c0e\" }, \"alpha\": \"2608999c3a97d005a879ecdaa16fd29ae434fb67b177c5e875b0c829e6a1db04\", \"voucher\": { \"tree\": { \"left\": { \"content\": \"a3d5c9b2db9699f32afec5febbd5586ce9ff33a0bef6fee5691028313b8e1f6a\" }, \"parents\": [ { \"content\": \"d9c38484296b3aa8f5e8b59d418a3775e2bb414e75498ad352e4614f05aae548\" }, { \"content\": \"d0420777afdc4151c3f14fbe4c714d82dc15873edb1ca65ebb3887334a4bae15\" } ] }, \"rt\": \"fb1115d5ddd16c5427c3a608d6b5add5967e70f51c890307c6142083a2c28565\" }, \"path\": \"2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20d0420777afdc4151c3f14fbe4c714d82dc15873edb1ca65ebb3887334a4bae1520d9c38484296b3aa8f5e8b59d418a3775e2bb414e75498ad352e4614f05aae5482001000000000000000000000000000000000000000000000000000000000000000600000000000000\" } ], \"shielded_receives\": [ { \"note\": { \"value\": 40000000, \"payment_address\": \"ztron1wd46s6fwmz99gulqpxul6zffqtevzfpl93ng3s5834fhwf6e7w5l6zmjhmpvtwsc4wxa7dusmvr\", \"rcm\": \"ccced07d36641fc93cba33cddda7064cb82f6962a0bdf15a4240a4a742770e03\" } } ] }' Parameters: transparent_from_address : Transparent sender's address from_amount : Send amount from transparent address ak : Ak nsk : Nsk ovk : Ovk shielded_receives : Shielded receive information shieldedSpends : Shielded spend information transparent_to_address : Transparent receiver's address to_amount : Send amount to transparent address Return: Transaction object","title":"wallet/createshieldedtransactionwithoutspendauthsig"},{"location":"api/http/#walletscannotebyivk","text":"Description: To get all the notes by ivk $ curl -X POST http://127.0.0.1:8090/wallet/scannotebyivk -d '{ \"start_block_index\": 0, \"end_block_index\": 100, \"ivk\": \"80a481c3c739e54b4e0608090b3a1a6e9f8dce42346e95bf5a2d8a487bf45c05\" }' Parameters: start_block_index : The start block height, itself included end_block_index : The end block height, itself not included ivk : Incoming viewing key Return: Notes list Note: Range limit (end_block_index - start_block_index <= 1000)","title":"wallet/scannotebyivk"},{"location":"api/http/#walletscanandmarknotebyivk","text":"Description: To get all the notes with spent status by ivk $ curl -X POST http://127.0.0.1:8090/wallet/scanandmarknotebyivk -d '{ \"start_block_index\": 0, \"end_block_index\": 100, \"ivk\": \"80a481c3c739e54b4e0608090b3a1a6e9f8dce42346e95bf5a2d8a487bf45c05\", \"ak\": \"1d4f9b5551f4aa9443ceb263f0e208eb7e26080264571c5ef06de97a646fe418\", \"nk\": \"748522c7571a9da787e43940c9a474aa0c5c39b46c338905deb6726fa3678bdb\" }' Parameters: start_block_index : The start block height, itself included end_block_index : The end block height, itself not included ivk : Incoming viewing key ak : Ak key nk : Nk key Return: Notes list Note: Range limit (end_block_index - start_block_index <= 1000)","title":"wallet/scanandmarknotebyivk"},{"location":"api/http/#walletscannotebyovk","text":"Description: To get all the notes by ovk $ curl -X POST http://127.0.0.1:8090/wallet/scannotebyovk -d '{ \"start_block_index\": 0, \"end_block_index\": 100, \"ovk\": \"705145aa18cbe6c11d5d0011419a98f3d5b1d341eb4727f1315597f4bdaf8539\" }' Parameters: start_block_index : The start block height, itself included end_block_index : The end block height, itself not included ovk : Outgoing viewing key Return: Notes list Note: Range limit (end_block_index - start_block_index <= 1000)","title":"wallet/scannotebyovk"},{"location":"api/http/#walletcreateshieldnullifier","text":"Description: To create a shielded nullifier $ curl -X POST http://127.0.0.1:8090/wallet/createshieldnullifier -d '{ \"note\": { \"payment_address\": \"ztron1aqgauawtkelxfu2w6s48cwh0mchjt6kwpj44l4wym3pullx0294j4r4v7kpm75wnclzycsw73mq\", \"rcm\": \"74a16c1b27ec7fbf06881d9d35ddaab1554838b1bddcd54f6bd8a9fb4ba0b80a\", \"value\": 500000000 }, \"voucher\": { \"tree\": { \"left\": { \"content\": \"a4d763fae3fee78964ccdf7567ec3062c95a5b97825d731202d3dfa6cb01c143\" } }, \"rt\": \"7dc3652c2a16e8518a8be0e3e038f9d28c3eb96f13e8da8acc2a9b650702f33e\" }, \"ak\": \"a3e65d509b675aaa2aeda977ceff11eebd76218079b6f543d78a615e396ca129\", \"nk\": \"62cfda9bea09a53cf2a21022057913734a8458969e11e0bb9c59ead48fbce83e\" }' Parameters: note : Note information voucher : Voucher information ak : Ak nk : Nk Return: A shielded nullifier","title":"wallet/createshieldnullifier"},{"location":"api/http/#walletgetshieldtransactionhash","text":"Description: To get a shielded transaction hash curl -X POST http://127.0.0.1:8090/wallet/getshieldtransactionhash -d '{ \"txID\": \"de639a64497d86bb27e34a2953093a0cc488ec4c7bc9624ac5857d3799748595\", \"raw_data\": { \"contract\": [ { \"parameter\": { \"value\": { \"binding_signature\": \"2b8ae5e11ecad3e6946f54b7ad513bd8692a3edae72d29e266b28e47c9b37ccdb38e3b6433575694b6681136b1734f85afcfe672061d2ee7368755ad0b96a80b\", \"spend_description\": [ { \"value_commitment\": \"cbe1063adbe7e10919421fa6133f03150253913f5aff02d165e2c019cea4a869\", \"anchor\": \"fb1115d5ddd16c5427c3a608d6b5add5967e70f51c890307c6142083a2c28565\", \"nullifier\": \"93e329d464e1dbddc8bb4d2dcc939a796dfe11e985d4e9033a15edf0e3df4f35\", \"rk\": \"10c702d6dff1509502ee5acc0b01d4b4531b2ff53b0dd54488aea6031b5e6d16\", \"zkproof\": \"abf64b3beacfd873b1db764c3da9f739993518f3f740e761cb8af60682b7171892895c3ccfb550c3cf757e906dbf5313a3676b8226b0b84960f76a185c8d3fdfc3fa9c08479a704852d7b3dfeb913cf13e01c25657561e00a06c61e7c65b50b812902ddc4f17bfe2bcb2f247c2dc6132d0f0e0abcecc0332fdd99077af10d07bbdb88c4fd257948428e233c57f84eee8b2eeab2162c1aeccf2e1dfaa306d5803a8b2d281a549440fbd5a3657a830c1ca07a384cea446aa077b195b29b23023b1\" } ], \"receive_description\": [ { \"value_commitment\": \"f6d45db8ec5a1c8dbbde040b4ea138efbe8db2d0597ed2306ff3fdd0620b3c5a\", \"note_commitment\": \"ec3f5472ac8114a9a07987d1c2a0e1254504e352d9574971e77084293900312e\", \"epk\": \"719eeb5ebaeeccc55c9f0d73767aadf0c0513603400ccb50bd789637d984b8e6\", \"c_enc\": \"3a6c4fe0e79f5b23fed34a419c4728d0b26bca23180a22871743b0a9444c27663cf07c55a0ea6db504d70421768bf17384e180b2ad8b8be88ff5cf662c53a4ba086effc3a4b1df39265f71dfac884bff5a69e1dcdcae8aecf6ae443168ffab692a5c1e4908b415dd830dcf6432fae1c32461132080da74d6b83d3d00887eb2ce9965a749f8d8410ea4182969371ac2fd5e0e74d27d883492a08e6209cd9959d74bb67c2a9fe7faac5a4777f1bff19cf0b6398a2faa9b194bbb93d60f132f382f7d693a722e8cbca1da084ee7e0c371397419a7259d1fa0943078cfe5ea352e4b53907bb6c04ca8ad409fb0ae0b110a6b312200e21ab79d543ae7aeb16802cf87afdac1e8954038caa42818f4ca2847fd642360c098accfeeade4abd1cc9ca3315a4336be224ba3516973c7dae3f41875457236675993df38d3a544470c4f9335d77b005e6a9aec40fd881b34852ec9bbbcc3d24ee92930eae770a5462ce04c4e37b0524ef07e00e8d58c810d6aefb19fa7bc2c3a2fdfab6dd4fe73dbecc0795a280f9b7ca35cc8bc1062aed8e26bd81ba33c6f4c318974636f6d796723e77772ced3dbc1f42afec6fc9bb61f8beac704affea9baf2e2de226250c1d427c7d78b1eb1d239e1f3eb6af0f017b80541333f4fce17340048d826b9b0be8477c996ad8bfc3440dc686fdff6d0d63986db4d95962d7977289cbfd14c745de7c79d4dc0bcd220e5b4ced5b409e79142e0f336e44ca29a9a87f6f43707d8c4936e895236dd2b393a478a8bc27b1f682496ba84a0ddc549da06cb7855c4d8680dc66ac40240733b7f\", \"c_out\": \"50be6e77854d4c427b2af4f16e5275f0b0c206b3ea2d2a24ffb287ea356f323523354cd83d15e7c48e6f1fa103dfca3d49ca2263dbb0cd8bfb35d72cdcad1351de6fba7a30aea27184a68bcda19cc6da\", \"zkproof\": \"a4e6c50d5753092d005689922c2bdeafc98775bce59db840974163ace23c13fec18112e32aae1c39842c645ed172ad8fa277e63c1e3d6d7fb12eb15d56b573237b776f562a81d0e6be362d147d8604fdfec421482270ca82950de1883fda06e719f5d256d7a039769bffc570a1778d70c17295d1c0336a6ae0903d2460dc139a9563c2d40f37bffefa73003a55af1ff0861b6f79ef40099b6a0cb25ab3f40727210e4629647d0711abff125712a5f0d64fcb6e6a6b0b34478d7da0552b493a80\" } ] }, \"type_url\": \"type.googleapis.com/protocol.ShieldedTransferContract\" }, \"type\": \"ShieldedTransferContract\" } ], \"ref_block_bytes\": \"0d59\", \"ref_block_hash\": \"7356ce5c35d8265e\", \"expiration\": 1559237283000, \"timestamp\": 1559201285590 }, \"raw_data_hex\": \"0a020d5922087356ce5c35d8265e40b899a3ceb02d5a940b0833128f0b0a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412d50a1acb020a20cbe1063adbe7e10919421fa6133f03150253913f5aff02d165e2c019cea4a8691220fb1115d5ddd16c5427c3a608d6b5add5967e70f51c890307c6142083a2c285651a2093e329d464e1dbddc8bb4d2dcc939a796dfe11e985d4e9033a15edf0e3df4f35222010c702d6dff1509502ee5acc0b01d4b4531b2ff53b0dd54488aea6031b5e6d162ac001abf64b3beacfd873b1db764c3da9f739993518f3f740e761cb8af60682b7171892895c3ccfb550c3cf757e906dbf5313a3676b8226b0b84960f76a185c8d3fdfc3fa9c08479a704852d7b3dfeb913cf13e01c25657561e00a06c61e7c65b50b812902ddc4f17bfe2bcb2f247c2dc6132d0f0e0abcecc0332fdd99077af10d07bbdb88c4fd257948428e233c57f84eee8b2eeab2162c1aeccf2e1dfaa306d5803a8b2d281a549440fbd5a3657a830c1ca07a384cea446aa077b195b29b23023b122c2070a20f6d45db8ec5a1c8dbbde040b4ea138efbe8db2d0597ed2306ff3fdd0620b3c5a1220ec3f5472ac8114a9a07987d1c2a0e1254504e352d9574971e77084293900312e1a20719eeb5ebaeeccc55c9f0d73767aadf0c0513603400ccb50bd789637d984b8e622c4043a6c4fe0e79f5b23fed34a419c4728d0b26bca23180a22871743b0a9444c27663cf07c55a0ea6db504d70421768bf17384e180b2ad8b8be88ff5cf662c53a4ba086effc3a4b1df39265f71dfac884bff5a69e1dcdcae8aecf6ae443168ffab692a5c1e4908b415dd830dcf6432fae1c32461132080da74d6b83d3d00887eb2ce9965a749f8d8410ea4182969371ac2fd5e0e74d27d883492a08e6209cd9959d74bb67c2a9fe7faac5a4777f1bff19cf0b6398a2faa9b194bbb93d60f132f382f7d693a722e8cbca1da084ee7e0c371397419a7259d1fa0943078cfe5ea352e4b53907bb6c04ca8ad409fb0ae0b110a6b312200e21ab79d543ae7aeb16802cf87afdac1e8954038caa42818f4ca2847fd642360c098accfeeade4abd1cc9ca3315a4336be224ba3516973c7dae3f41875457236675993df38d3a544470c4f9335d77b005e6a9aec40fd881b34852ec9bbbcc3d24ee92930eae770a5462ce04c4e37b0524ef07e00e8d58c810d6aefb19fa7bc2c3a2fdfab6dd4fe73dbecc0795a280f9b7ca35cc8bc1062aed8e26bd81ba33c6f4c318974636f6d796723e77772ced3dbc1f42afec6fc9bb61f8beac704affea9baf2e2de226250c1d427c7d78b1eb1d239e1f3eb6af0f017b80541333f4fce17340048d826b9b0be8477c996ad8bfc3440dc686fdff6d0d63986db4d95962d7977289cbfd14c745de7c79d4dc0bcd220e5b4ced5b409e79142e0f336e44ca29a9a87f6f43707d8c4936e895236dd2b393a478a8bc27b1f682496ba84a0ddc549da06cb7855c4d8680dc66ac40240733b7f2a5050be6e77854d4c427b2af4f16e5275f0b0c206b3ea2d2a24ffb287ea356f323523354cd83d15e7c48e6f1fa103dfca3d49ca2263dbb0cd8bfb35d72cdcad1351de6fba7a30aea27184a68bcda19cc6da32c001a4e6c50d5753092d005689922c2bdeafc98775bce59db840974163ace23c13fec18112e32aae1c39842c645ed172ad8fa277e63c1e3d6d7fb12eb15d56b573237b776f562a81d0e6be362d147d8604fdfec421482270ca82950de1883fda06e719f5d256d7a039769bffc570a1778d70c17295d1c0336a6ae0903d2460dc139a9563c2d40f37bffefa73003a55af1ff0861b6f79ef40099b6a0cb25ab3f40727210e4629647d0711abff125712a5f0d64fcb6e6a6b0b34478d7da0552b493a802a402b8ae5e11ecad3e6946f54b7ad513bd8692a3edae72d29e266b28e47c9b37ccdb38e3b6433575694b6681136b1734f85afcfe672061d2ee7368755ad0b96a80b70d68b8ebdb02d\" }' Parameter transaction: Transaction object Return: a shielded transaction hash","title":"wallet/getshieldtransactionhash"},{"location":"api/http/#walletcreateshieldedtransaction","text":"Description: To create shielded transaction Please refer to The Demo Parameters: transparent_from_address : Transparent sender's address from_amount : Send amount from transparent address ask : Ask nsk : Nsk ovk : Ovk shielded_receives : Shielded receive information shieldedSpends : Shielded spend information transparent_to_address : Transparent receiver's address to_amount : Send amount to transparent address Return: Transaction object","title":"wallet/createshieldedtransaction"},{"location":"api/http/#walletgetnewshieldedaddress","text":"Description: To get new shieldedAddress curl -X GET http://127.0.0.1:8090/wallet/getnewshieldedaddress Parameters: N/A Return: Spending key Ask key Nsk key Outgoing viewing key Ak Key Nk key incoming viewing key Diversifier pkD payment address","title":"wallet/getnewshieldedaddress"},{"location":"api/http/#walletcreateshieldedcontractparameters","text":"Description: create the shielded TRC-20 transaction parameters, which has three types: mint, transfer and burn demo: curl -X POST http://127.0.0.1:8090/wallet/createshieldedcontractparameters -d '{ \"ask\": \"0f63eabdfe2bbfe08012f6bb2db024e6809c16e8ed055aa41a6095424f192005\", \"nsk\": \"cd43d722fd4b6b01f19449ea826c3e935609648520fcc2a95c0026f0fa9ee404\", \"ovk\": \"1797de3b7f33cafffe3fe18c6b43ec6760add2ad81b10978d1fca5290497ede9\", \"from_amount\": \"5000\", \"shielded_receives\": { \"note\": { \"value\": 50, \"payment_address\": \"ztron15js0jkuxczt8caq5hp59rnh6rgf34sek7vqn9u6ljelxv4nuzz2x9qe3ffm2wzz6ck53yxyhxs6\", \"rcm\": \"74baec30dfac8ed59968955ff245ae002009005194e5b824c35ab88c52e5170e\" } }, \"shielded_TRC20_contract_address\": \"41f3392eaa7d38749176e0671dbc6912f8ef956943\" }' Parameters: ask : Ask nsk : Nsk ovk : Outgoing view key from_amount : the amount for mint, which is scaled by scalingfactor with note value , namely from_amount = value * scalingFactor . In the above example, the value of scalingFactor is 100 shielded_receives : the shielded notes to be created shielded_TRC20_contract_address : shielded TRC-20 contract address Return: the shielded TRC-20 transaction parameters Note: the input parameters will differ according to the variety of shielded TRC-20 transaction type","title":"wallet/createshieldedcontractparameters"},{"location":"api/http/#walletcreateshieldedcontractparameterswithoutask","text":"Description: create the shielded TRC-20 transaction parameters without Ask, which has three types: mint, transfer and burn demo: curl -X POST http://127.0.0.1:8090/wallet/createshieldedcontractparameterswithoutask -d '{ \"ovk\": \"cd361834b3adc06f130de24f7d0c18f92a093cc885d9ce492cc6c02071f7a4f0\", \"from_amount\": \"5000\", \"shielded_receives\": { \"note\": { \"value\": 50, \"payment_address\": \"ztron13lvfnt4rau4ad9mmgztd3aftw49e3amz8gm2kvyzrsaw0ugz2grxwkvcfys5e2gkchj7cnnetjz\", \"rcm\": \"499e73f2f8aaf05fac41a35b8343bde27f6629cbe66d35da5364a99b94a55a06\" } }, \"shielded_TRC20_contract_address\": \"41f3392eaa7d38749176e0671dbc6912f8ef956943\" }' Parameters: ovk : Outgoing view key from_amount : the amount for mint, which is scaled by scalingfactor with note value , namely from_amount = value * scalingFactor . In the above example, the value of scalingFactor is 100 shielded_receives : the shielded notes to be created shielded_TRC20_contract_address : shielded TRC-20 contract address Return: the shielded TRC-20 transaction parameters Note: the input parameters will differ according to the variety of shielded TRC-20 transaction type","title":"wallet/createshieldedcontractparameterswithoutask"},{"location":"api/http/#walletscanshieldedtrc20notesbyivk","text":"Description: scan the shielded TRC-20 notes by ivk and mark their status of whether spent demo: curl -X POST http://127.0.0.1:8090/wallet/scanshieldedtrc20notesbyivk -d '{ \"start_block_index\": 9200, \"end_block_index\": 9240, \"shielded_TRC20_contract_address\": \"41274fc7464fadac5c00c893c58bce6c39bf59e4c7\", \"ivk\": \"9f8e74bb3d7188a2781dc1db38810c6914eef4570a79e8ec8404480948e4e305\", \"ak\":\"8072d9110c9de9d9ade33d5d0f5890a7aa65b0cde42af7816d187297caf2fd64\", \"nk\":\"590bf33f93f792be659fd404df91e75c3b08d38d4e08ee226c3f5219cf598f14\" }' Parameters: start_block_index : the start block index, inclusive end_block_index : the end block index, exclusive shielded_TRC20_contract_address : shielded TRC-20 contract address ivk : Incoming viewing key ak : Ak key nk : Nk key Return: notes list Note: block limit\uff08end_block_index - start_block_index <= 1000\uff09","title":"wallet/scanshieldedtrc20notesbyivk"},{"location":"api/http/#walletscanshieldedtrc20notesbyovk","text":"Description: scan the shielded TRC-20 notes by ovk demo: curl -X POST http://127.0.0.1:8090/wallet/scanshieldedtrc20notesbyovk -d '{ \"start_block_index\": 9200, \"end_block_index\": 9240, \"shielded_TRC20_contract_address\": \"41274fc7464fadac5c00c893c58bce6c39bf59e4c7\", \"ovk\": \"0ff58efd75e083fe4fd759c8701e1c8cb6961c4297a12b2c800bdb7b2bcab889\" }' Parameters: start_block_index : start block index, inclusive end_block_index : end block index, exclusive shielded_TRC20_contract_address : shielded TRC-20 contract address ovk : Outgoing viewing key Return: notes list Note: block limit\uff08end_block_index - start_block_index <= 1000\uff09","title":"wallet/scanshieldedtrc20notesbyovk"},{"location":"api/http/#walletisshieldedtrc20contractnotespent","text":"Description: check the status whether the specified shielded TRC-20 note is spent Parameters: note : the specified note ak : Ak nk : Nk position : the leaf position index of note commitment in the Merkle tree shielded_TRC20_contract_address : the shielded TRC-20 contract address Return: note status Note: the value in note is the scaled value by scalingFactor set in the shielded TRC-20 contract, namely real_amount = value * scalingFactor .","title":"wallet/isshieldedtrc20contractnotespent"},{"location":"api/http/#walletgettriggerinputforshieldedtrc20contract","text":"Description: get the trigger input data of shielded TRC-20 contract for the shielded TRC-20 parameters without spend authority signature. demo: curl -X POST http://127.0.0.1:8090/wallet/gettriggerinputforshieldedtrc20contract -d '{ \"shielded_TRC20_Parameters\": {\"spend_description\": [{\"value_commitment\": \"e3fcc8609ff6a4b00b77a00ef624f305cec5f55cc7312ff5526d0b3057f2ef9e\",\"anchor\": \"4c9cbebece033dc1d253b93e4a3682187daae4f905515761d10287b801e69816\",\"nullifier\": \"74edce8798a3976ee41e045bb666f3a121c27235b0f1b44b3456d2c84bc725dc\",\"rk\": \"9dcf4254aa7c4fb7c8bc6956d4b0c7c6c87c37a2552e7bf4e60c12cb5bc6c8cd\",\"zkproof\": \"9926045cd1442a7d20153e6abda9f77a6526895f0a29a57cb1bc76ef6b7cacef2d0f4c94aa97c3acacdb95cabb065057b7edb4cbea098149a8aa7114a6a6b340c58007ac64b64e592eb18fdd299de5962a2a32ab0caebb2ab198704c751a9d0e143d68a50257d7c9e2230a7420fa46450299fd167141367e201726532d8e815413d8571d6c8c12937674dec92caf1f4583ebe560ac4c7eba290deee0a1c0da5f72c0b9df89fb3b338c683b654b3dc2373a4c2a4fef7f4fa489b44405fb7d2bfb\"}],\"binding_signature\": \"11e949887d9ec92eb32c78f0bc48afdc9a16a2ecbd5a0eca1be070fb900eeda347918bd6e9521d4baf1f74963bee0c1956559623a9e7cbc886941b227341ea06\",\"message_hash\": \"7e6a00736c4f9e0036cb74c7fa3b1e3cd8f6bf0f038edeb03b668c4c5536a357\",\"parameter_type\": \"burn\"}, \"spend_authority_signature\": [ { \"value\": \"eeaaecd725ac80ec398b95cf188b769c1be66cc8e76e6c90843b7f23818704595719ce8bf694ffb8cd7aaa8739d50fe8eea7ba39d5026c4b019c973185ca7201\" } ], \"amount\": \"6000\", \"transparent_to_address\": \"4140cd765f8e637a2bbe00f9bc458f6b21eb0e648f\" }' Parameters: shielded_TRC20_Parameters : the generated shielded TRC-20 parameters spend_authority_signature : the spend authority signatures amount : the amount transparent_to_address : the receiver for the burn operation. Return: the input data for triggering shielded TRC-20 contract.","title":"wallet/gettriggerinputforshieldedtrc20contract"},{"location":"api/http/#walletgetrcm","text":"Description: To get a random commitment trapdoor curl -X GET http://127.0.0.1:8090/wallet/getrcm Parameters: N/A Return:rcm","title":"wallet/getrcm"},{"location":"api/http/#walletgetmerkletreevoucherinfo","text":"Description: To get a merkle tree information of a note $ curl -X POST http://127.0.0.1:8090/wallet/getmerkletreevoucherinfo -d '{ \"out_points\":[{ \"hash\":\"185b3e085723f5862b3a3c3cf54d52f5c1eaf2541e3a1e0ecd08bc12cd958d74\", \"index\":0 }] }' Parameter out_points : Note information Return: A merkle tree of a note","title":"wallet/getmerkletreevoucherinfo"},{"location":"api/http/#walletisspend","text":"Description: To check whether a note is spent or not $ curl -X POST http://127.0.0.1:8090/wallet/isspend -d '{ \"ak\": \"a3e65d509b675aaa2aeda977ceff11eebd76218079b6f543d78a615e396ca129\", \"nk\": \"62cfda9bea09a53cf2a21022057913734a8458969e11e0bb9c59ead48fbce83e\", \"note\": { \"payment_address\": \"ztron1aqgauawtkelxfu2w6s48cwh0mchjt6kwpj44l4wym3pullx0294j4r4v7kpm75wnclzycsw73mq\", \"rcm\": \"74a16c1b27ec7fbf06881d9d35ddaab1554838b1bddcd54f6bd8a9fb4ba0b80a\", \"value\": 500000000 }, \"txid\": \"7d09e471bb047d3ac044d5d6691b3721a2dddbb683ac02c207fbe78af6302463\", \"index\": 1 }' Parameters: ak : Ak key nk : Nk key note : Note information txid : Transaction id index : Note index Return: Note status","title":"wallet/isspend"},{"location":"api/http/#walletcreatespendauthsig","text":"Description: To create a signature for a transaction $ curl -X POST http://127.0.0.1:8090/wallet/createspendauthsig -d '{ \"ask\": \"e3ebcba1531f6d9158d9c162660c5d7c04dadf77d85d7436a9c98b291ff69a09\", \"tx_hash\": \"3b78fee6e956f915ffe082284c5f18640edca9c57a5f227e5f7d7eb65ad61502\", \"alpha\": \"2608999c3a97d005a879ecdaa16fd29ae434fb67b177c5e875b0c829e6a1db04\" }' Parameters: ask : Ask key tx_hash : Transaction hash alpha : Alpha Return: A signature","title":"wallet/createspendauthsig"},{"location":"api/http/#pending-pool","text":"The following are Pending Pool related APIs: wallet/gettransactionfrompending wallet/gettransactionlistfrompending wallet/getpendingsize","title":"Pending Pool"},{"location":"api/http/#walletgettransactionfrompending","text":"Get transaction details from the pending pool curl -X POST http://127.0.0.1:8090/wallet/gettransactionfrompending -d '{ \"value\": \"txId\" }' Parameters: value: transaction id Return: Transaction details","title":"wallet/gettransactionfrompending"},{"location":"api/http/#walletgettransactionlistfrompending","text":"Get transaction list information from pending pool curl -X get http://127.0.0.1:8090/wallet/gettransactionlistfrompending Parameters: N/A Return: Pending transaction IDs in the pool","title":"wallet/gettransactionlistfrompending"},{"location":"api/http/#walletgetpendingsize","text":"Get the size of the pending pool queue curl -X get http://127.0.0.1:8090/wallet/getpendingsize Parameters: N/A Return:pending pool size","title":"wallet/getpendingsize"},{"location":"api/http/#fullnode-solidity-http-api","text":"","title":"FullNode Solidity HTTP API"},{"location":"api/http/#account-resources_1","text":"","title":"Account Resources"},{"location":"api/http/#walletsoliditygetaccount","text":"Description: Query an account information curl -X POST http://127.0.0.1:8091/walletsolidity/getaccount -d '{\"address\": \"41E552F6487585C2B58BC2C9BB4492BC1F17132CD0\"}' Parameters: address - Account to query, default hexString Return: Account object","title":"walletsolidity/getaccount"},{"location":"api/http/#walletsoliditygetdelegatedresource","text":"Description: Query the energy delegation information curl -X POST http://127.0.0.1:8091/walletsolidity/getdelegatedresource -d ' { \"fromAddress\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", \"toAddress\": \"41c6600433381c731f22fc2b9f864b14fe518b322f\" }' Parameters: fromAddress : Energy from address, default hexString toAddress : Energy to address, default hexString Return: Energy delegation information list, the elements of the list is DelegatedResource","title":"walletsolidity/getdelegatedresource"},{"location":"api/http/#walletsoliditygetdelegatedresourceaccountindex","text":"Description: Query the energy delegation index by an account curl -X POST http://127.0.0.1:8091/walletsolidity/getdelegatedresourceaccountindex -d ' { \"value\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", }' Parameters: value : Address, default hexString Return: DelegatedResourceAccountIndex of the address","title":"walletsolidity/getdelegatedresourceaccountindex"},{"location":"api/http/#walletsoliditygetaccountbyid","text":"Description: Query an account information by account id curl -X POST http://127.0.0.1:8091/walletsolidity/getaccountbyid -d '{\"account_id\":\"6161616162626262\"}' Parameters: account_id - Account id, default hexString Return: Account object","title":"walletsolidity/getaccountbyid"},{"location":"api/http/#walletsoliditygetavailableunfreezecount","text":"Description:Remaining times of executing unstake operation in Stake2.0 curl -X POST http://127.0.0.1:8090/walletsolidity/getavailableunfreezecount -d '{ \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\", \"visible\": true } ' Parameters: owner_address : Account address Return:Remaining times of available unstaking.","title":"walletsolidity/getavailableunfreezecount"},{"location":"api/http/#walletsoliditygetcanwithdrawunfreezeamount","text":"Description: Query the withdrawable balance at the specified timestamp In Stake2.0 curl -X POST http://127.0.0.1:8090/walletsolidity/getcanwithdrawunfreezeamount -d '{ \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\", \"timestamp\": 1667977444000, \"visible\": true } ' Parameters: owner_address : Account address timestamp : query cutoff timestamp, in milliseconds. Return: Withdrawable balance, unit is sun.","title":"walletsolidity/getcanwithdrawunfreezeamount"},{"location":"api/http/#walletsoliditygetcandelegatedmaxsize","text":"Description: In Stake2.0, query the amount of delegatable resources share of the specified resource type for an address, unit is sun. curl -X POST http://127.0.0.1:8090/walletsolidity/getcandelegatedmaxsize -d '{ \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\", \"type\": 0, \"visible\": true } ' Parameters: owner_address : Account address type : Resource type, 0 is bandwidth, 1 is energy Return: The amount of delegatable resource share, unit is sun.","title":"walletsolidity/getcandelegatedmaxsize"},{"location":"api/http/#walletsoliditygetdelegatedresourcev2","text":"In Stake2.0, query the detail of resource share delegated from fromAddress to toAddress curl -X POST http://127.0.0.1:8090/walletsolidity/getdelegatedresourcev2 -d '{ \"fromAddress\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\", \"toAddress\": \"TPswDDCAWhJAZGdHPidFg5nEf8TkNToDX1\", \"visible\": true } ' Parameters: fromAddress : resource from address, default hexString toAddress : resource to address Return: Resource delegation list","title":"walletsolidity/getdelegatedresourcev2"},{"location":"api/http/#walletsoliditygetdelegatedresourceaccountindexv2","text":"In Stake2.0, query the resource delegation index by an account. Two lists will return, one is the list of addresses the account has delegated its resources( toAddress ), and the other is the list of addresses that have delegated resources to the account( fromAddress ). curl -X POST http://127.0.0.1:8090/walletsolidity/getdelegatedresourceaccountindexv2 -d '{ \"value\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\", \"visible\": true } ' Parameters: value : account address Return: Two lists will return, one is the list of addresses the account has delegated its resources( toAddress ), and the other is the list of addresses that have delegated resources to the account( fromAddress ).","title":"walletsolidity/getdelegatedresourceaccountindexv2"},{"location":"api/http/#voting-srs","text":"","title":"Voting &amp; SRs"},{"location":"api/http/#walletsoliditylistwitnesses","text":"Description: Query the list of super representatives curl -X POST http://127.0.0.1:8091/walletsolidity/listwitnesses Parameters: N/A Return: List of all super representatives","title":"walletsolidity/listwitnesses"},{"location":"api/http/#trc10-token_1","text":"","title":"TRC10 Token"},{"location":"api/http/#walletsoliditygetassetissuelist","text":"Description: Query the list of all tokens curl -X POST http://127.0.0.1:8091/walletsolidity/getassetissuelist Parameters: N/A Return: The list of all tokens","title":"walletsolidity/getassetissuelist"},{"location":"api/http/#walletsoliditygetpaginatedassetissuelist","text":"Description: Query the list of all the tokens by pagination curl -X POST http://127.0.0.1:8091/walletsolidity/getpaginatedassetissuelist -d '{\"offset\": 0, \"limit\":10}' Parameters: - offset : The index of the start token - limit : The amount of tokens per page Return: List of tokens","title":"walletsolidity/getpaginatedassetissuelist"},{"location":"api/http/#walletsoliditygetassetissuebyname","text":"Description: Query a token by token name curl -X POST http://127.0.0.1:8091/walletsolidity/getassetissuebyname -d '{\"value\": \"44756354616E\"}' Parameters: value - Token name, default hexString Return: Token object Note: Since Odyssey-v3.2, getassetissuebyid or getassetissuelistbyname is recommended, as since v3.2, token name can be repeatable. If the token name you query is not unique, this api will throw out an error.","title":"walletsolidity/getassetissuebyname"},{"location":"api/http/#walletsoliditygetassetissuelistbyname","text":"Description: Query the token list by name curl -X POST http://127.0.0.1:8091/walletsolidity/getassetissuelistbyname -d '{\"value\": \"44756354616E\"}' Parameters: value - Token name, default hexString Return: Token list","title":"walletsolidity/getassetissuelistbyname"},{"location":"api/http/#walletsoliditygetassetissuebyid","text":"Description: Query a token by token id curl -X POST http://127.0.0.1:8091/walletsolidity/getassetissuebyid -d '{\"value\": \"1000001\"}' Parameters: value - Token id Return: Token object","title":"walletsolidity/getassetissuebyid"},{"location":"api/http/#blocks","text":"","title":"Blocks"},{"location":"api/http/#walletsoliditygetnowblock","text":"Description: Query the latest block information curl -X POST http://127.0.0.1:8091/walletsolidity/getnowblock Parameters: N/A Return: The latest block from solidityNode","title":"walletsolidity/getnowblock"},{"location":"api/http/#walletsoliditygetblockbynum","text":"Description: Query a block information by block height curl -X POST http://127.0.0.1:8091/walletsolidity/getblockbynum -d '{\"num\" : 100}' Parameters: num - Block height Return: Block information","title":"walletsolidity/getblockbynum"},{"location":"api/http/#walletsoliditygetblockbyid","text":"Description: Query a block information by block id curl -X POST http://127.0.0.1:8091/walletsolidity/getblockbyid-d '{\"value\": \"0000000000038809c59ee8409a3b6c051e369ef1096603c7ee723c16e2376c73\"}' Parameters: value - Block id Return: The block object","title":"walletsolidity/getblockbyid"},{"location":"api/http/#walletsoliditygetblockbylimitnext","text":"Description: Query a list of blocks by range curl -X POST http://127.0.0.1:8091/walletsolidity/getblockbylimitnext -d '{\"startNum\": 1, \"endNum\": 2}' Parameters: startNum : The start block height, inclusive endNum : The end block height, exclusive Return: List of blocks","title":"walletsolidity/getblockbylimitnext"},{"location":"api/http/#walletsoliditygetblockbylatestnum","text":"Description: Query the latest few blocks curl -X POST http://127.0.0.1:8091/walletsolidity/getblockbylatestnum -d '{\"num\": 5}' Parameters: num - The number of blocks expected to return Return: List of blocks","title":"walletsolidity/getblockbylatestnum"},{"location":"api/http/#walletgetnodeinfo_1","text":"Description: Query the current node information curl -X GET http://127.0.0.1:8091/wallet/getnodeinfo Parameters: N/A Return: NodeInfo of the current node","title":"wallet/getnodeinfo"},{"location":"api/http/#transactions","text":"","title":"Transactions"},{"location":"api/http/#walletsoliditygettransactionbyid","text":"Description: Query an transaction information by transaction id curl -X POST http://127.0.0.1:8091/walletsolidity/gettransactionbyid -d '{\"value\" : \"309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2\"}' Parameters: value - Transaction id Return: Transaction information","title":"walletsolidity/gettransactionbyid"},{"location":"api/http/#walletsoliditygettransactioncountbyblocknum","text":"Description: Query th the number of transactions in a specific block curl -X POST http://127.0.0.1:8091/walletsolidity/gettransactioncountbyblocknum -d '{\"num\" : 100}' Parameters: num - Block height Return: The number of transactions","title":"walletsolidity/gettransactioncountbyblocknum"},{"location":"api/http/#walletsoliditygettransactioninfobyid","text":"Description: Query the transaction fee, block height by transaction id curl -X POST http://127.0.0.1:8091/walletsolidity/gettransactioninfobyid -d '{\"value\" : \"309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2\"}' Parameters: value - Transaction id Return: Transaction fee, block height and the time of creation","title":"walletsolidity/gettransactioninfobyid"},{"location":"api/http/#walletsoliditygettransactioninfobyblocknum","text":"Description: Query the list of transaction information in a specific block curl -X POST http://127.0.0.1:8091/walletsolidity/gettransactioninfobyblocknum -d '{\"num\" : 100}' Parameters: num - Block height Return: The list of transaction information inside the queried block","title":"walletsolidity/gettransactioninfobyblocknum"},{"location":"api/http/#dex-exchanges","text":"","title":"DEX Exchanges"},{"location":"api/http/#walletsoliditygetexchangebyid","text":"Description: Query an exchange pair by exchange pair id curl -X POST http://127.0.0.1:8091/walletsolidity/getexchangebyid -d {\"id\":1} Parameters: id: Exchange pair id Return: Exchange pair information","title":"walletsolidity/getexchangebyid"},{"location":"api/http/#walletsoliditylistexchanges","text":"Description: Query the list of all the exchange pairs curl -X POST http://127.0.0.1:8091/walletsolidity/listexchanges Parameters: N/A Return: The list of all the exchange pairs","title":"walletsolidity/listexchanges"},{"location":"api/http/#tronz-shielded-smart-contract_1","text":"","title":"TRONZ Shielded Smart Contract"},{"location":"api/http/#walletsoliditygetmerkletreevoucherinfo","text":"Description: Get the Merkle tree information of a note curl -X POST http://127.0.0.1:8090/walletsolidity/getmerkletreevoucherinfo -d '{ \"out_points\":[{ \"hash\":\"185b3e085723f5862b3a3c3cf54d52f5c1eaf2541e3a1e0ecd08bc12cd958d74\", \"index\":0 }] }' Parameters: out_points : Note information Return: Merkle tree information of a note","title":"walletsolidity/getmerkletreevoucherinfo"},{"location":"api/http/#walletsolidityscannotebyivk","text":"Description: Get all notes related to ivk curl -X POST http://127.0.0.1:8090/walletsolidity/scannotebyivk -d '{ \"start_block_index\": 0, \"end_block_index\": 100, \"ivk\": \"80a481c3c739e54b4e0608090b3a1a6e9f8dce42346e95bf5a2d8a487bf45c05\" }' Parameters: start_block_index : The start block height, inclusive end_block_index : The end block height, exclusive ivk : Incoming viewing key Return: Notes list Note: Range limit (end_block_index - start_block_index <= 1000)","title":"walletsolidity/scannotebyivk"},{"location":"api/http/#walletsolidityscanandmarknotebyivk","text":"Description: Get all notes with spent status related to ivk curl -X POST http://127.0.0.1:8090/walletsolidity/scanandmarknotebyivk -d '{ \"start_block_index\": 0, \"end_block_index\": 100, \"ivk\": \"80a481c3c739e54b4e0608090b3a1a6e9f8dce42346e95bf5a2d8a487bf45c05\", \"ak\": \"1d4f9b5551f4aa9443ceb263f0e208eb7e26080264571c5ef06de97a646fe418\", \"nk\": \"748522c7571a9da787e43940c9a474aa0c5c39b46c338905deb6726fa3678bdb\" }' Parameters: start_block_index : The start block height, inclusive end_block_index : The end block height, exclusive ivk : Incoming viewing key ak : Ak key nk : Nk key Return: Notes list Note: Range limit (end_block_index - start_block_index <= 1000)","title":"walletsolidity/scanandmarknotebyivk"},{"location":"api/http/#walletsolidityscannotebyovk","text":"Description: Query all notes related to ovk curl -X POST http://127.0.0.1:8090/walletsolidity/scannotebyovk -d '{ \"start_block_index\": 0, \"end_block_index\": 100, \"ovk\": \"705145aa18cbe6c11d5d0011419a98f3d5b1d341eb4727f1315597f4bdaf8539\" }' Parameters: start_block_index : The start block height, inclusive end_block_index : The end block height, exclusive ovk : Outgoing viewing key Return: Notes list Note: Range limit (end_block_index - start_block_index <= 1000)","title":"walletsolidity/scannotebyovk"},{"location":"api/http/#walletsolidityisspend","text":"Description: Check whether a note has been spent curl -X POST http://127.0.0.1:8090/walletsolidity/isspend -d '{ \"ak\": \"a3e65d509b675aaa2aeda977ceff11eebd76218079b6f543d78a615e396ca129\", \"nk\": \"62cfda9bea09a53cf2a21022057913734a8458969e11e0bb9c59ead48fbce83e\", \"note\": { \"payment_address\": \"ztron1aqgauawtkelxfu2w6s48cwh0mchjt6kwpj44l4wym3pullx0294j4r4v7kpm75wnclzycsw73mq\", \"rcm\": \"74a16c1b27ec7fbf06881d9d35ddaab1554838b1bddcd54f6bd8a9fb4ba0b80a\", \"value\": 500000000 }, \"txid\": \"7d09e471bb047d3ac044d5d6691b3721a2dddbb683ac02c207fbe78af6302463\", \"index\": 1 }' Parameters: ak : Ak nk : Nk note : Note information txid : Transaction id index : Note index Return: Whether a note has been spent","title":"walletsolidity/isspend"},{"location":"api/http/#walletsolidityscanshieldedtrc20notesbyivk","text":"Description: Scan the shielded TRC-20 notes by ivk, and mark whether it has been spent curl -X POST http://127.0.0.1:8091/walletsolidity/scanshieldedtrc20notesbyivk -d '{ \"start_block_index\": 9200, \"end_block_index\": 9240, \"shielded_TRC20_contract_address\": \"41274fc7464fadac5c00c893c58bce6c39bf59e4c7\", \"ivk\": \"9f8e74bb3d7188a2781dc1db38810c6914eef4570a79e8ec8404480948e4e305\", \"ak\":\"8072d9110c9de9d9ade33d5d0f5890a7aa65b0cde42af7816d187297caf2fd64\", \"nk\":\"590bf33f93f792be659fd404df91e75c3b08d38d4e08ee226c3f5219cf598f14\" }' Parameters: start_block_index : The start block index, inclusive end_block_index : The end block index, exclusive shielded_TRC20_contract_address : Shielded TRC-20 contract address ivk : Incoming viewing key ak : Ak key nk : Nk key Return: Notes list Note: Block limit\uff08end_block_index - start_block_index <= 1000\uff09","title":"walletsolidity/scanshieldedtrc20notesbyivk"},{"location":"api/http/#walletsolidityscanshieldedtrc20notesbyovk","text":"Description: Scan the shielded TRC-20 notes by ovk curl -X POST http://127.0.0.1:8091/walletsolidity/scanshieldedtrc20notesbyovk -d '{ \"start_block_index\": 9200, \"end_block_index\": 9240, \"shielded_TRC20_contract_address\": \"41274fc7464fadac5c00c893c58bce6c39bf59e4c7\", \"ovk\": \"0ff58efd75e083fe4fd759c8701e1c8cb6961c4297a12b2c800bdb7b2bcab889\" }' Parameters: start_block_index : Start block index, inclusive end_block_index : Start block index, inclusive shielded_TRC20_contract_address : Shielded TRC-20 contract address ovk : Outgoing viewing key Return: Notes list Note: Block limit (end_block_index - start_block_index <= 1000)","title":"walletsolidity/scanshieldedtrc20notesbyovk"},{"location":"api/http/#walletsolidityisshieldedtrc20contractnotespent","text":"Description: Check the status whether the specified shielded TRC-20 note is spent curl -X POST http://127.0.0.1:8091/walletsolidity/scanshieldedtrc20notesbyovk -d '{ \"note\": { \"value\": 40, \"payment_address\":\"ztron1768kf7dy4qquefp46szk978d65eeua66yhr4zv260c0uzj68t3tfjl3en9lhyyfxalv4jus30xs\", \"rcm\": \"296070782a94c6936b0b4f6daf8d7c7605a4374fe595b96148dc0f4b59015d0d\" }, \"ak\": \"8072d9110c9de9d9ade33d5d0f5890a7aa65b0cde42af7816d187297caf2fd64\", \"nk\": \"590bf33f93f792be659fd404df91e75c3b08d38d4e08ee226c3f5219cf598f14\", \"position\": 272, \"shielded_TRC20_contract_address\": \"41274fc7464fadac5c00c893c58bce6c39bf59e4c7\" }' Parameters: note : The specified note ak : Ak nk : Nk position : The leaf position index of note commitment in the Merkle tree shielded_TRC20_contract_address : The shielded TRC-20 contract address Return: Note status Note: The value in note is the scaled value by scalingFactor set in the shielded TRC-20 contract, namely real_amount = value * scalingFactor .","title":"walletsolidity/isshieldedtrc20contractnotespent"},{"location":"api/rpc/","text":"RPC List \u00b6 For the specific definition of API, please refer to the following link: api/api.proto core/Contract.proto . Note SolidityNode is deprecated. Now a FullNode supports all RPCs of a SolidityNode. New developers should deploy FullNode only. 1. Get account information rpc GetAccount ( Account ) returns ( Account ) {} Nodes: Fullnode and SolidityNode 2. TRX transfer rpc CreateTransaction ( TransferContract ) returns ( Transaction ) {} Nodes: Fullnode 3. Broadcast transaction rpc BroadcastTransaction ( Transaction ) returns ( Return ) {} Nodes: Fullnode Description: Transfer, vote, issuance of token, or participation in token offering. Sending signed transaction information to node, and broadcasting it to the entire network after super representatives verification. 4. Create an account rpc CreateAccount ( AccountCreateContract ) returns ( Transaction ) {} Nodes: FullNode 5. Account name update rpc UpdateAccount ( AccountUpdateContract ) returns ( Transaction ) {} Nodes: Fullnode 6. Vote for super representative candidates rpc VoteWitnessAccount ( VoteWitnessContract ) returns ( Transaction ) {} Nodes: FullNode 7. Query the ratio of brokerage of the super representative rpc GetBrokerageInfo ( BytesMessage ) returns ( NumberMessage ) {} Nodes: FullNode 8. Query unclaimed reward rpc GetRewardInfo ( BytesMessage ) returns ( NumberMessage ) {} Nodes: FullNode 9. Update the ratio of brokerage rpc UpdateBrokerage ( UpdateBrokerageContract ) returns ( TransactionExtention ) {} Nodes: FullNode 10. Issue a token rpc CreateAssetIssue ( AssetIssueContract ) returns ( Transaction ) {} Nodes: FullNode 11. Query of list of super representative candidates rpc ListWitnesses ( EmptyMessage ) returns ( WitnessList ) {} Nodes: FullNode and SolidityNode 12. Application for super representative rpc CreateWitness ( WitnessCreateContract ) returns ( Transaction ) {} Nodes: FullNode Description: To apply to become TRON\u2019s Super Representative candidate. 13. Information update of Super Representative candidates rpc UpdateWitness ( WitnessUpdateContract ) returns ( Transaction ) {} Nodes: FullNode Description: Update the website url of the SR. 14. Token transfer rpc TransferAsset ( TransferAssetContract ) returns ( Transaction ){} Node: FullNode 15. Participate a token rpc ParticipateAssetIssue ( ParticipateAssetIssueContract ) returns ( Transaction ) {} Nodes: FullNode 16. Query the list of nodes connected to the ip of the api rpc ListNodes ( EmptyMessage ) returns ( NodeList ) {} Nodes: FullNode and SolidityNode 17. Query the list of all issued tokens rpc GetAssetIssueList ( EmptyMessage ) returns ( AssetIssueList ) {} Nodes: FullNode and SolidityNode 18. Query the token issued by a given account rpc GetAssetIssueByAccount ( Account ) returns ( AssetIssueList ) {} Nodes: FullNode and SolidityNode 19. Query the token information by token name rpc GetAssetIssueByName ( BytesMessage ) returns ( AssetIssueContract ) {} Nodes: FullNode and Soliditynode 20. Query the list of tokens by timestamp rpc GetAssetIssueListByTimestamp ( NumberMessage ) returns ( AssetIssueList ){} Nodes: SolidityNode 21. Get current block information rpc GetNowBlock ( EmptyMessage ) returns ( Block ) {} Nodes: FullNode and SolidityNode 22. Get a block by block height rpc GetBlockByNum ( NumberMessage ) returns ( Block ) {} Nodes: FullNode and SolidityNode 23. Get the total number of transactions rpc TotalTransaction ( EmptyMessage ) returns ( NumberMessage ) {} Nodes: FullNode and SolidityNode 24. Query the transaction by transaction id rpc getTransactionById ( BytesMessage ) returns ( Transaction ) {} Nodes: SolidityNode 25. Query the transaction by timestamp rpc getTransactionsByTimestamp ( TimeMessage ) returns ( TransactionList ) {} Nodes: SolidityNode 26. Query the transactions initiated by an account rpc getTransactionsFromThis ( Account ) returns ( TransactionList ) {} Nodes: SolidityNode 27. Query the transactions received by an account rpc getTransactionsToThis ( Account ) returns ( NumberMessage ) {} Nodes: SolidityNode 28. Stake TRX This interface has been deprecated, please use FreezeBalanceV2 to stake TRX to obtain resources. rpc FreezeBalance ( FreezeBalanceContract ) returns ( Transaction ) {} Nodes: FullNode 29. Unstake TRX Unstake the TRX staked during Stake1.0. rpc UnfreezeBalance ( UnfreezeBalanceContract ) returns ( Transaction ) {} Nodes: FullNode 30. Block producing reward redemption rpc WithdrawBalance ( WithdrawBalanceContract ) returns ( Transaction ) {} Nodes: FullNode 31. Unstake token balance rpc UnfreezeAsset ( UnfreezeAssetContract ) returns ( Transaction ) {} Nodes: FullNode 32. Query the next maintenance time rpc GetNextMaintenanceTime ( EmptyMessage ) returns ( NumberMessage ) {} Nodes: FullNode 33. Query the transaction fee & block information rpc GetTransactionInfoById ( BytesMessage ) returns ( TransactionInfo ) {} Nodes: SolidityNode 34. Query block information by block id rpc GetBlockById ( BytesMessage ) returns ( Block ) {} Nodes: FullNode 35. Update token information rpc UpdateAsset ( UpdateAssetContract ) returns ( Transaction ) {} Nodes: Fullnode Description: Token update can only be initiated by the token issuer to update token description, url, maximum bandwidth consumption by each account and total bandwidth consumption. 36. Query the list of all the tokens by pagination rpc GetPaginatedAssetIssueList ( PaginatedMessage ) returns ( AssetIssueList ) {} Nodes: FullNode and SolidityNode 37. Deploy a smart contract rpc DeployContract ( CreateSmartContract ) returns ( TransactionExtention ) {} Nodes: FullNode and SolidityNode 38. Trigger a smart contract rpc TriggerContract ( TriggerSmartContract ) returns ( TransactionExtention ) {} Nodes: FullNode 39. Create a shielded transaction rpc CreateShieldedTransaction ( PrivateParameters ) returns ( TransactionExtention ) {} Nodes: FullNode 40. Get a Merkle tree information of a note rpc GetMerkleTreeVoucherInfo ( OutputPointInfo ) returns ( IncrementalMerkleVoucherInfo ) {} Nodes: FullNode 41. Scan note by ivk rpc ScanNoteByIvk ( IvkDecryptParameters ) returns ( DecryptNotes ) {} Nodes: FullNode 42. Scan note by ovk rpc ScanNoteByOvk ( OvkDecryptParameters ) returns ( DecryptNotes ) {} Nodes: FullNode 43. Get spending key rpc GetSpendingKey ( EmptyMessage ) returns ( BytesMessage ) {} Nodes: FullNode 44. Get expanded spending key rpc GetExpandedSpendingKey ( BytesMessage ) returns ( ExpandedSpendingKeyMessage ) {} Nodes: FullNode 45. Get ak from ask rpc GetAkFromAsk ( BytesMessage ) returns ( BytesMessage ) {} Nodes: FullNode 46. Get nk from nsk rpc GetNkFromNsk ( BytesMessage ) returns ( BytesMessage ) {} Nodes: FullNode 47. Get incoming viewing key rpc GetIncomingViewingKey ( ViewingKeyMessage ) returns ( IncomingViewingKeyMessage ) {} Nodes: FullNode 48. Get diversifier rpc GetDiversifier ( EmptyMessage ) returns ( DiversifierMessage ) {} Nodes: FullNode 49. Get zen payment address rpc GetZenPaymentAddress ( IncomingViewingKeyDiversifierMessage ) returns ( PaymentAddressMessage ) {} Nodes: FullNode 50. Get rcm rpc GetRcm ( EmptyMessage ) returns ( BytesMessage ) {} Nodes: FullNode 51. Get a note status of is spent or not rpc IsSpend ( NoteParameters ) returns ( SpendResult ) {} Nodes: FullNode 52. Create a shielded transaction without using ask rpc CreateShieldedTransactionWithoutSpendAuthSig ( PrivateParametersWithoutAsk ) returns ( TransactionExtention ) {} Nodes: FullNode 53. Create a shielded transaction hash rpc GetShieldTransactionHash ( Transaction ) returns ( BytesMessage ) {} Nodes: FullNode 54. Create a signature for a shielded transaction rpc CreateSpendAuthSig ( SpendAuthSigParameters ) returns ( BytesMessage ) {} Nodes: FullNode 55. Create a shield nullifier rpc CreateShieldNullifier ( NfParameters ) returns ( BytesMessage ) {} Nodes: FullNode 56. Get new shielded address rpc GetNewShieldedAddress ( EmptyMessage ) returns ( ShieldedAddressInfo ){} Nodes: FullNode 57. Create shielded contract parameters rpc CreateShieldedContractParameters ( PrivateShieldedTRC20Parameters ) returns ( ShieldedTRC20Parameters ) {} Nodes: FullNode 58. Create shielded contract parameters without ask rpc CreateShieldedContractParametersWithoutAsk ( PrivateShieldedTRC20ParametersWithoutAsk ) returns ( ShieldedTRC20Parameters ) {} Nodes: FullNode 59. Scan shielded TRC20 notes by ivk rpc ScanShieldedTRC20NotesbyIvk ( IvkDecryptTRC20Parameters ) returns ( DecryptNotesTRC20 ) {} Nodes: FullNode, SolidityNode 60. Scan shielded TRC20 notes by ovk rpc ScanShieldedTRC20NotesbyOvk ( OvkDecryptTRC20Parameters ) returns ( DecryptNotesTRC20 ) {} Nodes: FullNode, SolidityNode 61. Get the status of shielded TRC20 note of spent or not rpc IsShieldedTRC20ContractNoteSpent ( NfTRC20Parameters ) returns ( NullifierResult ) {} Nodes: FullNode, SolidityNode 62. Get the trigger input for the shielded TRC20 rpc GetTriggerInputForShieldedTRC20Contract ( ShieldedTRC20TriggerContractParameters ) returns ( BytesMessage ) {} Nodes: FullNode 63. Create an market order rpc MarketSellAsset (MarketSellAssetContract) returns (TransactionExtention) {}; Nodes: FullNode 64. Cancel the order rpc MarketCancelOrder (MarketCancelOrderContract) returns (TransactionExtention) {}; Nodes: FullNode 65. Get all orders for the account rpc GetMarketOrderByAccount (BytesMessage) returns (MarketOrderList) {}; Nodes: FullNode 66. Get all trading pairs rpc GetMarketPairList (EmptyMessage) returns (MarketOrderPairList) {}; Nodes: FullNode 67. Get all orders for the trading pair rpc GetMarketOrderListByPair (MarketOrderPair) returns (MarketOrderList) {}; Nodes: FullNode 68. Get all prices for the trading pair rpc GetMarketPriceByPair (MarketOrderPair) returns (MarketPriceList) {}; Nodes: FullNode 69. Get order by id rpc GetMarketOrderById (BytesMessage) returns (MarketOrder) {}; Nodes: FullNode 70. perform a historical balance lookup rpc GetAccountBalance (AccountBalanceRequest) returns (AccountBalanceResponse){}; Nodes: FullNode 71. fetch all balance-changing transactions in a block rpc GetBlockBalanceTrace (BlockBalanceTrace.BlockIdentifier) returns (BlockBalanceTrace) {}; Nodes: FullNode 72. get the burn trx amount rpc GetBurnTrx (EmptyMessage) returns (NumberMessage) {}; Nodes: FullNode and SolidityNode 73. Freeze TRX rpc FreezeBalanceV2 ( FreezeBalanceV2Contract ) returns ( TransactionExtention ) {} Nodes: FullNode 74. UnFreeze TRX rpc UnfreezeBalanceV2 ( UnfreezeBalanceV2Contract ) returns ( TransactionExtention ) {} Nodes: FullNode 75. Withdraw Staked TRX rpc WithdrawExpireUnfreeze ( WithdrawExpireUnfreezeContract ) returns ( TransactionExtention ) {} Nodes: FullNode 76. Delegate Resource rpc DelegateResource ( DelegateResourceContract ) returns ( TransactionExtention ) {} Nodes: FullNode 77. UnDelegate Resource rpc UnDelegateResource ( UnDelegateResourceContract ) returns ( TransactionExtention ) {} Nodes: FullNode 78. Query transaction information in the pending pool rpc GetTransactionFromPending (BytesMessage) returns (Transaction) {}; Nodes: FullNode 79. Query the pending pool transaction id list rpc GetTransactionListFromPending (EmptyMessage) returns (TransactionIdList) {}; Nodes: FullNode 80. Query the size of the pending pool rpc GetPendingSize (EmptyMessage) returns (NumberMessage) {}; Nodes: FullNode 81. Cancel UnFreeze rpc CancelAllUnfreezeV2 ( CancelAllUnfreezeV2Contract ) returns ( TransactionExtention ) {} Nodes: FullNode 82. Get bandwidth unit price rpc GetBandwidthPrices ( EmptyMessage ) returns ( PricesResponseMessage ) {} Nodes: FullNode 83. Get energy unit price rpc GetEnergyPrices ( EmptyMessage ) returns ( PricesResponseMessage ) {} Nodes: FullNode 84. Get transaction memo fee rpc GetMemoFee ( EmptyMessage ) returns ( PricesResponseMessage ) {} Nodes: FullNodes","title":"gRPC API"},{"location":"api/rpc/#rpc-list","text":"For the specific definition of API, please refer to the following link: api/api.proto core/Contract.proto . Note SolidityNode is deprecated. Now a FullNode supports all RPCs of a SolidityNode. New developers should deploy FullNode only. 1. Get account information rpc GetAccount ( Account ) returns ( Account ) {} Nodes: Fullnode and SolidityNode 2. TRX transfer rpc CreateTransaction ( TransferContract ) returns ( Transaction ) {} Nodes: Fullnode 3. Broadcast transaction rpc BroadcastTransaction ( Transaction ) returns ( Return ) {} Nodes: Fullnode Description: Transfer, vote, issuance of token, or participation in token offering. Sending signed transaction information to node, and broadcasting it to the entire network after super representatives verification. 4. Create an account rpc CreateAccount ( AccountCreateContract ) returns ( Transaction ) {} Nodes: FullNode 5. Account name update rpc UpdateAccount ( AccountUpdateContract ) returns ( Transaction ) {} Nodes: Fullnode 6. Vote for super representative candidates rpc VoteWitnessAccount ( VoteWitnessContract ) returns ( Transaction ) {} Nodes: FullNode 7. Query the ratio of brokerage of the super representative rpc GetBrokerageInfo ( BytesMessage ) returns ( NumberMessage ) {} Nodes: FullNode 8. Query unclaimed reward rpc GetRewardInfo ( BytesMessage ) returns ( NumberMessage ) {} Nodes: FullNode 9. Update the ratio of brokerage rpc UpdateBrokerage ( UpdateBrokerageContract ) returns ( TransactionExtention ) {} Nodes: FullNode 10. Issue a token rpc CreateAssetIssue ( AssetIssueContract ) returns ( Transaction ) {} Nodes: FullNode 11. Query of list of super representative candidates rpc ListWitnesses ( EmptyMessage ) returns ( WitnessList ) {} Nodes: FullNode and SolidityNode 12. Application for super representative rpc CreateWitness ( WitnessCreateContract ) returns ( Transaction ) {} Nodes: FullNode Description: To apply to become TRON\u2019s Super Representative candidate. 13. Information update of Super Representative candidates rpc UpdateWitness ( WitnessUpdateContract ) returns ( Transaction ) {} Nodes: FullNode Description: Update the website url of the SR. 14. Token transfer rpc TransferAsset ( TransferAssetContract ) returns ( Transaction ){} Node: FullNode 15. Participate a token rpc ParticipateAssetIssue ( ParticipateAssetIssueContract ) returns ( Transaction ) {} Nodes: FullNode 16. Query the list of nodes connected to the ip of the api rpc ListNodes ( EmptyMessage ) returns ( NodeList ) {} Nodes: FullNode and SolidityNode 17. Query the list of all issued tokens rpc GetAssetIssueList ( EmptyMessage ) returns ( AssetIssueList ) {} Nodes: FullNode and SolidityNode 18. Query the token issued by a given account rpc GetAssetIssueByAccount ( Account ) returns ( AssetIssueList ) {} Nodes: FullNode and SolidityNode 19. Query the token information by token name rpc GetAssetIssueByName ( BytesMessage ) returns ( AssetIssueContract ) {} Nodes: FullNode and Soliditynode 20. Query the list of tokens by timestamp rpc GetAssetIssueListByTimestamp ( NumberMessage ) returns ( AssetIssueList ){} Nodes: SolidityNode 21. Get current block information rpc GetNowBlock ( EmptyMessage ) returns ( Block ) {} Nodes: FullNode and SolidityNode 22. Get a block by block height rpc GetBlockByNum ( NumberMessage ) returns ( Block ) {} Nodes: FullNode and SolidityNode 23. Get the total number of transactions rpc TotalTransaction ( EmptyMessage ) returns ( NumberMessage ) {} Nodes: FullNode and SolidityNode 24. Query the transaction by transaction id rpc getTransactionById ( BytesMessage ) returns ( Transaction ) {} Nodes: SolidityNode 25. Query the transaction by timestamp rpc getTransactionsByTimestamp ( TimeMessage ) returns ( TransactionList ) {} Nodes: SolidityNode 26. Query the transactions initiated by an account rpc getTransactionsFromThis ( Account ) returns ( TransactionList ) {} Nodes: SolidityNode 27. Query the transactions received by an account rpc getTransactionsToThis ( Account ) returns ( NumberMessage ) {} Nodes: SolidityNode 28. Stake TRX This interface has been deprecated, please use FreezeBalanceV2 to stake TRX to obtain resources. rpc FreezeBalance ( FreezeBalanceContract ) returns ( Transaction ) {} Nodes: FullNode 29. Unstake TRX Unstake the TRX staked during Stake1.0. rpc UnfreezeBalance ( UnfreezeBalanceContract ) returns ( Transaction ) {} Nodes: FullNode 30. Block producing reward redemption rpc WithdrawBalance ( WithdrawBalanceContract ) returns ( Transaction ) {} Nodes: FullNode 31. Unstake token balance rpc UnfreezeAsset ( UnfreezeAssetContract ) returns ( Transaction ) {} Nodes: FullNode 32. Query the next maintenance time rpc GetNextMaintenanceTime ( EmptyMessage ) returns ( NumberMessage ) {} Nodes: FullNode 33. Query the transaction fee & block information rpc GetTransactionInfoById ( BytesMessage ) returns ( TransactionInfo ) {} Nodes: SolidityNode 34. Query block information by block id rpc GetBlockById ( BytesMessage ) returns ( Block ) {} Nodes: FullNode 35. Update token information rpc UpdateAsset ( UpdateAssetContract ) returns ( Transaction ) {} Nodes: Fullnode Description: Token update can only be initiated by the token issuer to update token description, url, maximum bandwidth consumption by each account and total bandwidth consumption. 36. Query the list of all the tokens by pagination rpc GetPaginatedAssetIssueList ( PaginatedMessage ) returns ( AssetIssueList ) {} Nodes: FullNode and SolidityNode 37. Deploy a smart contract rpc DeployContract ( CreateSmartContract ) returns ( TransactionExtention ) {} Nodes: FullNode and SolidityNode 38. Trigger a smart contract rpc TriggerContract ( TriggerSmartContract ) returns ( TransactionExtention ) {} Nodes: FullNode 39. Create a shielded transaction rpc CreateShieldedTransaction ( PrivateParameters ) returns ( TransactionExtention ) {} Nodes: FullNode 40. Get a Merkle tree information of a note rpc GetMerkleTreeVoucherInfo ( OutputPointInfo ) returns ( IncrementalMerkleVoucherInfo ) {} Nodes: FullNode 41. Scan note by ivk rpc ScanNoteByIvk ( IvkDecryptParameters ) returns ( DecryptNotes ) {} Nodes: FullNode 42. Scan note by ovk rpc ScanNoteByOvk ( OvkDecryptParameters ) returns ( DecryptNotes ) {} Nodes: FullNode 43. Get spending key rpc GetSpendingKey ( EmptyMessage ) returns ( BytesMessage ) {} Nodes: FullNode 44. Get expanded spending key rpc GetExpandedSpendingKey ( BytesMessage ) returns ( ExpandedSpendingKeyMessage ) {} Nodes: FullNode 45. Get ak from ask rpc GetAkFromAsk ( BytesMessage ) returns ( BytesMessage ) {} Nodes: FullNode 46. Get nk from nsk rpc GetNkFromNsk ( BytesMessage ) returns ( BytesMessage ) {} Nodes: FullNode 47. Get incoming viewing key rpc GetIncomingViewingKey ( ViewingKeyMessage ) returns ( IncomingViewingKeyMessage ) {} Nodes: FullNode 48. Get diversifier rpc GetDiversifier ( EmptyMessage ) returns ( DiversifierMessage ) {} Nodes: FullNode 49. Get zen payment address rpc GetZenPaymentAddress ( IncomingViewingKeyDiversifierMessage ) returns ( PaymentAddressMessage ) {} Nodes: FullNode 50. Get rcm rpc GetRcm ( EmptyMessage ) returns ( BytesMessage ) {} Nodes: FullNode 51. Get a note status of is spent or not rpc IsSpend ( NoteParameters ) returns ( SpendResult ) {} Nodes: FullNode 52. Create a shielded transaction without using ask rpc CreateShieldedTransactionWithoutSpendAuthSig ( PrivateParametersWithoutAsk ) returns ( TransactionExtention ) {} Nodes: FullNode 53. Create a shielded transaction hash rpc GetShieldTransactionHash ( Transaction ) returns ( BytesMessage ) {} Nodes: FullNode 54. Create a signature for a shielded transaction rpc CreateSpendAuthSig ( SpendAuthSigParameters ) returns ( BytesMessage ) {} Nodes: FullNode 55. Create a shield nullifier rpc CreateShieldNullifier ( NfParameters ) returns ( BytesMessage ) {} Nodes: FullNode 56. Get new shielded address rpc GetNewShieldedAddress ( EmptyMessage ) returns ( ShieldedAddressInfo ){} Nodes: FullNode 57. Create shielded contract parameters rpc CreateShieldedContractParameters ( PrivateShieldedTRC20Parameters ) returns ( ShieldedTRC20Parameters ) {} Nodes: FullNode 58. Create shielded contract parameters without ask rpc CreateShieldedContractParametersWithoutAsk ( PrivateShieldedTRC20ParametersWithoutAsk ) returns ( ShieldedTRC20Parameters ) {} Nodes: FullNode 59. Scan shielded TRC20 notes by ivk rpc ScanShieldedTRC20NotesbyIvk ( IvkDecryptTRC20Parameters ) returns ( DecryptNotesTRC20 ) {} Nodes: FullNode, SolidityNode 60. Scan shielded TRC20 notes by ovk rpc ScanShieldedTRC20NotesbyOvk ( OvkDecryptTRC20Parameters ) returns ( DecryptNotesTRC20 ) {} Nodes: FullNode, SolidityNode 61. Get the status of shielded TRC20 note of spent or not rpc IsShieldedTRC20ContractNoteSpent ( NfTRC20Parameters ) returns ( NullifierResult ) {} Nodes: FullNode, SolidityNode 62. Get the trigger input for the shielded TRC20 rpc GetTriggerInputForShieldedTRC20Contract ( ShieldedTRC20TriggerContractParameters ) returns ( BytesMessage ) {} Nodes: FullNode 63. Create an market order rpc MarketSellAsset (MarketSellAssetContract) returns (TransactionExtention) {}; Nodes: FullNode 64. Cancel the order rpc MarketCancelOrder (MarketCancelOrderContract) returns (TransactionExtention) {}; Nodes: FullNode 65. Get all orders for the account rpc GetMarketOrderByAccount (BytesMessage) returns (MarketOrderList) {}; Nodes: FullNode 66. Get all trading pairs rpc GetMarketPairList (EmptyMessage) returns (MarketOrderPairList) {}; Nodes: FullNode 67. Get all orders for the trading pair rpc GetMarketOrderListByPair (MarketOrderPair) returns (MarketOrderList) {}; Nodes: FullNode 68. Get all prices for the trading pair rpc GetMarketPriceByPair (MarketOrderPair) returns (MarketPriceList) {}; Nodes: FullNode 69. Get order by id rpc GetMarketOrderById (BytesMessage) returns (MarketOrder) {}; Nodes: FullNode 70. perform a historical balance lookup rpc GetAccountBalance (AccountBalanceRequest) returns (AccountBalanceResponse){}; Nodes: FullNode 71. fetch all balance-changing transactions in a block rpc GetBlockBalanceTrace (BlockBalanceTrace.BlockIdentifier) returns (BlockBalanceTrace) {}; Nodes: FullNode 72. get the burn trx amount rpc GetBurnTrx (EmptyMessage) returns (NumberMessage) {}; Nodes: FullNode and SolidityNode 73. Freeze TRX rpc FreezeBalanceV2 ( FreezeBalanceV2Contract ) returns ( TransactionExtention ) {} Nodes: FullNode 74. UnFreeze TRX rpc UnfreezeBalanceV2 ( UnfreezeBalanceV2Contract ) returns ( TransactionExtention ) {} Nodes: FullNode 75. Withdraw Staked TRX rpc WithdrawExpireUnfreeze ( WithdrawExpireUnfreezeContract ) returns ( TransactionExtention ) {} Nodes: FullNode 76. Delegate Resource rpc DelegateResource ( DelegateResourceContract ) returns ( TransactionExtention ) {} Nodes: FullNode 77. UnDelegate Resource rpc UnDelegateResource ( UnDelegateResourceContract ) returns ( TransactionExtention ) {} Nodes: FullNode 78. Query transaction information in the pending pool rpc GetTransactionFromPending (BytesMessage) returns (Transaction) {}; Nodes: FullNode 79. Query the pending pool transaction id list rpc GetTransactionListFromPending (EmptyMessage) returns (TransactionIdList) {}; Nodes: FullNode 80. Query the size of the pending pool rpc GetPendingSize (EmptyMessage) returns (NumberMessage) {}; Nodes: FullNode 81. Cancel UnFreeze rpc CancelAllUnfreezeV2 ( CancelAllUnfreezeV2Contract ) returns ( TransactionExtention ) {} Nodes: FullNode 82. Get bandwidth unit price rpc GetBandwidthPrices ( EmptyMessage ) returns ( PricesResponseMessage ) {} Nodes: FullNode 83. Get energy unit price rpc GetEnergyPrices ( EmptyMessage ) returns ( PricesResponseMessage ) {} Nodes: FullNode 84. Get transaction memo fee rpc GetMemoFee ( EmptyMessage ) returns ( PricesResponseMessage ) {} Nodes: FullNodes","title":"RPC List"},{"location":"architecture/database/","text":"Database configuration \u00b6 java-tron data storage supports LevelDB or RocksDB, and LevelDB is used by default. You can also choose RocksDB, which provides lots of configuration parameters, allowing nodes to be tuned according to their own machine configuration. The node database occupies less disk space than LevelDB. At the same time, RocksDB supports data backup during runtime, and the backup time only takes a few seconds. The following describes how to set the storage engine of the java-tron node to RocksDB, and how to perform data conversion between leveldb and rocksdb. RocksDB \u00b6 Configuration \u00b6 Use RocksDB as the data storage engine, need to set db.engine to \"ROCKSDB\". Note: RocksDB only supports db.version=2 , yet does not supports db.version=1 The optimization parameters RocksDB support: Use RocksDB's data backup function \u00b6 Choose RocksDB to be the data storage engine, you can use its data backup function while running Note: FullNode can use data backup function. In order not to affect SuperNode's block producing performance, SuperNode does not support backup service, but SuperNode's backup service node can use this function. Convert LevelDB data to RocksDB data \u00b6 The data storage structure of LevelDB and RocksDB is not compatible, please make sure the node use the same type of data engine all the time. We provide data conversion script which can convert LevelDB data to RocksDB data. Usage: > cd /path/to/java-tron/source-code > ./gradlew build # build the source code > java -jar build/libs/DBConvert.jar # run data conversion command Note: If the node's data storage directory is self-defined, before run DBConvert.jar, you need to add the following parameters: src_db_path : specify LevelDB source directory, default output-directory/database dst_db_path : specify RocksDb source directory, default output-directory-dst/database Example, if you run the script like this: > nohup java -jar FullNode.jar -d your_database_dir </dev/null &>/dev/null & then, you should run DBConvert.jar this way: > java -jar build/libs/DBConvert.jar your_database_dir/database output-directory-dst/database Note: You have to stop the running of the node, and then to run the data conversion script. If you do not want to stop the running of the node for too long, after node is shut down, you can copy leveldb's output-directory to the new directory, and then restart the node. Run DBConvert.jar in the previous directory of the new directory, and specify the parameters: src_db_path and dst_db_path . Example: > cp -rf output-directory /tmp/output-directory > cd /tmp > java -jar DBConvert.jar output-directory/database output-directory-dst/database All the whole data conversion process may take 10 hours. RocksDB vs LevelDB \u00b6 You can refer to the following documents for detailed information:: RocksDB vs LevelDB","title":"Database Configuration"},{"location":"architecture/database/#database-configuration","text":"java-tron data storage supports LevelDB or RocksDB, and LevelDB is used by default. You can also choose RocksDB, which provides lots of configuration parameters, allowing nodes to be tuned according to their own machine configuration. The node database occupies less disk space than LevelDB. At the same time, RocksDB supports data backup during runtime, and the backup time only takes a few seconds. The following describes how to set the storage engine of the java-tron node to RocksDB, and how to perform data conversion between leveldb and rocksdb.","title":"Database configuration"},{"location":"architecture/database/#rocksdb","text":"","title":"RocksDB"},{"location":"architecture/database/#configuration","text":"Use RocksDB as the data storage engine, need to set db.engine to \"ROCKSDB\". Note: RocksDB only supports db.version=2 , yet does not supports db.version=1 The optimization parameters RocksDB support:","title":"Configuration"},{"location":"architecture/database/#use-rocksdbs-data-backup-function","text":"Choose RocksDB to be the data storage engine, you can use its data backup function while running Note: FullNode can use data backup function. In order not to affect SuperNode's block producing performance, SuperNode does not support backup service, but SuperNode's backup service node can use this function.","title":"Use RocksDB's data backup function"},{"location":"architecture/database/#convert-leveldb-data-to-rocksdb-data","text":"The data storage structure of LevelDB and RocksDB is not compatible, please make sure the node use the same type of data engine all the time. We provide data conversion script which can convert LevelDB data to RocksDB data. Usage: > cd /path/to/java-tron/source-code > ./gradlew build # build the source code > java -jar build/libs/DBConvert.jar # run data conversion command Note: If the node's data storage directory is self-defined, before run DBConvert.jar, you need to add the following parameters: src_db_path : specify LevelDB source directory, default output-directory/database dst_db_path : specify RocksDb source directory, default output-directory-dst/database Example, if you run the script like this: > nohup java -jar FullNode.jar -d your_database_dir </dev/null &>/dev/null & then, you should run DBConvert.jar this way: > java -jar build/libs/DBConvert.jar your_database_dir/database output-directory-dst/database Note: You have to stop the running of the node, and then to run the data conversion script. If you do not want to stop the running of the node for too long, after node is shut down, you can copy leveldb's output-directory to the new directory, and then restart the node. Run DBConvert.jar in the previous directory of the new directory, and specify the parameters: src_db_path and dst_db_path . Example: > cp -rf output-directory /tmp/output-directory > cd /tmp > java -jar DBConvert.jar output-directory/database output-directory-dst/database All the whole data conversion process may take 10 hours.","title":"Convert LevelDB data to RocksDB data"},{"location":"architecture/database/#rocksdb-vs-leveldb","text":"You can refer to the following documents for detailed information:: RocksDB vs LevelDB","title":"RocksDB vs LevelDB"},{"location":"architecture/event/","text":"Event Subscription \u00b6 Using Event Plugin for Event Subscription \u00b6 TIP \u00b6 The TIP: TIP-12:TRON event subscribes model . Event Type \u00b6 TRON Event Subscription supports 4 types of event: Transaction Event \u00b6 The parameters passed to Subscriber: transactionId: transaction hash blockHash: block hash blockNumber: block number energyUsage: energy usage energyFee: energy fee originEnergyUsage: origin energy usage energyUsageTotal: total energy usage total Block Event \u00b6 The parameters passed to Subscriber: blockHash: block hash blockNumber: block number transactionSize: the number of transactions in a block latestSolidifiedBlockNumber: the latest solidified block number transactionList: the transactions hash list Contract Event \u00b6 The parameters passed to Subscriber: transactionId: transaction id contractAddress: contract address callerAddress: contract caller address blockNumber: the number of the block contract related events recorded blockTimestamp: the block time stamp eventSignature: event signature topicMap: the map of topic in solidity language data: the data information in solidity language removed: 'true' means the log is removed Contract Log Event \u00b6 The parameters passed to Subscriber: transactionId: transaction hash contractAddress: contract address callerAddress: contract caller address blockNumber: the number of the block contract related events recorded blockTimestamp: the block time stamp contractTopics: the list of topic in solidity language data: the data information in solidity language removed: 'true' means the log is removed Contract Event and Contract Log Even support event filter function which includes: fromBlock: the start block number toBlock: the end block number contractAddress: contract addresses list contractTopics: contract topics list Note Historical data query is not supported. When subscribing to non-solidified events, be sure to use the two parameters blockNumber and blockHash as the criteria to verify that the received events are valid. In special cases such as unstable network connections causing chain reorg, event reorg may occur as well, resulting in stale events. New Features \u00b6 Supporting event plug-ins, kafka & mongodb plug-ins have been released, developers can also customize their own plug-ins according to their own needs. Supporting subscription of chain data, such as block, transaction, contract log, contract event and so on. For transaction events, developers can get information such as internal transactions, contract info and so on; for contract events, developers could configure the contract addresses list or contract topic list to receive the specified events, and event subscription has a very low latency. The deployed fullnode can receive event information immediately after the contract is executed. Event query service tron-eventquery, online Event query service provided. Developers can query trigger information in the last seven days through https, and the query address is https://api.tronex.io . Github project \u00b6 tronprotocol/event-plugin tronprotocol/tron-eventquery Event plugin \u00b6 Kafka deployment MongoDB deployment Event query \u00b6 TRON Event Query Service TronEventQuery is implemented with Tron's new event subscribe model. It uses same query interface with Tron-Grid. Users can also subscribe block trigger, transaction trigger, contract log trigger, and contract event trigger. TronEvent is independent of a particular branch of java-tron, the new event subscribes model will be released on version 3.5 of java-tron. For more information of TRON event subscribe model, please refer to TIP-12 . Event query deployment Event query HTTP API Using java-tron's Built-in Message Queue for Event Subscription \u00b6 TRON provides event subscription service. Developers can not only obtain on-chain events through event plugin, but also through java-tron\u2019s built-in ZeroMQ message queue . The difference is that event plugin needs to be additionally deployed, which is used to implement event storage: developers can choose appropriate storage tools according to their needs, such as MongoDB, Kafka, etc., and the plugin help complete the storage of subscribed events. java-tron's built-in ZeroMQ does not require additional deployment operations. Event subscribers can directly connect to the publisher's ip and port, set subscription topics, and receive subscribed events. However, this method does not provide event storage. Therefore, when developers want to subscribe to events directly from nodes for a short period of time, then using the built-in message queue will be a more appropriate choice. This article will introduce how to subscribe to events through java-tron's built-in message queue in detail. Configure node \u00b6 To use the built-in ZeroMQ of the node for event subscription, you need to set the configuration item useNativeQueue to true in the node configuration file. event.subscribe = { native = { useNativeQueue = true // if true, use native message queue, else use event plugin. bindport = 5555 // bind port sendqueuelength = 1000 //max length of send queue } ...... topics = [ { triggerName = \"block\" // block trigger, the value can't be modified enable = true topic = \"block\" // plugin topic, the value could be modified }, ...... ] } native.useNativeQueue : true is to use the built-in message queue, false is to use the event plugin native.bindport : ZeroMQ publisher binding port. In this example, it is 5555 , so the publisher address that the subscriber should connect to is \"tcp://127.0.0.1:5555\" native.sendqueuelength : The length of the send queue, that is, when the subscriber receives messages slowly, the maximum number of messages published by the publisher that the TCP buffer can hold. if it exceeds, The message will be discarded if exceeds the capacity topics : Subscribed event type , including block type, transaction type, etc. Start node \u00b6 The event subscription service is disabled by default and needs to be enabled by adding the command line parameter --es . The start command of the node that enables the event subscription service is as follows: $ java -jar FullNode.jar --es Prepare event subscription script \u00b6 This article takes Nodejs as an example to illustrate how to subscribe to events. First, install the zeromq library: $ npm install zeromq@5 Then, write the subscriber code: // subscriber.js var zmq = require(\"zeromq\"), var sock = zmq.socket(\"sub\"); sock.connect(\"tcp://127.0.0.1:5555\"); sock.subscribe(\"block\"); console.log(\"Subscriber connected to port 5555\"); sock.on(\"message\", function(topic, message) { console.log( \"received a message related to:\", Buffer.from(topic).toString(), \", containing message:\", Buffer.from(message).toString() ); }); This example connects the subscriber to the node event publisher and subscribes to block events. Start subscriber \u00b6 Start command of Nodejs is as below: $ node subscriber.js > Subscriber connected to port 5555 When the node has a new block, the subscriber will receive block event, the output information is as follows: received a message related to: blockTrigger, containing message: {\"timeStamp\":1678343709000,\"triggerName\":\"blockTrigger\",\"blockNumber\":1361,\"blockHash\":\"00000000000005519b3995cd638753a862c812d1bda11de14bbfaa5ad3383280\",\"transactionSize\":0,\"latestSolidifiedBlockNumber\":1361,\"transactionList\":[]} received a message related to: blockTrigger, containing message: {\"timeStamp\":1678343712000,\"triggerName\":\"blockTrigger\",\"blockNumber\":1362,\"blockHash\":\"0000000000000552d53d1bdd9929e4533a983f14df8931ee9b3bf6d6c74a47b0\",\"transactionSize\":0,\"latestSolidifiedBlockNumber\":1362,\"transactionList\":[]}","title":"Event Subscription"},{"location":"architecture/event/#event-subscription","text":"","title":"Event Subscription"},{"location":"architecture/event/#using-event-plugin-for-event-subscription","text":"","title":"Using Event Plugin for Event Subscription"},{"location":"architecture/event/#tip","text":"The TIP: TIP-12:TRON event subscribes model .","title":"TIP"},{"location":"architecture/event/#event-type","text":"TRON Event Subscription supports 4 types of event:","title":"Event Type"},{"location":"architecture/event/#transaction-event","text":"The parameters passed to Subscriber: transactionId: transaction hash blockHash: block hash blockNumber: block number energyUsage: energy usage energyFee: energy fee originEnergyUsage: origin energy usage energyUsageTotal: total energy usage total","title":"Transaction Event"},{"location":"architecture/event/#block-event","text":"The parameters passed to Subscriber: blockHash: block hash blockNumber: block number transactionSize: the number of transactions in a block latestSolidifiedBlockNumber: the latest solidified block number transactionList: the transactions hash list","title":"Block Event"},{"location":"architecture/event/#contract-event","text":"The parameters passed to Subscriber: transactionId: transaction id contractAddress: contract address callerAddress: contract caller address blockNumber: the number of the block contract related events recorded blockTimestamp: the block time stamp eventSignature: event signature topicMap: the map of topic in solidity language data: the data information in solidity language removed: 'true' means the log is removed","title":"Contract Event"},{"location":"architecture/event/#contract-log-event","text":"The parameters passed to Subscriber: transactionId: transaction hash contractAddress: contract address callerAddress: contract caller address blockNumber: the number of the block contract related events recorded blockTimestamp: the block time stamp contractTopics: the list of topic in solidity language data: the data information in solidity language removed: 'true' means the log is removed Contract Event and Contract Log Even support event filter function which includes: fromBlock: the start block number toBlock: the end block number contractAddress: contract addresses list contractTopics: contract topics list Note Historical data query is not supported. When subscribing to non-solidified events, be sure to use the two parameters blockNumber and blockHash as the criteria to verify that the received events are valid. In special cases such as unstable network connections causing chain reorg, event reorg may occur as well, resulting in stale events.","title":"Contract Log Event"},{"location":"architecture/event/#new-features","text":"Supporting event plug-ins, kafka & mongodb plug-ins have been released, developers can also customize their own plug-ins according to their own needs. Supporting subscription of chain data, such as block, transaction, contract log, contract event and so on. For transaction events, developers can get information such as internal transactions, contract info and so on; for contract events, developers could configure the contract addresses list or contract topic list to receive the specified events, and event subscription has a very low latency. The deployed fullnode can receive event information immediately after the contract is executed. Event query service tron-eventquery, online Event query service provided. Developers can query trigger information in the last seven days through https, and the query address is https://api.tronex.io .","title":"New Features"},{"location":"architecture/event/#github-project","text":"tronprotocol/event-plugin tronprotocol/tron-eventquery","title":"Github project"},{"location":"architecture/event/#event-plugin","text":"Kafka deployment MongoDB deployment","title":"Event plugin"},{"location":"architecture/event/#event-query","text":"TRON Event Query Service TronEventQuery is implemented with Tron's new event subscribe model. It uses same query interface with Tron-Grid. Users can also subscribe block trigger, transaction trigger, contract log trigger, and contract event trigger. TronEvent is independent of a particular branch of java-tron, the new event subscribes model will be released on version 3.5 of java-tron. For more information of TRON event subscribe model, please refer to TIP-12 . Event query deployment Event query HTTP API","title":"Event query"},{"location":"architecture/event/#using-java-trons-built-in-message-queue-for-event-subscription","text":"TRON provides event subscription service. Developers can not only obtain on-chain events through event plugin, but also through java-tron\u2019s built-in ZeroMQ message queue . The difference is that event plugin needs to be additionally deployed, which is used to implement event storage: developers can choose appropriate storage tools according to their needs, such as MongoDB, Kafka, etc., and the plugin help complete the storage of subscribed events. java-tron's built-in ZeroMQ does not require additional deployment operations. Event subscribers can directly connect to the publisher's ip and port, set subscription topics, and receive subscribed events. However, this method does not provide event storage. Therefore, when developers want to subscribe to events directly from nodes for a short period of time, then using the built-in message queue will be a more appropriate choice. This article will introduce how to subscribe to events through java-tron's built-in message queue in detail.","title":"Using java-tron's Built-in Message Queue for Event Subscription"},{"location":"architecture/event/#configure-node","text":"To use the built-in ZeroMQ of the node for event subscription, you need to set the configuration item useNativeQueue to true in the node configuration file. event.subscribe = { native = { useNativeQueue = true // if true, use native message queue, else use event plugin. bindport = 5555 // bind port sendqueuelength = 1000 //max length of send queue } ...... topics = [ { triggerName = \"block\" // block trigger, the value can't be modified enable = true topic = \"block\" // plugin topic, the value could be modified }, ...... ] } native.useNativeQueue : true is to use the built-in message queue, false is to use the event plugin native.bindport : ZeroMQ publisher binding port. In this example, it is 5555 , so the publisher address that the subscriber should connect to is \"tcp://127.0.0.1:5555\" native.sendqueuelength : The length of the send queue, that is, when the subscriber receives messages slowly, the maximum number of messages published by the publisher that the TCP buffer can hold. if it exceeds, The message will be discarded if exceeds the capacity topics : Subscribed event type , including block type, transaction type, etc.","title":"Configure node"},{"location":"architecture/event/#start-node","text":"The event subscription service is disabled by default and needs to be enabled by adding the command line parameter --es . The start command of the node that enables the event subscription service is as follows: $ java -jar FullNode.jar --es","title":"Start node"},{"location":"architecture/event/#prepare-event-subscription-script","text":"This article takes Nodejs as an example to illustrate how to subscribe to events. First, install the zeromq library: $ npm install zeromq@5 Then, write the subscriber code: // subscriber.js var zmq = require(\"zeromq\"), var sock = zmq.socket(\"sub\"); sock.connect(\"tcp://127.0.0.1:5555\"); sock.subscribe(\"block\"); console.log(\"Subscriber connected to port 5555\"); sock.on(\"message\", function(topic, message) { console.log( \"received a message related to:\", Buffer.from(topic).toString(), \", containing message:\", Buffer.from(message).toString() ); }); This example connects the subscriber to the node event publisher and subscribes to block events.","title":"Prepare event subscription script"},{"location":"architecture/event/#start-subscriber","text":"Start command of Nodejs is as below: $ node subscriber.js > Subscriber connected to port 5555 When the node has a new block, the subscriber will receive block event, the output information is as follows: received a message related to: blockTrigger, containing message: {\"timeStamp\":1678343709000,\"triggerName\":\"blockTrigger\",\"blockNumber\":1361,\"blockHash\":\"00000000000005519b3995cd638753a862c812d1bda11de14bbfaa5ad3383280\",\"transactionSize\":0,\"latestSolidifiedBlockNumber\":1361,\"transactionList\":[]} received a message related to: blockTrigger, containing message: {\"timeStamp\":1678343712000,\"triggerName\":\"blockTrigger\",\"blockNumber\":1362,\"blockHash\":\"0000000000000552d53d1bdd9929e4533a983f14df8931ee9b3bf6d6c74a47b0\",\"transactionSize\":0,\"latestSolidifiedBlockNumber\":1362,\"transactionList\":[]}","title":"Start subscriber"},{"location":"clients/tron-grid/","text":"TronGrid \u00b6 The up-to-date TronGrid API Documentation is at https://developers.tron.network/docs/tron-grid-intro . Introduction \u00b6 TronGrid provides TRON clients running in the cloud, so you don't have to run one yourself to work with TRON on your next project. TronGrid offers an easy to use hosted API, load balanced full nodes, secure and reliable developer tools with direct access to the TRON Network. TronGrid uses a set of NodeJS apps to talk with Redis and PostgreSQL to provide a simple, fast and reliable query interface for the TRON API. TronGrid supports 2 types of api: FullNode & SolidityNode api TronGrid supports all the FullNode and SolidityNode api calls, you only need to add the url: https://api.trongrid.io/ , like: https://api.trongrid.io/wallet/getnowblock TronGrid v3 (TG3) api version As this is the first iteration of the improved TronGrid, it starts with v1. Example: https://api.trongrid.io/v1 Parameters, Queries, & Return Values Addresses in TG3 can be passed in base58 or hex formats. Query parameters can be passed in camelCase or snake_case. All returned JSON properties will be in snake_case (at the first level at least). NB: In this document, we will primarily use base58 and snake_case formats. Account APIs \u00b6 1. Get Account Info By Address API: https://api.trongrid.io/v1/accounts/:address Params: address: The account\u2019s address in base58 or hex format (0x... and 41...) Options: only_confirmed Shows only the situation at latest confirmed block. true | false default false . Example: https://api.trongrid.io/v1/accounts/TLCuBEirVzB6V4menLZKw1jfBTFMZbuKq7?only_confirmed=false 2. Get Transactions By Account Address API: https://api.trongrid.io/v1/accounts/:address/transactions Params: address: The account\u2019s address. Options: only_confirmed Shows only confirmed. true | false default false . only_unconfirmed Shows only unconfirmed. true | false default false . only_to Only transaction to address. true | false default false . only_from Only transaction from address. true | false default false . limit The requested number of transaction per page. Default 20 . Max 200 . fingerprint The fingerprint of the last transaction returned by the previous page. order_by Pre sorts the results during the query. order_by=block_number,asc , order_by=block_timestamp,desc . min_block_timestamp The minimum transaction timestamp default 0 . max_block_timestamp The maximum transaction timestamp default now . Example: https://api.trongrid.io/v1/accounts/TLCuBEirVzB6V4menLZKw1jfBTFMZbuKq/transactions?only_to=true&only_from=true 3. Get Account Resources By Address API: https://api.trongrid.io/v1/accounts/:address/resources Params: address: The account\u2019s address. Example: https://api.trongrid.io/v1/accounts/TLCuBEirVzB6V4menLZKw1jfBTFMZbuKq/resources Asset APIs \u00b6 1. Get All Assets API: https://api.trongrid.io/v1/assets Options: order_by Sorts the results. Accepted fields: total_supply,asc | total_supply,desc , start_time,asc | start_time,desc , end_time,asc | end_time,desc , id,asc | id,desc . Example: order_by=total_supply,asc . 2. Get Assets By Identifier API: https://api.trongrid.io/v1/assets/:identifier Params: identifier: The identifier to be used to retrieve the asset. It can be the ID of the asset, or the issuer address. 3. Get Assets By Name API: https://api.trongrid.io/v1/assets/:name/list Params: name: The name of the asset. Options: limit The requested number of assets per page. Default 20 . Max 200 . When there is a pagination, the minimum limit is set to 20 . fingerprint The fingerprint of the last asset returned by the previous page. order_by Pre sorts the results during the query. order_by=total_supply,asc (starts from the rarest token). order_by=start_time,desc (starts from the most recent ICO). Block APIs \u00b6 1. Returns Events By Block Identifier API: https://api.trongrid.io/v1/blocks/:identifier/events Params: identifier: It can be either latest, a block number or a block id. Contract APIs \u00b6 1. Get Events By Contract Address API: https://api.trongrid.io/v1/contracts/:address/events Params: address: The address of the deployed contract. Options: only_confirmed Shows only confirmed. true | false default false . only_unconfirmed Shows only unconfirmed. true | false default false . event_name The name of the event. block_number The block number for which the events are required. min_block_timestamp The minimum block timestamp default 0 . max_block_timestamp The maximum block timestamp default now . limit For pagination. Limit 20. fingerprint The fingerprint of last event retrieved in the page. order_by Sort the events. Accepted values: block_timestamp,asc , block_timestamp,desc (default). 2. Get Transactions By Contract Address API: https://api.trongrid.io/v1/contracts/:address/transactions Params: address: The address of the deployed contract. Options: only_confirmed Shows only confirmed. true | false default false . only_unconfirmed Shows only unconfirmed. true | false default false . min_block_timestamp The minimum block timestamp default 0 . max_block_timestamp The maximum block timestamp default now . limit For pagination. Limit 20 . fingerprint The fingerprint of last event retrieved in the page. order_by Sort the events. Accepted values: block_timestamp,asc , block_timestamp,desc (default). Transaction APIs \u00b6 1. Get Events By Transaction ID API: https://api.trongrid.io/v1/transactions/:id/events Params: id: The id of the transaction. 2. Get Transaction By Transaction ID API: https://api.trongrid.io/v1/transactions/:id/events Params: id: The id of the transaction.","title":"TronGrid"},{"location":"clients/tron-grid/#trongrid","text":"The up-to-date TronGrid API Documentation is at https://developers.tron.network/docs/tron-grid-intro .","title":"TronGrid"},{"location":"clients/tron-grid/#introduction","text":"TronGrid provides TRON clients running in the cloud, so you don't have to run one yourself to work with TRON on your next project. TronGrid offers an easy to use hosted API, load balanced full nodes, secure and reliable developer tools with direct access to the TRON Network. TronGrid uses a set of NodeJS apps to talk with Redis and PostgreSQL to provide a simple, fast and reliable query interface for the TRON API. TronGrid supports 2 types of api: FullNode & SolidityNode api TronGrid supports all the FullNode and SolidityNode api calls, you only need to add the url: https://api.trongrid.io/ , like: https://api.trongrid.io/wallet/getnowblock TronGrid v3 (TG3) api version As this is the first iteration of the improved TronGrid, it starts with v1. Example: https://api.trongrid.io/v1 Parameters, Queries, & Return Values Addresses in TG3 can be passed in base58 or hex formats. Query parameters can be passed in camelCase or snake_case. All returned JSON properties will be in snake_case (at the first level at least). NB: In this document, we will primarily use base58 and snake_case formats.","title":"Introduction"},{"location":"clients/tron-grid/#account-apis","text":"1. Get Account Info By Address API: https://api.trongrid.io/v1/accounts/:address Params: address: The account\u2019s address in base58 or hex format (0x... and 41...) Options: only_confirmed Shows only the situation at latest confirmed block. true | false default false . Example: https://api.trongrid.io/v1/accounts/TLCuBEirVzB6V4menLZKw1jfBTFMZbuKq7?only_confirmed=false 2. Get Transactions By Account Address API: https://api.trongrid.io/v1/accounts/:address/transactions Params: address: The account\u2019s address. Options: only_confirmed Shows only confirmed. true | false default false . only_unconfirmed Shows only unconfirmed. true | false default false . only_to Only transaction to address. true | false default false . only_from Only transaction from address. true | false default false . limit The requested number of transaction per page. Default 20 . Max 200 . fingerprint The fingerprint of the last transaction returned by the previous page. order_by Pre sorts the results during the query. order_by=block_number,asc , order_by=block_timestamp,desc . min_block_timestamp The minimum transaction timestamp default 0 . max_block_timestamp The maximum transaction timestamp default now . Example: https://api.trongrid.io/v1/accounts/TLCuBEirVzB6V4menLZKw1jfBTFMZbuKq/transactions?only_to=true&only_from=true 3. Get Account Resources By Address API: https://api.trongrid.io/v1/accounts/:address/resources Params: address: The account\u2019s address. Example: https://api.trongrid.io/v1/accounts/TLCuBEirVzB6V4menLZKw1jfBTFMZbuKq/resources","title":"Account APIs"},{"location":"clients/tron-grid/#asset-apis","text":"1. Get All Assets API: https://api.trongrid.io/v1/assets Options: order_by Sorts the results. Accepted fields: total_supply,asc | total_supply,desc , start_time,asc | start_time,desc , end_time,asc | end_time,desc , id,asc | id,desc . Example: order_by=total_supply,asc . 2. Get Assets By Identifier API: https://api.trongrid.io/v1/assets/:identifier Params: identifier: The identifier to be used to retrieve the asset. It can be the ID of the asset, or the issuer address. 3. Get Assets By Name API: https://api.trongrid.io/v1/assets/:name/list Params: name: The name of the asset. Options: limit The requested number of assets per page. Default 20 . Max 200 . When there is a pagination, the minimum limit is set to 20 . fingerprint The fingerprint of the last asset returned by the previous page. order_by Pre sorts the results during the query. order_by=total_supply,asc (starts from the rarest token). order_by=start_time,desc (starts from the most recent ICO).","title":"Asset APIs"},{"location":"clients/tron-grid/#block-apis","text":"1. Returns Events By Block Identifier API: https://api.trongrid.io/v1/blocks/:identifier/events Params: identifier: It can be either latest, a block number or a block id.","title":"Block APIs"},{"location":"clients/tron-grid/#contract-apis","text":"1. Get Events By Contract Address API: https://api.trongrid.io/v1/contracts/:address/events Params: address: The address of the deployed contract. Options: only_confirmed Shows only confirmed. true | false default false . only_unconfirmed Shows only unconfirmed. true | false default false . event_name The name of the event. block_number The block number for which the events are required. min_block_timestamp The minimum block timestamp default 0 . max_block_timestamp The maximum block timestamp default now . limit For pagination. Limit 20. fingerprint The fingerprint of last event retrieved in the page. order_by Sort the events. Accepted values: block_timestamp,asc , block_timestamp,desc (default). 2. Get Transactions By Contract Address API: https://api.trongrid.io/v1/contracts/:address/transactions Params: address: The address of the deployed contract. Options: only_confirmed Shows only confirmed. true | false default false . only_unconfirmed Shows only unconfirmed. true | false default false . min_block_timestamp The minimum block timestamp default 0 . max_block_timestamp The maximum block timestamp default now . limit For pagination. Limit 20 . fingerprint The fingerprint of last event retrieved in the page. order_by Sort the events. Accepted values: block_timestamp,asc , block_timestamp,desc (default).","title":"Contract APIs"},{"location":"clients/tron-grid/#transaction-apis","text":"1. Get Events By Transaction ID API: https://api.trongrid.io/v1/transactions/:id/events Params: id: The id of the transaction. 2. Get Transaction By Transaction ID API: https://api.trongrid.io/v1/transactions/:id/events Params: id: The id of the transaction.","title":"Transaction APIs"},{"location":"clients/wallet-cli-command/","text":"Wallet Commands \u00b6 Below, please find all types of Wallet-Cli commands\uff1a Wallet Account AccountResource Transaction On-ChainInquire SmartContract TRC-10 Governance DEX Wallet \u00b6 Here are all the wallet related commands \uff1a RegisterWallet Login BackupWallet BackupWallet2Base64 ChangePassword ImportWallet ImportWalletByBase64 This section introduces commands related to wallet management. Let's start with registerwallet to get a new account. RegisterWallet \u00b6 To register your wallet, you need to set the wallet password and generate the address and private key. A .json keystore file will be generated under the path of wallet-cli/wallet . The file will be used for login and backupwallet later. wallet> RegisterWallet Please input password. password: Please input password again. password: Register a wallet successful, keystore file name is UTC--2022-06-27T07-37-47.601000000Z--TWyDBTHsWJFhgywWkTNW7vh7jSUxeBaiAw.json Login \u00b6 When we have a keystore file, we can start to login. After enter the command, choose the keystore file and enter the password. wallet> login use user defined config file in current dir The 1th keystore file name is UTC--2022-06-28T06-52-56.928000000Z--TB9qhqbev6DpX8mxdf3zDdtSQ6GC6Vb6Ej.json The 2th keystore file name is .DS_Store The 3th keystore file name is UTC--2022-06-22T08-31-57.735000000Z--TBnPDbw99BLzPUZuW8Rrcc3RGGQT3cnSfF.json The 4th keystore file name is UTC--2022-04-06T09-43-20.710000000Z--TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8.json The 5th keystore file name is UTC--2022-04-07T09-03-38.307000000Z--TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE.json Please choose between 1 and 5 4 Please input your password. password: Login successful !!! BackupWallet \u00b6 This will Back up your wallet. You need to enter your wallet password to export the privat key in hex string format, such as: 721d63b074f18d41c147e04c952ec93467777a30b6f16745bc47a8eae5076545 wallet> backupwallet Please input your password. password: BackupWallet successful !! 721d63b074f18d41c147e04c952ec93467777a30b6f16745bc47a8eae5076545 BackupWallet2Base64 \u00b6 This will Back up your wallet, you need to enter your wallet password to export the private key in base64 format, as below ch1jsHTxjUHBR+BMlS7JNGd3ejC28WdFvEeo6uUHZUU= wallet> backupwallet Please input your password. password: BackupWallet successful !! ch1jsHTxjUHBR+BMlS7JNGd3ejC28WdFvEeo6uUHZUU = ChangePassword \u00b6 Modify the password of an account wallet> changepassword Please input old password. password: Please input new password. Please input password. password: Please input password again. password: The 1th keystore file name is .DS_Store The 2th keystore file name is UTC--2022-06-27T10-58-59.306000000Z--TBnPDbw99BLzPUZuW8Rrcc3RGGQT3cnSfF.json Please choose between 1 and 2 2 ChangePassword successful !! ImportWallet \u00b6 Import a wallet, you need to set a password first and then enter your hex string private key. wallet> importwallet Please input password. password: Please input password again. password: Please input private key. Max retry time:3 bd1ff0f4f852db45316bf08755bf6eee45d0678bfbf852a00020a13d42a1fb5b Import a wallet successful, keystore file name is UTC--2022-06-28T06-52-56.928000000Z--TB9qhqbev6DpX8mxdf3zDdtSQ6GC6Vb6Ej.json ImportWalletByBase64 \u00b6 To import a wallet, you need to set a password first and then enter your private key in base64 format. wallet> importwalletbybase64 Please input password. password: Please input password again. password: Please input private key by base64. Max retry time:3 vR/w9PhS20Uxa/CHVb9u7kXQZ4v7+FKgACChPUKh+1s = Import a wallet successful, keystore file name is UTC--2022-06-28T06-51-56.154000000Z--TB9qhqbev6DpX8mxdf3zDdtSQ6GC6Vb6Ej.json Account \u00b6 Here are all the account related commands \uff1a GenerateAddress GetAccount GetAddress GetBalance UpdateAccountPermission GenerateAddress \u00b6 Generate an address and print out the public (address) and private key wallet> generateaddress { \"address\" : \"TQAvi6bemLa1t1irdV1KuaSC5vKc2EswTj\" , \"privateKey\" : \"610a8a809114a96140e1cb040a7813afc74603e58c3d7824c3f68ccc642c297e\" } Note address and private key generated by this command would not be saved in wallet-cli. Keep properly if you would like to use them. GetAccount \u00b6 Get account information by an address wallet> getaccount [ address ] wallet> getaccount TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8 { \"address\" : \"TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8\" , \"balance\" : 2665198240 , \"create_time\" : 1650363711000 , \"latest_opration_time\" : 1653578769000 , \"latest_consume_free_time\" : 1651228080000 , \"account_resource\" : { \"latest_consume_time_for_energy\" : 1653578769000 } , \"owner_permission\" : { \"permission_name\" : \"owner\" , \"threshold\" : 1 , \"keys\" : [ { \"address\" : \"TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8\" , \"weight\" : 1 } ] } , \"active_permission\" : [ { \"type\" : \"Active\" , \"id\" : 2 , \"permission_name\" : \"active\" , \"threshold\" : 1 , \"operations\" : \"7fff1fc0033e3b00000000000000000000000000000000000000000000000000\" , \"keys\" : [ { \"address\" : \"TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8\" , \"weight\" : 1 } ] } ] } GetAddress \u00b6 Get the address of the current account wallet> getaddress GetAddress successful !! address = TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8 GetBalance \u00b6 Get the TRX balance of the current account wallet> getbalance Balance = 2665198240 UpdateAccountPermission \u00b6 wallet>UpdateAccountPermission [ ownerAddress ] [ permissions ] This command is used to manage account permissions, assign permissions to other accounts, is utilized for multi-signature transactions, which allows other users to access the account with paritcular permission in order to better manage it. There are three types of permissions: owner: access to the owner of account active: access to other features of accounts, and access that authorizes a certain feature. Block production authorization is not included if it's for SR purposes. witness: only for super representatives, block production authorization will be granted to one of the other users. NOTE the parameter Permission must written in JSON format and entered in line. If the owner account is not SR, then do not assign super representative permission. wallet> updateaccountpermission TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8 { \"owner_permission\" : { \"keys\" : [{ \"address\" : \"TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8\" , \"weight\" :1 }] , \"threshold\" :1, \"type\" :0, \"permission_name\" : \"owner\" } , \"active_permissions\" : [{ \"operations\" : \"7fff1fc0033e0000000000000000000000000000000000000000000000000000\" , \"keys\" : [{ \"address\" : \"TB9qhqbev6DpX8mxdf3zDdtSQ6GC6Vb6Ej\" , \"weight\" :1 } , { \"address\" : \"TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE\" , \"weight\" :1 }] , \"threshold\" :2, \"type\" :2, \"permission_name\" : \"active12323\" }]} { \"raw_data\" : { \"contract\" : [ { \"parameter\" : { \"value\" : { \"owner\" : { \"keys\" : [ { \"address\" : \"TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8\" , \"weight\" :1 } ] , \"threshold\" :1, \"permission_name\" : \"owner\" } , \"owner_address\" : \"TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8\" , \"actives\" : [ { \"operations\" : \"7fff1fc0033e0000000000000000000000000000000000000000000000000000\" , \"keys\" : [ { \"address\" : \"TB9qhqbev6DpX8mxdf3zDdtSQ6GC6Vb6Ej\" , \"weight\" :1 } , { \"address\" : \"TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE\" , \"weight\" :1 } ] , \"threshold\" :2, \"type\" : \"Active\" , \"permission_name\" : \"active12323\" } ] } , \"type_url\" : \"type.googleapis.com/protocol.AccountPermissionUpdateContract\" } , \"type\" : \"AccountPermissionUpdateContract\" } ] , \"ref_block_bytes\" : \"4e88\" , \"ref_block_hash\" : \"11a47859be13f689\" , \"expiration\" :1656423231000, \"timestamp\" :1656423171818 } , \"raw_data_hex\" : \"0a024e88220811a47859be13f6894098dc92d49a305aee01082e12e9010a3c747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e4163636f756e745065726d697373696f6e557064617465436f6e747261637412a8010a1541babecec4d9f58f0df77f0728b9c53abb1f21d68412241a056f776e657220013a190a1541babecec4d9f58f0df77f0728b9c53abb1f21d6841001226908021a0b6163746976653132333233200232207fff1fc0033e00000000000000000000000000000000000000000000000000003a190a15410cfaec7164cbfe78dbb8d8fba7e23b4d745ed81310013a190a1541e8bd653015895947cec33d1670a88cf67ab277b9100170ea8d8fd49a30\" } before sign transaction hex string is 0a8d020a024e88220811a47859be13f6894098dc92d49a305aee01082e12e9010a3c747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e4163636f756e745065726d697373696f6e557064617465436f6e747261637412a8010a1541babecec4d9f58f0df77f0728b9c53abb1f21d68412241a056f776e657220013a190a1541babecec4d9f58f0df77f0728b9c53abb1f21d6841001226908021a0b6163746976653132333233200232207fff1fc0033e00000000000000000000000000000000000000000000000000003a190a15410cfaec7164cbfe78dbb8d8fba7e23b4d745ed81310013a190a1541e8bd653015895947cec33d1670a88cf67ab277b9100170ea8d8fd49a30 Please confirm and input your permission id, if input y or Y means default 0 , other non-numeric characters will cancel transaction. y Please choose your key for sign. The 1th keystore file name is UTC--2022-06-28T06-52-56.928000000Z--TB9qhqbev6DpX8mxdf3zDdtSQ6GC6Vb6Ej.json The 2th keystore file name is .DS_Store The 3th keystore file name is UTC--2022-04-06T09-43-20.710000000Z--TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8.json The 4th keystore file name is UTC--2022-04-07T09-03-38.307000000Z--TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE.json Please choose between 1 and 4 3 Please input your password. password: after sign transaction hex string is 0a8d020a024e88220811a47859be13f6894096bcb5de9a305aee01082e12e9010a3c747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e4163636f756e745065726d697373696f6e557064617465436f6e747261637412a8010a1541babecec4d9f58f0df77f0728b9c53abb1f21d68412241a056f776e657220013a190a1541babecec4d9f58f0df77f0728b9c53abb1f21d6841001226908021a0b6163746976653132333233200232207fff1fc0033e00000000000000000000000000000000000000000000000000003a190a15410cfaec7164cbfe78dbb8d8fba7e23b4d745ed81310013a190a1541e8bd653015895947cec33d1670a88cf67ab277b9100170ea8d8fd49a301241881b00f8e8828d9347469fcbcec730093841c2363561243b7162a9669439266049ab82f20f97a136adc88feff0a4d5aa57b11f762eaa7e05105d27ec5d55a33900 txid is 3dce7f18f6cf6962c38904678947b3b32f9e94ba6460874679d8ed063bb1c0eb UpdateAccountPermission successful !!! AccountResource \u00b6 Here are all the account resource related commands \uff1a freezeBalance unfreezeBalance getDelegatedResource freezeBalanceV2 unfreezeBalanceV2 delegateResource unDelegateResource withdrawExpireUnfreeze getAvailableUnfreezeCount getCanWithdrawUnfreezeAmount getCanDelegatedMaxSize getDelegatedResourceV2 getDelegatedResourceAccountIndexV2 getAccountNet getAccountResource freezeBalance \u00b6 This interface has been deprecated, please use freezeBalanceV2 to stake TRX to obtain resources. wallet> freezeBalance [ OwnerAddress ] [ frozen_balance ] [ frozen_duration ] [ ResourceCode:0 BANDWIDTH, 1 ENERGY ] [ receiverAddress ] OwnerAddress is the address of the account that initiated the transaction, optional, default is the address of the login account. frozen_balance is the amount of frozen TRX, the unit is the smallest unit (Sun), the minimum is 1000000sun. frozen_duration is frozen duration, only be specified as 3 days, indicates that you can unfreeze after 3 days. ResourceCode indicates the type of the acquired resource\uff0c0 BANDWIDTH and 1 ENERGY. receiverAddress is the address that will receive the resource. ResourceCode and receiverAddress are optional parameters. If ResourceCode is not set\uff0cdefault is 0. If receiverAddress is not set, the TRX is frozen to obtain resources for its OwnerAddress use; if it is not empty, the acquired resources are used by receiverAddress. Example: wallet> freezeBalance TWyDBTHsWJFhgywWkTNW7vh7jSUxeBaiAw 1000000 3 1 TCrkRWJuHP4VgQF3xwLNBAjVVXvxRRGpbA { \"raw_data\" : { ... } , \"raw_data_hex\" : \"0a02a9b822081db2070d39d2316640c095dda19a305a70080b126c0a32747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e467265657a6542616c616e6365436f6e747261637412360a1541e65aca838a9e15dd81bd9532d2ad61300e58cf7110c0843d180350017a15411fafb1e96dfe4f609e2259bfaf8c77b60c535b9370c6c8d9a19a30\" } before sign transaction hex string is 0a8e010a02a9b822081db2070d39d2316640c095dda19a305a70080b126c0a32747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e467265657a6542616c616e6365436f6e747261637412360a1541e65aca838a9e15dd81bd9532d2ad61300e58cf7110c0843d180350017a15411fafb1e96dfe4f609e2259bfaf8c77b60c535b9370c6c8d9a19a30 Please confirm and input your permission id, if input y or Y means default 0 , other non-numeric characters will cancel transaction. y Please choose your key for sign. The 1th keystore file name is UTC--2022-06-22T08-21-05.158000000Z--TDQgNvjrE6RH749f8aFGyJqEEGyhV4BDEU.json The 2th keystore file name is UTC--2022-06-27T07-37-47.601000000Z--TWyDBTHsWJFhgywWkTNW7vh7jSUxeBaiAw.json Please choose between 1 and 2 2 Please input your password. password: after sign transaction hex string is 0a8e010a02a9b822081db2070d39d2316640e0f7ffab9a305a70080b126c0a32747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e467265657a6542616c616e6365436f6e747261637412360a1541e65aca838a9e15dd81bd9532d2ad61300e58cf7110c0843d180350017a15411fafb1e96dfe4f609e2259bfaf8c77b60c535b9370c6c8d9a19a301241c45742648e6970e01b242c9b6eca2549c8721b860ced71abd331b9fe925f3c0f184768e0d2e3b580ce787cc6f67d186a0d583226fdb69c2cc8cfc6ec42e389f600 txid is f45cb5ae425796a492d4a9ecac8d60fd48bf78dbcdbe1d92725047c5dfbffba2 FreezeBalance successful !!! unfreezeBalance \u00b6 unstake TRX which staked during stake1.o. wallet>unfreezeBalance [ OwnerAddress ] ResourceCode ( 0 BANDWIDTH,1 ENERGY,2 TRON_POWER ) [ receiverAddress ] OwnerAddress is the address of the account that initiated the transaction, optional, default is the address of the login account. ResourceCode indicates the type of the acquired resource\uff0c0 stands for BANDWIDTH and 1 stands for ENERGY. receiverAddress is the address that will receive the resource. wallet> unfreezebalance TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8 1 TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE { \"raw_data\":{ \"contract\":[ { \"parameter\":{ \"value\":{ \"resource\":\"ENERGY\", \"receiver_address\":\"TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE\", \"owner_address\":\"TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8\" }, \"type_url\":\"type.googleapis.com/protocol.UnfreezeBalanceContract\" }, \"type\":\"UnfreezeBalanceContract\" } ], \"ref_block_bytes\":\"c8b7\", \"ref_block_hash\":\"8842722f2845274d\", \"expiration\":1656915213000, \"timestamp\":1656915154748 }, \"raw_data_hex\":\"0a02c8b722088842722f2845274d40c8f5debe9c305a6c080c12680a34747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e556e667265657a6542616c616e6365436f6e747261637412300a1541babecec4d9f58f0df77f0728b9c53abb1f21d68450017a1541e8bd653015895947cec33d1670a88cf67ab277b970bcaedbbe9c30\" } before sign transaction hex string is 0a8a010a02c8b722088842722f2845274d40c8f5debe9c305a6c080c12680a34747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e556e667265657a6542616c616e6365436f6e747261637412300a1541babecec4d9f58f0df77f0728b9c53abb1f21d68450017a1541e8bd653015895947cec33d1670a88cf67ab277b970bcaedbbe9c30 Please confirm and input your permission id, if input y or Y means default 0, other non-numeric characters will cancel transaction. y Please choose your key for sign. The 1th keystore file name is UTC--2022-06-28T06-52-56.928000000Z--TB9qhqbev6DpX8mxdf3zDdtSQ6GC6Vb6Ej.json The 2th keystore file name is .DS_Store The 3th keystore file name is UTC--2022-04-06T09-43-20.710000000Z--TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8.json The 4th keystore file name is UTC--2022-04-07T09-03-38.307000000Z--TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE.json Please choose between 1 and 4 3 Please input your password. password: after sign transaction hex string is 0a8a010a02c8b722088842722f2845274d40e8dd81c99c305a6c080c12680a34747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e556e667265657a6542616c616e6365436f6e747261637412300a1541babecec4d9f58f0df77f0728b9c53abb1f21d68450017a1541e8bd653015895947cec33d1670a88cf67ab277b970bcaedbbe9c301241593a94650274df29619a6a6946258ea32a22f24a33445f943e3d72cd7d9b8ce7234d188f4bf3a6f0c90cb60af36fc77dc8d376afac9ed840f36dfd68c429fb7e00 txid is 3ea58b3ac2cb05868e70d40f58916312d927c40fd1e4c549554dc3e520c1efde UnfreezeBalance successful !!! getDelegatedResource \u00b6 wallet>getdelegatedresource [fromAddress] [toAddress] Get the information from the fromAddress , which is the resource owner's address, to the toAddress , which is the delegated address who is on behalf of the resource owner. wallet> getdelegatedresource TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8 TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE { \"delegatedResource\" : [ { \"from\" : \"TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8\" , \"to\" : \"TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE\" , \"frozen_balance_for_energy\" : 1000000 , \"expire_time_for_energy\" : 1656660447000 } ] } freezeBalanceV2 \u00b6 Stake 2.0 API: Stake TRX to obtain TRON Power (voting rights) and bandwidth or energy. wallet> freezeBalanceV2 [ OwnerAddress ] frozen_balance ResourceCode ( 0 BANDWIDTH,1 ENERGY,2 TRON_POWER ) OwnerAddress is the address of the account that initiated the transaction, optional, default is the address of the login account. frozen_balance is the amount of frozen TRX, the unit is the smallest unit (Sun), the minimum is 1000000sun. ResourceCode indicates the type of the acquired resource\uff0c0 BANDWIDTH and 1 ENERGY. Example: wallet> freezeBalanceV2 1000000 1 { \"raw_data\" : { \"contract\" : [ { \"parameter\" : { \"value\" : { \"resource\" : \"ENERGY\" , \"frozen_balance\" :1000000, \"owner_address\" : \"TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\" } , \"type_url\" : \"type.googleapis.com/protocol.FreezeBalanceV2Contract\" } , \"type\" : \"FreezeBalanceV2Contract\" } ] , \"ref_block_bytes\" : \"00bb\" , \"ref_block_hash\" : \"0c237850e9e3c216\" , \"expiration\" :1676620524000, \"timestamp\" :1676620465372 } , \"raw_data_hex\" : \"0a0200bb22080c237850e9e3c21640e0d3fbf2e5305a59083612550a34747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e467265657a6542616c616e63655632436f6e7472616374121d0a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca10c0843d180170dc89f8f2e530\" } before sign transaction hex string is 0a770a0200bb22080c237850e9e3c21640e0d3fbf2e5305a59083612550a34747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e467265657a6542616c616e63655632436f6e7472616374121d0a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca10c0843d180170dc89f8f2e530 Please confirm and input your permission id, if input y or Y means default 0 , other non-numeric characters will cancel transaction. y Please choose your key for sign. The 1th keystore file name is UTC--2023-02-17T02-53-57.163000000Z--THLJLytz6UHwpmDFi5RC43D44dmnh4ZTeL.json The 2th keystore file name is UTC--2023-02-17T07-40-47.121000000Z--TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM.json Please choose between 1 and 2 2 Please input your password. password: after sign transaction hex string is 0a770a0200bb22080c237850e9e3c21640dbb89efde5305a59083612550a34747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e467265657a6542616c616e63655632436f6e7472616374121d0a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca10c0843d180170dc89f8f2e53012419e46cc7b6706ee6a14a541df5f9c518fae9a71ac7a7cc484c48386eb0997a8ab10c41e09feb905c5cc370fe1d15968d22cec2fd2cdc5916adfd3a78c52f8d47000 txid is 1743aa098f5e10ac8b68ccbf0ca6b5f1364a63485e442e6cb03fd33e3331e3fb freezeBalanceV2 successful !!! unfreezeBalanceV2 \u00b6 Stake 2.0 API: Unstake TRX to release bandwidth and energy and at the same time TRON Power will be reclaimed and corresponding votes will be revoked. wallet> unfreezeBalanceV2 [ OwnerAddress ] unfreezeBalance ResourceCode ( 0 BANDWIDTH,1 ENERGY,2 TRON_POWER ) OwnerAddress is the address of the account that initiated the transaction, optional, default is the address of the login account. unfreezeBalance Amount of TRX to be unstaked. the unit is sun. ResourceCode indicates the type of the acquired resource\uff0c0 stands for BANDWIDTH and 1 stands for ENERGY. Example: wallet> unfreezeBalanceV2 1000000 1 { \"raw_data\" : { \"contract\" : [ { \"parameter\" : { \"value\" : { \"resource\" : \"ENERGY\" , \"owner_address\" : \"TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\" , \"unfreeze_balance\" :1000000 } , \"type_url\" : \"type.googleapis.com/protocol.UnfreezeBalanceV2Contract\" } , \"type\" : \"UnfreezeBalanceV2Contract\" } ] , \"ref_block_bytes\" : \"0132\" , \"ref_block_hash\" : \"0772c1a1727e2ef0\" , \"expiration\" :1676620887000, \"timestamp\" :1676620829314 } , \"raw_data_hex\" : \"0a02013222080772c1a1727e2ef040d8e791f3e5305a5b083712570a36747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e556e667265657a6542616c616e63655632436f6e7472616374121d0a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca10c0843d18017082a58ef3e530\" } before sign transaction hex string is 0a790a02013222080772c1a1727e2ef040d8e791f3e5305a5b083712570a36747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e556e667265657a6542616c616e63655632436f6e7472616374121d0a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca10c0843d18017082a58ef3e530 Please confirm and input your permission id, if input y or Y means default 0 , other non-numeric characters will cancel transaction. y Please choose your key for sign. The 1th keystore file name is UTC--2023-02-17T02-53-57.163000000Z--THLJLytz6UHwpmDFi5RC43D44dmnh4ZTeL.json The 2th keystore file name is UTC--2023-02-17T07-40-47.121000000Z--TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM.json Please choose between 1 and 2 2 Please input your password. password: after sign transaction hex string is 0a790a02013222080772c1a1727e2ef040ecd2b4fde5305a5b083712570a36747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e556e667265657a6542616c616e63655632436f6e7472616374121d0a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca10c0843d18017082a58ef3e530124111bac22e9bc35e1a78c13796893e9f2b81dc99eb26d9ce7a95d0c6a0a9b5588739c52b999acd370b255d178f57bf2abef8881891f23e042ddf83c3551b8bd98e01 txid is f9e114347ea89c5d722d20226817bc41c8a39ea36be756ba216cf450ab3f1fb3 unfreezeBalanceV2 successful !!! delegateResource \u00b6 Stake 2.0 API: delegate bandwidth or energy resource to other address. wallet> delegateResource [ OwnerAddress ] balance ResourceCode ( 0 BANDWIDTH,1 ENERGY ) , ReceiverAddress [ lock ] OwnerAddress is the address of the account that initiated the transaction, optional, default is the address of the login account. balance Amount of TRX staked for resources to be delegated, unit is sun. ResourceCode Resource type, \"BANDWIDTH\" is 0, \"ENERGY\" is 1. ReceiverAddress Receiver address of resource to be delegated to. lock Whether it is locked, if it is set to true, the delegated resources cannot be undelegated within 3 days. When the lock time is not over, if the owner delegates the same type of resources using the lock to the same address, the lock time will be reset to 3 days. optional, default is 0, 0-lock, 1-unlock. Example: wallet> delegateResource 1000000 1 TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g 0 { \"raw_data\" : { \"contract\" : [ { \"parameter\" : { \"value\" : { \"balance\" :1000000, \"resource\" : \"ENERGY\" , \"receiver_address\" : \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\" , \"owner_address\" : \"TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\" } , \"type_url\" : \"type.googleapis.com/protocol.DelegateResourceContract\" } , \"type\" : \"DelegateResourceContract\" } ] , \"ref_block_bytes\" : \"020c\" , \"ref_block_hash\" : \"54e32e95d11894f8\" , \"expiration\" :1676621547000, \"timestamp\" :1676621487525 } , \"raw_data_hex\" : \"0a02020c220854e32e95d11894f840f88bbaf3e5305a710839126d0a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e44656c65676174655265736f75726365436f6e747261637412340a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca100118c0843d221541fd49eda0f23ff7ec1d03b52c3a45991c24cd440e70a5bbb6f3e530\" } before sign transaction hex string is 0a8f010a02020c220854e32e95d11894f840f88bbaf3e5305a710839126d0a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e44656c65676174655265736f75726365436f6e747261637412340a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca100118c0843d221541fd49eda0f23ff7ec1d03b52c3a45991c24cd440e70a5bbb6f3e530 Please confirm and input your permission id, if input y or Y means default 0 , other non-numeric characters will cancel transaction. y Please choose your key for sign. The 1th keystore file name is UTC--2023-02-17T02-53-57.163000000Z--THLJLytz6UHwpmDFi5RC43D44dmnh4ZTeL.json The 2th keystore file name is UTC--2023-02-17T07-40-47.121000000Z--TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM.json Please choose between 1 and 2 2 Please input your password. password: after sign transaction hex string is 0a8f010a02020c220854e32e95d11894f84093e9dcfde5305a710839126d0a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e44656c65676174655265736f75726365436f6e747261637412340a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca100118c0843d221541fd49eda0f23ff7ec1d03b52c3a45991c24cd440e70a5bbb6f3e5301241414de060e9c104bb45d745e22b7b7a30b4a89a2635c62aab152fff5d2f10b7443023a9aa487be86652b74974ff6a7d82d3dbf94cea9ac1e0a7e48e682175e3f601 txid is 0917002d0068dde7ad4ffe46e75303d11192e17bfa78934a5f867c5ae20720ec delegateResource successful !!! unDelegateResource \u00b6 Stake 2.0 API: undelegate resource. wallet> unDelegateResource [ OwnerAddress ] balance ResourceCode ( 0 BANDWIDTH,1 ENERGY ) , ReceiverAddress OwnerAddress is the address of the account that initiated the transaction, optional, default is the address of the login account. balance Amount of TRX staked for resource to be undelegated, unit is sun. ResourceCode Resource type, \"BANDWIDTH\" is 0, \"ENERGY\" is 1. ReceiverAddress Receiver address of resource to be delegated to. Example: wallet> unDelegateResource 1000000 1 TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g { \"raw_data\" : { \"contract\" : [ { \"parameter\" : { \"value\" : { \"balance\" :1000000, \"resource\" : \"ENERGY\" , \"receiver_address\" : \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\" , \"owner_address\" : \"TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\" } , \"type_url\" : \"type.googleapis.com/protocol.UnDelegateResourceContract\" } , \"type\" : \"UnDelegateResourceContract\" } ] , \"ref_block_bytes\" : \"0251\" , \"ref_block_hash\" : \"68ac15256c213e71\" , \"expiration\" :1676621754000, \"timestamp\" :1676621695001 } , \"raw_data_hex\" : \"0a020251220868ac15256c213e714090ddc6f3e5305a73083a126f0a37747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e556e44656c65676174655265736f75726365436f6e747261637412340a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca100118c0843d221541fd49eda0f23ff7ec1d03b52c3a45991c24cd440e709990c3f3e530\" } before sign transaction hex string is 0a91010a020251220868ac15256c213e714090ddc6f3e5305a73083a126f0a37747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e556e44656c65676174655265736f75726365436f6e747261637412340a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca100118c0843d221541fd49eda0f23ff7ec1d03b52c3a45991c24cd440e709990c3f3e530 Please confirm and input your permission id, if input y or Y means default 0 , other non-numeric characters will cancel transaction. y Please choose your key for sign. The 1th keystore file name is UTC--2023-02-17T02-53-57.163000000Z--THLJLytz6UHwpmDFi5RC43D44dmnh4ZTeL.json The 2th keystore file name is UTC--2023-02-17T07-40-47.121000000Z--TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM.json Please choose between 1 and 2 2 Please input your password. password: after sign transaction hex string is 0a91010a020251220868ac15256c213e7140febde9fde5305a73083a126f0a37747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e556e44656c65676174655265736f75726365436f6e747261637412340a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca100118c0843d221541fd49eda0f23ff7ec1d03b52c3a45991c24cd440e709990c3f3e530124102ebde16d1abaccd976f8ead4b5acf92b05f7d9796c28ca6a26b4e51442e638e5e33e598bb03732da24dc761a39b9d307c045b55323128dc9b07510ffc48933a01 txid is 537a3f4461ab55c705b77503bc42f469bfc22c0cb8588b8f3641ab40117ebfd8 unDelegateResource successful !!! withdrawExpireUnfreeze \u00b6 Stake 2.0 API: withdraw unfrozen balance. wallet> withdrawExpireUnfreeze [ OwnerAddress ] OwnerAddress is the address of the account that initiated the transaction, optional, default is the address of the login account. Example: wallet> withdrawExpireUnfreeze getavailableunfreezecount \u00b6 Stake 2.0 API: remaining times of executing unstake operation. wallet> getavailableunfreezecount [ OwnerAddress ] OwnerAddress is the address of the account that initiated the transaction, optional, default is the address of the login account. Example: wallet> GetAvailableUnfreezeCount { \"count\" : 30 } getcanwithdrawunfreezeamount \u00b6 Stake 2.0 API: query the withdrawable balance at the specified timestamp. wallet> getcanwithdrawunfreezeamount ownerAddress timestamp OwnerAddress is the address of the account that initiated the transaction, optional, default is the address of the login account. timestamp query cutoff timestamp, in milliseconds. Example: wallet> getcanwithdrawunfreezeamount 1776621695001 { \"amount\" : 4000000 } getcandelegatedmaxsize \u00b6 Stake 2.0 API: query the amount of delegatable resources share of the specified resource type for an address, unit is sun. wallet> getcandelegatedmaxsize ownerAddress type OwnerAddress is the address of the account that initiated the transaction, optional, default is the address of the login account. type resource type, 0 is bandwidth, 1 is energy Example: wallet> getcandelegatedmaxsize 1 { \"max_size\" : 11000000 } getdelegatedresourcev2 \u00b6 Stake 2.0 API\uff1aquery the detail of resource share delegated from fromAddress to toAddress. wallet> getdelegatedresourcev2 fromAddress toAddress fromAddress resource from address. toAddress resource to address. Example: wallet> getdelegatedresourcev2 TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g { \"delegatedResource\" : [ { \"from\" : \"TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\" , \"to\" : \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\" , \"frozen_balance_for_bandwidth\" : 7000000 , \"frozen_balance_for_energy\" : 3000000 } ] } getdelegatedresourceaccountindexv2 \u00b6 Stake 2.0 API\uff1aquery the resource delegation index by an account. Two lists will return, one is the list of addresses the account has delegated its resources(toAddress), and the other is the list of addresses that have delegated resources to the account(fromAddress). wallet> getdelegatedresourceaccountindexv2 ownerAddress OwnerAddress account address. Example: wallet> getdelegatedresourceaccountindexv2 TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM { \"account\" : \"TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\" , \"fromAccounts\" : [ \"TUznHJfHe6gdYY7gvWmf6bNZHuPHDZtowf\" ] , \"toAccounts\" : [ \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\" ] } GetAccountNet \u00b6 This command shows the usage of bandwidth for a certain account. wallet> getaccountnet TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8 { \"freeNetUsed\" : 262 , \"freeNetLimit\" : 1500 , \"TotalNetLimit\" : 43200000000 , \"TotalNetWeight\" : 8725123062 } GetAccountResource \u00b6 This command shows the usage of bandwidth and energy for a certain account. wallet> getaccountresource TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8 { \"freeNetUsed\" : 262 , \"freeNetLimit\" : 1500 , \"TotalNetLimit\" : 43200000000 , \"TotalNetWeight\" : 8725123062 , \"tronPowerLimit\" : 1 , \"TotalEnergyLimit\" : 90000000000 , \"TotalEnergyWeight\" : 328098231 } Transaction \u00b6 Here are all the transaction related commands \uff1a SendCoin AddTransactionSign BroadcastTransaction BackupWallet2Base64 GetTransactionApprovedList SendCoin \u00b6 > SendCoin [toAddress] [amount] Here is an example of multi-signed transaction. The accounts permission have assigned as in UpdateAccountPermission section, please check for reference. wallet> SendCoin TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE 10 { \"raw_data\" : { \"contract\" : [ \u00b7\u00b7\u00b7 \"raw_data_hex\" : \"0a029ca12208432ed1fe1357ff7f40c0c484f19a305a65080112610a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412300a1541babecec4d9f58f0df77f0728b9c53abb1f21d684121541e8bd653015895947cec33d1670a88cf67ab277b9180a708a8481f19a30\" } before sign transaction hex string is 0a83010a029ca12208432ed1fe1357ff7f40c0c484f19a305a65080112610a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412300a1541babecec4d9f58f0df77f0728b9c53abb1f21d684121541e8bd653015895947cec33d1670a88cf67ab277b9180a708a8481f19a30 Please confirm and input your permission id, if input y or Y means default 0 , other non-numeric characters will cancel transaction. 2 Please choose your key for sign. The 1th keystore file name is UTC--2022-06-28T06-52-56.928000000Z--TB9qhqbev6DpX8mxdf3zDdtSQ6GC6Vb6Ej.json The 2th keystore file name is .DS_Store The 3th keystore file name is UTC--2022-04-06T09-43-20.710000000Z--TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8.json The 4th keystore file name is UTC--2022-04-07T09-03-38.307000000Z--TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE.json Please choose between 1 and 4 1 Please input your password. password: Current signWeight is: { \"result\" : { \"code\" : \"NOT_ENOUGH_PERMISSION\" } , \"approved_list\" : [ \"TB9qhqbev6DpX8mxdf3zDdtSQ6GC6Vb6Ej\" ] , \"permission\" : { \"operations\" : \"7fff1fc0033e0000000000000000000000000000000000000000000000000000\" , \"keys\" : [ { \"address\" : \"TB9qhqbev6DpX8mxdf3zDdtSQ6GC6Vb6Ej\" , \"weight\" :1 } , { \"address\" : \"TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE\" , \"weight\" :1 } ] , \"threshold\" :2, \"id\" :2, \"type\" : \"Active\" , \"permission_name\" : \"active12323\" } , \"current_weight\" :1, \"transaction\" : { \"result\" : { \"result\" :true } , \"txid\" : \"ece603ec8ad11578450dc8adf29dd9d9833e733c313fe16a947c8c768f1e4483\" , \"transaction\" : { \"signature\" : [ \"990001e909e638bbaa5de9b392121971d25cabde1391f5e164cd8a14608812df01a273e867c2329b8adb233599c5d353c435e789c777fd3e0b9fe83f0737a91101\" ] , \"txID\" : \"ece603ec8ad11578450dc8adf29dd9d9833e733c313fe16a947c8c768f1e4483\" , \"raw_data\" :\u00b7\u00b7\u00b7, \"raw_data_hex\" : \"0a029ca12208432ed1fe1357ff7f40a2b3a7fb9a305a67080112610a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412300a1541babecec4d9f58f0df77f0728b9c53abb1f21d684121541e8bd653015895947cec33d1670a88cf67ab277b9180a2802708a8481f19a30\" } } } Please confirm if continue add signature enter y or Y, else any other y Please choose your key for sign. The 1th keystore file name is UTC--2022-06-28T06-52-56.928000000Z--TB9qhqbev6DpX8mxdf3zDdtSQ6GC6Vb6Ej.json The 2th keystore file name is .DS_Store The 3th keystore file name is UTC--2022-04-06T09-43-20.710000000Z--TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8.json The 4th keystore file name is UTC--2022-04-07T09-03-38.307000000Z--TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE.json Please choose between 1 and 4 4 Please input your password. password: after sign transaction hex string is 0a85010a029ca12208432ed1fe1357ff7f40a2b3a7fb9a305a67080112610a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412300a1541babecec4d9f58f0df77f0728b9c53abb1f21d684121541e8bd653015895947cec33d1670a88cf67ab277b9180a2802708a8481f19a301241990001e909e638bbaa5de9b392121971d25cabde1391f5e164cd8a14608812df01a273e867c2329b8adb233599c5d353c435e789c777fd3e0b9fe83f0737a91101124141ba3ffe9c7bb1ed184df8bf635d8c987982b2f4b22c447666ac82726f4a97cb2ef4d3fabd64137b8d59239bd7173c74264733ed140ccd04934a88c438de1cab00 txid is ece603ec8ad11578450dc8adf29dd9d9833e733c313fe16a947c8c768f1e4483 Send 10 Sun to TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE successful !! A permission_id is always required, it is \"0\" by default, which means this transaction only needed to be sign by owner. In the example above, we enter \"2\" to make a multi-signed transaction this time, needs the two accounts assigned actives permission in UpdateAccountPermission section above to sign this transaction. In the example, we picked the account TB9qhqbev6DpX8mxdf3zDdtSQ6GC6Vb6Ej to sign first, after that, it asks you if want to add another sign ,enter y and pick the account TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE to finish multi-signing. The weight of each account is 1 and the granting threshold is 2. When the requirements are met, the transaction is done successfully! This example shows how to complete a multi-signed transaction using the same client. When using multiple clients, please refer to the following command. AddTransactionSign \u00b6 Use the instruction addTransactionSign according to the obtained transaction hex string if signing at multiple cli. wallet> addtransactionsign 0a83010a0241aa2208b2d2c13c86e8bd884098acb1cf9a305a65080112610a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412300a1541babecec4d9f58f0df77f0728b9c53abb1f21d684121541e8bd653015895947cec33d1670a88cf67ab277b9180a70e8e1adcf9a30 Please input permission id. 0 Please choose your key for sign. The 1th keystore file name is UTC--2022-06-28T06-52-56.928000000Z--TB9qhqbev6DpX8mxdf3zDdtSQ6GC6Vb6Ej.json The 2th keystore file name is .DS_Store The 3th keystore file name is UTC--2022-04-06T09-43-20.710000000Z--TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8.json The 4th keystore file name is UTC--2022-04-07T09-03-38.307000000Z--TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE.json Please choose between 1 and 4 3 Please input your password. password: { \"signature\" : [ \"dbfe007bb44e8db164f4c0cf9b586a8d6a65f0612c4d9ec5350adeae6cd97c7874e7254bbf4156b545a90c34e48c8f28bdb5c8f9258514233b9201b2844d7f9201\" ] , \"txID\" : \"6e1d2460796f717b701e355734ac0e4e8b32e14c24ce569a60ad3f63afe46c87\" , \"raw_data\" : { \"contract\" : [ { \"parameter\" : { \"value\" : { \"amount\" :10, \"owner_address\" : \"TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8\" , \"to_address\" : \"TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE\" } , \"type_url\" : \"type.googleapis.com/protocol.TransferContract\" } , \"type\" : \"TransferContract\" } ] , \"ref_block_bytes\" : \"41aa\" , \"ref_block_hash\" : \"b2d2c13c86e8bd88\" , \"expiration\" :1656434882649, \"timestamp\" :1656413188328 } , \"raw_data_hex\" : \"0a0241aa2208b2d2c13c86e8bd8840d9f0d9d99a305a65080112610a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412300a1541babecec4d9f58f0df77f0728b9c53abb1f21d684121541e8bd653015895947cec33d1670a88cf67ab277b9180a70e8e1adcf9a30\" } Transaction hex string is 0a83010a0241aa2208b2d2c13c86e8bd8840d9f0d9d99a305a65080112610a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412300a1541babecec4d9f58f0df77f0728b9c53abb1f21d684121541e8bd653015895947cec33d1670a88cf67ab277b9180a70e8e1adcf9a301241dbfe007bb44e8db164f4c0cf9b586a8d6a65f0612c4d9ec5350adeae6cd97c7874e7254bbf4156b545a90c34e48c8f28bdb5c8f9258514233b9201b2844d7f9201 After signing, the users will need to broadcast final transactions manually. BroadcastTransaction \u00b6 Broadcast the transaction, where the transaction is in hex string format. wallet> broadcasttransaction 0a83010a0241aa2208b2d2c13c86e8bd8840d9f0d9d99a305a65080112610a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412300a1541babecec4d9f58f0df77f0728b9c53abb1f21d684121541e8bd653015895947cec33d1670a88cf67ab277b9180a70e8e1adcf9a301241dbfe007bb44e8db164f4c0cf9b586a8d6a65f0612c4d9ec5350adeae6cd97c7874e7254bbf4156b545a90c34e48c8f28bdb5c8f9258514233b9201b2844d7f9201 BroadcastTransaction successful !!! GetTransactionApprovedList \u00b6 Get signature information according to transactions. wallet> getTransactionApprovedList 0a8c010a020318220860e195d3609c86614096eadec79d2d5a6e080112680a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412370a1541a7d8a35b260395c14aa456297662092ba3b76fc01215415a523b449890854c8fc460ab602df9f31fe4293f18808084fea6dee11128027094bcb8bd9d2d1241c18ca91f1533ecdd83041eb0005683c4a39a2310ec60456b1f0075b4517443cf4f601a69788f001d4bc03872e892a5e25c618e38e7b81b8b1e69d07823625c2b0112413d61eb0f8868990cfa138b19878e607af957c37b51961d8be16168d7796675384e24043d121d01569895fcc7deb37648c59f538a8909115e64da167ff659c26101 { \"result\" : { } , \"approved_list\" : [ \"TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8\" ] , \"transaction\" : { \"result\" : { \"result\" :true } , \"txid\" : \"6e1d2460796f717b701e355734ac0e4e8b32e14c24ce569a60ad3f63afe46c87\" , \"transaction\" : { \"signature\" : [ \"dbfe007bb44e8db164f4c0cf9b586a8d6a65f0612c4d9ec5350adeae6cd97c7874e7254bbf4156b545a90c34e48c8f28bdb5c8f9258514233b9201b2844d7f9201\" ] , \"txID\" : \"6e1d2460796f717b701e355734ac0e4e8b32e14c24ce569a60ad3f63afe46c87\" , \"raw_data\" : { \"contract\" : [ { \"parameter\" : { \"value\" : { \"amount\" :10, \"owner_address\" : \"TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8\" , \"to_address\" : \"TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE\" } , \"type_url\" : \"type.googleapis.com/protocol.TransferContract\" } , \"type\" : \"TransferContract\" } ] , \"ref_block_bytes\" : \"41aa\" , \"ref_block_hash\" : \"b2d2c13c86e8bd88\" , \"expiration\" :1656434882649, \"timestamp\" :1656413188328 } , \"raw_data_hex\" : \"0a0241aa2208b2d2c13c86e8bd8840d9f0d9d99a305a65080112610a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412300a1541babecec4d9f58f0df77f0728b9c53abb1f21d684121541e8bd653015895947cec33d1670a88cf67ab277b9180a70e8e1adcf9a30\" } } } On-ChainInquire \u00b6 Here are all the on-chain inquire commands \uff1a GetNextMaintenanceTime ListNodes GetBlock GetBlockbyID GetBlockbyLatestNum GetBlockbyLimitNext GetTransactionbyID GetTransactionCountbyBlockNum GetTransactionInfobyID GetTransactionInfobyBlockNum GetTransactionSignWeight GetNextMaintenanceTime \u00b6 Get the start time of the next maintain period wallet> GetNextMaintenanceTime Next maintenance time is : 2022-06-29 16:40:00 ListNodes \u00b6 Get other peers' information wallet> listnodes IP::1.23.456.789 Port::12345 IP::2.345.67.89 Port::12345 IP::345.678.901.234 Port::12345 \u00b7\u00b7\u00b7 GetBlock \u00b6 Get the block by block height; if you do not pass the parameter, get the latest block wallet> getblock Get current block !!! { \"block_header\" : { \"raw_data\" : { \"number\" :27774469, \"txTrieRoot\" : \"0000000000000000000000000000000000000000000000000000000000000000\" , \"witness_address\" : \"TQuzjxWcqHSh1xDUw4wmMFmCcLjz4wSCBp\" , \"parentHash\" : \"0000000001a7ce048eb88d7c3c5e9c5f8e93a6cc568f47140e243d00d0f9280a\" , \"version\" :24, \"timestamp\" :1656919215000 } , \"witness_signature\" : \"3af25276891b1cf7f9f72e63ad956b50e5819fb3fa6f0b6393ed092e53a90a5438620b92b5d499e0068c6775b723e3c90677157b3e9f7b8933d1e863716145f500\" } } GetBlockbyID \u00b6 Get block based on blockID\uff08block hash\uff09 wallet> getblockbyid [blockID] wallet> getblockbyid 0000000001a7cd54ee2b302cfd443cccec78e55a31902d2e7ea47e737c1a5ede { \"block_header\" : { \"raw_data\" : { \"number\" :27774292, \"txTrieRoot\" : \"a60f8cb160d06d5279cb463925274e18fec37f0414c4d8fdc4fb2299ccb0a8bf\" , \"witness_address\" : \"TGsdxpHNJaxsVNFFdb4R6Rib1TsKGon2Wp\" , \"parentHash\" : \"0000000001a7cd53685867286b17fa0f2389e1d3026bea0a0019c5fc37f873cb\" , \"version\" :24, \"timestamp\" :1656918678000 } , \"witness_signature\" : \"a93db1a8d989c6637d587369de2872a008f14d1df8f0aaeda8a54c324a44c269367ea31daf623834fd6a4ef3f6150ab8d370adff1df6c0e8c96af9cf34408d5600\" } , \u00b7\u00b7\u00b7 GetBlockByLatestNum \u00b6 Get the latest n blocks, where 0 < n < 100 wallet> getblockbylatestnum [n] GetBlockByLimitNext \u00b6 Get the block in a set range by block height. startBlock is the starting block height, endBlock is the ending block height. wallet> GetBlockByLimitNext [startBlock, endBlock] wallet> getblockbylimitnext 27774670 27774674 [ { \"block_header\" : { \"raw_data\" : { \"number\" :27774670, \"txTrieRoot\" : \"0eb9ba48deda22fafa613c0aefa6d3e0b21261ad82a126ce99a6b80e8b68045c\" , \"witness_address\" : \"TVKfvNUMcZdZbxhPLb2CkQ4nyUUhvwhv1b\" , \"parentHash\" : \"0000000001a7cecd7a2cdc58fdfd2edbfeaeb530958879bf1a299cc30043cd0b\" , \"version\" :24, \"timestamp\" :1656919824000 } , \"witness_signature\" : \"ee6653289e24edd24d70f4975e12934573d6e798a2a5c5e26e0b13bc6d25138c49a0f55fb0e9a5c503622b5877811403577a5e278528293d05c5f0b9d5d5542401\" } , \u00b7\u00b7\u00b7 GetTransactionbyID \u00b6 Get transaction information based on transaction id (hash) wallet> GetTransactionById [transactionID] GetTransactionCountbyBlockNum \u00b6 Get how many transactions contains in a block based on block height, see below wallet> gettransactioncountbyblocknum 27633562 The block contains 4 transactions GetTransactionInfobyID \u00b6 Get transaction-info based on transaction id, generally used to check the result of a smart contract trigger wallet> gettransactioninfobyid 6e1d2460796f717b701e355734ac0e4e8b32e14c24ce569a60ad3f63afe46c87 { \"id\": \"6e1d2460796f717b701e355734ac0e4e8b32e14c24ce569a60ad3f63afe46c87\", \"blockNumber\": 27609041, \"blockTimeStamp\": 1656417906000, \"contractResult\": [ \"\" ], \"receipt\": { \"net_usage\": 265 } } GetTransactionInfobyBlockNum \u00b6 Get the list of transaction information in the block based on the block height wallet> gettransactioninfobyblocknum [blockNum] GetTransactionSignWeight \u00b6 Get the sign weight by transaction hex string. >getTransactionSignWeight 0a83010a0241aa2208b2d2c13c86e8bd8840d9f0d9d99a305a65080112610a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412300a1541babecec4d9f58f0df77f0728b9c53abb1f21d684121541e8bd653015895947cec33d1670a88cf67ab277b9180a70e8e1adcf9a301241dbfe007bb44e8db164f4c0cf9b586a8d6a65f0612c4d9ec5350adeae6cd97c7874e7254bbf4156b545a90c34e48c8f28bdb5c8f9258514233b9201b2844d7f9201 The information displays as follows: { \"result\":{ }, \"approved_list\":[ \"TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8\" ], \"permission\":{ \"keys\":[ { \"address\":\"TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8\", \"weight\":1 } ], \"threshold\":1, \"permission_name\":\"owner\" }, \"current_weight\":1, \"transaction\":{ \"result\":{ \"result\":true }, \"txid\":\"6e1d2460796f717b701e355734ac0e4e8b32e14c24ce569a60ad3f63afe46c87\", \"transaction\":{ \"signature\":[ \"dbfe007bb44e8db164f4c0cf9b586a8d6a65f0612c4d9ec5350adeae6cd97c7874e7254bbf4156b545a90c34e48c8f28bdb5c8f9258514233b9201b2844d7f9201\" ], \u00b7\u00b7\u00b7 } } } SmartContract \u00b6 Below, please find all the commands for smart contract interactions: DeployContract TriggerContract TriggerConstantContract EstimateEnergy GetContract UpdateEnergyLimit UpdateSetting DeployContract \u00b6 wallet> DeployContract [ ownerAddress ] [ contractName ] [ ABI ] [ byteCode ] [ constructor ] [ params ] [ isHex ] [ fee_limit ] [ consume_user_resource_percent ] [ origin_energy_limit ] [ value ] [ token_value ] [ token_id ]( e.g: TRXTOKEN, use # if don't provided) <library:address,library:address,...> <lib_compiler_version(e.g:v5)> library:address,...> OwnerAddress is the address of the account that initiated the transaction, optional, considered as the address of the login account by default. contractName is the name of smart contract. ABI is ABI code generated when compiling. byteCode is byte code generated when compiling. constructor , params , isHex These three parameters define the format of the bytecode, which determines the way to parse byteCode from parameters. fee_limit determines the limit of consumed TRX for each transaction. consume_user_resource_percent is the percentage of user consumed resource, in the range between [0, 100%]. origin_energy_limit is the most amount of developer energy consumed by triggering the contract once. value is the amount of trx transferred to the contract account. token_value is the number of TRC-10 token. token_id is TRC-10 Id. Example: wallet> deployContract normalcontract544 [{ \"constant\" :false, \"inputs\" : [{ \"name\" : \"i\" , \"type\" : \"uint256\" }] , \"name\" : \"findArgsByIndexTest\" , \"outputs\" : [{ \"name\" : \"z\" , \"type\" : \"uint256\" }] , \"payable\" :false, \"stateMutability\" : \"nonpayable\" , \"type\" : \"function\" }] 608060405234801561001057600080fd5b50610134806100206000396000f3006080604052600436106100405763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663329000b58114610045575b600080fd5b34801561005157600080fd5b5061005d60043561006f565b60408051918252519081900360200190f35b604080516003808252608082019092526000916060919060208201838038833901905050905060018160008151811015156100a657fe5b602090810290910101528051600290829060019081106100c257fe5b602090810290910101528051600390829060029081106100de57fe5b6020908102909101015280518190849081106100f657fe5b906020019060200201519150509190505600a165627a7a72305820b24fc247fdaf3644b3c4c94fcee380aa610ed83415061ff9e65d7fa94a5a50a00029 # # false 1000000000 75 50000 0 0 # Get the result of the contract execution with the getTransactionInfoById command: wallet> getTransactionInfoById 4978dc64ff746ca208e51780cce93237ee444f598b24d5e9ce0da885fb3a3eb9 { \"id\" : \"8c1f57a5e53b15bb0a0a0a0d4740eda9c31fbdb6a63bc429ec2113a92e8ff361\" , \"fee\" : 6170500 , \"blockNumber\" : 1867 , \"blockTimeStamp\" : 1567499757000 , \"contractResult\" : [ \"6080604052600436106100405763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663329000b58114610045575b600080fd5b34801561005157600080fd5b5061005d60043561006f565b60408051918252519081900360200190f35b604080516003808252608082019092526000916060919060208201838038833901905050905060018160008151811015156100a657fe5b602090810290910101528051600290829060019081106100c257fe5b602090810290910101528051600390829060029081106100de57fe5b6020908102909101015280518190849081106100f657fe5b906020019060200201519150509190505600a165627a7a72305820b24fc247fdaf3644b3c4c94fcee380aa610ed83415061ff9e65d7fa94a5a50a00029\" ] , \"contract_address\" : \"TJMKWmC6mwF1QVax8Sy2AcgT6MqaXmHEds\" , \"receipt\" : { \"energy_fee\" : 6170500 , \"energy_usage_total\" : 61705 , \"net_usage\" : 704 , \"result\" : \"SUCCESS\" } } TriggerContract \u00b6 The command is used to trigger smart contract that deployed. wallet> TriggerContract [ ownerAddress ] [ contractAddress ] [ method ] [ args ] [ isHex ] [ fee_limit ] [ value ] [ token_value ] [ token_id ] OwnerAddress The address of the account that initiated the transaction, optional, default value is the address of the login account. ContractAddress is the smart contract address. method is the name of the function and parameters, please refer to the example below. args is a parameter for placeholding, pass '#' instead when method does not need extra parameters. isHex controls the format of the parameters method and args, whether they are in hex string or not. fee_limit is the most amount of trx allows for consumption. token_value indicate the number of TRC-10 token. token_id the TRC-10 token id, If not, use \u2018#\u2019 instead. Here is an example: wallet> triggerContract TGdtALTPZ1FWQcc5MW7aK3o1ASaookkJxG findArgsByIndexTest ( uint256 ) 0 false 1000000000 0 0 # Get the result of the contract execution with the getTransactionInfoById command, wallet> getTransactionInfoById 7d9c4e765ea53cf6749d8a89ac07d577141b93f83adc4015f0b266d8f5c2dec4 { \"id\" : \"de289f255aa2cdda95fbd430caf8fde3f9c989c544c4917cf1285a088115d0e8\" , \"fee\" : 8500 , \"blockNumber\" : 2076 , \"blockTimeStamp\" : 1567500396000 , \"contractResult\" : [ \"\" ] , \"contract_address\" : \"TJMKWmC6mwF1QVax8Sy2AcgT6MqaXmHEds\" , \"receipt\" : { \"energy_fee\" : 8500 , \"energy_usage_total\" : 85 , \"net_usage\" : 314 , \"result\" : \"REVERT\" } , \"result\" : \"FAILED\" , \"resMessage\" : \"REVERT opcode executed\" } TriggerConstantContract \u00b6 Invoke the readonly function (modified by the view or pure modifier) of a contract for contract data query; or Invoke the non-readonly function of a contract for predicting whether the transaction can be successfully executed or estimating the energy consumption. wallet> TriggerConstantContract ownerAddress(use # if you own) contractAddress method args isHex [value token_value token_id(e.g: TRXTOKEN, use # if don't provided)] ownerAddress Owner address that triggers the contract. If it is the login account, please input #. contractAddress Smart contract address. method Function call. args Parameters, if there is no parameter of method , please input #. isHex args is hex string or not\u3002 value TRX amount to be transferred. Optional, if no value, # can be inplaced. token_value TRC-10 token amount to be transferred. Optional, if no value, # can be inplaced. token_id TRC-10 token id to be transferred. Optional, if no value, # can be inplaced. Example: wallet> TriggerConstantContract TTGhREx2pDSxFX555NWz1YwGpiBVPvQA7e TVSvjZdyDSNocHm7dP3jvCmMNsCnMTPa5W transfer ( address,uint256 ) 0000000000000000000000002ce5de57373427f799cc0a3dd03b841322514a8c00000000000000000000000000000000000000000000000000038d7ea4c68000 true transfer ( address,uint256 ) :a9059cbb Execution result = { \"constant_result\" : [ \"0000000000000000000000000000000000000000000000000000000000000001\" ] , \"result\" : { \"result\" : true } , \"energy_used\" : 13253 , \"logs\" : [ { \"address\" : \"LUijWGF4iFrT7hV37Q2Q45DU5TUBvVZb7\" , \"topics\" : [ \"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\" , \"000000000000000000000000bdc8ee51fdd1b1e01d71f836481828f88463c838\" , \"0000000000000000000000002ce5de57373427f799cc0a3dd03b841322514a8c\" ] , \"data\" : \"00000000000000000000000000000000000000000000000000038d7ea4c68000\" } ] } EstimateEnergy \u00b6 Estimate the energy required for the successful execution of smart contract transactions. But for FullNode, enabling the wallet/estimateEnergy API is optional. So please pay attention that when developers call wallet/estimateEnergy, if the error message shows that the node does not support this function when calling the new API (this node does not support estimate energy), it is recommended to continue using the wallet/triggerconstantcontract API to estimate energy consumption. wallet> EstimateEnergy ownerAddress contractAddress method args isHex [value token_value token_id] ownerAddress Owner address that triggers the contract. If it is the login account, please input #. contractAddress Smart contract address. method Function call. args Parameters, if there is no parameter of method , please input #. isHex args is hex string or not\u3002 value TRX amount to be transferred. Optional, if no value, # can be inplaced. token_value TRC-10 token amount to be transferred. Optional, if no value, # can be inplaced. token_id TRC-10 token id to be transferred. Optional, if no value, # can be inplaced. Example: wallet> EstimateEnergy TTGhREx2pDSxFX555NWz1YwGpiBVPvQA7e TVSvjZdyDSNocHm7dP3jvCmMNsCnMTPa5W transfer ( address,uint256 ) 0000000000000000000000002ce5de57373427f799cc0a3dd03b841322514a8c00000000000000000000000000000000000000000000000000038d7ea4c68000 true transfer ( address,uint256 ) :a9059cbb Estimate energy result = { \"result\" : { \"result\" : true } , \"energy_required\" : 14910 } GetContract \u00b6 Get the smart contract info by its address. wallet> GetContract [contractAddress] Example: wallet> GetContract TGdtALTPZ1FWQcc5MW7aK3o1ASaookkJxG { \"origin_address\" : \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\" , \"contract_address\" : \"TJMKWmC6mwF1QVax8Sy2AcgT6MqaXmHEds\" , \"abi\" : { \"entrys\" : [ { \"name\" : \"findArgsByIndexTest\" , \"inputs\" : [ { \"name\" : \"i\" , \"type\" : \"uint256\" } ] , \"outputs\" : [ { \"name\" : \"z\" , \"type\" : \"uint256\" } ] , \"type\" : \"Function\" , \"stateMutability\" : \"Nonpayable\" } ] } , \"bytecode\" : \"608060405234801561001057600080fd5b50610134806100206000396000f3006080604052600436106100405763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663329000b58114610045575b600080fd5b34801561005157600080fd5b5061005d60043561006f565b60408051918252519081900360200190f35b604080516003808252608082019092526000916060919060208201838038833901905050905060018160008151811015156100a657fe5b602090810290910101528051600290829060019081106100c257fe5b602090810290910101528051600390829060029081106100de57fe5b6020908102909101015280518190849081106100f657fe5b906020019060200201519150509190505600a165627a7a72305820b24fc247fdaf3644b3c4c94fcee380aa610ed83415061ff9e65d7fa94a5a50a00029\" , \"consume_user_resource_percent\" : 75 , \"name\" : \"normalcontract544\" , \"origin_energy_limit\" : 50000 , \"code_hash\" : \"23423cece3b4866263c15357b358e5ac261c218693b862bcdb90fa792d5714e6\" } UpdateEnergyLimit \u00b6 Update parameter energy limit\uff0cparameter are the same as above. wallet> UpdateEnergyLimit [ ownerAddress ] [ contract_address ] [ energy_limit ] UpdateSetting \u00b6 Update parameter of energy consume percentage per user wallet> UpdateSetting [ ownerAddress ] contract_address consume_user_resource_percent TRC-10 \u00b6 Below, please find all the commands for TRC-10: AssetIssue UpdateAsset TransferAsset ParticipateAssetissue UnfreezeAsset ListAssetIssue GetAssetIssuebyAccount GetAssetIssuebyID GetAssetIssuebyName GetAssetIssueListbyName AssetIssue \u00b6 Each account is allowed to issue only ONE TRC-10 token. wallet> AssetIssue [ OwnerAddress ] [ AssetName ] [ AbbrName ] [ TotalSupply ] [ TrxNum ] [ AssetNum ] [ Precision ] [ StartDate ] [ EndDate ] [ Description Url ] [ FreeNetLimitPerAccount ] [ PublicFreeNetLimit ] [ FrozenAmount0 ] [ FrozenDays0 ] [ ... ] [ FrozenAmountN ] [ FrozenDaysN ] OwnerAddress (optional) is the address of the account which initiated the transaction. Default: the address of the login account. AssetName is the name of the issued TRC-10 token. AbbrName is the abbreviation of TRC-10 token you want to issue. TotalSupply is total issuing amount of TRC-10 token. TotalSupply = Account Balance of Issuer + All Frozen Token Amount Account Balance Of Issuer: balance at the time of issuance All Frozen Token Amount: Before asset transfer and the issuance TrxNum , AssetNum are two parameters determine the exchange rate when the token is issued. Exchange Rate = TrxNum / AssetNum AssetNum : Unit in the base unit of the issued token TrxNum : Unit in SUN (0.000001 TRX) Precision indicates how many decimal places there is. FreeNetLimitPerAccount determines the maximum amount of bandwidth each account is allowed to use. Token issuers can freeze TRX to obtain bandwidth (TransferAssetContract only) PublicFreeNetLimit is the maximum total amount of bandwidth which is allowed to use for all accounts. Token issuers can freeze TRX to obtain bandwidth (TransferAssetContract only) StartDate , EndDate is the start and end date of token issuance. Within this period time, other users can participate in token issuance. FrozenAmount0 , FrozenDays0 determines the amount and days of token freeze. FrozenAmount0 : Must be bigger than 0. FrozenDays0 : Must between 1 and 3652. Example: wallet> AssetIssue TestTRX TRX 75000000000000000 1 1 2 \"2019-10-02 15:10:00\" \"2020-07-11\" \"just for test121212\" www.test.com 100 100000 10000 10 10000 1 wallet> GetAssetIssueByAccount TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ # View published information { \"assetIssue\" : [ { \"owner_address\" : \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\" , \"name\" : \"TestTRX\" , \"abbr\" : \"TRX\" , \"total_supply\" : 75000000000000000 , \"frozen_supply\" : [ { \"frozen_amount\" : 10000 , \"frozen_days\" : 1 } , { \"frozen_amount\" : 10000 , \"frozen_days\" : 10 } ] , \"trx_num\" : 1 , \"precision\" : 2 , \"num\" : 1 , \"start_time\" : 1570000200000 , \"end_time\" : 1594396800000 , \"description\" : \"just for test121212\" , \"url\" : \"www.test.com\" , \"free_asset_net_limit\" : 100 , \"public_free_asset_net_limit\" : 100000 , \"id\" : \"1000001\" } ] } UpdateAsset \u00b6 wallet> UpdateAsset [OwnerAddress] [newLimit] [newPublicLimit] [description url] Specific meaning of the parameters are the same as they are in AssetIssue. Example: wallet> UpdateAsset 1000 1000000 \"change description\" www.changetest.com wallet> GetAssetIssueByAccount TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ # to check the modified information { \"assetIssue\" : [ { \"owner_address\" : \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\" , \"name\" : \"TestTRX\" , \"abbr\" : \"TRX\" , \"total_supply\" : 75000000000000000 , \"frozen_supply\" : [ { \"frozen_amount\" : 10000 , \"frozen_days\" : 1 } , { \"frozen_amount\" : 10000 , \"frozen_days\" : 10 } ] , \"trx_num\" : 1 , \"precision\" : 2 , \"num\" : 1 , \"start_time\" : 1570000200000 , \"end_time\" : 1594396800000 , \"description\" : \"change description\" , \"url\" : \"www.changetest.com\" , \"free_asset_net_limit\" : 1000 , \"public_free_asset_net_limit\" : 1000000 , \"id\" : \"1000001\" } ] } TransferAsset \u00b6 > TransferAsset [OwnerAddress] [ToAddress] [AssertID] [Amount] OwnerAddress (optional) is the address of the account which initiated the transaction. By default, the address of the login account. ToAddress is the address of the target account. AssertName is the TRC-10 token ID. Example: 1000001 Amount is the number of TRC10 token to transfer with. Example: wallet> TransferAsset TN3zfjYUmMFK3ZsHSsrdJoNRtGkQmZLBLz 1000001 1000 wallet> getaccount TN3zfjYUmMFK3ZsHSsrdJoNRtGkQmZLBLz # to check target account information after the transfer address: TN3zfjYUmMFK3ZsHSsrdJoNRtGkQmZLBLz assetV2 { id: 1000001 balance: 1000 latest_asset_operation_timeV2: null free_asset_net_usageV2: 0 } ParticipateAssetissue \u00b6 > ParticipateAssetIssue [OwnerAddress] [ToAddress] [AssetID] [Amount] OwnerAddress (optional) is the address of the account which initiated the transaction. Default: the address of the login account. ToAddress is the account address of TRC10 issuers. AssertName is the TRC-10 token ID. Example: 1000001 Amount is the number of TRC10 token to transfers with. The participation process must happen during the release of TRC10, otherwise an error may occur. Example: wallet> ParticipateAssetIssue TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ 1000001 1000 wallet> getaccount TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW # View remaining balance address: TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW assetV2 { id: 1000001 balance: 1000 latest_asset_operation_timeV2: null free_asset_net_usageV2: 0 } UnfreezeAsset \u00b6 To unfreeze all TRC10 token which are supposed to be unfrozen after the freezing period. wallet> unfreezeasset [OwnerAddress] ListAssetIssue \u00b6 Obtain all of the published TRC10 token information. wallet> listassetissue { \"assetIssue\" : [ { \"owner_address\" : \"TMWXhuxiT1KczhBxCseCDDsrhmpYGUcoA9\" , \"name\" : \"tronlink_token\" , \"abbr\" : \"tronlink_token\" , \"total_supply\" : 1000000000000000 , \"frozen_supply\" : [ { \"frozen_amount\" : 1 , \"frozen_days\" : 1 } ] , \"trx_num\" : 1 , \"precision\" : 6 , \"num\" : 1 , \"start_time\" : 1574757000000 , \"end_time\" : 1757595000000 , \"description\" : \"Description\" , \"url\" : \"https://blog.csdn.net/u010270891/article/details/82978260\" , \"free_asset_net_limit\" : 1000 , \"public_free_asset_net_limit\" : 2000 , \"id\" : \"1000001\" } , \u00b7\u00b7\u00b7 GetAssetIssuebyAccount \u00b6 Obtain TRC10 token information based on owner address. wallet> getassetissuebyaccount [owneraddress] wallet> getassetissuebyaccount TUwjpfqW7NG6BF3GCTrKy1aDvfchwSG4tN { \"assetIssue\" : [ { \"owner_address\" : \"TUwjpfqW7NG6BF3GCTrKy1aDvfchwSG4tN\" , \"name\" : \"h00966\" , \"abbr\" : \"h00966\" , \"total_supply\" : 100000000000 , \"trx_num\" : 1000000 , \"precision\" : 6 , \"num\" : 1000000 , \"start_time\" : 1656374400000 , \"end_time\" : 1656460800000 , \"description\" : \"Automated gaming platform. TRC10 token h0966. More info on website. TRC10 token h0966. More info on website. More info on website.\" , \"url\" : \"https://h00966.com\" , \"id\" : \"1004901\" } ] } GetAssetIssuebyID \u00b6 Obtain TRC10 token Information based on token ID. wallet> GetAssetIssueById 1004901 { \"owner_address\" : \"TUwjpfqW7NG6BF3GCTrKy1aDvfchwSG4tN\" , \"name\" : \"h00966\" , \"abbr\" : \"h00966\" , \"total_supply\" : 100000000000 , \"trx_num\" : 1000000 , \"precision\" : 6 , \"num\" : 1000000 , \"start_time\" : 1656374400000 , \"end_time\" : 1656460800000 , \"description\" : \"Automated gaming platform. TRC10 token h0966. More info on website.TRC10 token h0966. More info on website.More info on website.\" , \"url\" : \"https://h00966.com\" , \"id\" : \"1004901\" } GetAssetIssuebyName \u00b6 Obtain TRC10 token Information based on token names. wallet> GetAssetIssueByname h00966 { \"owner_address\" : \"TUwjpfqW7NG6BF3GCTrKy1aDvfchwSG4tN\" , \"name\" : \"h00966\" , \"abbr\" : \"h00966\" , \"total_supply\" : 100000000000 , \"trx_num\" : 1000000 , \"precision\" : 6 , \"num\" : 1000000 , \"start_time\" : 1656374400000 , \"end_time\" : 1656460800000 , \"description\" : \"Automated gaming platform. TRC10 token h0966. More info on website.TRC10 token h0966. More info on website.More info on website.\" , \"url\" : \"https://h00966.com\" , \"id\" : \"1004901\" } GetAssetIssueListbyName \u00b6 Obtain a list of TRC10 token information based on names. wallet> GetAssetIssueListByName ROFLOTOKEN { \"assetIssue\": [ { \"owner_address\": \"TLvQSVH9Hm7kxLFtTP228fN6pCrHmtVjpb\", \"name\": \"ROFLOTOKEN\", \"abbr\": \"roflotoken\", \"total_supply\": 10000000000000000, \"trx_num\": 1000000, \"precision\": 6, \"num\": 100000000, \"start_time\": 1656349200000, \"end_time\": 1656435600000, \"description\": \"roflotoken.com\", \"url\": \"https://haxibaibo.com/\", \"id\": \"1004898\" } ] } Governance \u00b6 Any proposal-related operations, except for viewing operations, must be performed by committee members. Please find all the commands for Governance: CreateProposal ApproveProposal DeleteProposal ListProposals ListProposalsPaginated GetProposal VoteWitness ListWitnesses GetBrokerage GetReward UpdateBrokerage CreatProposal \u00b6 Initiate a proposal with createProposal. wallet> createProposal [ OwnerAddress ] [ id0 ] [ value0 ] ... [ idN ] [ valueN ] OwnerAddress (optional) is the address of the account which initiated the transaction. By default, it is the address of the login account. id0 is the serial number of TRON Network Parameter. Of which, each one has a serial number corresponded. Please refer to http://tronscan.org/#/sr/committee . Value0 is the modified value. In the example, modification No.4 (modifying token issuance fee) costs 1000TRX as follows: wallet> createProposal 4 1000 wallet> listproposals # to check initiated proposal { \"proposals\" : [ { \"proposal_id\" : 1 , \"proposer_address\" : \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\" , \"parameters\" : [ { \"key\" : 4 , \"value\" : 1000 } ] , \"expiration_time\" : 1567498800000 , \"create_time\" : 1567498308000 } ] } The corresponding id is 1. ApproveProposal \u00b6 Approve or disapprove a proposal using approveProposal. wallet> approveProposal [ OwnerAddress ] [ id ] [ is_or_not_add_approval ] OwnerAddress (optional) is the address of the account which initiated the transaction. Default: the address of the login account. id is the ID of the initiated proposal. Example: 1. is_or_not_add_approval is true for approve; is false for disapprove. Example: wallet> ApproveProposal 1 true # in favor of the offer wallet> ApproveProposal 1 false # Cancel the approved proposal DeleteProposal \u00b6 wallet> deleteProposal [OwnerAddress] [proposalId] proposalId is the ID of the initiated proposal. Example: 1. The proposal must be canceled by the supernode that initiated the proposal. Example\uff1a wallet> DeleteProposal 1 ListProposals \u00b6 Obtain a list of initiated proposals wallet> listproposals { \"proposals\" : [ { \"proposal_id\" : 12732 , \"proposer_address\" : \"TQ4eBJna51sew13DBLd7YjEHHHW7fkNzc2\" , \"parameters\" : [ { \"key\" : 65 , \"value\" : 1 } , { \"key\" : 66 , \"value\" : 1 } , { \"key\" : 62 , \"value\" : 432000000 } ] , \"expiration_time\" : 1656491400000 , \"create_time\" : 1656490794000 , \"approvals\" : [ \"TQ4eBJna51sew13DBLd7YjEHHHW7fkNzc2\" ] , \"state\" : \"DISAPPROVED\" } , { \u00b7\u00b7\u00b7 ListProposalsPaginated \u00b6 Use the paging mode to obtain the initiated proposal. wallet> ListProposalsPaginated [offset] [limit] offset is the number of proposals you want to skip. limit is the number of proposals you want to be listed. By default, all proposals would be listed from proposal_id 1 to date. The parameter in the example below means you want to skip the first 33 proposals and list the 2 proposals right after that. wallet> listproposalspaginated 33 2 { \"proposals\" : [ { \"proposal_id\" : 34 , \"proposer_address\" : \"TEDguVMSsFw3HSizQXFK1BsrGWeuRMNN7t\" , \"parameters\" : [ { \"key\" : 1 , \"value\" : 9997000000 } ] , \"expiration_time\" : 1582381200000 , \"create_time\" : 1582380477000 , \"state\" : \"DISAPPROVED\" } , { \"proposal_id\" : 35 , \"proposer_address\" : \"TDkSQtBhZx7Ua8qvenM4zuH52u2BsYTwzc\" , \"parameters\" : [ { \"key\" : 1 , \"value\" : 9997000000 } ] , \"expiration_time\" : 1582381200000 , \"create_time\" : 1582380498000 , \"state\" : \"DISAPPROVED\" } ] } GetProposal \u00b6 Obtain proposal information based on the proposal ID. wallet> getproposal 34 { \"proposal_id\" : 34 , \"proposer_address\" : \"TEDguVMSsFw3HSizQXFK1BsrGWeuRMNN7t\" , \"parameters\" : [ { \"key\" : 1 , \"value\" : 9997000000 } ] , \"expiration_time\" : 1582381200000 , \"create_time\" : 1582380477000 , \"state\" : \"DISAPPROVED\" } VoteWitness \u00b6 Voting requires TRON Power, which can be obtained by freezing funds. wallet> votewitness [SR(Super Representatives) address] [TRON Power Amount] The share calculation method is: 1 unit of share can be obtained for every 1TRX frozen. After unfreezing, previous vote will expire. You can avoid the invalidation of the vote by re-freezing and voting. NOTE The TRON Network only records the status of your last vote, which means that each of your votes will overwrite all previous voting results. For example: wallet> freezeBalance 100000000 3 1 address # Freeze 10TRX and acquire 10 units of TRON Power wallet> votewitness [ SR1 ] 4 [ SR2 ] 6 # Cast 4 votes for SR1 and 6 votes for SR2 at the same time wallet> votewitness [ SR1 ] 10 # Voted 10 votes for SR1 The final result of the above command was 10 votes for SR1 and 0 vote for SR2. ListWitnesses \u00b6 Get all miner node information wallet> listwitnesses { \"witnesses\" : [ { \"address\" : \"TPffmvjxEcvZefQqS7QYvL1Der3uiguikE\" , \"voteCount\" : 324999518 , \"url\" : \"http://sr-26.com\" , \"totalProduced\" : 414028 , \"totalMissed\" : 20 , \"latestBlockNum\" : 27638663 , \"latestSlotNum\" : 552169224 , \"isJobs\" : true } , { \"address\" : \"TFFLWM7tmKiwGtbh2mcz2rBssoFjHjSShG\" , \"voteCount\" : 324759460 , \"url\" : \"http://sr-27.com\" , \"totalProduced\" : 414144 , \"totalMissed\" : 16 , \"latestBlockNum\" : 27638664 , \"latestSlotNum\" : 552169225 , \"isJobs\" : true } , \u00b7\u00b7\u00b7 GetBrokerage \u00b6 View the ratio of brokerage of the SR(Super Representatives). After voting for the super representative, you will receive the rewards. The super representative has the right to decide the ratio of brokerage. The default ratio is 20%, and the super representative can adjust it. By default, if a super representative is rewarded, he will receive 20% of the whole rewards, and 80% of the rewards will be distributed to his voters. OwnerAddress is the address of the SR's account, it is a base58check type address. wallet> getbrokerage TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8 The brokerage is : 20 GetReward \u00b6 Query unclaimed reward. OwnerAddress is the address of the voter's account, it is a base58check type address. wallet> getreward TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8 The reward is : 0 UpdateBrokerage \u00b6 Update the ratio of brokerage, this command is usually used by a super representative account. wallet> updateBrokerage [ OwnerAddress ] [ brokerage ] OwnerAddress is the address of the super representative's account, it is a base58check type address. brokerage is the ratio of brokerage you want to update to, the limit of it: 0-100. For example: wallet> updateBrokerage TZ7U1WVBRLZ2umjizxqz3XfearEHhXKX7h 30 DEX \u00b6 The trading and price fluctuations of trading pairs are in accordance with the Bancor Agreement . Here are all the commands for DEX: ExchangeCreate ExchangeInject ExchangeTransaction ExchangeWithdraw ListExchanges ListExchangesPaginated MarketSellAsset MarketCancelOrder GetMarketOrderbyAccount GetMarketOrderbyID GetMarketPairList GetMarketOrderListbyPair GetMarketPricebyPair ExchangeCreate \u00b6 Create a trading pair wallet> exchangeCreate [ OwnerAddress ][ first_token_id ] [ first_token_balance ] [ second_token_id ] [ second_token_balance ] OwnerAddress is the address of the account which initiated the transaction. Considered as the login account by default. First_token_id , first_token_balance is the ID and amount of the first token. second_token_id , second_token_balance is the ID and amount of the second token. The ID is the ID of the issued TRC10 token. If it is TRX, the ID is \"\". The amount must be greater than 0, and less than 1,000,000,000,000,000. Example: wallet> exchangeCreate 1000001 10000 _ 10000 # Create trading pairs with the IDs of 1000001 and TRX, with amount 10000 for both. ExchangeInject \u00b6 Capital injection wallet> exchangeInject [OwnerAddress] [exchange_id] [token_id] [quant] OwnerAddress is the address of the account which initiated the transaction. Default: the address of the login account. exchange_id is the ID of the trading pair to be funded. token_id, quant is the token Id and quantity (unit in base unit) of capital injection. When conducting a capital injection, depending on its quantity (quant), a proportion of each token in the trading pair will be withdrawn from the account, and injected into the trading pair. Depending on the difference in the balance of the transaction, the same amount of money for the same token would vary. ExchangeTransaction \u00b6 Making transaction wallet> exchangeTransaction [ OwnerAddress ] [ exchange_id ] [ token_id ] [ quant ] [ expected ] OwnerAddress is the address of the account which initiated the transaction. Default: the address of the login account. exchange_id is the ID of the trading pair. token_id , quant is the ID and quantity of tokens being exchanged, equivalent to selling. expected is the expected quantity of another token. IT must be less than quant, or an error will be reported. Example\uff1a wallet> ExchangeTransaction 1 1000001 100 80 It is expected to acquire the 80 TRX by exchanging 1000001 from the trading pair ID of 1, and the amount is 100.(Equivalent to selling an amount of 100 tokenID - 1000001, at a price of 80 TRX, in trading pair ID - 1). ExchangeWithdraw \u00b6 wallet> exchangeWithdraw [OwnerAddress] [exchange_id] [token_id] [quant] OwnerAddress is the address of the account which initiated the transaction. Default: the address of the login account. Exchange_id is the ID of the trading pair to be withdrawn. Token_id , quant is token Id and quantity (unit in base unit) of capital withdrawal. When conducting a capital withdrawal, depending on its quantity (quant), a proportion of each token in the transaction pair is withdrawn from the trading pair, and injected into the account. Depending on the difference in the balance of the transaction, the same amount of money for the same token would vary. You may obtain information on trading pairs by the following commands, ListExchanges \u00b6 List trading pairs wallet> listexchanges { \"exchanges\" : [ { \"exchange_id\" : 14 , \"creator_address\" : \"TCjuQbm5yab7ENTYb7tbdAKaiNa9Lrj4mo\" , \"create_time\" : 1654154880000 , \"first_token_id\" : \"1004852\" , \"first_token_balance\" : 91 , \"second_token_id\" : \"_\" , \"second_token_balance\" : 110000000 } , { \"exchange_id\" : 13 , \"creator_address\" : \"TBpbKyKVUB1YLULrbhawUws69Gv33cmKDL\" , \"create_time\" : 1648004214000 , \"first_token_id\" : \"1000575\" , \"first_token_balance\" : 991 , \"second_token_id\" : \"1000184\" , \"second_token_balance\" : 1010 } , \u00b7\u00b7\u00b7 ListExchangesPaginated \u00b6 List trading pairs by page wallet> ListExchangesPaginated [offset] [limit] offset is the number of exchange pair you want to skip. limit is the number of exchange pair you want to be listed. The parameters in the example below means to skip the first 3 exchange pairs and show the next 2 exchange pairs. wallet> listexchangespaginated 3 2 { \"exchanges\" : [ { \"exchange_id\" : 4 , \"creator_address\" : \"TXmHTj3t5LXGvqGkr4jRNw7nf9GjquQ5yf\" , \"create_time\" : 1601458377000 , \"first_token_id\" : \"1000088\" , \"first_token_balance\" : 1 , \"second_token_id\" : \"_\" , \"second_token_balance\" : 1 } , { \"exchange_id\" : 5 , \"creator_address\" : \"TTJJvoPKGVKnbUBPVTn1Zi8o6k3EfFDXVS\" , \"create_time\" : 1602578613000 , \"first_token_id\" : \"1000091\" , \"first_token_balance\" : 456125 , \"second_token_id\" : \"_\" , \"second_token_balance\" : 106968111 } ] } MarketSellAsset \u00b6 Create an order to sell asset wallet> MarketSellAsset [ owner_address ] [ sell_token_id ] [ sell_token_quantity ] [ buy_token_id ] [ buy_token_quantity ] OwnerAddress is the address of the account that initiated the transaction. sell_token_id and sell_token_quantity are the ID and amount of the token want to sell. buy_token_id , buy_token_quantity determines the ID and amount of the token want to buy. Example: wallet> MarketSellAsset TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW 1000001 200 _ 100 Then we use the command getTransactionInfoById to check the result of the contract execution as below, wallet> getTransactionInfoById 10040f993cd9452b25bf367f38edadf11176355802baf61f3c49b96b4480d374 { \"id\" : \"10040f993cd9452b25bf367f38edadf11176355802baf61f3c49b96b4480d374\" , \"blockNumber\" : 669 , \"blockTimeStamp\" : 1578983493000 , \"contractResult\" : [ \"\" ] , \"receipt\" : { \"net_usage\" : 264 } } MarketCancelOrder \u00b6 This command cancels the order. wallet> MarketCancelOrder [ owner_address ] [ order_id ] owner_address is the account address who have created the order. order_id is the order id which want to cancel. Example: wallet> MarketCancelOrder TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW fc9c64dfd48ae58952e85f05ecb8ec87f55e19402493bb2df501ae9d2da75db0 Get the result of the contract execution with the getTransactionInfoById command: wallet> getTransactionInfoById b375787a098498623403c755b1399e82910385251b643811936d914c9f37bd27 { \"id\" : \"b375787a098498623403c755b1399e82910385251b643811936d914c9f37bd27\" , \"blockNumber\" : 1582 , \"blockTimeStamp\" : 1578986232000 , \"contractResult\" : [ \"\" ] , \"receipt\" : { \"net_usage\" : 283 } } GetMarketOrderbyAccount \u00b6 Use this command to get the order created by account(just include active status). wallet> GetMarketOrderByAccount [ ownerAddress ] ownerAddress is the address of the account that created market order. Example: wallet> GetMarketOrderByAccount TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW { \"orders\" : [ { \"order_id\" : \"fc9c64dfd48ae58952e85f05ecb8ec87f55e19402493bb2df501ae9d2da75db0\" , \"owner_address\" : \"TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\" , \"create_time\" : 1578983490000 , \"sell_token_id\" : \"_\" , \"sell_token_quantity\" : 100 , \"buy_token_id\" : \"1000001\" , \"buy_token_quantity\" : 200 , \"sell_token_quantity_remain\" : 100 } ] } GetMarketOrderbyID \u00b6 Get the specific order by order_id wallet> GetMarketOrderById [ orderId ] Example: wallet> GetMarketOrderById fc9c64dfd48ae58952e85f05ecb8ec87f55e19402493bb2df501ae9d2da75db0 { \"order_id\" : \"fc9c64dfd48ae58952e85f05ecb8ec87f55e19402493bb2df501ae9d2da75db0\" , \"owner_address\" : \"TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\" , \"create_time\" : 1578983490000 , \"sell_token_id\" : \"_\" , \"sell_token_quantity\" : 100 , \"buy_token_id\" : \"1000001\" , \"buy_token_quantity\" : 200 , } GetMarketPairList \u00b6 This command is to get market pair listed wallet> getmarketpairlist { \"orderPair\" : [ { \"sell_token_id\" : \"1000012\" , \"buy_token_id\" : \"_\" } , { \"sell_token_id\" : \"1000094\" , \"buy_token_id\" : \"1000095\" } , { \"sell_token_id\" : \"1000099\" , \"buy_token_id\" : \"1000100\" } , \u00b7\u00b7\u00b7 GetMarketOrderListbyPair \u00b6 This command is to get market order list by c pair, wallet> GetMarketOrderListByPair [ sell_token_id ] [ buy_token_id ] sell_token_id is the ID of the token want to sell. buy_token_id is the ID of the token want to buy. Example: wallet> GetMarketOrderListByPair _ 1000001 { \"orders\" : [ { \"order_id\" : \"fc9c64dfd48ae58952e85f05ecb8ec87f55e19402493bb2df501ae9d2da75db0\" , \"owner_address\" : \"TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\" , \"create_time\" : 1578983490000 , \"sell_token_id\" : \"_\" , \"sell_token_quantity\" : 100 , \"buy_token_id\" : \"1000001\" , \"buy_token_quantity\" : 200 , \"sell_token_quantity_remain\" : 100 } ] } GetMarketPricebyPair \u00b6 Use this command to get market price by exchange pair. wallet> GetMarketPriceByPair [ sell_token_id ] [ buy_token_id ] sell_token_id is the ID of the token want to sell. buy_token_id is the ID of the token want to buy. Example: wallet> GetMarketPriceByPair _ 1000001 { \"sell_token_id\" : \"_\" , \"buy_token_id\" : \"1000001\" , \"prices\" : [ { \"sell_token_quantity\" : 100 , \"buy_token_quantity\" : 200 } ] }","title":"Wallet Commands"},{"location":"clients/wallet-cli-command/#wallet-commands","text":"Below, please find all types of Wallet-Cli commands\uff1a Wallet Account AccountResource Transaction On-ChainInquire SmartContract TRC-10 Governance DEX","title":"Wallet Commands"},{"location":"clients/wallet-cli-command/#wallet","text":"Here are all the wallet related commands \uff1a RegisterWallet Login BackupWallet BackupWallet2Base64 ChangePassword ImportWallet ImportWalletByBase64 This section introduces commands related to wallet management. Let's start with registerwallet to get a new account.","title":"Wallet"},{"location":"clients/wallet-cli-command/#registerwallet","text":"To register your wallet, you need to set the wallet password and generate the address and private key. A .json keystore file will be generated under the path of wallet-cli/wallet . The file will be used for login and backupwallet later. wallet> RegisterWallet Please input password. password: Please input password again. password: Register a wallet successful, keystore file name is UTC--2022-06-27T07-37-47.601000000Z--TWyDBTHsWJFhgywWkTNW7vh7jSUxeBaiAw.json","title":"RegisterWallet"},{"location":"clients/wallet-cli-command/#login","text":"When we have a keystore file, we can start to login. After enter the command, choose the keystore file and enter the password. wallet> login use user defined config file in current dir The 1th keystore file name is UTC--2022-06-28T06-52-56.928000000Z--TB9qhqbev6DpX8mxdf3zDdtSQ6GC6Vb6Ej.json The 2th keystore file name is .DS_Store The 3th keystore file name is UTC--2022-06-22T08-31-57.735000000Z--TBnPDbw99BLzPUZuW8Rrcc3RGGQT3cnSfF.json The 4th keystore file name is UTC--2022-04-06T09-43-20.710000000Z--TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8.json The 5th keystore file name is UTC--2022-04-07T09-03-38.307000000Z--TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE.json Please choose between 1 and 5 4 Please input your password. password: Login successful !!!","title":"Login"},{"location":"clients/wallet-cli-command/#backupwallet","text":"This will Back up your wallet. You need to enter your wallet password to export the privat key in hex string format, such as: 721d63b074f18d41c147e04c952ec93467777a30b6f16745bc47a8eae5076545 wallet> backupwallet Please input your password. password: BackupWallet successful !! 721d63b074f18d41c147e04c952ec93467777a30b6f16745bc47a8eae5076545","title":"BackupWallet"},{"location":"clients/wallet-cli-command/#backupwallet2base64","text":"This will Back up your wallet, you need to enter your wallet password to export the private key in base64 format, as below ch1jsHTxjUHBR+BMlS7JNGd3ejC28WdFvEeo6uUHZUU= wallet> backupwallet Please input your password. password: BackupWallet successful !! ch1jsHTxjUHBR+BMlS7JNGd3ejC28WdFvEeo6uUHZUU =","title":"BackupWallet2Base64"},{"location":"clients/wallet-cli-command/#changepassword","text":"Modify the password of an account wallet> changepassword Please input old password. password: Please input new password. Please input password. password: Please input password again. password: The 1th keystore file name is .DS_Store The 2th keystore file name is UTC--2022-06-27T10-58-59.306000000Z--TBnPDbw99BLzPUZuW8Rrcc3RGGQT3cnSfF.json Please choose between 1 and 2 2 ChangePassword successful !!","title":"ChangePassword"},{"location":"clients/wallet-cli-command/#importwallet","text":"Import a wallet, you need to set a password first and then enter your hex string private key. wallet> importwallet Please input password. password: Please input password again. password: Please input private key. Max retry time:3 bd1ff0f4f852db45316bf08755bf6eee45d0678bfbf852a00020a13d42a1fb5b Import a wallet successful, keystore file name is UTC--2022-06-28T06-52-56.928000000Z--TB9qhqbev6DpX8mxdf3zDdtSQ6GC6Vb6Ej.json","title":"ImportWallet"},{"location":"clients/wallet-cli-command/#importwalletbybase64","text":"To import a wallet, you need to set a password first and then enter your private key in base64 format. wallet> importwalletbybase64 Please input password. password: Please input password again. password: Please input private key by base64. Max retry time:3 vR/w9PhS20Uxa/CHVb9u7kXQZ4v7+FKgACChPUKh+1s = Import a wallet successful, keystore file name is UTC--2022-06-28T06-51-56.154000000Z--TB9qhqbev6DpX8mxdf3zDdtSQ6GC6Vb6Ej.json","title":"ImportWalletByBase64"},{"location":"clients/wallet-cli-command/#account","text":"Here are all the account related commands \uff1a GenerateAddress GetAccount GetAddress GetBalance UpdateAccountPermission","title":"Account"},{"location":"clients/wallet-cli-command/#generateaddress","text":"Generate an address and print out the public (address) and private key wallet> generateaddress { \"address\" : \"TQAvi6bemLa1t1irdV1KuaSC5vKc2EswTj\" , \"privateKey\" : \"610a8a809114a96140e1cb040a7813afc74603e58c3d7824c3f68ccc642c297e\" } Note address and private key generated by this command would not be saved in wallet-cli. Keep properly if you would like to use them.","title":"GenerateAddress"},{"location":"clients/wallet-cli-command/#getaccount","text":"Get account information by an address wallet> getaccount [ address ] wallet> getaccount TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8 { \"address\" : \"TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8\" , \"balance\" : 2665198240 , \"create_time\" : 1650363711000 , \"latest_opration_time\" : 1653578769000 , \"latest_consume_free_time\" : 1651228080000 , \"account_resource\" : { \"latest_consume_time_for_energy\" : 1653578769000 } , \"owner_permission\" : { \"permission_name\" : \"owner\" , \"threshold\" : 1 , \"keys\" : [ { \"address\" : \"TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8\" , \"weight\" : 1 } ] } , \"active_permission\" : [ { \"type\" : \"Active\" , \"id\" : 2 , \"permission_name\" : \"active\" , \"threshold\" : 1 , \"operations\" : \"7fff1fc0033e3b00000000000000000000000000000000000000000000000000\" , \"keys\" : [ { \"address\" : \"TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8\" , \"weight\" : 1 } ] } ] }","title":"GetAccount"},{"location":"clients/wallet-cli-command/#getaddress","text":"Get the address of the current account wallet> getaddress GetAddress successful !! address = TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8","title":"GetAddress"},{"location":"clients/wallet-cli-command/#getbalance","text":"Get the TRX balance of the current account wallet> getbalance Balance = 2665198240","title":"GetBalance"},{"location":"clients/wallet-cli-command/#updateaccountpermission","text":"wallet>UpdateAccountPermission [ ownerAddress ] [ permissions ] This command is used to manage account permissions, assign permissions to other accounts, is utilized for multi-signature transactions, which allows other users to access the account with paritcular permission in order to better manage it. There are three types of permissions: owner: access to the owner of account active: access to other features of accounts, and access that authorizes a certain feature. Block production authorization is not included if it's for SR purposes. witness: only for super representatives, block production authorization will be granted to one of the other users. NOTE the parameter Permission must written in JSON format and entered in line. If the owner account is not SR, then do not assign super representative permission. wallet> updateaccountpermission TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8 { \"owner_permission\" : { \"keys\" : [{ \"address\" : \"TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8\" , \"weight\" :1 }] , \"threshold\" :1, \"type\" :0, \"permission_name\" : \"owner\" } , \"active_permissions\" : [{ \"operations\" : \"7fff1fc0033e0000000000000000000000000000000000000000000000000000\" , \"keys\" : [{ \"address\" : \"TB9qhqbev6DpX8mxdf3zDdtSQ6GC6Vb6Ej\" , \"weight\" :1 } , { \"address\" : \"TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE\" , \"weight\" :1 }] , \"threshold\" :2, \"type\" :2, \"permission_name\" : \"active12323\" }]} { \"raw_data\" : { \"contract\" : [ { \"parameter\" : { \"value\" : { \"owner\" : { \"keys\" : [ { \"address\" : \"TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8\" , \"weight\" :1 } ] , \"threshold\" :1, \"permission_name\" : \"owner\" } , \"owner_address\" : \"TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8\" , \"actives\" : [ { \"operations\" : \"7fff1fc0033e0000000000000000000000000000000000000000000000000000\" , \"keys\" : [ { \"address\" : \"TB9qhqbev6DpX8mxdf3zDdtSQ6GC6Vb6Ej\" , \"weight\" :1 } , { \"address\" : \"TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE\" , \"weight\" :1 } ] , \"threshold\" :2, \"type\" : \"Active\" , \"permission_name\" : \"active12323\" } ] } , \"type_url\" : \"type.googleapis.com/protocol.AccountPermissionUpdateContract\" } , \"type\" : \"AccountPermissionUpdateContract\" } ] , \"ref_block_bytes\" : \"4e88\" , \"ref_block_hash\" : \"11a47859be13f689\" , \"expiration\" :1656423231000, \"timestamp\" :1656423171818 } , \"raw_data_hex\" : \"0a024e88220811a47859be13f6894098dc92d49a305aee01082e12e9010a3c747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e4163636f756e745065726d697373696f6e557064617465436f6e747261637412a8010a1541babecec4d9f58f0df77f0728b9c53abb1f21d68412241a056f776e657220013a190a1541babecec4d9f58f0df77f0728b9c53abb1f21d6841001226908021a0b6163746976653132333233200232207fff1fc0033e00000000000000000000000000000000000000000000000000003a190a15410cfaec7164cbfe78dbb8d8fba7e23b4d745ed81310013a190a1541e8bd653015895947cec33d1670a88cf67ab277b9100170ea8d8fd49a30\" } before sign transaction hex string is 0a8d020a024e88220811a47859be13f6894098dc92d49a305aee01082e12e9010a3c747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e4163636f756e745065726d697373696f6e557064617465436f6e747261637412a8010a1541babecec4d9f58f0df77f0728b9c53abb1f21d68412241a056f776e657220013a190a1541babecec4d9f58f0df77f0728b9c53abb1f21d6841001226908021a0b6163746976653132333233200232207fff1fc0033e00000000000000000000000000000000000000000000000000003a190a15410cfaec7164cbfe78dbb8d8fba7e23b4d745ed81310013a190a1541e8bd653015895947cec33d1670a88cf67ab277b9100170ea8d8fd49a30 Please confirm and input your permission id, if input y or Y means default 0 , other non-numeric characters will cancel transaction. y Please choose your key for sign. The 1th keystore file name is UTC--2022-06-28T06-52-56.928000000Z--TB9qhqbev6DpX8mxdf3zDdtSQ6GC6Vb6Ej.json The 2th keystore file name is .DS_Store The 3th keystore file name is UTC--2022-04-06T09-43-20.710000000Z--TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8.json The 4th keystore file name is UTC--2022-04-07T09-03-38.307000000Z--TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE.json Please choose between 1 and 4 3 Please input your password. password: after sign transaction hex string is 0a8d020a024e88220811a47859be13f6894096bcb5de9a305aee01082e12e9010a3c747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e4163636f756e745065726d697373696f6e557064617465436f6e747261637412a8010a1541babecec4d9f58f0df77f0728b9c53abb1f21d68412241a056f776e657220013a190a1541babecec4d9f58f0df77f0728b9c53abb1f21d6841001226908021a0b6163746976653132333233200232207fff1fc0033e00000000000000000000000000000000000000000000000000003a190a15410cfaec7164cbfe78dbb8d8fba7e23b4d745ed81310013a190a1541e8bd653015895947cec33d1670a88cf67ab277b9100170ea8d8fd49a301241881b00f8e8828d9347469fcbcec730093841c2363561243b7162a9669439266049ab82f20f97a136adc88feff0a4d5aa57b11f762eaa7e05105d27ec5d55a33900 txid is 3dce7f18f6cf6962c38904678947b3b32f9e94ba6460874679d8ed063bb1c0eb UpdateAccountPermission successful !!!","title":"UpdateAccountPermission"},{"location":"clients/wallet-cli-command/#accountresource","text":"Here are all the account resource related commands \uff1a freezeBalance unfreezeBalance getDelegatedResource freezeBalanceV2 unfreezeBalanceV2 delegateResource unDelegateResource withdrawExpireUnfreeze getAvailableUnfreezeCount getCanWithdrawUnfreezeAmount getCanDelegatedMaxSize getDelegatedResourceV2 getDelegatedResourceAccountIndexV2 getAccountNet getAccountResource","title":"AccountResource"},{"location":"clients/wallet-cli-command/#freezebalance","text":"This interface has been deprecated, please use freezeBalanceV2 to stake TRX to obtain resources. wallet> freezeBalance [ OwnerAddress ] [ frozen_balance ] [ frozen_duration ] [ ResourceCode:0 BANDWIDTH, 1 ENERGY ] [ receiverAddress ] OwnerAddress is the address of the account that initiated the transaction, optional, default is the address of the login account. frozen_balance is the amount of frozen TRX, the unit is the smallest unit (Sun), the minimum is 1000000sun. frozen_duration is frozen duration, only be specified as 3 days, indicates that you can unfreeze after 3 days. ResourceCode indicates the type of the acquired resource\uff0c0 BANDWIDTH and 1 ENERGY. receiverAddress is the address that will receive the resource. ResourceCode and receiverAddress are optional parameters. If ResourceCode is not set\uff0cdefault is 0. If receiverAddress is not set, the TRX is frozen to obtain resources for its OwnerAddress use; if it is not empty, the acquired resources are used by receiverAddress. Example: wallet> freezeBalance TWyDBTHsWJFhgywWkTNW7vh7jSUxeBaiAw 1000000 3 1 TCrkRWJuHP4VgQF3xwLNBAjVVXvxRRGpbA { \"raw_data\" : { ... } , \"raw_data_hex\" : \"0a02a9b822081db2070d39d2316640c095dda19a305a70080b126c0a32747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e467265657a6542616c616e6365436f6e747261637412360a1541e65aca838a9e15dd81bd9532d2ad61300e58cf7110c0843d180350017a15411fafb1e96dfe4f609e2259bfaf8c77b60c535b9370c6c8d9a19a30\" } before sign transaction hex string is 0a8e010a02a9b822081db2070d39d2316640c095dda19a305a70080b126c0a32747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e467265657a6542616c616e6365436f6e747261637412360a1541e65aca838a9e15dd81bd9532d2ad61300e58cf7110c0843d180350017a15411fafb1e96dfe4f609e2259bfaf8c77b60c535b9370c6c8d9a19a30 Please confirm and input your permission id, if input y or Y means default 0 , other non-numeric characters will cancel transaction. y Please choose your key for sign. The 1th keystore file name is UTC--2022-06-22T08-21-05.158000000Z--TDQgNvjrE6RH749f8aFGyJqEEGyhV4BDEU.json The 2th keystore file name is UTC--2022-06-27T07-37-47.601000000Z--TWyDBTHsWJFhgywWkTNW7vh7jSUxeBaiAw.json Please choose between 1 and 2 2 Please input your password. password: after sign transaction hex string is 0a8e010a02a9b822081db2070d39d2316640e0f7ffab9a305a70080b126c0a32747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e467265657a6542616c616e6365436f6e747261637412360a1541e65aca838a9e15dd81bd9532d2ad61300e58cf7110c0843d180350017a15411fafb1e96dfe4f609e2259bfaf8c77b60c535b9370c6c8d9a19a301241c45742648e6970e01b242c9b6eca2549c8721b860ced71abd331b9fe925f3c0f184768e0d2e3b580ce787cc6f67d186a0d583226fdb69c2cc8cfc6ec42e389f600 txid is f45cb5ae425796a492d4a9ecac8d60fd48bf78dbcdbe1d92725047c5dfbffba2 FreezeBalance successful !!!","title":"freezeBalance"},{"location":"clients/wallet-cli-command/#unfreezebalance","text":"unstake TRX which staked during stake1.o. wallet>unfreezeBalance [ OwnerAddress ] ResourceCode ( 0 BANDWIDTH,1 ENERGY,2 TRON_POWER ) [ receiverAddress ] OwnerAddress is the address of the account that initiated the transaction, optional, default is the address of the login account. ResourceCode indicates the type of the acquired resource\uff0c0 stands for BANDWIDTH and 1 stands for ENERGY. receiverAddress is the address that will receive the resource. wallet> unfreezebalance TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8 1 TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE { \"raw_data\":{ \"contract\":[ { \"parameter\":{ \"value\":{ \"resource\":\"ENERGY\", \"receiver_address\":\"TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE\", \"owner_address\":\"TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8\" }, \"type_url\":\"type.googleapis.com/protocol.UnfreezeBalanceContract\" }, \"type\":\"UnfreezeBalanceContract\" } ], \"ref_block_bytes\":\"c8b7\", \"ref_block_hash\":\"8842722f2845274d\", \"expiration\":1656915213000, \"timestamp\":1656915154748 }, \"raw_data_hex\":\"0a02c8b722088842722f2845274d40c8f5debe9c305a6c080c12680a34747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e556e667265657a6542616c616e6365436f6e747261637412300a1541babecec4d9f58f0df77f0728b9c53abb1f21d68450017a1541e8bd653015895947cec33d1670a88cf67ab277b970bcaedbbe9c30\" } before sign transaction hex string is 0a8a010a02c8b722088842722f2845274d40c8f5debe9c305a6c080c12680a34747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e556e667265657a6542616c616e6365436f6e747261637412300a1541babecec4d9f58f0df77f0728b9c53abb1f21d68450017a1541e8bd653015895947cec33d1670a88cf67ab277b970bcaedbbe9c30 Please confirm and input your permission id, if input y or Y means default 0, other non-numeric characters will cancel transaction. y Please choose your key for sign. The 1th keystore file name is UTC--2022-06-28T06-52-56.928000000Z--TB9qhqbev6DpX8mxdf3zDdtSQ6GC6Vb6Ej.json The 2th keystore file name is .DS_Store The 3th keystore file name is UTC--2022-04-06T09-43-20.710000000Z--TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8.json The 4th keystore file name is UTC--2022-04-07T09-03-38.307000000Z--TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE.json Please choose between 1 and 4 3 Please input your password. password: after sign transaction hex string is 0a8a010a02c8b722088842722f2845274d40e8dd81c99c305a6c080c12680a34747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e556e667265657a6542616c616e6365436f6e747261637412300a1541babecec4d9f58f0df77f0728b9c53abb1f21d68450017a1541e8bd653015895947cec33d1670a88cf67ab277b970bcaedbbe9c301241593a94650274df29619a6a6946258ea32a22f24a33445f943e3d72cd7d9b8ce7234d188f4bf3a6f0c90cb60af36fc77dc8d376afac9ed840f36dfd68c429fb7e00 txid is 3ea58b3ac2cb05868e70d40f58916312d927c40fd1e4c549554dc3e520c1efde UnfreezeBalance successful !!!","title":"unfreezeBalance"},{"location":"clients/wallet-cli-command/#getdelegatedresource","text":"wallet>getdelegatedresource [fromAddress] [toAddress] Get the information from the fromAddress , which is the resource owner's address, to the toAddress , which is the delegated address who is on behalf of the resource owner. wallet> getdelegatedresource TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8 TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE { \"delegatedResource\" : [ { \"from\" : \"TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8\" , \"to\" : \"TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE\" , \"frozen_balance_for_energy\" : 1000000 , \"expire_time_for_energy\" : 1656660447000 } ] }","title":"getDelegatedResource"},{"location":"clients/wallet-cli-command/#freezebalancev2","text":"Stake 2.0 API: Stake TRX to obtain TRON Power (voting rights) and bandwidth or energy. wallet> freezeBalanceV2 [ OwnerAddress ] frozen_balance ResourceCode ( 0 BANDWIDTH,1 ENERGY,2 TRON_POWER ) OwnerAddress is the address of the account that initiated the transaction, optional, default is the address of the login account. frozen_balance is the amount of frozen TRX, the unit is the smallest unit (Sun), the minimum is 1000000sun. ResourceCode indicates the type of the acquired resource\uff0c0 BANDWIDTH and 1 ENERGY. Example: wallet> freezeBalanceV2 1000000 1 { \"raw_data\" : { \"contract\" : [ { \"parameter\" : { \"value\" : { \"resource\" : \"ENERGY\" , \"frozen_balance\" :1000000, \"owner_address\" : \"TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\" } , \"type_url\" : \"type.googleapis.com/protocol.FreezeBalanceV2Contract\" } , \"type\" : \"FreezeBalanceV2Contract\" } ] , \"ref_block_bytes\" : \"00bb\" , \"ref_block_hash\" : \"0c237850e9e3c216\" , \"expiration\" :1676620524000, \"timestamp\" :1676620465372 } , \"raw_data_hex\" : \"0a0200bb22080c237850e9e3c21640e0d3fbf2e5305a59083612550a34747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e467265657a6542616c616e63655632436f6e7472616374121d0a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca10c0843d180170dc89f8f2e530\" } before sign transaction hex string is 0a770a0200bb22080c237850e9e3c21640e0d3fbf2e5305a59083612550a34747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e467265657a6542616c616e63655632436f6e7472616374121d0a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca10c0843d180170dc89f8f2e530 Please confirm and input your permission id, if input y or Y means default 0 , other non-numeric characters will cancel transaction. y Please choose your key for sign. The 1th keystore file name is UTC--2023-02-17T02-53-57.163000000Z--THLJLytz6UHwpmDFi5RC43D44dmnh4ZTeL.json The 2th keystore file name is UTC--2023-02-17T07-40-47.121000000Z--TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM.json Please choose between 1 and 2 2 Please input your password. password: after sign transaction hex string is 0a770a0200bb22080c237850e9e3c21640dbb89efde5305a59083612550a34747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e467265657a6542616c616e63655632436f6e7472616374121d0a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca10c0843d180170dc89f8f2e53012419e46cc7b6706ee6a14a541df5f9c518fae9a71ac7a7cc484c48386eb0997a8ab10c41e09feb905c5cc370fe1d15968d22cec2fd2cdc5916adfd3a78c52f8d47000 txid is 1743aa098f5e10ac8b68ccbf0ca6b5f1364a63485e442e6cb03fd33e3331e3fb freezeBalanceV2 successful !!!","title":"freezeBalanceV2"},{"location":"clients/wallet-cli-command/#unfreezebalancev2","text":"Stake 2.0 API: Unstake TRX to release bandwidth and energy and at the same time TRON Power will be reclaimed and corresponding votes will be revoked. wallet> unfreezeBalanceV2 [ OwnerAddress ] unfreezeBalance ResourceCode ( 0 BANDWIDTH,1 ENERGY,2 TRON_POWER ) OwnerAddress is the address of the account that initiated the transaction, optional, default is the address of the login account. unfreezeBalance Amount of TRX to be unstaked. the unit is sun. ResourceCode indicates the type of the acquired resource\uff0c0 stands for BANDWIDTH and 1 stands for ENERGY. Example: wallet> unfreezeBalanceV2 1000000 1 { \"raw_data\" : { \"contract\" : [ { \"parameter\" : { \"value\" : { \"resource\" : \"ENERGY\" , \"owner_address\" : \"TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\" , \"unfreeze_balance\" :1000000 } , \"type_url\" : \"type.googleapis.com/protocol.UnfreezeBalanceV2Contract\" } , \"type\" : \"UnfreezeBalanceV2Contract\" } ] , \"ref_block_bytes\" : \"0132\" , \"ref_block_hash\" : \"0772c1a1727e2ef0\" , \"expiration\" :1676620887000, \"timestamp\" :1676620829314 } , \"raw_data_hex\" : \"0a02013222080772c1a1727e2ef040d8e791f3e5305a5b083712570a36747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e556e667265657a6542616c616e63655632436f6e7472616374121d0a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca10c0843d18017082a58ef3e530\" } before sign transaction hex string is 0a790a02013222080772c1a1727e2ef040d8e791f3e5305a5b083712570a36747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e556e667265657a6542616c616e63655632436f6e7472616374121d0a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca10c0843d18017082a58ef3e530 Please confirm and input your permission id, if input y or Y means default 0 , other non-numeric characters will cancel transaction. y Please choose your key for sign. The 1th keystore file name is UTC--2023-02-17T02-53-57.163000000Z--THLJLytz6UHwpmDFi5RC43D44dmnh4ZTeL.json The 2th keystore file name is UTC--2023-02-17T07-40-47.121000000Z--TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM.json Please choose between 1 and 2 2 Please input your password. password: after sign transaction hex string is 0a790a02013222080772c1a1727e2ef040ecd2b4fde5305a5b083712570a36747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e556e667265657a6542616c616e63655632436f6e7472616374121d0a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca10c0843d18017082a58ef3e530124111bac22e9bc35e1a78c13796893e9f2b81dc99eb26d9ce7a95d0c6a0a9b5588739c52b999acd370b255d178f57bf2abef8881891f23e042ddf83c3551b8bd98e01 txid is f9e114347ea89c5d722d20226817bc41c8a39ea36be756ba216cf450ab3f1fb3 unfreezeBalanceV2 successful !!!","title":"unfreezeBalanceV2"},{"location":"clients/wallet-cli-command/#delegateresource","text":"Stake 2.0 API: delegate bandwidth or energy resource to other address. wallet> delegateResource [ OwnerAddress ] balance ResourceCode ( 0 BANDWIDTH,1 ENERGY ) , ReceiverAddress [ lock ] OwnerAddress is the address of the account that initiated the transaction, optional, default is the address of the login account. balance Amount of TRX staked for resources to be delegated, unit is sun. ResourceCode Resource type, \"BANDWIDTH\" is 0, \"ENERGY\" is 1. ReceiverAddress Receiver address of resource to be delegated to. lock Whether it is locked, if it is set to true, the delegated resources cannot be undelegated within 3 days. When the lock time is not over, if the owner delegates the same type of resources using the lock to the same address, the lock time will be reset to 3 days. optional, default is 0, 0-lock, 1-unlock. Example: wallet> delegateResource 1000000 1 TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g 0 { \"raw_data\" : { \"contract\" : [ { \"parameter\" : { \"value\" : { \"balance\" :1000000, \"resource\" : \"ENERGY\" , \"receiver_address\" : \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\" , \"owner_address\" : \"TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\" } , \"type_url\" : \"type.googleapis.com/protocol.DelegateResourceContract\" } , \"type\" : \"DelegateResourceContract\" } ] , \"ref_block_bytes\" : \"020c\" , \"ref_block_hash\" : \"54e32e95d11894f8\" , \"expiration\" :1676621547000, \"timestamp\" :1676621487525 } , \"raw_data_hex\" : \"0a02020c220854e32e95d11894f840f88bbaf3e5305a710839126d0a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e44656c65676174655265736f75726365436f6e747261637412340a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca100118c0843d221541fd49eda0f23ff7ec1d03b52c3a45991c24cd440e70a5bbb6f3e530\" } before sign transaction hex string is 0a8f010a02020c220854e32e95d11894f840f88bbaf3e5305a710839126d0a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e44656c65676174655265736f75726365436f6e747261637412340a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca100118c0843d221541fd49eda0f23ff7ec1d03b52c3a45991c24cd440e70a5bbb6f3e530 Please confirm and input your permission id, if input y or Y means default 0 , other non-numeric characters will cancel transaction. y Please choose your key for sign. The 1th keystore file name is UTC--2023-02-17T02-53-57.163000000Z--THLJLytz6UHwpmDFi5RC43D44dmnh4ZTeL.json The 2th keystore file name is UTC--2023-02-17T07-40-47.121000000Z--TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM.json Please choose between 1 and 2 2 Please input your password. password: after sign transaction hex string is 0a8f010a02020c220854e32e95d11894f84093e9dcfde5305a710839126d0a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e44656c65676174655265736f75726365436f6e747261637412340a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca100118c0843d221541fd49eda0f23ff7ec1d03b52c3a45991c24cd440e70a5bbb6f3e5301241414de060e9c104bb45d745e22b7b7a30b4a89a2635c62aab152fff5d2f10b7443023a9aa487be86652b74974ff6a7d82d3dbf94cea9ac1e0a7e48e682175e3f601 txid is 0917002d0068dde7ad4ffe46e75303d11192e17bfa78934a5f867c5ae20720ec delegateResource successful !!!","title":"delegateResource"},{"location":"clients/wallet-cli-command/#undelegateresource","text":"Stake 2.0 API: undelegate resource. wallet> unDelegateResource [ OwnerAddress ] balance ResourceCode ( 0 BANDWIDTH,1 ENERGY ) , ReceiverAddress OwnerAddress is the address of the account that initiated the transaction, optional, default is the address of the login account. balance Amount of TRX staked for resource to be undelegated, unit is sun. ResourceCode Resource type, \"BANDWIDTH\" is 0, \"ENERGY\" is 1. ReceiverAddress Receiver address of resource to be delegated to. Example: wallet> unDelegateResource 1000000 1 TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g { \"raw_data\" : { \"contract\" : [ { \"parameter\" : { \"value\" : { \"balance\" :1000000, \"resource\" : \"ENERGY\" , \"receiver_address\" : \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\" , \"owner_address\" : \"TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\" } , \"type_url\" : \"type.googleapis.com/protocol.UnDelegateResourceContract\" } , \"type\" : \"UnDelegateResourceContract\" } ] , \"ref_block_bytes\" : \"0251\" , \"ref_block_hash\" : \"68ac15256c213e71\" , \"expiration\" :1676621754000, \"timestamp\" :1676621695001 } , \"raw_data_hex\" : \"0a020251220868ac15256c213e714090ddc6f3e5305a73083a126f0a37747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e556e44656c65676174655265736f75726365436f6e747261637412340a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca100118c0843d221541fd49eda0f23ff7ec1d03b52c3a45991c24cd440e709990c3f3e530\" } before sign transaction hex string is 0a91010a020251220868ac15256c213e714090ddc6f3e5305a73083a126f0a37747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e556e44656c65676174655265736f75726365436f6e747261637412340a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca100118c0843d221541fd49eda0f23ff7ec1d03b52c3a45991c24cd440e709990c3f3e530 Please confirm and input your permission id, if input y or Y means default 0 , other non-numeric characters will cancel transaction. y Please choose your key for sign. The 1th keystore file name is UTC--2023-02-17T02-53-57.163000000Z--THLJLytz6UHwpmDFi5RC43D44dmnh4ZTeL.json The 2th keystore file name is UTC--2023-02-17T07-40-47.121000000Z--TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM.json Please choose between 1 and 2 2 Please input your password. password: after sign transaction hex string is 0a91010a020251220868ac15256c213e7140febde9fde5305a73083a126f0a37747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e556e44656c65676174655265736f75726365436f6e747261637412340a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca100118c0843d221541fd49eda0f23ff7ec1d03b52c3a45991c24cd440e709990c3f3e530124102ebde16d1abaccd976f8ead4b5acf92b05f7d9796c28ca6a26b4e51442e638e5e33e598bb03732da24dc761a39b9d307c045b55323128dc9b07510ffc48933a01 txid is 537a3f4461ab55c705b77503bc42f469bfc22c0cb8588b8f3641ab40117ebfd8 unDelegateResource successful !!!","title":"unDelegateResource"},{"location":"clients/wallet-cli-command/#withdrawexpireunfreeze","text":"Stake 2.0 API: withdraw unfrozen balance. wallet> withdrawExpireUnfreeze [ OwnerAddress ] OwnerAddress is the address of the account that initiated the transaction, optional, default is the address of the login account. Example: wallet> withdrawExpireUnfreeze","title":"withdrawExpireUnfreeze"},{"location":"clients/wallet-cli-command/#getavailableunfreezecount","text":"Stake 2.0 API: remaining times of executing unstake operation. wallet> getavailableunfreezecount [ OwnerAddress ] OwnerAddress is the address of the account that initiated the transaction, optional, default is the address of the login account. Example: wallet> GetAvailableUnfreezeCount { \"count\" : 30 }","title":"getavailableunfreezecount"},{"location":"clients/wallet-cli-command/#getcanwithdrawunfreezeamount","text":"Stake 2.0 API: query the withdrawable balance at the specified timestamp. wallet> getcanwithdrawunfreezeamount ownerAddress timestamp OwnerAddress is the address of the account that initiated the transaction, optional, default is the address of the login account. timestamp query cutoff timestamp, in milliseconds. Example: wallet> getcanwithdrawunfreezeamount 1776621695001 { \"amount\" : 4000000 }","title":"getcanwithdrawunfreezeamount"},{"location":"clients/wallet-cli-command/#getcandelegatedmaxsize","text":"Stake 2.0 API: query the amount of delegatable resources share of the specified resource type for an address, unit is sun. wallet> getcandelegatedmaxsize ownerAddress type OwnerAddress is the address of the account that initiated the transaction, optional, default is the address of the login account. type resource type, 0 is bandwidth, 1 is energy Example: wallet> getcandelegatedmaxsize 1 { \"max_size\" : 11000000 }","title":"getcandelegatedmaxsize"},{"location":"clients/wallet-cli-command/#getdelegatedresourcev2","text":"Stake 2.0 API\uff1aquery the detail of resource share delegated from fromAddress to toAddress. wallet> getdelegatedresourcev2 fromAddress toAddress fromAddress resource from address. toAddress resource to address. Example: wallet> getdelegatedresourcev2 TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g { \"delegatedResource\" : [ { \"from\" : \"TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\" , \"to\" : \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\" , \"frozen_balance_for_bandwidth\" : 7000000 , \"frozen_balance_for_energy\" : 3000000 } ] }","title":"getdelegatedresourcev2"},{"location":"clients/wallet-cli-command/#getdelegatedresourceaccountindexv2","text":"Stake 2.0 API\uff1aquery the resource delegation index by an account. Two lists will return, one is the list of addresses the account has delegated its resources(toAddress), and the other is the list of addresses that have delegated resources to the account(fromAddress). wallet> getdelegatedresourceaccountindexv2 ownerAddress OwnerAddress account address. Example: wallet> getdelegatedresourceaccountindexv2 TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM { \"account\" : \"TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\" , \"fromAccounts\" : [ \"TUznHJfHe6gdYY7gvWmf6bNZHuPHDZtowf\" ] , \"toAccounts\" : [ \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\" ] }","title":"getdelegatedresourceaccountindexv2"},{"location":"clients/wallet-cli-command/#getaccountnet","text":"This command shows the usage of bandwidth for a certain account. wallet> getaccountnet TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8 { \"freeNetUsed\" : 262 , \"freeNetLimit\" : 1500 , \"TotalNetLimit\" : 43200000000 , \"TotalNetWeight\" : 8725123062 }","title":"GetAccountNet"},{"location":"clients/wallet-cli-command/#getaccountresource","text":"This command shows the usage of bandwidth and energy for a certain account. wallet> getaccountresource TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8 { \"freeNetUsed\" : 262 , \"freeNetLimit\" : 1500 , \"TotalNetLimit\" : 43200000000 , \"TotalNetWeight\" : 8725123062 , \"tronPowerLimit\" : 1 , \"TotalEnergyLimit\" : 90000000000 , \"TotalEnergyWeight\" : 328098231 }","title":"GetAccountResource"},{"location":"clients/wallet-cli-command/#transaction","text":"Here are all the transaction related commands \uff1a SendCoin AddTransactionSign BroadcastTransaction BackupWallet2Base64 GetTransactionApprovedList","title":"Transaction"},{"location":"clients/wallet-cli-command/#sendcoin","text":"> SendCoin [toAddress] [amount] Here is an example of multi-signed transaction. The accounts permission have assigned as in UpdateAccountPermission section, please check for reference. wallet> SendCoin TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE 10 { \"raw_data\" : { \"contract\" : [ \u00b7\u00b7\u00b7 \"raw_data_hex\" : \"0a029ca12208432ed1fe1357ff7f40c0c484f19a305a65080112610a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412300a1541babecec4d9f58f0df77f0728b9c53abb1f21d684121541e8bd653015895947cec33d1670a88cf67ab277b9180a708a8481f19a30\" } before sign transaction hex string is 0a83010a029ca12208432ed1fe1357ff7f40c0c484f19a305a65080112610a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412300a1541babecec4d9f58f0df77f0728b9c53abb1f21d684121541e8bd653015895947cec33d1670a88cf67ab277b9180a708a8481f19a30 Please confirm and input your permission id, if input y or Y means default 0 , other non-numeric characters will cancel transaction. 2 Please choose your key for sign. The 1th keystore file name is UTC--2022-06-28T06-52-56.928000000Z--TB9qhqbev6DpX8mxdf3zDdtSQ6GC6Vb6Ej.json The 2th keystore file name is .DS_Store The 3th keystore file name is UTC--2022-04-06T09-43-20.710000000Z--TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8.json The 4th keystore file name is UTC--2022-04-07T09-03-38.307000000Z--TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE.json Please choose between 1 and 4 1 Please input your password. password: Current signWeight is: { \"result\" : { \"code\" : \"NOT_ENOUGH_PERMISSION\" } , \"approved_list\" : [ \"TB9qhqbev6DpX8mxdf3zDdtSQ6GC6Vb6Ej\" ] , \"permission\" : { \"operations\" : \"7fff1fc0033e0000000000000000000000000000000000000000000000000000\" , \"keys\" : [ { \"address\" : \"TB9qhqbev6DpX8mxdf3zDdtSQ6GC6Vb6Ej\" , \"weight\" :1 } , { \"address\" : \"TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE\" , \"weight\" :1 } ] , \"threshold\" :2, \"id\" :2, \"type\" : \"Active\" , \"permission_name\" : \"active12323\" } , \"current_weight\" :1, \"transaction\" : { \"result\" : { \"result\" :true } , \"txid\" : \"ece603ec8ad11578450dc8adf29dd9d9833e733c313fe16a947c8c768f1e4483\" , \"transaction\" : { \"signature\" : [ \"990001e909e638bbaa5de9b392121971d25cabde1391f5e164cd8a14608812df01a273e867c2329b8adb233599c5d353c435e789c777fd3e0b9fe83f0737a91101\" ] , \"txID\" : \"ece603ec8ad11578450dc8adf29dd9d9833e733c313fe16a947c8c768f1e4483\" , \"raw_data\" :\u00b7\u00b7\u00b7, \"raw_data_hex\" : \"0a029ca12208432ed1fe1357ff7f40a2b3a7fb9a305a67080112610a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412300a1541babecec4d9f58f0df77f0728b9c53abb1f21d684121541e8bd653015895947cec33d1670a88cf67ab277b9180a2802708a8481f19a30\" } } } Please confirm if continue add signature enter y or Y, else any other y Please choose your key for sign. The 1th keystore file name is UTC--2022-06-28T06-52-56.928000000Z--TB9qhqbev6DpX8mxdf3zDdtSQ6GC6Vb6Ej.json The 2th keystore file name is .DS_Store The 3th keystore file name is UTC--2022-04-06T09-43-20.710000000Z--TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8.json The 4th keystore file name is UTC--2022-04-07T09-03-38.307000000Z--TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE.json Please choose between 1 and 4 4 Please input your password. password: after sign transaction hex string is 0a85010a029ca12208432ed1fe1357ff7f40a2b3a7fb9a305a67080112610a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412300a1541babecec4d9f58f0df77f0728b9c53abb1f21d684121541e8bd653015895947cec33d1670a88cf67ab277b9180a2802708a8481f19a301241990001e909e638bbaa5de9b392121971d25cabde1391f5e164cd8a14608812df01a273e867c2329b8adb233599c5d353c435e789c777fd3e0b9fe83f0737a91101124141ba3ffe9c7bb1ed184df8bf635d8c987982b2f4b22c447666ac82726f4a97cb2ef4d3fabd64137b8d59239bd7173c74264733ed140ccd04934a88c438de1cab00 txid is ece603ec8ad11578450dc8adf29dd9d9833e733c313fe16a947c8c768f1e4483 Send 10 Sun to TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE successful !! A permission_id is always required, it is \"0\" by default, which means this transaction only needed to be sign by owner. In the example above, we enter \"2\" to make a multi-signed transaction this time, needs the two accounts assigned actives permission in UpdateAccountPermission section above to sign this transaction. In the example, we picked the account TB9qhqbev6DpX8mxdf3zDdtSQ6GC6Vb6Ej to sign first, after that, it asks you if want to add another sign ,enter y and pick the account TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE to finish multi-signing. The weight of each account is 1 and the granting threshold is 2. When the requirements are met, the transaction is done successfully! This example shows how to complete a multi-signed transaction using the same client. When using multiple clients, please refer to the following command.","title":"SendCoin"},{"location":"clients/wallet-cli-command/#addtransactionsign","text":"Use the instruction addTransactionSign according to the obtained transaction hex string if signing at multiple cli. wallet> addtransactionsign 0a83010a0241aa2208b2d2c13c86e8bd884098acb1cf9a305a65080112610a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412300a1541babecec4d9f58f0df77f0728b9c53abb1f21d684121541e8bd653015895947cec33d1670a88cf67ab277b9180a70e8e1adcf9a30 Please input permission id. 0 Please choose your key for sign. The 1th keystore file name is UTC--2022-06-28T06-52-56.928000000Z--TB9qhqbev6DpX8mxdf3zDdtSQ6GC6Vb6Ej.json The 2th keystore file name is .DS_Store The 3th keystore file name is UTC--2022-04-06T09-43-20.710000000Z--TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8.json The 4th keystore file name is UTC--2022-04-07T09-03-38.307000000Z--TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE.json Please choose between 1 and 4 3 Please input your password. password: { \"signature\" : [ \"dbfe007bb44e8db164f4c0cf9b586a8d6a65f0612c4d9ec5350adeae6cd97c7874e7254bbf4156b545a90c34e48c8f28bdb5c8f9258514233b9201b2844d7f9201\" ] , \"txID\" : \"6e1d2460796f717b701e355734ac0e4e8b32e14c24ce569a60ad3f63afe46c87\" , \"raw_data\" : { \"contract\" : [ { \"parameter\" : { \"value\" : { \"amount\" :10, \"owner_address\" : \"TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8\" , \"to_address\" : \"TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE\" } , \"type_url\" : \"type.googleapis.com/protocol.TransferContract\" } , \"type\" : \"TransferContract\" } ] , \"ref_block_bytes\" : \"41aa\" , \"ref_block_hash\" : \"b2d2c13c86e8bd88\" , \"expiration\" :1656434882649, \"timestamp\" :1656413188328 } , \"raw_data_hex\" : \"0a0241aa2208b2d2c13c86e8bd8840d9f0d9d99a305a65080112610a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412300a1541babecec4d9f58f0df77f0728b9c53abb1f21d684121541e8bd653015895947cec33d1670a88cf67ab277b9180a70e8e1adcf9a30\" } Transaction hex string is 0a83010a0241aa2208b2d2c13c86e8bd8840d9f0d9d99a305a65080112610a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412300a1541babecec4d9f58f0df77f0728b9c53abb1f21d684121541e8bd653015895947cec33d1670a88cf67ab277b9180a70e8e1adcf9a301241dbfe007bb44e8db164f4c0cf9b586a8d6a65f0612c4d9ec5350adeae6cd97c7874e7254bbf4156b545a90c34e48c8f28bdb5c8f9258514233b9201b2844d7f9201 After signing, the users will need to broadcast final transactions manually.","title":"AddTransactionSign"},{"location":"clients/wallet-cli-command/#broadcasttransaction","text":"Broadcast the transaction, where the transaction is in hex string format. wallet> broadcasttransaction 0a83010a0241aa2208b2d2c13c86e8bd8840d9f0d9d99a305a65080112610a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412300a1541babecec4d9f58f0df77f0728b9c53abb1f21d684121541e8bd653015895947cec33d1670a88cf67ab277b9180a70e8e1adcf9a301241dbfe007bb44e8db164f4c0cf9b586a8d6a65f0612c4d9ec5350adeae6cd97c7874e7254bbf4156b545a90c34e48c8f28bdb5c8f9258514233b9201b2844d7f9201 BroadcastTransaction successful !!!","title":"BroadcastTransaction"},{"location":"clients/wallet-cli-command/#gettransactionapprovedlist","text":"Get signature information according to transactions. wallet> getTransactionApprovedList 0a8c010a020318220860e195d3609c86614096eadec79d2d5a6e080112680a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412370a1541a7d8a35b260395c14aa456297662092ba3b76fc01215415a523b449890854c8fc460ab602df9f31fe4293f18808084fea6dee11128027094bcb8bd9d2d1241c18ca91f1533ecdd83041eb0005683c4a39a2310ec60456b1f0075b4517443cf4f601a69788f001d4bc03872e892a5e25c618e38e7b81b8b1e69d07823625c2b0112413d61eb0f8868990cfa138b19878e607af957c37b51961d8be16168d7796675384e24043d121d01569895fcc7deb37648c59f538a8909115e64da167ff659c26101 { \"result\" : { } , \"approved_list\" : [ \"TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8\" ] , \"transaction\" : { \"result\" : { \"result\" :true } , \"txid\" : \"6e1d2460796f717b701e355734ac0e4e8b32e14c24ce569a60ad3f63afe46c87\" , \"transaction\" : { \"signature\" : [ \"dbfe007bb44e8db164f4c0cf9b586a8d6a65f0612c4d9ec5350adeae6cd97c7874e7254bbf4156b545a90c34e48c8f28bdb5c8f9258514233b9201b2844d7f9201\" ] , \"txID\" : \"6e1d2460796f717b701e355734ac0e4e8b32e14c24ce569a60ad3f63afe46c87\" , \"raw_data\" : { \"contract\" : [ { \"parameter\" : { \"value\" : { \"amount\" :10, \"owner_address\" : \"TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8\" , \"to_address\" : \"TXBpeye7UQ4dDZEnmGDv4vX37mBYDo1tUE\" } , \"type_url\" : \"type.googleapis.com/protocol.TransferContract\" } , \"type\" : \"TransferContract\" } ] , \"ref_block_bytes\" : \"41aa\" , \"ref_block_hash\" : \"b2d2c13c86e8bd88\" , \"expiration\" :1656434882649, \"timestamp\" :1656413188328 } , \"raw_data_hex\" : \"0a0241aa2208b2d2c13c86e8bd8840d9f0d9d99a305a65080112610a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412300a1541babecec4d9f58f0df77f0728b9c53abb1f21d684121541e8bd653015895947cec33d1670a88cf67ab277b9180a70e8e1adcf9a30\" } } }","title":"GetTransactionApprovedList"},{"location":"clients/wallet-cli-command/#on-chaininquire","text":"Here are all the on-chain inquire commands \uff1a GetNextMaintenanceTime ListNodes GetBlock GetBlockbyID GetBlockbyLatestNum GetBlockbyLimitNext GetTransactionbyID GetTransactionCountbyBlockNum GetTransactionInfobyID GetTransactionInfobyBlockNum GetTransactionSignWeight","title":"On-ChainInquire"},{"location":"clients/wallet-cli-command/#getnextmaintenancetime","text":"Get the start time of the next maintain period wallet> GetNextMaintenanceTime Next maintenance time is : 2022-06-29 16:40:00","title":"GetNextMaintenanceTime"},{"location":"clients/wallet-cli-command/#listnodes","text":"Get other peers' information wallet> listnodes IP::1.23.456.789 Port::12345 IP::2.345.67.89 Port::12345 IP::345.678.901.234 Port::12345 \u00b7\u00b7\u00b7","title":"ListNodes"},{"location":"clients/wallet-cli-command/#getblock","text":"Get the block by block height; if you do not pass the parameter, get the latest block wallet> getblock Get current block !!! { \"block_header\" : { \"raw_data\" : { \"number\" :27774469, \"txTrieRoot\" : \"0000000000000000000000000000000000000000000000000000000000000000\" , \"witness_address\" : \"TQuzjxWcqHSh1xDUw4wmMFmCcLjz4wSCBp\" , \"parentHash\" : \"0000000001a7ce048eb88d7c3c5e9c5f8e93a6cc568f47140e243d00d0f9280a\" , \"version\" :24, \"timestamp\" :1656919215000 } , \"witness_signature\" : \"3af25276891b1cf7f9f72e63ad956b50e5819fb3fa6f0b6393ed092e53a90a5438620b92b5d499e0068c6775b723e3c90677157b3e9f7b8933d1e863716145f500\" } }","title":"GetBlock"},{"location":"clients/wallet-cli-command/#getblockbyid","text":"Get block based on blockID\uff08block hash\uff09 wallet> getblockbyid [blockID] wallet> getblockbyid 0000000001a7cd54ee2b302cfd443cccec78e55a31902d2e7ea47e737c1a5ede { \"block_header\" : { \"raw_data\" : { \"number\" :27774292, \"txTrieRoot\" : \"a60f8cb160d06d5279cb463925274e18fec37f0414c4d8fdc4fb2299ccb0a8bf\" , \"witness_address\" : \"TGsdxpHNJaxsVNFFdb4R6Rib1TsKGon2Wp\" , \"parentHash\" : \"0000000001a7cd53685867286b17fa0f2389e1d3026bea0a0019c5fc37f873cb\" , \"version\" :24, \"timestamp\" :1656918678000 } , \"witness_signature\" : \"a93db1a8d989c6637d587369de2872a008f14d1df8f0aaeda8a54c324a44c269367ea31daf623834fd6a4ef3f6150ab8d370adff1df6c0e8c96af9cf34408d5600\" } , \u00b7\u00b7\u00b7","title":"GetBlockbyID"},{"location":"clients/wallet-cli-command/#getblockbylatestnum","text":"Get the latest n blocks, where 0 < n < 100 wallet> getblockbylatestnum [n]","title":"GetBlockByLatestNum"},{"location":"clients/wallet-cli-command/#getblockbylimitnext","text":"Get the block in a set range by block height. startBlock is the starting block height, endBlock is the ending block height. wallet> GetBlockByLimitNext [startBlock, endBlock] wallet> getblockbylimitnext 27774670 27774674 [ { \"block_header\" : { \"raw_data\" : { \"number\" :27774670, \"txTrieRoot\" : \"0eb9ba48deda22fafa613c0aefa6d3e0b21261ad82a126ce99a6b80e8b68045c\" , \"witness_address\" : \"TVKfvNUMcZdZbxhPLb2CkQ4nyUUhvwhv1b\" , \"parentHash\" : \"0000000001a7cecd7a2cdc58fdfd2edbfeaeb530958879bf1a299cc30043cd0b\" , \"version\" :24, \"timestamp\" :1656919824000 } , \"witness_signature\" : \"ee6653289e24edd24d70f4975e12934573d6e798a2a5c5e26e0b13bc6d25138c49a0f55fb0e9a5c503622b5877811403577a5e278528293d05c5f0b9d5d5542401\" } , \u00b7\u00b7\u00b7","title":"GetBlockByLimitNext"},{"location":"clients/wallet-cli-command/#gettransactionbyid","text":"Get transaction information based on transaction id (hash) wallet> GetTransactionById [transactionID]","title":"GetTransactionbyID"},{"location":"clients/wallet-cli-command/#gettransactioncountbyblocknum","text":"Get how many transactions contains in a block based on block height, see below wallet> gettransactioncountbyblocknum 27633562 The block contains 4 transactions","title":"GetTransactionCountbyBlockNum"},{"location":"clients/wallet-cli-command/#gettransactioninfobyid","text":"Get transaction-info based on transaction id, generally used to check the result of a smart contract trigger wallet> gettransactioninfobyid 6e1d2460796f717b701e355734ac0e4e8b32e14c24ce569a60ad3f63afe46c87 { \"id\": \"6e1d2460796f717b701e355734ac0e4e8b32e14c24ce569a60ad3f63afe46c87\", \"blockNumber\": 27609041, \"blockTimeStamp\": 1656417906000, \"contractResult\": [ \"\" ], \"receipt\": { \"net_usage\": 265 } }","title":"GetTransactionInfobyID"},{"location":"clients/wallet-cli-command/#gettransactioninfobyblocknum","text":"Get the list of transaction information in the block based on the block height wallet> gettransactioninfobyblocknum [blockNum]","title":"GetTransactionInfobyBlockNum"},{"location":"clients/wallet-cli-command/#gettransactionsignweight","text":"Get the sign weight by transaction hex string. >getTransactionSignWeight 0a83010a0241aa2208b2d2c13c86e8bd8840d9f0d9d99a305a65080112610a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412300a1541babecec4d9f58f0df77f0728b9c53abb1f21d684121541e8bd653015895947cec33d1670a88cf67ab277b9180a70e8e1adcf9a301241dbfe007bb44e8db164f4c0cf9b586a8d6a65f0612c4d9ec5350adeae6cd97c7874e7254bbf4156b545a90c34e48c8f28bdb5c8f9258514233b9201b2844d7f9201 The information displays as follows: { \"result\":{ }, \"approved_list\":[ \"TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8\" ], \"permission\":{ \"keys\":[ { \"address\":\"TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8\", \"weight\":1 } ], \"threshold\":1, \"permission_name\":\"owner\" }, \"current_weight\":1, \"transaction\":{ \"result\":{ \"result\":true }, \"txid\":\"6e1d2460796f717b701e355734ac0e4e8b32e14c24ce569a60ad3f63afe46c87\", \"transaction\":{ \"signature\":[ \"dbfe007bb44e8db164f4c0cf9b586a8d6a65f0612c4d9ec5350adeae6cd97c7874e7254bbf4156b545a90c34e48c8f28bdb5c8f9258514233b9201b2844d7f9201\" ], \u00b7\u00b7\u00b7 } } }","title":"GetTransactionSignWeight"},{"location":"clients/wallet-cli-command/#smartcontract","text":"Below, please find all the commands for smart contract interactions: DeployContract TriggerContract TriggerConstantContract EstimateEnergy GetContract UpdateEnergyLimit UpdateSetting","title":"SmartContract"},{"location":"clients/wallet-cli-command/#deploycontract","text":"wallet> DeployContract [ ownerAddress ] [ contractName ] [ ABI ] [ byteCode ] [ constructor ] [ params ] [ isHex ] [ fee_limit ] [ consume_user_resource_percent ] [ origin_energy_limit ] [ value ] [ token_value ] [ token_id ]( e.g: TRXTOKEN, use # if don't provided) <library:address,library:address,...> <lib_compiler_version(e.g:v5)> library:address,...> OwnerAddress is the address of the account that initiated the transaction, optional, considered as the address of the login account by default. contractName is the name of smart contract. ABI is ABI code generated when compiling. byteCode is byte code generated when compiling. constructor , params , isHex These three parameters define the format of the bytecode, which determines the way to parse byteCode from parameters. fee_limit determines the limit of consumed TRX for each transaction. consume_user_resource_percent is the percentage of user consumed resource, in the range between [0, 100%]. origin_energy_limit is the most amount of developer energy consumed by triggering the contract once. value is the amount of trx transferred to the contract account. token_value is the number of TRC-10 token. token_id is TRC-10 Id. Example: wallet> deployContract normalcontract544 [{ \"constant\" :false, \"inputs\" : [{ \"name\" : \"i\" , \"type\" : \"uint256\" }] , \"name\" : \"findArgsByIndexTest\" , \"outputs\" : [{ \"name\" : \"z\" , \"type\" : \"uint256\" }] , \"payable\" :false, \"stateMutability\" : \"nonpayable\" , \"type\" : \"function\" }] 608060405234801561001057600080fd5b50610134806100206000396000f3006080604052600436106100405763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663329000b58114610045575b600080fd5b34801561005157600080fd5b5061005d60043561006f565b60408051918252519081900360200190f35b604080516003808252608082019092526000916060919060208201838038833901905050905060018160008151811015156100a657fe5b602090810290910101528051600290829060019081106100c257fe5b602090810290910101528051600390829060029081106100de57fe5b6020908102909101015280518190849081106100f657fe5b906020019060200201519150509190505600a165627a7a72305820b24fc247fdaf3644b3c4c94fcee380aa610ed83415061ff9e65d7fa94a5a50a00029 # # false 1000000000 75 50000 0 0 # Get the result of the contract execution with the getTransactionInfoById command: wallet> getTransactionInfoById 4978dc64ff746ca208e51780cce93237ee444f598b24d5e9ce0da885fb3a3eb9 { \"id\" : \"8c1f57a5e53b15bb0a0a0a0d4740eda9c31fbdb6a63bc429ec2113a92e8ff361\" , \"fee\" : 6170500 , \"blockNumber\" : 1867 , \"blockTimeStamp\" : 1567499757000 , \"contractResult\" : [ \"6080604052600436106100405763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663329000b58114610045575b600080fd5b34801561005157600080fd5b5061005d60043561006f565b60408051918252519081900360200190f35b604080516003808252608082019092526000916060919060208201838038833901905050905060018160008151811015156100a657fe5b602090810290910101528051600290829060019081106100c257fe5b602090810290910101528051600390829060029081106100de57fe5b6020908102909101015280518190849081106100f657fe5b906020019060200201519150509190505600a165627a7a72305820b24fc247fdaf3644b3c4c94fcee380aa610ed83415061ff9e65d7fa94a5a50a00029\" ] , \"contract_address\" : \"TJMKWmC6mwF1QVax8Sy2AcgT6MqaXmHEds\" , \"receipt\" : { \"energy_fee\" : 6170500 , \"energy_usage_total\" : 61705 , \"net_usage\" : 704 , \"result\" : \"SUCCESS\" } }","title":"DeployContract"},{"location":"clients/wallet-cli-command/#triggercontract","text":"The command is used to trigger smart contract that deployed. wallet> TriggerContract [ ownerAddress ] [ contractAddress ] [ method ] [ args ] [ isHex ] [ fee_limit ] [ value ] [ token_value ] [ token_id ] OwnerAddress The address of the account that initiated the transaction, optional, default value is the address of the login account. ContractAddress is the smart contract address. method is the name of the function and parameters, please refer to the example below. args is a parameter for placeholding, pass '#' instead when method does not need extra parameters. isHex controls the format of the parameters method and args, whether they are in hex string or not. fee_limit is the most amount of trx allows for consumption. token_value indicate the number of TRC-10 token. token_id the TRC-10 token id, If not, use \u2018#\u2019 instead. Here is an example: wallet> triggerContract TGdtALTPZ1FWQcc5MW7aK3o1ASaookkJxG findArgsByIndexTest ( uint256 ) 0 false 1000000000 0 0 # Get the result of the contract execution with the getTransactionInfoById command, wallet> getTransactionInfoById 7d9c4e765ea53cf6749d8a89ac07d577141b93f83adc4015f0b266d8f5c2dec4 { \"id\" : \"de289f255aa2cdda95fbd430caf8fde3f9c989c544c4917cf1285a088115d0e8\" , \"fee\" : 8500 , \"blockNumber\" : 2076 , \"blockTimeStamp\" : 1567500396000 , \"contractResult\" : [ \"\" ] , \"contract_address\" : \"TJMKWmC6mwF1QVax8Sy2AcgT6MqaXmHEds\" , \"receipt\" : { \"energy_fee\" : 8500 , \"energy_usage_total\" : 85 , \"net_usage\" : 314 , \"result\" : \"REVERT\" } , \"result\" : \"FAILED\" , \"resMessage\" : \"REVERT opcode executed\" }","title":"TriggerContract"},{"location":"clients/wallet-cli-command/#triggerconstantcontract","text":"Invoke the readonly function (modified by the view or pure modifier) of a contract for contract data query; or Invoke the non-readonly function of a contract for predicting whether the transaction can be successfully executed or estimating the energy consumption. wallet> TriggerConstantContract ownerAddress(use # if you own) contractAddress method args isHex [value token_value token_id(e.g: TRXTOKEN, use # if don't provided)] ownerAddress Owner address that triggers the contract. If it is the login account, please input #. contractAddress Smart contract address. method Function call. args Parameters, if there is no parameter of method , please input #. isHex args is hex string or not\u3002 value TRX amount to be transferred. Optional, if no value, # can be inplaced. token_value TRC-10 token amount to be transferred. Optional, if no value, # can be inplaced. token_id TRC-10 token id to be transferred. Optional, if no value, # can be inplaced. Example: wallet> TriggerConstantContract TTGhREx2pDSxFX555NWz1YwGpiBVPvQA7e TVSvjZdyDSNocHm7dP3jvCmMNsCnMTPa5W transfer ( address,uint256 ) 0000000000000000000000002ce5de57373427f799cc0a3dd03b841322514a8c00000000000000000000000000000000000000000000000000038d7ea4c68000 true transfer ( address,uint256 ) :a9059cbb Execution result = { \"constant_result\" : [ \"0000000000000000000000000000000000000000000000000000000000000001\" ] , \"result\" : { \"result\" : true } , \"energy_used\" : 13253 , \"logs\" : [ { \"address\" : \"LUijWGF4iFrT7hV37Q2Q45DU5TUBvVZb7\" , \"topics\" : [ \"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\" , \"000000000000000000000000bdc8ee51fdd1b1e01d71f836481828f88463c838\" , \"0000000000000000000000002ce5de57373427f799cc0a3dd03b841322514a8c\" ] , \"data\" : \"00000000000000000000000000000000000000000000000000038d7ea4c68000\" } ] }","title":"TriggerConstantContract"},{"location":"clients/wallet-cli-command/#estimateenergy","text":"Estimate the energy required for the successful execution of smart contract transactions. But for FullNode, enabling the wallet/estimateEnergy API is optional. So please pay attention that when developers call wallet/estimateEnergy, if the error message shows that the node does not support this function when calling the new API (this node does not support estimate energy), it is recommended to continue using the wallet/triggerconstantcontract API to estimate energy consumption. wallet> EstimateEnergy ownerAddress contractAddress method args isHex [value token_value token_id] ownerAddress Owner address that triggers the contract. If it is the login account, please input #. contractAddress Smart contract address. method Function call. args Parameters, if there is no parameter of method , please input #. isHex args is hex string or not\u3002 value TRX amount to be transferred. Optional, if no value, # can be inplaced. token_value TRC-10 token amount to be transferred. Optional, if no value, # can be inplaced. token_id TRC-10 token id to be transferred. Optional, if no value, # can be inplaced. Example: wallet> EstimateEnergy TTGhREx2pDSxFX555NWz1YwGpiBVPvQA7e TVSvjZdyDSNocHm7dP3jvCmMNsCnMTPa5W transfer ( address,uint256 ) 0000000000000000000000002ce5de57373427f799cc0a3dd03b841322514a8c00000000000000000000000000000000000000000000000000038d7ea4c68000 true transfer ( address,uint256 ) :a9059cbb Estimate energy result = { \"result\" : { \"result\" : true } , \"energy_required\" : 14910 }","title":"EstimateEnergy"},{"location":"clients/wallet-cli-command/#getcontract","text":"Get the smart contract info by its address. wallet> GetContract [contractAddress] Example: wallet> GetContract TGdtALTPZ1FWQcc5MW7aK3o1ASaookkJxG { \"origin_address\" : \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\" , \"contract_address\" : \"TJMKWmC6mwF1QVax8Sy2AcgT6MqaXmHEds\" , \"abi\" : { \"entrys\" : [ { \"name\" : \"findArgsByIndexTest\" , \"inputs\" : [ { \"name\" : \"i\" , \"type\" : \"uint256\" } ] , \"outputs\" : [ { \"name\" : \"z\" , \"type\" : \"uint256\" } ] , \"type\" : \"Function\" , \"stateMutability\" : \"Nonpayable\" } ] } , \"bytecode\" : \"608060405234801561001057600080fd5b50610134806100206000396000f3006080604052600436106100405763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663329000b58114610045575b600080fd5b34801561005157600080fd5b5061005d60043561006f565b60408051918252519081900360200190f35b604080516003808252608082019092526000916060919060208201838038833901905050905060018160008151811015156100a657fe5b602090810290910101528051600290829060019081106100c257fe5b602090810290910101528051600390829060029081106100de57fe5b6020908102909101015280518190849081106100f657fe5b906020019060200201519150509190505600a165627a7a72305820b24fc247fdaf3644b3c4c94fcee380aa610ed83415061ff9e65d7fa94a5a50a00029\" , \"consume_user_resource_percent\" : 75 , \"name\" : \"normalcontract544\" , \"origin_energy_limit\" : 50000 , \"code_hash\" : \"23423cece3b4866263c15357b358e5ac261c218693b862bcdb90fa792d5714e6\" }","title":"GetContract"},{"location":"clients/wallet-cli-command/#updateenergylimit","text":"Update parameter energy limit\uff0cparameter are the same as above. wallet> UpdateEnergyLimit [ ownerAddress ] [ contract_address ] [ energy_limit ]","title":"UpdateEnergyLimit"},{"location":"clients/wallet-cli-command/#updatesetting","text":"Update parameter of energy consume percentage per user wallet> UpdateSetting [ ownerAddress ] contract_address consume_user_resource_percent","title":"UpdateSetting"},{"location":"clients/wallet-cli-command/#trc-10","text":"Below, please find all the commands for TRC-10: AssetIssue UpdateAsset TransferAsset ParticipateAssetissue UnfreezeAsset ListAssetIssue GetAssetIssuebyAccount GetAssetIssuebyID GetAssetIssuebyName GetAssetIssueListbyName","title":"TRC-10"},{"location":"clients/wallet-cli-command/#assetissue","text":"Each account is allowed to issue only ONE TRC-10 token. wallet> AssetIssue [ OwnerAddress ] [ AssetName ] [ AbbrName ] [ TotalSupply ] [ TrxNum ] [ AssetNum ] [ Precision ] [ StartDate ] [ EndDate ] [ Description Url ] [ FreeNetLimitPerAccount ] [ PublicFreeNetLimit ] [ FrozenAmount0 ] [ FrozenDays0 ] [ ... ] [ FrozenAmountN ] [ FrozenDaysN ] OwnerAddress (optional) is the address of the account which initiated the transaction. Default: the address of the login account. AssetName is the name of the issued TRC-10 token. AbbrName is the abbreviation of TRC-10 token you want to issue. TotalSupply is total issuing amount of TRC-10 token. TotalSupply = Account Balance of Issuer + All Frozen Token Amount Account Balance Of Issuer: balance at the time of issuance All Frozen Token Amount: Before asset transfer and the issuance TrxNum , AssetNum are two parameters determine the exchange rate when the token is issued. Exchange Rate = TrxNum / AssetNum AssetNum : Unit in the base unit of the issued token TrxNum : Unit in SUN (0.000001 TRX) Precision indicates how many decimal places there is. FreeNetLimitPerAccount determines the maximum amount of bandwidth each account is allowed to use. Token issuers can freeze TRX to obtain bandwidth (TransferAssetContract only) PublicFreeNetLimit is the maximum total amount of bandwidth which is allowed to use for all accounts. Token issuers can freeze TRX to obtain bandwidth (TransferAssetContract only) StartDate , EndDate is the start and end date of token issuance. Within this period time, other users can participate in token issuance. FrozenAmount0 , FrozenDays0 determines the amount and days of token freeze. FrozenAmount0 : Must be bigger than 0. FrozenDays0 : Must between 1 and 3652. Example: wallet> AssetIssue TestTRX TRX 75000000000000000 1 1 2 \"2019-10-02 15:10:00\" \"2020-07-11\" \"just for test121212\" www.test.com 100 100000 10000 10 10000 1 wallet> GetAssetIssueByAccount TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ # View published information { \"assetIssue\" : [ { \"owner_address\" : \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\" , \"name\" : \"TestTRX\" , \"abbr\" : \"TRX\" , \"total_supply\" : 75000000000000000 , \"frozen_supply\" : [ { \"frozen_amount\" : 10000 , \"frozen_days\" : 1 } , { \"frozen_amount\" : 10000 , \"frozen_days\" : 10 } ] , \"trx_num\" : 1 , \"precision\" : 2 , \"num\" : 1 , \"start_time\" : 1570000200000 , \"end_time\" : 1594396800000 , \"description\" : \"just for test121212\" , \"url\" : \"www.test.com\" , \"free_asset_net_limit\" : 100 , \"public_free_asset_net_limit\" : 100000 , \"id\" : \"1000001\" } ] }","title":"AssetIssue"},{"location":"clients/wallet-cli-command/#updateasset","text":"wallet> UpdateAsset [OwnerAddress] [newLimit] [newPublicLimit] [description url] Specific meaning of the parameters are the same as they are in AssetIssue. Example: wallet> UpdateAsset 1000 1000000 \"change description\" www.changetest.com wallet> GetAssetIssueByAccount TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ # to check the modified information { \"assetIssue\" : [ { \"owner_address\" : \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\" , \"name\" : \"TestTRX\" , \"abbr\" : \"TRX\" , \"total_supply\" : 75000000000000000 , \"frozen_supply\" : [ { \"frozen_amount\" : 10000 , \"frozen_days\" : 1 } , { \"frozen_amount\" : 10000 , \"frozen_days\" : 10 } ] , \"trx_num\" : 1 , \"precision\" : 2 , \"num\" : 1 , \"start_time\" : 1570000200000 , \"end_time\" : 1594396800000 , \"description\" : \"change description\" , \"url\" : \"www.changetest.com\" , \"free_asset_net_limit\" : 1000 , \"public_free_asset_net_limit\" : 1000000 , \"id\" : \"1000001\" } ] }","title":"UpdateAsset"},{"location":"clients/wallet-cli-command/#transferasset","text":"> TransferAsset [OwnerAddress] [ToAddress] [AssertID] [Amount] OwnerAddress (optional) is the address of the account which initiated the transaction. By default, the address of the login account. ToAddress is the address of the target account. AssertName is the TRC-10 token ID. Example: 1000001 Amount is the number of TRC10 token to transfer with. Example: wallet> TransferAsset TN3zfjYUmMFK3ZsHSsrdJoNRtGkQmZLBLz 1000001 1000 wallet> getaccount TN3zfjYUmMFK3ZsHSsrdJoNRtGkQmZLBLz # to check target account information after the transfer address: TN3zfjYUmMFK3ZsHSsrdJoNRtGkQmZLBLz assetV2 { id: 1000001 balance: 1000 latest_asset_operation_timeV2: null free_asset_net_usageV2: 0 }","title":"TransferAsset"},{"location":"clients/wallet-cli-command/#participateassetissue","text":"> ParticipateAssetIssue [OwnerAddress] [ToAddress] [AssetID] [Amount] OwnerAddress (optional) is the address of the account which initiated the transaction. Default: the address of the login account. ToAddress is the account address of TRC10 issuers. AssertName is the TRC-10 token ID. Example: 1000001 Amount is the number of TRC10 token to transfers with. The participation process must happen during the release of TRC10, otherwise an error may occur. Example: wallet> ParticipateAssetIssue TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ 1000001 1000 wallet> getaccount TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW # View remaining balance address: TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW assetV2 { id: 1000001 balance: 1000 latest_asset_operation_timeV2: null free_asset_net_usageV2: 0 }","title":"ParticipateAssetissue"},{"location":"clients/wallet-cli-command/#unfreezeasset","text":"To unfreeze all TRC10 token which are supposed to be unfrozen after the freezing period. wallet> unfreezeasset [OwnerAddress]","title":"UnfreezeAsset"},{"location":"clients/wallet-cli-command/#listassetissue","text":"Obtain all of the published TRC10 token information. wallet> listassetissue { \"assetIssue\" : [ { \"owner_address\" : \"TMWXhuxiT1KczhBxCseCDDsrhmpYGUcoA9\" , \"name\" : \"tronlink_token\" , \"abbr\" : \"tronlink_token\" , \"total_supply\" : 1000000000000000 , \"frozen_supply\" : [ { \"frozen_amount\" : 1 , \"frozen_days\" : 1 } ] , \"trx_num\" : 1 , \"precision\" : 6 , \"num\" : 1 , \"start_time\" : 1574757000000 , \"end_time\" : 1757595000000 , \"description\" : \"Description\" , \"url\" : \"https://blog.csdn.net/u010270891/article/details/82978260\" , \"free_asset_net_limit\" : 1000 , \"public_free_asset_net_limit\" : 2000 , \"id\" : \"1000001\" } , \u00b7\u00b7\u00b7","title":"ListAssetIssue"},{"location":"clients/wallet-cli-command/#getassetissuebyaccount","text":"Obtain TRC10 token information based on owner address. wallet> getassetissuebyaccount [owneraddress] wallet> getassetissuebyaccount TUwjpfqW7NG6BF3GCTrKy1aDvfchwSG4tN { \"assetIssue\" : [ { \"owner_address\" : \"TUwjpfqW7NG6BF3GCTrKy1aDvfchwSG4tN\" , \"name\" : \"h00966\" , \"abbr\" : \"h00966\" , \"total_supply\" : 100000000000 , \"trx_num\" : 1000000 , \"precision\" : 6 , \"num\" : 1000000 , \"start_time\" : 1656374400000 , \"end_time\" : 1656460800000 , \"description\" : \"Automated gaming platform. TRC10 token h0966. More info on website. TRC10 token h0966. More info on website. More info on website.\" , \"url\" : \"https://h00966.com\" , \"id\" : \"1004901\" } ] }","title":"GetAssetIssuebyAccount"},{"location":"clients/wallet-cli-command/#getassetissuebyid","text":"Obtain TRC10 token Information based on token ID. wallet> GetAssetIssueById 1004901 { \"owner_address\" : \"TUwjpfqW7NG6BF3GCTrKy1aDvfchwSG4tN\" , \"name\" : \"h00966\" , \"abbr\" : \"h00966\" , \"total_supply\" : 100000000000 , \"trx_num\" : 1000000 , \"precision\" : 6 , \"num\" : 1000000 , \"start_time\" : 1656374400000 , \"end_time\" : 1656460800000 , \"description\" : \"Automated gaming platform. TRC10 token h0966. More info on website.TRC10 token h0966. More info on website.More info on website.\" , \"url\" : \"https://h00966.com\" , \"id\" : \"1004901\" }","title":"GetAssetIssuebyID"},{"location":"clients/wallet-cli-command/#getassetissuebyname","text":"Obtain TRC10 token Information based on token names. wallet> GetAssetIssueByname h00966 { \"owner_address\" : \"TUwjpfqW7NG6BF3GCTrKy1aDvfchwSG4tN\" , \"name\" : \"h00966\" , \"abbr\" : \"h00966\" , \"total_supply\" : 100000000000 , \"trx_num\" : 1000000 , \"precision\" : 6 , \"num\" : 1000000 , \"start_time\" : 1656374400000 , \"end_time\" : 1656460800000 , \"description\" : \"Automated gaming platform. TRC10 token h0966. More info on website.TRC10 token h0966. More info on website.More info on website.\" , \"url\" : \"https://h00966.com\" , \"id\" : \"1004901\" }","title":"GetAssetIssuebyName"},{"location":"clients/wallet-cli-command/#getassetissuelistbyname","text":"Obtain a list of TRC10 token information based on names. wallet> GetAssetIssueListByName ROFLOTOKEN { \"assetIssue\": [ { \"owner_address\": \"TLvQSVH9Hm7kxLFtTP228fN6pCrHmtVjpb\", \"name\": \"ROFLOTOKEN\", \"abbr\": \"roflotoken\", \"total_supply\": 10000000000000000, \"trx_num\": 1000000, \"precision\": 6, \"num\": 100000000, \"start_time\": 1656349200000, \"end_time\": 1656435600000, \"description\": \"roflotoken.com\", \"url\": \"https://haxibaibo.com/\", \"id\": \"1004898\" } ] }","title":"GetAssetIssueListbyName"},{"location":"clients/wallet-cli-command/#governance","text":"Any proposal-related operations, except for viewing operations, must be performed by committee members. Please find all the commands for Governance: CreateProposal ApproveProposal DeleteProposal ListProposals ListProposalsPaginated GetProposal VoteWitness ListWitnesses GetBrokerage GetReward UpdateBrokerage","title":"Governance"},{"location":"clients/wallet-cli-command/#creatproposal","text":"Initiate a proposal with createProposal. wallet> createProposal [ OwnerAddress ] [ id0 ] [ value0 ] ... [ idN ] [ valueN ] OwnerAddress (optional) is the address of the account which initiated the transaction. By default, it is the address of the login account. id0 is the serial number of TRON Network Parameter. Of which, each one has a serial number corresponded. Please refer to http://tronscan.org/#/sr/committee . Value0 is the modified value. In the example, modification No.4 (modifying token issuance fee) costs 1000TRX as follows: wallet> createProposal 4 1000 wallet> listproposals # to check initiated proposal { \"proposals\" : [ { \"proposal_id\" : 1 , \"proposer_address\" : \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\" , \"parameters\" : [ { \"key\" : 4 , \"value\" : 1000 } ] , \"expiration_time\" : 1567498800000 , \"create_time\" : 1567498308000 } ] } The corresponding id is 1.","title":"CreatProposal"},{"location":"clients/wallet-cli-command/#approveproposal","text":"Approve or disapprove a proposal using approveProposal. wallet> approveProposal [ OwnerAddress ] [ id ] [ is_or_not_add_approval ] OwnerAddress (optional) is the address of the account which initiated the transaction. Default: the address of the login account. id is the ID of the initiated proposal. Example: 1. is_or_not_add_approval is true for approve; is false for disapprove. Example: wallet> ApproveProposal 1 true # in favor of the offer wallet> ApproveProposal 1 false # Cancel the approved proposal","title":"ApproveProposal"},{"location":"clients/wallet-cli-command/#deleteproposal","text":"wallet> deleteProposal [OwnerAddress] [proposalId] proposalId is the ID of the initiated proposal. Example: 1. The proposal must be canceled by the supernode that initiated the proposal. Example\uff1a wallet> DeleteProposal 1","title":"DeleteProposal"},{"location":"clients/wallet-cli-command/#listproposals","text":"Obtain a list of initiated proposals wallet> listproposals { \"proposals\" : [ { \"proposal_id\" : 12732 , \"proposer_address\" : \"TQ4eBJna51sew13DBLd7YjEHHHW7fkNzc2\" , \"parameters\" : [ { \"key\" : 65 , \"value\" : 1 } , { \"key\" : 66 , \"value\" : 1 } , { \"key\" : 62 , \"value\" : 432000000 } ] , \"expiration_time\" : 1656491400000 , \"create_time\" : 1656490794000 , \"approvals\" : [ \"TQ4eBJna51sew13DBLd7YjEHHHW7fkNzc2\" ] , \"state\" : \"DISAPPROVED\" } , { \u00b7\u00b7\u00b7","title":"ListProposals"},{"location":"clients/wallet-cli-command/#listproposalspaginated","text":"Use the paging mode to obtain the initiated proposal. wallet> ListProposalsPaginated [offset] [limit] offset is the number of proposals you want to skip. limit is the number of proposals you want to be listed. By default, all proposals would be listed from proposal_id 1 to date. The parameter in the example below means you want to skip the first 33 proposals and list the 2 proposals right after that. wallet> listproposalspaginated 33 2 { \"proposals\" : [ { \"proposal_id\" : 34 , \"proposer_address\" : \"TEDguVMSsFw3HSizQXFK1BsrGWeuRMNN7t\" , \"parameters\" : [ { \"key\" : 1 , \"value\" : 9997000000 } ] , \"expiration_time\" : 1582381200000 , \"create_time\" : 1582380477000 , \"state\" : \"DISAPPROVED\" } , { \"proposal_id\" : 35 , \"proposer_address\" : \"TDkSQtBhZx7Ua8qvenM4zuH52u2BsYTwzc\" , \"parameters\" : [ { \"key\" : 1 , \"value\" : 9997000000 } ] , \"expiration_time\" : 1582381200000 , \"create_time\" : 1582380498000 , \"state\" : \"DISAPPROVED\" } ] }","title":"ListProposalsPaginated"},{"location":"clients/wallet-cli-command/#getproposal","text":"Obtain proposal information based on the proposal ID. wallet> getproposal 34 { \"proposal_id\" : 34 , \"proposer_address\" : \"TEDguVMSsFw3HSizQXFK1BsrGWeuRMNN7t\" , \"parameters\" : [ { \"key\" : 1 , \"value\" : 9997000000 } ] , \"expiration_time\" : 1582381200000 , \"create_time\" : 1582380477000 , \"state\" : \"DISAPPROVED\" }","title":"GetProposal"},{"location":"clients/wallet-cli-command/#votewitness","text":"Voting requires TRON Power, which can be obtained by freezing funds. wallet> votewitness [SR(Super Representatives) address] [TRON Power Amount] The share calculation method is: 1 unit of share can be obtained for every 1TRX frozen. After unfreezing, previous vote will expire. You can avoid the invalidation of the vote by re-freezing and voting. NOTE The TRON Network only records the status of your last vote, which means that each of your votes will overwrite all previous voting results. For example: wallet> freezeBalance 100000000 3 1 address # Freeze 10TRX and acquire 10 units of TRON Power wallet> votewitness [ SR1 ] 4 [ SR2 ] 6 # Cast 4 votes for SR1 and 6 votes for SR2 at the same time wallet> votewitness [ SR1 ] 10 # Voted 10 votes for SR1 The final result of the above command was 10 votes for SR1 and 0 vote for SR2.","title":"VoteWitness"},{"location":"clients/wallet-cli-command/#listwitnesses","text":"Get all miner node information wallet> listwitnesses { \"witnesses\" : [ { \"address\" : \"TPffmvjxEcvZefQqS7QYvL1Der3uiguikE\" , \"voteCount\" : 324999518 , \"url\" : \"http://sr-26.com\" , \"totalProduced\" : 414028 , \"totalMissed\" : 20 , \"latestBlockNum\" : 27638663 , \"latestSlotNum\" : 552169224 , \"isJobs\" : true } , { \"address\" : \"TFFLWM7tmKiwGtbh2mcz2rBssoFjHjSShG\" , \"voteCount\" : 324759460 , \"url\" : \"http://sr-27.com\" , \"totalProduced\" : 414144 , \"totalMissed\" : 16 , \"latestBlockNum\" : 27638664 , \"latestSlotNum\" : 552169225 , \"isJobs\" : true } , \u00b7\u00b7\u00b7","title":"ListWitnesses"},{"location":"clients/wallet-cli-command/#getbrokerage","text":"View the ratio of brokerage of the SR(Super Representatives). After voting for the super representative, you will receive the rewards. The super representative has the right to decide the ratio of brokerage. The default ratio is 20%, and the super representative can adjust it. By default, if a super representative is rewarded, he will receive 20% of the whole rewards, and 80% of the rewards will be distributed to his voters. OwnerAddress is the address of the SR's account, it is a base58check type address. wallet> getbrokerage TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8 The brokerage is : 20","title":"GetBrokerage"},{"location":"clients/wallet-cli-command/#getreward","text":"Query unclaimed reward. OwnerAddress is the address of the voter's account, it is a base58check type address. wallet> getreward TSzdGHnhYnQKFF4LKrRLztkjYAvbNoxnQ8 The reward is : 0","title":"GetReward"},{"location":"clients/wallet-cli-command/#updatebrokerage","text":"Update the ratio of brokerage, this command is usually used by a super representative account. wallet> updateBrokerage [ OwnerAddress ] [ brokerage ] OwnerAddress is the address of the super representative's account, it is a base58check type address. brokerage is the ratio of brokerage you want to update to, the limit of it: 0-100. For example: wallet> updateBrokerage TZ7U1WVBRLZ2umjizxqz3XfearEHhXKX7h 30","title":"UpdateBrokerage"},{"location":"clients/wallet-cli-command/#dex","text":"The trading and price fluctuations of trading pairs are in accordance with the Bancor Agreement . Here are all the commands for DEX: ExchangeCreate ExchangeInject ExchangeTransaction ExchangeWithdraw ListExchanges ListExchangesPaginated MarketSellAsset MarketCancelOrder GetMarketOrderbyAccount GetMarketOrderbyID GetMarketPairList GetMarketOrderListbyPair GetMarketPricebyPair","title":"DEX"},{"location":"clients/wallet-cli-command/#exchangecreate","text":"Create a trading pair wallet> exchangeCreate [ OwnerAddress ][ first_token_id ] [ first_token_balance ] [ second_token_id ] [ second_token_balance ] OwnerAddress is the address of the account which initiated the transaction. Considered as the login account by default. First_token_id , first_token_balance is the ID and amount of the first token. second_token_id , second_token_balance is the ID and amount of the second token. The ID is the ID of the issued TRC10 token. If it is TRX, the ID is \"\". The amount must be greater than 0, and less than 1,000,000,000,000,000. Example: wallet> exchangeCreate 1000001 10000 _ 10000 # Create trading pairs with the IDs of 1000001 and TRX, with amount 10000 for both.","title":"ExchangeCreate"},{"location":"clients/wallet-cli-command/#exchangeinject","text":"Capital injection wallet> exchangeInject [OwnerAddress] [exchange_id] [token_id] [quant] OwnerAddress is the address of the account which initiated the transaction. Default: the address of the login account. exchange_id is the ID of the trading pair to be funded. token_id, quant is the token Id and quantity (unit in base unit) of capital injection. When conducting a capital injection, depending on its quantity (quant), a proportion of each token in the trading pair will be withdrawn from the account, and injected into the trading pair. Depending on the difference in the balance of the transaction, the same amount of money for the same token would vary.","title":"ExchangeInject"},{"location":"clients/wallet-cli-command/#exchangetransaction","text":"Making transaction wallet> exchangeTransaction [ OwnerAddress ] [ exchange_id ] [ token_id ] [ quant ] [ expected ] OwnerAddress is the address of the account which initiated the transaction. Default: the address of the login account. exchange_id is the ID of the trading pair. token_id , quant is the ID and quantity of tokens being exchanged, equivalent to selling. expected is the expected quantity of another token. IT must be less than quant, or an error will be reported. Example\uff1a wallet> ExchangeTransaction 1 1000001 100 80 It is expected to acquire the 80 TRX by exchanging 1000001 from the trading pair ID of 1, and the amount is 100.(Equivalent to selling an amount of 100 tokenID - 1000001, at a price of 80 TRX, in trading pair ID - 1).","title":"ExchangeTransaction"},{"location":"clients/wallet-cli-command/#exchangewithdraw","text":"wallet> exchangeWithdraw [OwnerAddress] [exchange_id] [token_id] [quant] OwnerAddress is the address of the account which initiated the transaction. Default: the address of the login account. Exchange_id is the ID of the trading pair to be withdrawn. Token_id , quant is token Id and quantity (unit in base unit) of capital withdrawal. When conducting a capital withdrawal, depending on its quantity (quant), a proportion of each token in the transaction pair is withdrawn from the trading pair, and injected into the account. Depending on the difference in the balance of the transaction, the same amount of money for the same token would vary. You may obtain information on trading pairs by the following commands,","title":"ExchangeWithdraw"},{"location":"clients/wallet-cli-command/#listexchanges","text":"List trading pairs wallet> listexchanges { \"exchanges\" : [ { \"exchange_id\" : 14 , \"creator_address\" : \"TCjuQbm5yab7ENTYb7tbdAKaiNa9Lrj4mo\" , \"create_time\" : 1654154880000 , \"first_token_id\" : \"1004852\" , \"first_token_balance\" : 91 , \"second_token_id\" : \"_\" , \"second_token_balance\" : 110000000 } , { \"exchange_id\" : 13 , \"creator_address\" : \"TBpbKyKVUB1YLULrbhawUws69Gv33cmKDL\" , \"create_time\" : 1648004214000 , \"first_token_id\" : \"1000575\" , \"first_token_balance\" : 991 , \"second_token_id\" : \"1000184\" , \"second_token_balance\" : 1010 } , \u00b7\u00b7\u00b7","title":"ListExchanges"},{"location":"clients/wallet-cli-command/#listexchangespaginated","text":"List trading pairs by page wallet> ListExchangesPaginated [offset] [limit] offset is the number of exchange pair you want to skip. limit is the number of exchange pair you want to be listed. The parameters in the example below means to skip the first 3 exchange pairs and show the next 2 exchange pairs. wallet> listexchangespaginated 3 2 { \"exchanges\" : [ { \"exchange_id\" : 4 , \"creator_address\" : \"TXmHTj3t5LXGvqGkr4jRNw7nf9GjquQ5yf\" , \"create_time\" : 1601458377000 , \"first_token_id\" : \"1000088\" , \"first_token_balance\" : 1 , \"second_token_id\" : \"_\" , \"second_token_balance\" : 1 } , { \"exchange_id\" : 5 , \"creator_address\" : \"TTJJvoPKGVKnbUBPVTn1Zi8o6k3EfFDXVS\" , \"create_time\" : 1602578613000 , \"first_token_id\" : \"1000091\" , \"first_token_balance\" : 456125 , \"second_token_id\" : \"_\" , \"second_token_balance\" : 106968111 } ] }","title":"ListExchangesPaginated"},{"location":"clients/wallet-cli-command/#marketsellasset","text":"Create an order to sell asset wallet> MarketSellAsset [ owner_address ] [ sell_token_id ] [ sell_token_quantity ] [ buy_token_id ] [ buy_token_quantity ] OwnerAddress is the address of the account that initiated the transaction. sell_token_id and sell_token_quantity are the ID and amount of the token want to sell. buy_token_id , buy_token_quantity determines the ID and amount of the token want to buy. Example: wallet> MarketSellAsset TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW 1000001 200 _ 100 Then we use the command getTransactionInfoById to check the result of the contract execution as below, wallet> getTransactionInfoById 10040f993cd9452b25bf367f38edadf11176355802baf61f3c49b96b4480d374 { \"id\" : \"10040f993cd9452b25bf367f38edadf11176355802baf61f3c49b96b4480d374\" , \"blockNumber\" : 669 , \"blockTimeStamp\" : 1578983493000 , \"contractResult\" : [ \"\" ] , \"receipt\" : { \"net_usage\" : 264 } }","title":"MarketSellAsset"},{"location":"clients/wallet-cli-command/#marketcancelorder","text":"This command cancels the order. wallet> MarketCancelOrder [ owner_address ] [ order_id ] owner_address is the account address who have created the order. order_id is the order id which want to cancel. Example: wallet> MarketCancelOrder TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW fc9c64dfd48ae58952e85f05ecb8ec87f55e19402493bb2df501ae9d2da75db0 Get the result of the contract execution with the getTransactionInfoById command: wallet> getTransactionInfoById b375787a098498623403c755b1399e82910385251b643811936d914c9f37bd27 { \"id\" : \"b375787a098498623403c755b1399e82910385251b643811936d914c9f37bd27\" , \"blockNumber\" : 1582 , \"blockTimeStamp\" : 1578986232000 , \"contractResult\" : [ \"\" ] , \"receipt\" : { \"net_usage\" : 283 } }","title":"MarketCancelOrder"},{"location":"clients/wallet-cli-command/#getmarketorderbyaccount","text":"Use this command to get the order created by account(just include active status). wallet> GetMarketOrderByAccount [ ownerAddress ] ownerAddress is the address of the account that created market order. Example: wallet> GetMarketOrderByAccount TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW { \"orders\" : [ { \"order_id\" : \"fc9c64dfd48ae58952e85f05ecb8ec87f55e19402493bb2df501ae9d2da75db0\" , \"owner_address\" : \"TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\" , \"create_time\" : 1578983490000 , \"sell_token_id\" : \"_\" , \"sell_token_quantity\" : 100 , \"buy_token_id\" : \"1000001\" , \"buy_token_quantity\" : 200 , \"sell_token_quantity_remain\" : 100 } ] }","title":"GetMarketOrderbyAccount"},{"location":"clients/wallet-cli-command/#getmarketorderbyid","text":"Get the specific order by order_id wallet> GetMarketOrderById [ orderId ] Example: wallet> GetMarketOrderById fc9c64dfd48ae58952e85f05ecb8ec87f55e19402493bb2df501ae9d2da75db0 { \"order_id\" : \"fc9c64dfd48ae58952e85f05ecb8ec87f55e19402493bb2df501ae9d2da75db0\" , \"owner_address\" : \"TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\" , \"create_time\" : 1578983490000 , \"sell_token_id\" : \"_\" , \"sell_token_quantity\" : 100 , \"buy_token_id\" : \"1000001\" , \"buy_token_quantity\" : 200 , }","title":"GetMarketOrderbyID"},{"location":"clients/wallet-cli-command/#getmarketpairlist","text":"This command is to get market pair listed wallet> getmarketpairlist { \"orderPair\" : [ { \"sell_token_id\" : \"1000012\" , \"buy_token_id\" : \"_\" } , { \"sell_token_id\" : \"1000094\" , \"buy_token_id\" : \"1000095\" } , { \"sell_token_id\" : \"1000099\" , \"buy_token_id\" : \"1000100\" } , \u00b7\u00b7\u00b7","title":"GetMarketPairList"},{"location":"clients/wallet-cli-command/#getmarketorderlistbypair","text":"This command is to get market order list by c pair, wallet> GetMarketOrderListByPair [ sell_token_id ] [ buy_token_id ] sell_token_id is the ID of the token want to sell. buy_token_id is the ID of the token want to buy. Example: wallet> GetMarketOrderListByPair _ 1000001 { \"orders\" : [ { \"order_id\" : \"fc9c64dfd48ae58952e85f05ecb8ec87f55e19402493bb2df501ae9d2da75db0\" , \"owner_address\" : \"TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\" , \"create_time\" : 1578983490000 , \"sell_token_id\" : \"_\" , \"sell_token_quantity\" : 100 , \"buy_token_id\" : \"1000001\" , \"buy_token_quantity\" : 200 , \"sell_token_quantity_remain\" : 100 } ] }","title":"GetMarketOrderListbyPair"},{"location":"clients/wallet-cli-command/#getmarketpricebypair","text":"Use this command to get market price by exchange pair. wallet> GetMarketPriceByPair [ sell_token_id ] [ buy_token_id ] sell_token_id is the ID of the token want to sell. buy_token_id is the ID of the token want to buy. Example: wallet> GetMarketPriceByPair _ 1000001 { \"sell_token_id\" : \"_\" , \"buy_token_id\" : \"1000001\" , \"prices\" : [ { \"sell_token_quantity\" : 100 , \"buy_token_quantity\" : 200 } ] }","title":"GetMarketPricebyPair"},{"location":"clients/wallet-cli/","text":"What is Wallet-CLI? \u00b6 Wallet-Cli is an interactive command-line wallet that supports the TRON network for signing and broadcasting transactions in a secure local environment, as well as access to on-chain data. Wallet-Cli supports key management, you can import the private key into the wallet, Wallet-Cli will encrypt your private key with a symmetric encryption algorithm and store it in a keystore file. Wallet-Cli does not store on-chain data locally. It uses gRPC to communicate with a java-tron node. You need to configure the java-tron node to be linked in the configuration file. The following figure shows the process of the use of Wallet-Cli to sign and broadcast when transferring TRX: The user first runs the Login command to unlock the wallet, and then runs the SendCoin command to send TRX, Wallet-Cli will build and sign the transaction locally, and then call the BroadcastTransaction gRPC API of the java-tron node to broadcast the transaction to the network. After the broadcast is successful, the java-tron node will return the transaction hash to Wallet-Cli, and Wallet-Cli will display the transaction hash to the user. Install and run: Wallet-Cli","title":"What is Wallet-CLI"},{"location":"clients/wallet-cli/#what-is-wallet-cli","text":"Wallet-Cli is an interactive command-line wallet that supports the TRON network for signing and broadcasting transactions in a secure local environment, as well as access to on-chain data. Wallet-Cli supports key management, you can import the private key into the wallet, Wallet-Cli will encrypt your private key with a symmetric encryption algorithm and store it in a keystore file. Wallet-Cli does not store on-chain data locally. It uses gRPC to communicate with a java-tron node. You need to configure the java-tron node to be linked in the configuration file. The following figure shows the process of the use of Wallet-Cli to sign and broadcast when transferring TRX: The user first runs the Login command to unlock the wallet, and then runs the SendCoin command to send TRX, Wallet-Cli will build and sign the transaction locally, and then call the BroadcastTransaction gRPC API of the java-tron node to broadcast the transaction to the network. After the broadcast is successful, the java-tron node will return the transaction hash to Wallet-Cli, and Wallet-Cli will display the transaction hash to the user. Install and run: Wallet-Cli","title":"What is Wallet-CLI?"},{"location":"contracts/compiler/","text":"Compiler \u00b6 Tools \u00b6 1. TronIDE Support the build, debug, run, etc. for solidity language written smart contract. http://www.tronide.io 2. TronBox Support the build, deploy, transplant, etc. for solidity language written smart contract. https://developers.tron.network/reference/what-is-tronbox 3. TronWeb Provide javascript api for the usage of smart contract. https://tronweb.network/docu/docs/intro/ 4. TronGrid Provide smart contract event query service. https://developers.tron.network/docs/trongrid 5. Trident-java Trident-java is a lightweight SDK that includes libraries for working with TRON system contracts and smart contracts.","title":"Dapp Development Tool"},{"location":"contracts/compiler/#compiler","text":"","title":"Compiler"},{"location":"contracts/compiler/#tools","text":"","title":"Tools"},{"location":"contracts/contract/","text":"Contract \u00b6 Smart Contract Introduction \u00b6 Smart contract is a computerized transaction protocol that automatically implements its terms. Smart contract is the same as common contract, they all define the terms and rules related to the participants. Once the contract is started, it can runs in the way it is designed. TRON smart contract support Solidity language in (Ethereum). You can find the latest solidity version in the TRON solidity repository . Write a smart contract, then build the smart contract and deploy it to TRON network. When the smart contract is triggered, the corresponding function will be executed automatically. Smart Contract Features \u00b6 TRON virtual machine is based on Ethereum solidity language, it also has TRON's own features. 1. Smart Contract \u00b6 TRON VM is compatible with Ethereum's smart contract, using protobuf to define the content of the contract: message SmartContract { message ABI { message Entry { enum EntryType { UnknownEntryType = 0 ; Constructor = 1 ; Function = 2 ; Event = 3 ; Fallback = 4 ; Receive = 5 ; Error = 6 ; } message Param { bool indexed = 1 ; string name = 2 ; string type = 3 ; } enum StateMutabilityType { UnknownMutabilityType = 0 ; Pure = 1 ; View = 2 ; Nonpayable = 3 ; Payable = 4 ; } bool anonymous = 1 ; bool constant = 2 ; string name = 3 ; repeated Param inputs = 4 ; repeated Param outputs = 5 ; EntryType type = 6 ; bool payable = 7 ; StateMutabilityType stateMutability = 8 ; } repeated Entry entrys = 1 ; } bytes origin_address = 1 ; bytes contract_address = 2 ; ABI abi = 3 ; bytes bytecode = 4 ; int64 call_value = 5 ; int64 consume_user_resource_percent = 6 ; string name = 7 ; int64 origin_energy_limit = 8 ; bytes code_hash = 9 ; bytes trx_hash = 10 ; } origin_address: smart contract creator address contract_address: smart contract address abi: the api information of all the function of the smart contract bytecode: smart contract byte code call_value: TRX transferred into smart contract while call the contract consume_user_resource_percent: resource consumption percentage set by the developer name: smart contract name origin_energy_limit: energy consumption of the developer limit in one call, must be greater than 0. For the old contracts, if this parameter is not set, it will be set 0, developer can use updateEnergyLimit api to update this parameter (must greater than 0) Through other two grpc message types CreateSmartContract and TriggerSmartContract to create and use smart contract. 2. The Usage of the Function of Smart Contract \u00b6 constant function and inconstant function There are two types of function according to whether any change will be made to the properties on the chain: constant function and inconstant function Constant function uses view/pure/constant to decorate, will return the result on the node it is called and not be broadcasted in the form of a transaction Inconstant function will be broadcasted in the form of a transaction while being called, the function will change the data on the chain, such as transfer, changing the value of the internal variables of contracts, etc. Note: If you use create command inside a contract (CREATE instruction), even use view/pure/constant to decorate the dynamically created contract function, this function will still be treated as inconstant function, be dealt in the form of transaction. message calls Message calls can call the functions of other contracts, also can transfer TRX to the accounts of contract and none-contract. Like the common TRON triggercontract, Message calls have initiator, recipient, data, transfer amount, fees and return attributes. Every message call can generate a new one recursively. Contract can define the distribution of the remaining energy in the internal message call. If it comes with OutOfEnergyException in the internal message call, it will return false, but not error. In the meantime, only the gas sent with the internal message call will be consumed, if energy is not specified in call.value(energy), all the remaining energy will be used. delegate call/call code/library There is a special type of message call, delegate call. The difference with common message call is the code of the target address will be run in the context of the contract that initiates the call, msg.sender and msg.value remain unchanged. This means a contract can dynamically loadcode from another address while running. Storage, current address and balance all point to the contract that initiates the call, only the code is get from the address being called. This gives Solidity the ability to achieve the 'lib' function: the reusable code lib can be put in the storage of a contract to implement complex data structure library. CREATE command This command will create a new contract with a new address. The only difference with Ethereum is the newly generated TRON address used the smart contract creation transaction id and the hash of nonce called combined. Different from Ethereum, the definition of nonce is the contract sequence number of the creation of the root call. Even there are many CREATE commands calls, contract number in sequence from 1. Refer to the source code for more detail. Note: Different from creating a contract by grpc's deploycontract, contract created by CREATE command does not store contract abi. built-in function and built-in function attribute (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 1)TVM is compatible with solidity language's transfer format, including: - accompany with constructor to call transfer - accompany with internal function to call transfer - use transfer/send/call/callcode/delegatecall to call transfer Note: TRON's smart contract is different from TRON's system contract, if the transfer to address does not exist it can not create an account by smart contract transfer. 2)Different accounts vote for SuperNode (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 3)SuperNode gets all the reward (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 4)SuperNode approves or disapproves the proposal (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 5)SuperNode proposes a proposal (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 6)SuperNode deletes a proposal (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 7)TRON byte address converts to solidity address (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 8)TRON string address converts to solidity address (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 9)Send token to target address (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 10)Query token amount of target address (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 11)Compatible with all the built-in functions of Ethereum Note: Ethereum's RIPEMD160 function is not recommended, because the return of TRON is a hash result based on TRON's sha256, not an accurate Ethereum RIPEMD160. 3. Contract Address Using in Solidity Language \u00b6 Ethereum VM address is 20 bytes, but TRON's VM address is 21 bytes. address conversion Need to convert TRON's address while using in solidity (recommended): /** * @dev convert uint256 (HexString add 0x at beginning) TRON address to solidity address type * @param tronAddress uint256 tronAddress, begin with 0x, followed by HexString * @return Solidity address type */ function convertFromTronInt(uint256 tronAddress) public view returns(address){ return address(tronAddress); } This is similar with the grammar of the conversion from other types converted to address type in Ethereum. address judgement Solidity has address constant judgement, if using 21 bytes address the compiler will throw out an error, so you should use 20 bytes address, like: function compareAddress(address tronAddress) public view returns (uint256){ // if (tronAddress == 0x41ca35b7d915458ef540ade6068dfe2f44e8fa733c) { // compile error if (tronAddress == 0xca35b7d915458ef540ade6068dfe2f44e8fa733c) { // right return 1; } else { return 0; } } But if you are using wallet-cli, you can use 21 bytes address, like 0000000000000000000041ca35b7d915458ef540ade6068dfe2f44e8fa733c variable assignment Solidity has address constant assignment, if using 21 bytes address the compiler will throw out an error, so you should use 20 bytes address, like: function assignAddress() public view { // address newAddress = 0x41ca35b7d915458ef540ade6068dfe2f44e8fa733c; // compile error address newAddress = 0xca35b7d915458ef540ade6068dfe2f44e8fa733c; // do something } If you want to use TRON address of string type (TLLM21wteSPs4hKjbxgmH1L6poyMjeTbHm) please refer to (2-4-7,2-4-8). 4. The Special Constants Differ from Ethereum \u00b6 Currency Like solidity supports ETH, TRON VM supports trx and sun, 1 trx = 1000000 sun, case sensitive, only support lower case. tron-studio supports trx and sun, remix does not support trx and sun. We recommend to use tron-studio instead of remix to build TRON smart contract. Block block.blockhash (uint blockNumber) returns (bytes32): specified block hash, can only apply to the latest 256 blocks and current block excluded block.coinbase (address): SuperNode address that produced the current block block.difficulty (uint): current block difficulty, not recommended, set 0 block.gaslimit (uint): current block gas limit, not supported, set 0 block.number (uint): current block number block.timestamp (uint): current block timestamp gasleft() returns (uint256): remaining gas msg.data (bytes): complete call data msg.gas (uint): remaining gas - since 0.4.21, not recommended, replaced by gesleft() msg.sender (address): message sender (current call) msg.sig (bytes4): first 4 bytes of call data (function identifier) msg.value (uint): the amount of SUN send with message now (uint): current block timestamp (block.timestamp) tx.gasprice (uint): the gas price of transaction, not recommended, set 0 tx.origin (address): transaction initiator Each command of smart contract consume system resource while running, we use 'Energy' as the unit of the consumption of the resource.","title":"Smart Contract"},{"location":"contracts/contract/#contract","text":"","title":"Contract"},{"location":"contracts/contract/#smart-contract-introduction","text":"Smart contract is a computerized transaction protocol that automatically implements its terms. Smart contract is the same as common contract, they all define the terms and rules related to the participants. Once the contract is started, it can runs in the way it is designed. TRON smart contract support Solidity language in (Ethereum). You can find the latest solidity version in the TRON solidity repository . Write a smart contract, then build the smart contract and deploy it to TRON network. When the smart contract is triggered, the corresponding function will be executed automatically.","title":"Smart Contract Introduction"},{"location":"contracts/contract/#smart-contract-features","text":"TRON virtual machine is based on Ethereum solidity language, it also has TRON's own features.","title":"Smart Contract Features"},{"location":"contracts/contract/#1-smart-contract","text":"TRON VM is compatible with Ethereum's smart contract, using protobuf to define the content of the contract: message SmartContract { message ABI { message Entry { enum EntryType { UnknownEntryType = 0 ; Constructor = 1 ; Function = 2 ; Event = 3 ; Fallback = 4 ; Receive = 5 ; Error = 6 ; } message Param { bool indexed = 1 ; string name = 2 ; string type = 3 ; } enum StateMutabilityType { UnknownMutabilityType = 0 ; Pure = 1 ; View = 2 ; Nonpayable = 3 ; Payable = 4 ; } bool anonymous = 1 ; bool constant = 2 ; string name = 3 ; repeated Param inputs = 4 ; repeated Param outputs = 5 ; EntryType type = 6 ; bool payable = 7 ; StateMutabilityType stateMutability = 8 ; } repeated Entry entrys = 1 ; } bytes origin_address = 1 ; bytes contract_address = 2 ; ABI abi = 3 ; bytes bytecode = 4 ; int64 call_value = 5 ; int64 consume_user_resource_percent = 6 ; string name = 7 ; int64 origin_energy_limit = 8 ; bytes code_hash = 9 ; bytes trx_hash = 10 ; } origin_address: smart contract creator address contract_address: smart contract address abi: the api information of all the function of the smart contract bytecode: smart contract byte code call_value: TRX transferred into smart contract while call the contract consume_user_resource_percent: resource consumption percentage set by the developer name: smart contract name origin_energy_limit: energy consumption of the developer limit in one call, must be greater than 0. For the old contracts, if this parameter is not set, it will be set 0, developer can use updateEnergyLimit api to update this parameter (must greater than 0) Through other two grpc message types CreateSmartContract and TriggerSmartContract to create and use smart contract.","title":"1. Smart Contract"},{"location":"contracts/contract/#2-the-usage-of-the-function-of-smart-contract","text":"constant function and inconstant function There are two types of function according to whether any change will be made to the properties on the chain: constant function and inconstant function Constant function uses view/pure/constant to decorate, will return the result on the node it is called and not be broadcasted in the form of a transaction Inconstant function will be broadcasted in the form of a transaction while being called, the function will change the data on the chain, such as transfer, changing the value of the internal variables of contracts, etc. Note: If you use create command inside a contract (CREATE instruction), even use view/pure/constant to decorate the dynamically created contract function, this function will still be treated as inconstant function, be dealt in the form of transaction. message calls Message calls can call the functions of other contracts, also can transfer TRX to the accounts of contract and none-contract. Like the common TRON triggercontract, Message calls have initiator, recipient, data, transfer amount, fees and return attributes. Every message call can generate a new one recursively. Contract can define the distribution of the remaining energy in the internal message call. If it comes with OutOfEnergyException in the internal message call, it will return false, but not error. In the meantime, only the gas sent with the internal message call will be consumed, if energy is not specified in call.value(energy), all the remaining energy will be used. delegate call/call code/library There is a special type of message call, delegate call. The difference with common message call is the code of the target address will be run in the context of the contract that initiates the call, msg.sender and msg.value remain unchanged. This means a contract can dynamically loadcode from another address while running. Storage, current address and balance all point to the contract that initiates the call, only the code is get from the address being called. This gives Solidity the ability to achieve the 'lib' function: the reusable code lib can be put in the storage of a contract to implement complex data structure library. CREATE command This command will create a new contract with a new address. The only difference with Ethereum is the newly generated TRON address used the smart contract creation transaction id and the hash of nonce called combined. Different from Ethereum, the definition of nonce is the contract sequence number of the creation of the root call. Even there are many CREATE commands calls, contract number in sequence from 1. Refer to the source code for more detail. Note: Different from creating a contract by grpc's deploycontract, contract created by CREATE command does not store contract abi. built-in function and built-in function attribute (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 1)TVM is compatible with solidity language's transfer format, including: - accompany with constructor to call transfer - accompany with internal function to call transfer - use transfer/send/call/callcode/delegatecall to call transfer Note: TRON's smart contract is different from TRON's system contract, if the transfer to address does not exist it can not create an account by smart contract transfer. 2)Different accounts vote for SuperNode (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 3)SuperNode gets all the reward (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 4)SuperNode approves or disapproves the proposal (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 5)SuperNode proposes a proposal (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 6)SuperNode deletes a proposal (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 7)TRON byte address converts to solidity address (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 8)TRON string address converts to solidity address (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 9)Send token to target address (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 10)Query token amount of target address (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 11)Compatible with all the built-in functions of Ethereum Note: Ethereum's RIPEMD160 function is not recommended, because the return of TRON is a hash result based on TRON's sha256, not an accurate Ethereum RIPEMD160.","title":"2. The Usage of the Function of Smart Contract"},{"location":"contracts/contract/#3-contract-address-using-in-solidity-language","text":"Ethereum VM address is 20 bytes, but TRON's VM address is 21 bytes. address conversion Need to convert TRON's address while using in solidity (recommended): /** * @dev convert uint256 (HexString add 0x at beginning) TRON address to solidity address type * @param tronAddress uint256 tronAddress, begin with 0x, followed by HexString * @return Solidity address type */ function convertFromTronInt(uint256 tronAddress) public view returns(address){ return address(tronAddress); } This is similar with the grammar of the conversion from other types converted to address type in Ethereum. address judgement Solidity has address constant judgement, if using 21 bytes address the compiler will throw out an error, so you should use 20 bytes address, like: function compareAddress(address tronAddress) public view returns (uint256){ // if (tronAddress == 0x41ca35b7d915458ef540ade6068dfe2f44e8fa733c) { // compile error if (tronAddress == 0xca35b7d915458ef540ade6068dfe2f44e8fa733c) { // right return 1; } else { return 0; } } But if you are using wallet-cli, you can use 21 bytes address, like 0000000000000000000041ca35b7d915458ef540ade6068dfe2f44e8fa733c variable assignment Solidity has address constant assignment, if using 21 bytes address the compiler will throw out an error, so you should use 20 bytes address, like: function assignAddress() public view { // address newAddress = 0x41ca35b7d915458ef540ade6068dfe2f44e8fa733c; // compile error address newAddress = 0xca35b7d915458ef540ade6068dfe2f44e8fa733c; // do something } If you want to use TRON address of string type (TLLM21wteSPs4hKjbxgmH1L6poyMjeTbHm) please refer to (2-4-7,2-4-8).","title":"3. Contract Address Using in Solidity Language"},{"location":"contracts/contract/#4-the-special-constants-differ-from-ethereum","text":"Currency Like solidity supports ETH, TRON VM supports trx and sun, 1 trx = 1000000 sun, case sensitive, only support lower case. tron-studio supports trx and sun, remix does not support trx and sun. We recommend to use tron-studio instead of remix to build TRON smart contract. Block block.blockhash (uint blockNumber) returns (bytes32): specified block hash, can only apply to the latest 256 blocks and current block excluded block.coinbase (address): SuperNode address that produced the current block block.difficulty (uint): current block difficulty, not recommended, set 0 block.gaslimit (uint): current block gas limit, not supported, set 0 block.number (uint): current block number block.timestamp (uint): current block timestamp gasleft() returns (uint256): remaining gas msg.data (bytes): complete call data msg.gas (uint): remaining gas - since 0.4.21, not recommended, replaced by gesleft() msg.sender (address): message sender (current call) msg.sig (bytes4): first 4 bytes of call data (function identifier) msg.value (uint): the amount of SUN send with message now (uint): current block timestamp (block.timestamp) tx.gasprice (uint): the gas price of transaction, not recommended, set 0 tx.origin (address): transaction initiator Each command of smart contract consume system resource while running, we use 'Energy' as the unit of the consumption of the resource.","title":"4. The Special Constants Differ from Ethereum"},{"location":"contracts/trc20/","text":"TRC-20 \u00b6 TRC\u200c-20 is a technical standard used for smart contracts on the TRON blockchain for implementing tokens with the TRON Virtual Machine (TVM). It is fully compatible to ERC\u200c-20. Implementation Rules \u00b6 3 Optional Items Token Name string public constant name = \u201cTRONEuropeRewardCoin\u201d; Token Abbreviation string public constant symbol = \u201cTERC\u201d; Token Precision uint8 public constant decimals = 6; 6 Required Items contract TRC20 { function totalSupply() constant returns (uint theTotalSupply); function balanceOf(address _owner) constant returns (uint balance); function transfer(address _to, uint _value) returns (bool success); function transferFrom(address _from, address _to, uint _value) returns (bool success); function approve(address _spender, uint _value) returns (bool success); function allowance(address _owner, address _spender) constant returns (uint remaining); event Transfer(address indexed _from, address indexed _to, uint _value); event Approval(address indexed _owner, address indexed _spender, uint _value); } totalSupply() This function returns the total supply of the token. balanceOf() This function returns the token balance of the specific account. transfer() This function is used to transfer an amount of tokens from the smart contract to a specific address. approve() This function is used to authorize the third party (like a DAPP smart contract) to transfer token from the token owner\u2019s account. transferFrom() This function is used to allow the third party to transfer token from an owner account to a receiver account. The owner account must be approved to be called by the third party. allowance() This function is used to query the remaining amount of tokens the third party can transfer. 2 Event Functions When token is successfully transferred, it has to trigger Transfer Event. event Transfer(address indexed _from, address indexed _to, uint256 _value) When approval() is successfully called, it has to trigger Approval Event. event Approval(address indexed _owner, address indexed _spender, uint256 _value) Example \u00b6 pragma solidity ^0.4.16; interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; } contract TokenTRC20 { // Public variables of the token string public name; string public symbol; uint8 public decimals = 18; // 18 decimals is the strongly suggested default, avoid changing it uint256 public totalSupply; // This creates an array with all balances mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; // This generates a public event on the blockchain that will notify clients event Transfer(address indexed from, address indexed to, uint256 value); // This notifies clients about the amount burnt event Burn(address indexed from, uint256 value); /** * Constructor function * * Initializes contract with initial supply tokens to the creator of the contract */ function TokenTRC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); // Update total supply with the decimal amount balanceOf[msg.sender] = totalSupply; // Give the creator all initial tokens name = tokenName; // Set the name for display purposes symbol = tokenSymbol; // Set the symbol for display purposes } /** * Internal transfer, only can be called by this contract */ function _transfer(address _from, address _to, uint _value) internal { // Prevent transfer to 0x0 address. Use burn() instead require(_to != 0x0); // Check if the sender has enough require(balanceOf[_from] >= _value); // Check for overflows require(balanceOf[_to] + _value >= balanceOf[_to]); // Save this for an assertion in the future uint previousBalances = balanceOf[_from] + balanceOf[_to]; // Subtract from the sender balanceOf[_from] -= _value; // Add the same to the recipient balanceOf[_to] += _value; emit Transfer(_from, _to, _value); // Asserts are used to use static analysis to find bugs in your code. They should never fail assert(balanceOf[_from] + balanceOf[_to] == previousBalances); } /** * Transfer tokens * * Send `_value` tokens to `_to` from your account * * @param _to The address of the recipient * @param _value the amount to send */ function transfer(address _to, uint256 _value) public { _transfer(msg.sender, _to, _value); } /** * Transfer tokens from other address * * Send `_value` tokens to `_to` on behalf of `_from` * * @param _from The address of the sender * @param _to The address of the recipient * @param _value the amount to send */ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) { require(_value <= allowance[_from][msg.sender]); // Check allowance allowance[_from][msg.sender] -= _value; _transfer(_from, _to, _value); return true; } /** * Set allowance for other address * * Allows `_spender` to spend no more than `_value` tokens on your behalf * * @param _spender The address authorized to spend * @param _value the max amount they can spend */ function approve(address _spender, uint256 _value) public returns (bool success) { allowance[msg.sender][_spender] = _value; return true; } /** * Set allowance for other address and notify * * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it * * @param _spender The address authorized to spend * @param _value the max amount they can spend * @param _extraData some extra information to send to the approved contract */ function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) { tokenRecipient spender = tokenRecipient(_spender); if (approve(_spender, _value)) { spender.receiveApproval(msg.sender, _value, this, _extraData); return true; } } /** * Destroy tokens * * Remove `_value` tokens from the system irreversibly * * @param _value the amount of money to burn */ function burn(uint256 _value) public returns (bool success) { require(balanceOf[msg.sender] >= _value); // Check if the sender has enough balanceOf[msg.sender] -= _value; // Subtract from the sender totalSupply -= _value; // Updates totalSupply emit Burn(msg.sender, _value); return true; } /** * Destroy tokens from other account * * Remove `_value` tokens from the system irreversibly on behalf of `_from`. * * @param _from the address of the sender * @param _value the amount of money to burn */ function burnFrom(address _from, uint256 _value) public returns (bool success) { require(balanceOf[_from] >= _value); // Check if the targeted balance is enough require(_value <= allowance[_from][msg.sender]); // Check allowance balanceOf[_from] -= _value; // Subtract from the targeted balance allowance[_from][msg.sender] -= _value; // Subtract from the sender's allowance totalSupply -= _value; // Update totalSupply emit Burn(_from, _value); return true; } }","title":"TRC-20"},{"location":"contracts/trc20/#trc-20","text":"TRC\u200c-20 is a technical standard used for smart contracts on the TRON blockchain for implementing tokens with the TRON Virtual Machine (TVM). It is fully compatible to ERC\u200c-20.","title":"TRC-20"},{"location":"contracts/trc20/#implementation-rules","text":"3 Optional Items Token Name string public constant name = \u201cTRONEuropeRewardCoin\u201d; Token Abbreviation string public constant symbol = \u201cTERC\u201d; Token Precision uint8 public constant decimals = 6; 6 Required Items contract TRC20 { function totalSupply() constant returns (uint theTotalSupply); function balanceOf(address _owner) constant returns (uint balance); function transfer(address _to, uint _value) returns (bool success); function transferFrom(address _from, address _to, uint _value) returns (bool success); function approve(address _spender, uint _value) returns (bool success); function allowance(address _owner, address _spender) constant returns (uint remaining); event Transfer(address indexed _from, address indexed _to, uint _value); event Approval(address indexed _owner, address indexed _spender, uint _value); } totalSupply() This function returns the total supply of the token. balanceOf() This function returns the token balance of the specific account. transfer() This function is used to transfer an amount of tokens from the smart contract to a specific address. approve() This function is used to authorize the third party (like a DAPP smart contract) to transfer token from the token owner\u2019s account. transferFrom() This function is used to allow the third party to transfer token from an owner account to a receiver account. The owner account must be approved to be called by the third party. allowance() This function is used to query the remaining amount of tokens the third party can transfer. 2 Event Functions When token is successfully transferred, it has to trigger Transfer Event. event Transfer(address indexed _from, address indexed _to, uint256 _value) When approval() is successfully called, it has to trigger Approval Event. event Approval(address indexed _owner, address indexed _spender, uint256 _value)","title":"Implementation Rules"},{"location":"contracts/trc20/#example","text":"pragma solidity ^0.4.16; interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; } contract TokenTRC20 { // Public variables of the token string public name; string public symbol; uint8 public decimals = 18; // 18 decimals is the strongly suggested default, avoid changing it uint256 public totalSupply; // This creates an array with all balances mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; // This generates a public event on the blockchain that will notify clients event Transfer(address indexed from, address indexed to, uint256 value); // This notifies clients about the amount burnt event Burn(address indexed from, uint256 value); /** * Constructor function * * Initializes contract with initial supply tokens to the creator of the contract */ function TokenTRC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); // Update total supply with the decimal amount balanceOf[msg.sender] = totalSupply; // Give the creator all initial tokens name = tokenName; // Set the name for display purposes symbol = tokenSymbol; // Set the symbol for display purposes } /** * Internal transfer, only can be called by this contract */ function _transfer(address _from, address _to, uint _value) internal { // Prevent transfer to 0x0 address. Use burn() instead require(_to != 0x0); // Check if the sender has enough require(balanceOf[_from] >= _value); // Check for overflows require(balanceOf[_to] + _value >= balanceOf[_to]); // Save this for an assertion in the future uint previousBalances = balanceOf[_from] + balanceOf[_to]; // Subtract from the sender balanceOf[_from] -= _value; // Add the same to the recipient balanceOf[_to] += _value; emit Transfer(_from, _to, _value); // Asserts are used to use static analysis to find bugs in your code. They should never fail assert(balanceOf[_from] + balanceOf[_to] == previousBalances); } /** * Transfer tokens * * Send `_value` tokens to `_to` from your account * * @param _to The address of the recipient * @param _value the amount to send */ function transfer(address _to, uint256 _value) public { _transfer(msg.sender, _to, _value); } /** * Transfer tokens from other address * * Send `_value` tokens to `_to` on behalf of `_from` * * @param _from The address of the sender * @param _to The address of the recipient * @param _value the amount to send */ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) { require(_value <= allowance[_from][msg.sender]); // Check allowance allowance[_from][msg.sender] -= _value; _transfer(_from, _to, _value); return true; } /** * Set allowance for other address * * Allows `_spender` to spend no more than `_value` tokens on your behalf * * @param _spender The address authorized to spend * @param _value the max amount they can spend */ function approve(address _spender, uint256 _value) public returns (bool success) { allowance[msg.sender][_spender] = _value; return true; } /** * Set allowance for other address and notify * * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it * * @param _spender The address authorized to spend * @param _value the max amount they can spend * @param _extraData some extra information to send to the approved contract */ function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) { tokenRecipient spender = tokenRecipient(_spender); if (approve(_spender, _value)) { spender.receiveApproval(msg.sender, _value, this, _extraData); return true; } } /** * Destroy tokens * * Remove `_value` tokens from the system irreversibly * * @param _value the amount of money to burn */ function burn(uint256 _value) public returns (bool success) { require(balanceOf[msg.sender] >= _value); // Check if the sender has enough balanceOf[msg.sender] -= _value; // Subtract from the sender totalSupply -= _value; // Updates totalSupply emit Burn(msg.sender, _value); return true; } /** * Destroy tokens from other account * * Remove `_value` tokens from the system irreversibly on behalf of `_from`. * * @param _from the address of the sender * @param _value the amount of money to burn */ function burnFrom(address _from, uint256 _value) public returns (bool success) { require(balanceOf[_from] >= _value); // Check if the targeted balance is enough require(_value <= allowance[_from][msg.sender]); // Check allowance balanceOf[_from] -= _value; // Subtract from the targeted balance allowance[_from][msg.sender] -= _value; // Subtract from the sender's allowance totalSupply -= _value; // Update totalSupply emit Burn(_from, _value); return true; } }","title":"Example"},{"location":"contracts/tvm/","text":"TRON Virtual Machine (TVM) \u00b6 TRON Virtual Machine (TVM) is a lightweight, Turing complete virtual machine developed for the TRON's ecosystem. Its goal is to provide millions of global developers with a custom-built blockchain system that is efficient, convenient, stable, secure and scalable. TVM can connect seamlessly with existing development ecosystem and supports DPoS. TVM is able to be compatible with EVM environment in the beginning, so that instead of learning a new programming language, developers can develop, debug and compile smart contracts in a Remix environment with Solidity and other languages. Once you\u2019ve built and uploaded your smart contract to TRON\u2019s mainnet, it will be executed on the TVM of the SR node to be isolated from external connections. Furthermore, TVM employs the concept of Bandwidth. Different from the gas mechanism on Ethereum\u2019s EVM, operations of transaction or smart contracts on TVM are free, with no tokens consumed. Technically, executable computation capacity on TVM is not restricted by total holding of tokens. Features of TVM \u00b6 1. Lightweight TVM adopts a lightweight architecture with the aim of reducing resource consumption to guarantee system performance. 2. Stability and security With a meticulous design paradigm and fine-grained underlying operation code, TVM can guarantee the preciseness of every step of a computation, diminishing ambiguity to the largest extent. Out of security reasons, transfers and smart contract running cost only bandwidth points, not TRX, which exempts TRON from being attacked similarly to Ethereum for its mode of gas consumption. Stability of bandwidth consumption is achieved while the cost of each computational step is fixed. 3. Compatibility Currently, TVM is compatible with EVM and will be with more mainstream VMs in the future. Thereby, all smart contracts on EVM are executable on TVM. By connecting seamlessly to existing development ecosystem, higher efficiency can be achieved by developers. Needless to learn a new programming language, they can use mainstream programming languages for smart contract such as Solidity to develop, debug and compile smart contracts in the Remix environment, which greatly reduces development costs. 4. Developer-friendly Thanks to TVM\u2019s bandwidth setup, developments costs are reduced and developers can focus on the logic of their contract code. TVM also offers all-in-one interfaces for contract deployment, triggering and viewing, for the convenience of developers. The following interfaces are available in TRON Wallet-CLI: deploycontract(password, contractAddress, ABI, code, data, value) triggercontract(password, contractAddress, selector, data, value) getcontract(contractAddress) Developers can call these interfaces to deploy, trigger or check smart contracts. How TVM Works \u00b6 The above flowchart shows how TVM works: Compilation of TRON smart contract\u2192execution and computing engines of VM\u2192Interoperation service layer for external interfaces. Put simply, the flow is as follows: + Currently, TVM is compatible mainly with Solidity. The compiler translates Solidity smart contract into bytecode readable and executable on TVM. + A virtual machine processes data through opcode, which is equivalent to operating a logic of a stack-based finite state machine. + TVM accesses blockchain data and invoke External Data Interface through the Interoperation layer. Future Development of TVM \u00b6 1. More developer-friendly debugging tools TRON will be committed to the development of optimized debugging tools and the establishment of standardized symbol and data format, for improved developer efficiency. 2. Fulfillment of diversified processing demands Different from gas consumption mechanism for every transaction on EVM, there is no charge on TVM. Each operation only occupies bandwidth, which will be released within a certain amount of time after completion of transaction. It takes developers very little to develop smart contracts with more complex logic. It is our belief that besides being used for digital asset transactions, smart contracts could also be suitably applied to areas such as game development, financial risk modeling and scientific computing. The design of TVM inherently supports multi-scenario tasks, and further optimizations of processing speed, response time, and floating point compatibility. 3. Improvement of Just-In-Time (JIT) compilation speed and integration of WebAssembly Improving JIT compilation speed is conducive to faster interpretation and optimized compilation of local code. Meanwhile, TRON is planning to further optimize its TVM based on WebAssembly (WASM). WebAssembly, spearheaded by Apple, Google, Microsoft and Mozilla, is designed to break bottlenecks of current Web browsers and can be generated through compiling C/C++ and other programming languages. Integrating WASM, TVM will be able to provide high performance and high throughput for blockchain to cope with complex scenarios. Usage Guide to TVM \u00b6 1. Compile contract Contract compilation address: https://remix.ethereum.org 2. Get ABI and bytecode pragma solidity^0.4.11; contract Tron { uint256 tron; constructor() public { } function set(uint256 number) public returns(bool){ tron = number; return true; } } ABI: [{\u201cconstant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}] ByteCode: 608060405234801561001057600080fd5b5060c48061001f6000396000f300608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806360fe47b1146044575b600080fd5b348015604f57600080fd5b50606c600480360381019080803590602001909291905050506086565b604051808215151515815260200191505060405180910390f35b600081600081905550600190509190505600a165627a7a723058209791df3f67e9af451c35d7ae55bda5e352764f6a38ea23fa850b1c1fe1bc72e90029 3. Deploy contract Wallet-cli-vm branch: https://github.com/tronprotocol/wallet-cli/tree/wallet-cli-vm java-tron-vm branch: https://github.com/tronprotocol/java-tron/tree/develop_vm Password: password of client-end wallet ContractAddress: customized contract address (in TRON\u2019s required format) ABI: interface description Data: parameters of the initial function Value: reserved field deploycontract(Password, ContractAddress, ABI, Code, Data, Value) 4. Invoke contract Selector: function selector Data: parameters triggercontract(Password, ContractAddress, Selector, Data, Value) 5. Check contract getcontract(ContractAddress) The above is an introduction of TRON Virtual Machine and a guide to deployment. We welcome everyone to check out TVM and give us your thoughts and suggestions. We will continue to perfect and update TVM for optimal performance on TRON mainnet.","title":"TRON Virtual Machine (TVM)"},{"location":"contracts/tvm/#tron-virtual-machine-tvm","text":"TRON Virtual Machine (TVM) is a lightweight, Turing complete virtual machine developed for the TRON's ecosystem. Its goal is to provide millions of global developers with a custom-built blockchain system that is efficient, convenient, stable, secure and scalable. TVM can connect seamlessly with existing development ecosystem and supports DPoS. TVM is able to be compatible with EVM environment in the beginning, so that instead of learning a new programming language, developers can develop, debug and compile smart contracts in a Remix environment with Solidity and other languages. Once you\u2019ve built and uploaded your smart contract to TRON\u2019s mainnet, it will be executed on the TVM of the SR node to be isolated from external connections. Furthermore, TVM employs the concept of Bandwidth. Different from the gas mechanism on Ethereum\u2019s EVM, operations of transaction or smart contracts on TVM are free, with no tokens consumed. Technically, executable computation capacity on TVM is not restricted by total holding of tokens.","title":"TRON Virtual Machine (TVM)"},{"location":"contracts/tvm/#features-of-tvm","text":"1. Lightweight TVM adopts a lightweight architecture with the aim of reducing resource consumption to guarantee system performance. 2. Stability and security With a meticulous design paradigm and fine-grained underlying operation code, TVM can guarantee the preciseness of every step of a computation, diminishing ambiguity to the largest extent. Out of security reasons, transfers and smart contract running cost only bandwidth points, not TRX, which exempts TRON from being attacked similarly to Ethereum for its mode of gas consumption. Stability of bandwidth consumption is achieved while the cost of each computational step is fixed. 3. Compatibility Currently, TVM is compatible with EVM and will be with more mainstream VMs in the future. Thereby, all smart contracts on EVM are executable on TVM. By connecting seamlessly to existing development ecosystem, higher efficiency can be achieved by developers. Needless to learn a new programming language, they can use mainstream programming languages for smart contract such as Solidity to develop, debug and compile smart contracts in the Remix environment, which greatly reduces development costs. 4. Developer-friendly Thanks to TVM\u2019s bandwidth setup, developments costs are reduced and developers can focus on the logic of their contract code. TVM also offers all-in-one interfaces for contract deployment, triggering and viewing, for the convenience of developers. The following interfaces are available in TRON Wallet-CLI: deploycontract(password, contractAddress, ABI, code, data, value) triggercontract(password, contractAddress, selector, data, value) getcontract(contractAddress) Developers can call these interfaces to deploy, trigger or check smart contracts.","title":"Features of TVM"},{"location":"contracts/tvm/#how-tvm-works","text":"The above flowchart shows how TVM works: Compilation of TRON smart contract\u2192execution and computing engines of VM\u2192Interoperation service layer for external interfaces. Put simply, the flow is as follows: + Currently, TVM is compatible mainly with Solidity. The compiler translates Solidity smart contract into bytecode readable and executable on TVM. + A virtual machine processes data through opcode, which is equivalent to operating a logic of a stack-based finite state machine. + TVM accesses blockchain data and invoke External Data Interface through the Interoperation layer.","title":"How TVM Works"},{"location":"contracts/tvm/#future-development-of-tvm","text":"1. More developer-friendly debugging tools TRON will be committed to the development of optimized debugging tools and the establishment of standardized symbol and data format, for improved developer efficiency. 2. Fulfillment of diversified processing demands Different from gas consumption mechanism for every transaction on EVM, there is no charge on TVM. Each operation only occupies bandwidth, which will be released within a certain amount of time after completion of transaction. It takes developers very little to develop smart contracts with more complex logic. It is our belief that besides being used for digital asset transactions, smart contracts could also be suitably applied to areas such as game development, financial risk modeling and scientific computing. The design of TVM inherently supports multi-scenario tasks, and further optimizations of processing speed, response time, and floating point compatibility. 3. Improvement of Just-In-Time (JIT) compilation speed and integration of WebAssembly Improving JIT compilation speed is conducive to faster interpretation and optimized compilation of local code. Meanwhile, TRON is planning to further optimize its TVM based on WebAssembly (WASM). WebAssembly, spearheaded by Apple, Google, Microsoft and Mozilla, is designed to break bottlenecks of current Web browsers and can be generated through compiling C/C++ and other programming languages. Integrating WASM, TVM will be able to provide high performance and high throughput for blockchain to cope with complex scenarios.","title":"Future Development of TVM"},{"location":"contracts/tvm/#usage-guide-to-tvm","text":"1. Compile contract Contract compilation address: https://remix.ethereum.org 2. Get ABI and bytecode pragma solidity^0.4.11; contract Tron { uint256 tron; constructor() public { } function set(uint256 number) public returns(bool){ tron = number; return true; } } ABI: [{\u201cconstant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}] ByteCode: 608060405234801561001057600080fd5b5060c48061001f6000396000f300608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806360fe47b1146044575b600080fd5b348015604f57600080fd5b50606c600480360381019080803590602001909291905050506086565b604051808215151515815260200191505060405180910390f35b600081600081905550600190509190505600a165627a7a723058209791df3f67e9af451c35d7ae55bda5e352764f6a38ea23fa850b1c1fe1bc72e90029 3. Deploy contract Wallet-cli-vm branch: https://github.com/tronprotocol/wallet-cli/tree/wallet-cli-vm java-tron-vm branch: https://github.com/tronprotocol/java-tron/tree/develop_vm Password: password of client-end wallet ContractAddress: customized contract address (in TRON\u2019s required format) ABI: interface description Data: parameters of the initial function Value: reserved field deploycontract(Password, ContractAddress, ABI, Code, Data, Value) 4. Invoke contract Selector: function selector Data: parameters triggercontract(Password, ContractAddress, Selector, Data, Value) 5. Check contract getcontract(ContractAddress) The above is an introduction of TRON Virtual Machine and a guide to deployment. We welcome everyone to check out TVM and give us your thoughts and suggestions. We will continue to perfect and update TVM for optimal performance on TRON mainnet.","title":"Usage Guide to TVM"},{"location":"developers/advanced-configuration/","text":"Advanced Configurations \u00b6 we provide some configuration items for LevelDB and gRPC in config.conf file, for fine-grained performance tuning. You may custom these items only if you have deep understanding on them, otherwise keep them as default. LevelDB \u00b6 You can custom LevelDB options in the storage part of config.conf , which looks like: storage { # Directory for storing persistent data db.directory = \"database\", index.directory = \"index\", # You can custom these 14 databases' configs: # account, account-index, asset-issue, block, block-index, # block_KDB, peers, properties, recent-block, trans, # utxo, votes, witness, witness_schedule. # Otherwise, db configs will remain default and data will be stored in # the path of \"output-directory\" or which is set by \"-d\" (\"--output-directory\"). # Attention: name is a required field that must be set !!! properties = [ { name = \"account\", path = \"/path/to/account\", // relative or absolute path createIfMissing = true, paranoidChecks = true, verifyChecksums = true, compressionType = 1, // 0 - no compression, 1 - compressed with snappy blockSize = 4096, // 4 KB = 4 * 1024 B writeBufferSize = 10485760, // 10 MB = 10 * 1024 * 1024 B cacheSize = 10485760, // 10 MB = 10 * 1024 * 1024 B maxOpenFiles = 100 } ] } As shown in the example above, the data of database account will be stored in the path of /path/to/account/database while the index be stored in /path/to/account/index . And, the example also shows our default value of LevelDB options from createIfMissing to maxOpenFiles . You can just refer to the docs of LevelDB to figure out details of these options. gRPC \u00b6 You can custom gPRC options in the node.rpc part of config.conf , which looks like: node { rpc { port = 50051 # Number of gRPC thread, default availableProcessors / 2 # thread = 16 # The maximum number of concurrent calls permitted for each incoming connection # maxConcurrentCallsPerConnection = # The HTTP/2 flow control window, default 1MB # flowControlWindow = # Connection being idle for longer than which will be gracefully terminated maxConnectionIdleInMillis = 60000 # Connection lasting longer than which will be gracefully terminated # maxConnectionAgeInMillis = # The maximum message size allowed to be received on the server, default 4MB # maxMessageSize = # The maximum size of header list allowed to be received, default 8192 # maxHeaderListSize = } } backup \u00b6 You can custom backup options in the node.backup part of config.conf , which looks like: node.backup { # my priority, each member should use different priority priority = # members should use same port port = # peer's ip list, can't contain mine members = [] } policy: 1. the one which synchronized first will become master. 2. if synchronization is completed at the same time, the one with big priority will become master. E.g. create backups for node A(192.168.0.100) and node B(192.168.0.100 ): node A's configuration: node.backup { priority = 8 port = 10001 members = [ \"192.168.0.101\" ] } node B's configuration: node.backup { priority = 5 port = 10001 members = [ \"192.168.0.100\" ] } You may refer to the source code of io.grpc.netty.NettyServerBuilder class to see details or just make a decision according to the brief comments above.","title":"Advanced Configurations"},{"location":"developers/advanced-configuration/#advanced-configurations","text":"we provide some configuration items for LevelDB and gRPC in config.conf file, for fine-grained performance tuning. You may custom these items only if you have deep understanding on them, otherwise keep them as default.","title":"Advanced Configurations"},{"location":"developers/advanced-configuration/#leveldb","text":"You can custom LevelDB options in the storage part of config.conf , which looks like: storage { # Directory for storing persistent data db.directory = \"database\", index.directory = \"index\", # You can custom these 14 databases' configs: # account, account-index, asset-issue, block, block-index, # block_KDB, peers, properties, recent-block, trans, # utxo, votes, witness, witness_schedule. # Otherwise, db configs will remain default and data will be stored in # the path of \"output-directory\" or which is set by \"-d\" (\"--output-directory\"). # Attention: name is a required field that must be set !!! properties = [ { name = \"account\", path = \"/path/to/account\", // relative or absolute path createIfMissing = true, paranoidChecks = true, verifyChecksums = true, compressionType = 1, // 0 - no compression, 1 - compressed with snappy blockSize = 4096, // 4 KB = 4 * 1024 B writeBufferSize = 10485760, // 10 MB = 10 * 1024 * 1024 B cacheSize = 10485760, // 10 MB = 10 * 1024 * 1024 B maxOpenFiles = 100 } ] } As shown in the example above, the data of database account will be stored in the path of /path/to/account/database while the index be stored in /path/to/account/index . And, the example also shows our default value of LevelDB options from createIfMissing to maxOpenFiles . You can just refer to the docs of LevelDB to figure out details of these options.","title":"LevelDB"},{"location":"developers/advanced-configuration/#grpc","text":"You can custom gPRC options in the node.rpc part of config.conf , which looks like: node { rpc { port = 50051 # Number of gRPC thread, default availableProcessors / 2 # thread = 16 # The maximum number of concurrent calls permitted for each incoming connection # maxConcurrentCallsPerConnection = # The HTTP/2 flow control window, default 1MB # flowControlWindow = # Connection being idle for longer than which will be gracefully terminated maxConnectionIdleInMillis = 60000 # Connection lasting longer than which will be gracefully terminated # maxConnectionAgeInMillis = # The maximum message size allowed to be received on the server, default 4MB # maxMessageSize = # The maximum size of header list allowed to be received, default 8192 # maxHeaderListSize = } }","title":"gRPC"},{"location":"developers/advanced-configuration/#backup","text":"You can custom backup options in the node.backup part of config.conf , which looks like: node.backup { # my priority, each member should use different priority priority = # members should use same port port = # peer's ip list, can't contain mine members = [] } policy: 1. the one which synchronized first will become master. 2. if synchronization is completed at the same time, the one with big priority will become master. E.g. create backups for node A(192.168.0.100) and node B(192.168.0.100 ): node A's configuration: node.backup { priority = 8 port = 10001 members = [ \"192.168.0.101\" ] } node B's configuration: node.backup { priority = 5 port = 10001 members = [ \"192.168.0.100\" ] } You may refer to the source code of io.grpc.netty.NettyServerBuilder class to see details or just make a decision according to the brief comments above.","title":"backup"},{"location":"developers/archive-manifest/","text":"Leveldb Startup Optimization Plugins \u00b6 Introduction \u00b6 With the operation of levelDB, manifest file will continue to grow, huge manifest file not only affects the node startup speed, but also may cause the problem of system exit with continuous memory growth. For this reason, leveldb startup optimization plugin is introduced since GreatVoyage-v4.3.0(Bacon) , which optimizes the file size of manifest and the startup process of LevelDB, reduces the memory occupation and improves the node startup speed. Remember stop the FullNode process before any operation. This tool provides the ability to reformat the manifest according to the current database . For more design details, please refer to: TIP298 . Usage \u00b6 Options For Plug-in \u00b6 -b | --batch-size : [ int ] specify the batch manifest size,default\uff1a80000. -d | --database-directory : [ string ] Specify the database directory to be processed,default\uff1aoutput-directory/database. -m | --manifest-size : [ int ] Specify the minimum required manifest file size \uff0cunit:M\uff0cdefault\uff1a0. -h | --help : [ bool ] for usage help\uff0cdefault\uff1afalse. How to get \u00b6 build by yourself. Under java-tron, execute . /gradlew build , you can get Toolkit.jar under build/libs/ . Download directly. Links Use Steps \u00b6 Stop the FullNode service. Execute the Toolkit command. Start the FullNode service. Note: Step ii is not required every time, but it is recommended to run it every time to optimize the experience. How to use \u00b6 After FullNode runs, the default database directory: output-directory , the optimization plugin will work with the output-directory/database directory. Developers can choose one of the following two ways according to actual situation. Use it Independently \u00b6 1.Stop the FullNode service \u00b6 Use kill -15 to shutdown the FullNode.jar . Query the pid: ps -ef |grep FullNode.jar |grep -v grep |awk '{print $2}' 2.Execute the Toolkit command \u00b6 # Full command java -jar Toolkit.jar [ -b batchSize ] [ -d databaseDirectory ] [ -m manifestSize ] [ -h ] # examples java -jar Toolkit.jar #1. use default settings java -jar Toolkit.jar -d /tmp/db/database #2. Specify the database directory as /tmp/db/database java -jar Toolkit.jar -b 64000 #3. Specify the batch size to 64000 when optimizing Manifest java -jar Toolkit.jar -m 128 #4. Specify optimization only when Manifest exceeds 128M After the command is executed, archive.log will be generated in the ./logs directory, you can see the result. Note: After the command is executed\uff0cIf successful, the log will display something similar to the following, and will run generally within 120s, depending on how long the FullNode service keeps running, and if it fails there will be a corresponding error message [main] [archive](ArchiveManifest.java:144) DatabaseDirectory:output-directory/database, maxManifestSize:0, maxBatchSize:80000,database reopen use 80 seconds total. 3.Start the FullNode service \u00b6 #FullNode nohup java -Xmx24g -XX:+UseConcMarkSweepGC -jar FullNode.jar -c main_net_config.conf </dev/null & >/dev/null & #SR Node nohup java -Xmx24g -XX:+UseConcMarkSweepGC -jar FullNode.jar -p private key --witness -c main_net_config.conf </dev/null & >/dev/null & Integrated startup script \u00b6 #!/bin/bash APP = $1 MANIFEST_OPT = $2 ALL_OPT = $* NEED_REBUILD = 0 if [[ $1 == '--rewrite--manifest' ]] ; then APP = '' NEED_REBUILD = 1 elif [[ $2 == '--rewrite--manifest' ]] ; then NEED_REBUILD = 1 fi rebuildManifest () { if [[ $NEED_REBUILD == 1 ]] ; then buildManifest fi } buildManifest () { ARCHIVE_JAR = 'Toolkit.jar' java -jar $ARCHIVE_JAR $ALL_OPT if [ $? == 0 ] ; then echo 'rebuild manifest success' else echo 'rebuild manifest fail, log in logs/archive.log' fi } APP = ${ APP :- \"FullNode\" } START_OPT = ` echo ${ @: 2 } ` JAR_NAME = \" $APP .jar\" MAX_STOP_TIME = 60 MEM_OPT = '' checkpid () { pid = ` ps -ef | grep $JAR_NAME | grep -v grep | awk '{print $2}' ` return $pid } checkPath (){ path = 'output-directory/database' flag = 1 for p in ${ ALL_OPT } do if [[ $flag == 0 ]] ; then path = ` echo $p ` break fi if [[ $p == '-d' || $p == '--database-directory' ]] ; then path = '' flag = 0 fi done if [[ -z \" ${ path } \" ]] ; then echo '-d /path or --database-directory /path' return 1 fi if [[ -d ${ path } ]] ; then return 0 else echo $path 'not exist' return 1 fi } stopService () { count = 1 while [ $count -le $MAX_STOP_TIME ] ; do checkpid if [ $pid ] ; then kill -15 $pid sleep 1 else echo \"java-tron stop\" return fi count = $ [ $count +1 ] if [ $count -eq $MAX_STOP_TIME ] ; then kill -9 $pid sleep 1 fi done } startService () { echo ` date ` >> start.log total = 16 *1024*1024 xmx = ` echo \" $total /1024/1024*0.6\" | bc | awk -F. '{print $1\"g\"}' ` directmem = ` echo \" $total /1024/1024*0.1\" | bc | awk -F. '{print $1\"g\"}' ` logtime = ` date +%Y-%m-%d_%H-%M-%S ` export LD_PRELOAD = \"/usr/lib64/libtcmalloc.so\" nohup java -Xms $xmx -Xmx $xmx -XX:+UseConcMarkSweepGC -XX:+PrintGCDetails -Xloggc:./gc.log \\ -XX:+PrintGCDateStamps -XX:+CMSParallelRemarkEnabled -XX:ReservedCodeCacheSize = 256m -XX:+UseCodeCacheFlushing \\ $MEM_OPT -XX:MaxDirectMemorySize = $directmem -XX:+HeapDumpOnOutOfMemoryError -jar $JAR_NAME $START_OPT -c config.conf >> start.log 2 > & 1 & pid = ` ps -ef | grep $JAR_NAME | grep -v grep | awk '{print $2}' ` echo \"start java-tron with pid $pid on $HOSTNAME \" } #1.Stop the FullNode service stopService checkPath #2.Execute the Toolkit plugin if [[ 0 == $? ]] ; then rebuildManifest else exit -1 fi sleep 5 # Start the FullNode service startService example Note: Save above script as start.sh, In the above script the --rewrite--manifest argument is fixed in the first or second argument. OPTIONS --rewrite--manifest enable leveldb startup optimization plugins\uff0cThe above plug-in option `-d -m -b -h` will take effect iff this option(--rewrite--manifest) is turned on # Full command ./start.sh [ FullNode | SolidityNode ] [ --rewrite--manifest ] [ -b batchSize ] [ -d databaseDirectory ] [ -m manifestSize ] # examples ./start.sh #1. Start the FullNode.jar service without the plugin ./start.sh SolidityNode #2. Start the SolidityNode.jar service without the plugin ./start.sh FullNode --rewrite--manifest #3. Execute the optimization plugin with default settings and start the FullNode.jar service ./start.sh --rewrite--manifest -d /tmp/db/database #4. Specify the database directory as /tmp/db/database, execute the optimization plugin, and start the FullNode.jar service ./start.sh --rewrite--manifest -b 64000 #5. Specify the batch size to 64000 when optimizing Manifest, and start the FullNode.jar service ./start.sh --rewrite--manifest -m 128 #6. Specify that optimization is performed only when the Manifest exceeds 128M, and start the FullNode.jar service","title":"Leveldb Startup Optimization Plugins"},{"location":"developers/archive-manifest/#leveldb-startup-optimization-plugins","text":"","title":"Leveldb Startup Optimization Plugins"},{"location":"developers/archive-manifest/#introduction","text":"With the operation of levelDB, manifest file will continue to grow, huge manifest file not only affects the node startup speed, but also may cause the problem of system exit with continuous memory growth. For this reason, leveldb startup optimization plugin is introduced since GreatVoyage-v4.3.0(Bacon) , which optimizes the file size of manifest and the startup process of LevelDB, reduces the memory occupation and improves the node startup speed. Remember stop the FullNode process before any operation. This tool provides the ability to reformat the manifest according to the current database . For more design details, please refer to: TIP298 .","title":"Introduction"},{"location":"developers/archive-manifest/#usage","text":"","title":"Usage"},{"location":"developers/archive-manifest/#options-for-plug-in","text":"-b | --batch-size : [ int ] specify the batch manifest size,default\uff1a80000. -d | --database-directory : [ string ] Specify the database directory to be processed,default\uff1aoutput-directory/database. -m | --manifest-size : [ int ] Specify the minimum required manifest file size \uff0cunit:M\uff0cdefault\uff1a0. -h | --help : [ bool ] for usage help\uff0cdefault\uff1afalse.","title":"Options For Plug-in"},{"location":"developers/archive-manifest/#how-to-get","text":"build by yourself. Under java-tron, execute . /gradlew build , you can get Toolkit.jar under build/libs/ . Download directly. Links","title":"How to get"},{"location":"developers/archive-manifest/#use-steps","text":"Stop the FullNode service. Execute the Toolkit command. Start the FullNode service. Note: Step ii is not required every time, but it is recommended to run it every time to optimize the experience.","title":"Use Steps"},{"location":"developers/archive-manifest/#how-to-use","text":"After FullNode runs, the default database directory: output-directory , the optimization plugin will work with the output-directory/database directory. Developers can choose one of the following two ways according to actual situation.","title":"How to use"},{"location":"developers/archive-manifest/#use-it-independently","text":"","title":"Use it Independently"},{"location":"developers/archive-manifest/#1stop-the-fullnode-service","text":"Use kill -15 to shutdown the FullNode.jar . Query the pid: ps -ef |grep FullNode.jar |grep -v grep |awk '{print $2}'","title":"1.Stop the FullNode service"},{"location":"developers/archive-manifest/#2execute-the-toolkit-command","text":"# Full command java -jar Toolkit.jar [ -b batchSize ] [ -d databaseDirectory ] [ -m manifestSize ] [ -h ] # examples java -jar Toolkit.jar #1. use default settings java -jar Toolkit.jar -d /tmp/db/database #2. Specify the database directory as /tmp/db/database java -jar Toolkit.jar -b 64000 #3. Specify the batch size to 64000 when optimizing Manifest java -jar Toolkit.jar -m 128 #4. Specify optimization only when Manifest exceeds 128M After the command is executed, archive.log will be generated in the ./logs directory, you can see the result. Note: After the command is executed\uff0cIf successful, the log will display something similar to the following, and will run generally within 120s, depending on how long the FullNode service keeps running, and if it fails there will be a corresponding error message [main] [archive](ArchiveManifest.java:144) DatabaseDirectory:output-directory/database, maxManifestSize:0, maxBatchSize:80000,database reopen use 80 seconds total.","title":"2.Execute the Toolkit command"},{"location":"developers/archive-manifest/#3start-the-fullnode-service","text":"#FullNode nohup java -Xmx24g -XX:+UseConcMarkSweepGC -jar FullNode.jar -c main_net_config.conf </dev/null & >/dev/null & #SR Node nohup java -Xmx24g -XX:+UseConcMarkSweepGC -jar FullNode.jar -p private key --witness -c main_net_config.conf </dev/null & >/dev/null &","title":"3.Start the FullNode service"},{"location":"developers/archive-manifest/#integrated-startup-script","text":"#!/bin/bash APP = $1 MANIFEST_OPT = $2 ALL_OPT = $* NEED_REBUILD = 0 if [[ $1 == '--rewrite--manifest' ]] ; then APP = '' NEED_REBUILD = 1 elif [[ $2 == '--rewrite--manifest' ]] ; then NEED_REBUILD = 1 fi rebuildManifest () { if [[ $NEED_REBUILD == 1 ]] ; then buildManifest fi } buildManifest () { ARCHIVE_JAR = 'Toolkit.jar' java -jar $ARCHIVE_JAR $ALL_OPT if [ $? == 0 ] ; then echo 'rebuild manifest success' else echo 'rebuild manifest fail, log in logs/archive.log' fi } APP = ${ APP :- \"FullNode\" } START_OPT = ` echo ${ @: 2 } ` JAR_NAME = \" $APP .jar\" MAX_STOP_TIME = 60 MEM_OPT = '' checkpid () { pid = ` ps -ef | grep $JAR_NAME | grep -v grep | awk '{print $2}' ` return $pid } checkPath (){ path = 'output-directory/database' flag = 1 for p in ${ ALL_OPT } do if [[ $flag == 0 ]] ; then path = ` echo $p ` break fi if [[ $p == '-d' || $p == '--database-directory' ]] ; then path = '' flag = 0 fi done if [[ -z \" ${ path } \" ]] ; then echo '-d /path or --database-directory /path' return 1 fi if [[ -d ${ path } ]] ; then return 0 else echo $path 'not exist' return 1 fi } stopService () { count = 1 while [ $count -le $MAX_STOP_TIME ] ; do checkpid if [ $pid ] ; then kill -15 $pid sleep 1 else echo \"java-tron stop\" return fi count = $ [ $count +1 ] if [ $count -eq $MAX_STOP_TIME ] ; then kill -9 $pid sleep 1 fi done } startService () { echo ` date ` >> start.log total = 16 *1024*1024 xmx = ` echo \" $total /1024/1024*0.6\" | bc | awk -F. '{print $1\"g\"}' ` directmem = ` echo \" $total /1024/1024*0.1\" | bc | awk -F. '{print $1\"g\"}' ` logtime = ` date +%Y-%m-%d_%H-%M-%S ` export LD_PRELOAD = \"/usr/lib64/libtcmalloc.so\" nohup java -Xms $xmx -Xmx $xmx -XX:+UseConcMarkSweepGC -XX:+PrintGCDetails -Xloggc:./gc.log \\ -XX:+PrintGCDateStamps -XX:+CMSParallelRemarkEnabled -XX:ReservedCodeCacheSize = 256m -XX:+UseCodeCacheFlushing \\ $MEM_OPT -XX:MaxDirectMemorySize = $directmem -XX:+HeapDumpOnOutOfMemoryError -jar $JAR_NAME $START_OPT -c config.conf >> start.log 2 > & 1 & pid = ` ps -ef | grep $JAR_NAME | grep -v grep | awk '{print $2}' ` echo \"start java-tron with pid $pid on $HOSTNAME \" } #1.Stop the FullNode service stopService checkPath #2.Execute the Toolkit plugin if [[ 0 == $? ]] ; then rebuildManifest else exit -1 fi sleep 5 # Start the FullNode service startService example Note: Save above script as start.sh, In the above script the --rewrite--manifest argument is fixed in the first or second argument. OPTIONS --rewrite--manifest enable leveldb startup optimization plugins\uff0cThe above plug-in option `-d -m -b -h` will take effect iff this option(--rewrite--manifest) is turned on # Full command ./start.sh [ FullNode | SolidityNode ] [ --rewrite--manifest ] [ -b batchSize ] [ -d databaseDirectory ] [ -m manifestSize ] # examples ./start.sh #1. Start the FullNode.jar service without the plugin ./start.sh SolidityNode #2. Start the SolidityNode.jar service without the plugin ./start.sh FullNode --rewrite--manifest #3. Execute the optimization plugin with default settings and start the FullNode.jar service ./start.sh --rewrite--manifest -d /tmp/db/database #4. Specify the database directory as /tmp/db/database, execute the optimization plugin, and start the FullNode.jar service ./start.sh --rewrite--manifest -b 64000 #5. Specify the batch size to 64000 when optimizing Manifest, and start the FullNode.jar service ./start.sh --rewrite--manifest -m 128 #6. Specify that optimization is performed only when the Manifest exceeds 128M, and start the FullNode.jar service","title":"Integrated startup script"},{"location":"developers/code-structure/","text":"java-tron Core Modules \u00b6 Code Structure \u00b6 java-tron is a TRON network client developed based on the Java language. It implements all the functions mentioned in the TRON white paper, including consensus mechanism, cryptography, database, TVM virtual machine, network management, etc. We can run a TRON node by starting java-tron. In this article, we will describe the code structure of java-tron in detail, and introduce the functions of its various modules, to facilitate the subsequent code analysis and development of developers. java-tron adopts a modular code structure; the code structure is clear and easy to maintain and expand. Currently java-tron is divided into 7 modules: protocol , common , chainbase , consensus , actuator , crypto , framework , the following introduces the functions of each module and its code organization. protocol \u00b6 For a distributed network such as blockchain, a concise and efficient data interaction protocol is very important. The protocol module defines: Inter-node communication protocol Communication protocol between modules within the node Agreement for Services Provided Externally The above protocols adopt the Google Protobuf data exchange format. Compared with JSON and XML, the Google Protobuf format is more efficient and flexible and can be compiled by the ProtoBuf compiler to generate language-specific serialization and deserialization source code for the defined protocol files. Protobuf is the basis for java-tron to achieve cross-language and cross-platform. protocol module's source code is located at: https://github.com/tronprotocol/java-tron/tree/develop/protocol , its directory structure is as follows: |-- protos |-- api | |-- api.proto | |-- zksnark.proto |-- core |-- Discover.proto |-- Tron.proto |-- TronInventoryItems.proto |-- contract protos/api/ - The gRPC interface and data structure provided by the java-tron node externally protos/core/ - Data structure for communication between nodes and between modules within nodes Discover.proto - Node discovers related data structures TronInventoryItems.proto - Data structure related to block transferring between nodes contract/ - Contract related data structures Tron.proto - Other important data structures, including accounts, blocks, transactions, resources, super representatives, voting, and proposals... common \u00b6 The common module encapsulates common components and tools, such as exception handling, metrics monitoring tools, etc which make it easy to use by other modules. common module's source code is located at: https://github.com/tronprotocol/java-tron/tree/develop/common , its directory structure is as follows: |-- /common/src/main/java/org/tron |-- common | |-- args | |-- config | |-- entity | |-- logsfilter | |-- overlay | |-- parameter | |-- prometheus | |-- runtime | |-- setting | |-- utils |-- core |-- config |-- db |-- db2 |-- exception common/prometheus - Prometheus metrics monitoring common/utils - The wrapper class of basic data type core/config - Node configuration related classes core/exception - All exception handling related classes chainbase \u00b6 Chainbase is a database module. For probabilistic consensus algorithms such as PoW, PoS and DPoS, situations of switching to a new chain, however unlikely, are inevitable. Because of this, chainbase defines an interface standard supporting databases that can roll back. This interface requires databases to have a state rollback mechanism, a checkpoint-based disaster tolerant mechanism and so on. In addition, the chainbase module features a well-designed abstract interface. Any database that implements the interface can be used for underlying storage on the blockchain, granting more flexibility to developers. LevelDB and RocksDB are two default implementations. chainbase module's source code is located at: https://github.com/tronprotocol/java-tron/tree/develop/chainbase , its directory structure is as follows: |-- chainbase.src.main.java.org.tron |-- common | |-- bloom | |-- error | |-- overlay | |-- runtime | |-- storage | | |-- leveldb | | |-- rocksdb | |-- utils | |-- zksnark |-- core |-- actuator |-- capsule |-- db | |-- RevokingDatabase.java | |-- TronStoreWithRevoking.java | |-- ...... |-- db2 | |-- common | |-- core | |-- SnapshotManager.java | |-- ...... |-- net |-- service |-- store common/ - Common components, such as exception handling, tools, etc storage/leveldb/ Implemented the use of LevelDB as the underlying storage database storage/rocksdb/ Implemented the use of RocksDB as the underlying storage database core/ - The core code of the chainbase module capsule/ The encapsulation class of each data structure, such as AccountCapsule, BlockCapsule, etc. AccountCapsule is the encapsulation class of Account data structure, which provides modification and query of account data; BlockCapsule is the encapsulation class of Block data structure, which provides modification and query of block data. store/ Various databases, such as AccountStore , ProposalStore , etc. AccountStore is the account database, the database name is account , which stores all account information in the TRON network; ProposalStore is the proposal database, and the database name is proposal , which stores all the proposal information in the TRON network. db/ and db2/ Implemented rollbackable databases, including two rollbackable databases: AbstractRevokingStore located in the db/ directory and SnapshotManager located in the db2/ directory. Compared with AbstractRevokingStore , SnapshotManager has a more stable data rollback function and supports the extension of the underlying database. Therefore, java-tron uses SnapshotManager to roll back the database. Several important interfaces and implementation classes are as follows: RevokingDatabase.java - It is the interface of the database container, used to manage all rollbackable databases, SnapshotManager is an implementation of this interface TronStoreWithRevoking.java - It is the base class that supports rollbackable databases. All rollbackable databases are their implementations, such as BlockStore , TransactionStore , etc consensus \u00b6 The consensus mechanism is a crucial module in blockchains. Common ones are PoW, PoS, DPoS and PBFT, etc. While Paxos, Raft, etc, are applied to consortium blockchains and other trusted networks. The consensus mechanism should match the business scenario. For instance, PoW is not suitable for real-time games that are sensitive to consensus efficiency, while PBFT can make an optimized choice for exchanges demanding high real-time capability. In this sense, a replaceable consensus is a creative innovation and an essential link in building application-specific blockchains. Even star blockchain programs like Cosmos SDK are still at a stage where the application layer provides developers with limited autonomy and the consensus at the base level is subject to Tendermint. Therefore, the ultimate goal of the consensus module is to make consensus switch as easy as configuring parameters for application developers. consensus module's source code is located at: https://github.com/tronprotocol/java-tron/tree/develop/consensus , its directory structure is as follows: |-- consensus/src/main/java/org/tron/consensus |-- Consensus.java |-- ConsensusDelegate.java |-- base | |-- ConsensusInterface.java | |-- ...... |-- dpos |-- pbft consensus module divides the consensus process into several important parts that are defined in ConsensusInterface : start - start the consensus service with customizable startup parameters stop - stop the consensus service receiveBlock - define the consensus logic of receiving blocks validBlock - define the consensus logic of validating blocks applyBlock - define the consensus logic of processing blocks Currently, java-tron implements DPOS consensus and PBFT consensus based on the ConsensusInterface interface, which is located in the dpos/ and pbft/ directories respectively. Developers can also implement the ConsensusInterface interface according to their own business needs to customize the consensus mechanism. actuator \u00b6 Ethereum was the first to introduce the virtual machine and define the smart contract. However, smart contracts are constrained in terms of their functions and not flexible enough to accommodate the needs of complex applications. This is one of the reasons why java-tron supports the creation of a chain of applications. For the reasons mentioned, java-tron includes a separate module, Actuator, offering application developers a brand new way of development. They can choose to implant their application codes into a chain instead of running them on virtual machines. Actuator is the executor of transactions, while applications can be viewed as a cluster of different types of transactions, each of which is executed by a corresponding actuator. actuator module's source code is located at: https://github.com/tronprotocol/java-tron/tree/develop/actuator , its directory structure is as follows: |-- actuator/src/main/java/org/tron/core |-- actuator | |-- AbstractActuator.java | |-- ActuatorCreator.java | |-- ActuatorFactory.java | |-- TransferActuator.java | |-- VMActuator.java | |-- ...... |-- utils |-- vm actuator/ - The executors of various types of transactions in the TRON network which define the processing logic of different types of transactions. For example, TransferActuator is the processing class for transferring TRX, and FreezeBalanceV2Actuator is the processing class for staking TRX to obtain resource utils/ - tools needed to execute transaction vm/ - TRON virtual machine related code Actuator module defines the Actuator interface, which includes 4 different methods: execute - execute specific actions of transactions, such as state modification, communication between modules, logic execution, etc. validate - validate authenticity of transactions getOwnerAddress - acquire the address of transaction initiators calcFee - define the logic of calculating transaction fees Depending on their businesses, developers may set up Actuator accordingly and customize the processing of different types of transactions. crypto \u00b6 Crypto is a relatively independent module, but it is also a very important module. Data security in java-tron is almost entirely guaranteed by this module. Currently, SM2 and ECKey encryption algorithms are supported. crypto module's source code is located at: https://github.com/tronprotocol/java-tron/tree/develop/crypto , its directory structure is as follows: |-- crypto/src/main/java/org/tron/common/crypto |-- Blake2bfMessageDigest.java |-- ECKey.java |-- Hash.java |-- SignInterface.java |-- SignUtils.java |-- SignatureInterface.java |-- cryptohash |-- jce |-- sm2 |-- zksnark sm2 and jce - Provide SM2 and ECKey encryption algorithm and signature algorithm zksnark - Provide a zero-knowledge proof algorithm framework \u00b6 The framework is the core module of java-tron and the entrance of the node. The framework module is responsible for the initialization of each module and business logic. The framework module includes the services provided externally, the node discovery and node management process related to the P2P network, and the block broadcasting and processing procedures. framework module's source code is located at: https://github.com/tronprotocol/java-tron/tree/develop/framework , its directory structure is as follows: |-- framework/src/main/java/org/tron |-- common | |-- application | |-- backup | |-- logsfilter | |-- net | |-- overlay | | |-- client | | |-- discover | | |-- message | | |-- server | |-- runtime | |-- zksnark |-- core | |-- Wallet.java | |-- capsule | |-- config | |-- consensus | |-- db | |-- metrics | |-- net | |-- services | |-- trie | |-- zen |-- keystore |-- program | |-- FullNode.java |-- tool program/FullNode.java - It is the entry point of the program and initializes external HTTP, gRPC and json-rpc interface services core/services - Defines the externally provided services, its subdirectory http/ contains all http interface processing classes, json-rpc/ contains all json-rpc interface processing classes common/overlay/discover - Node discovery logic common/overlay/server - Node management and block synchronization logic among nodes core/net - Message processing, its subdirectory /service is transaction and block broadcasting, block fetching and synchronization logic core/db/Manager.java - Transaction and block verification and processing logic Summary \u00b6 This article mainly introduces the code structure of java-tron, as well as the function, location and directory structure of each functional module. Through this article, you will have a general understanding of the overall structure and key interfaces of java-tron, which is helpful for subsequent code analysis and development. ChainBase \u00b6 Introduction \u00b6 As we all know, the blockchain is essentially a non-tamperable distributed ledger, which is very suitable for solving the problem of trust. In reality, blockchain is often used for bookkeeping and transactions. For example, many applications use BTC, ETH, TRX, and other cryptos to carry out economic activities to ensure the openness and transparency of funds. The realization of such an immutable distributed ledger is a very complex system engineering, involving many technical fields: such as p2p networks, smart contracts, databases, cryptography, consensus mechanisms, etc. Among them, the database is the basis of the underlying storage, and various blockchain teams are exploring the design and optimization of the database level. The database module of java-tron is also called the ChainBase module. This article mainly introduces some background knowledge and shows developers the implementation details of the ChainBase module by introducing logic such as transaction processing, state rollback, and data persistence. Prerequisites \u00b6 The database is an important part of the blockchain system. It stores all the data on the blockchain and is the basis for the normal operation of the blockchain system. Each fullnode stores a full amount of data, including block data, state data, etc. java-tron uses the Account model to save the user's account state. Account Models \u00b6 There are currently two mainstream account models, UTXO Account Model The UTXO model is stateless, makes it easier to process transactions concurrently, and has better privacy, but it is not programming-friendly. In the Account Model, user data is stored in the corresponding account, and smart contracts are also stored in the account in the form of code. This model is more intuitive and easier for developers to understand. For programmability, flexibility, and other considerations, java-tron adopts the Account Model. Consensus \u00b6 The current mainstream consensus is PoW, PoS, DPoS, etc. PoW is proof of work, all nodes participate in the calculation of an expected hash result, and the node that first calculates the result has the right to produce a block, but as the computing power continues to increase, the energy consumption required to calculate the hash is also increasing. Moreover, large mining farms monopolize most of the computing power, which also goes against the original intention of decentralization. To solve the problems faced by PoW, some people proposed PoS (Proof of Stake), which is simply understood as the more coins that the node holds, the greater the probability of obtaining the right to produce blocks, but this will lead to monopoly problems as well. In order to improve, DPoS (Delegated Proof of Stake) is proposed: the decentralization feature is guaranteed by the elected super representative, and the super representative is responsible for the block production in turn to improve the efficiency. java-tron currently adopts the DPoS consensus mechanism. To learn more, please refer to Delegated Proof of Stake . Persistent Storage \u00b6 There are certain differences between blockchain and traditional Internet business. The blockchain does not have particularly complex processing logic at the database level, but there are a large number of key-value read and write operations in the blockchain so there are higher requirements for data read and write performance. Based on this consideration, java-tron uses LevelDB as the underlying data storage by default, and java-tron has a good architecture design. The interface-oriented programming mode makes the chainbase module have better scalability. All databases implemented the chainbase interface can be used as the underlying storage engine of java-tron. For example, in the chainbase v2 version, a database implementation based on RocksDB is provided. Transaction Validation \u00b6 As we all know, the blockchain mainly stores transaction data. Before introducing the chainbase module, you need to understand the transaction processing logic in java-tron. The transaction will be distributed to each node through network broadcast. After receiving the transaction, the node will first validate the signature of the transaction. If successful, the transaction needs to be pre-executed to determine whether the transaction is legal. Note: The specific implementation of java-tron deviates from the above figure, and for the sake of convenience, this article collectively refers to the FullNode and SR as the nodes. For example, to process a transfer transaction: user A transfers 100 TRX to user B, and it needs to validate whether user A has enough balance to make the transfer. The account library in the database stores the account information of all users, including the user's balance information. How to judge whether this transfer transaction is legal? The logic of java-tron is: when a transaction is received from the network, the transaction operation will be executed immediately, that is, the account information will be modified in the local database: (accountA - 100TRX, accountB + 100TRX). If this operation can be executed successfully, it means that the transaction is legal at least in the current state, and can be packed into the block. Glossary \u00b6 SR\uff1a Super Representative, is responsible for block production. FullNode\uff1a stores all block data, is responsible for transactions, block broadcasting and validation, and provides query services. TRX\uff1a TRON native token. State Rollback \u00b6 Above we mentioned that java-tron validates whether the transaction is legal through pre-execution, but what we need to know is that the transaction is successfully validated on a certain node does not mean that the transaction has been successfully chained because the transaction has not been packed into the consensus blocks, there is a risk of being rolled back. The consensus of java-tron follows a principle: that is, the transactions in the blocks that are approved by more than 2/3 of the SRs are the ones that are really successful on the chain. can also be understood as below, transactions are packed into a block the block is approved by more than 2/3 of the SRs A transaction that satisfies the above two points is a successful transaction on the chain. A transaction in java-tron is finally confirmed through three stages, transaction validating transaction packing into the block block being accepted and applied This also leads to a problem: in the implementation of java-tron, if a node validates the transaction, its database state changes accordingly. If the transaction is not packed into the block yet or the block it is packed into has not been approved by more than 2/3 of SR, the state of this node will be inconsistent with the state of the entire network. Therefore, except for the processing transaction data in blocks approved by more than 2/3 SRs, all other data state changes resulting from transaction processing may need to be rolled back. There are three kinds of scenarios in total: after receiving a new block, roll back the state changes generated by transaction validation after producing a block, roll back the state changes generated by transaction validation if a forked takes place, roll back the state changes generated by the transactions of the blocks in the forked chain The data state changes caused by these three scenarios may need to be rolled back and the following section explains why. Rollback after Receiving a New Block \u00b6 When receiving a new block, the node needs to roll back to the state at the end of the previous block and roll back all transactions validated afterward. As shown below, If the account balance of accountA is 100 at the block height is 1000, the node receives and validates a transaction 't1', in which accountA transfers 100TRX to accountB. After receiving the new block1001, the block contains a transaction 't2', in which accountA transfers 50TRX to accountC. In theory, t2 has been packed into the block, and the priority is higher than t1. However, if no operation is done, the validation of t2 will fail because accountA does not have enough balance. Therefore, after receiving the new block 1001, the state change generated by transaction t1 needs to be rolled back. Rollback after Producing a New Block \u00b6 First of all, readers may have a question: the validated transaction can be directly packed into the block, and it will not change the database state. Why is there a change in the database state? Because java-tron does a secondary validation of the transaction when it is packed into the block. The secondary validation is due to the timeliness of the transaction. Still taking the above figure as an example, it can be seen from the figure, that after 1001 is received, the transaction t1 was rolled back, and the balance of accountA was deducted by 50. And then, it was the node's turn to produce a block, but t1 had become an illegal transaction at this time because the balance in accountA was not enough to transfer 100 TRX, it is not advisable to directly pack t1 into the block. So the transaction needs to be validated again, which is why the transaction needs to be validated twice when producing a block. After the block is packed successfully, the node will broadcast the block to the network and apply the block locally. And the logic of applying will re-check the transactions in the block. So after the block is packed, a rollback operation still needs to be performed. Rollback when Forking \u00b6 This is the last rollback situation, and the blockchain will inevitably fork, especially the blockchain system based on DPoS with a faster block production speed that is more prone to fork. java-tron maintains a data structure in memory as below, java-tron holds all blocks that have not reached consensus recently. When a forked chain occurs, according to the longest chain principle: if the block height of the forked chain is greater than the current main chain block height, the forked chain needs to be switched to the main chain. Part of the blocks on the previous main chain needs to roll back up to their common parent blocks when switching, and then apply new main chain blocks sequentially from the parent block. As shown in the figure, fork A in the dark part was originally the main chain. Because the height of fork B continues to grow and eventually exceeds the height of A, it is necessary to roll back the data in those three blocks with heights 1003, 1002, and 1001 in fork A. Then apply fork blocks 1001', 1002', 1003', and 1004' in B in sequence. State Rollback Implementation \u00b6 This chapter explains receiving and validating transactions, block production, validating and saving blocks from the perspective of code, to further analyze the chainbase module of java-tron. If there is no further declaration, the default description is dedicated to all the Fullnode (including SR). Receiving Transactions \u00b6 After the node receives a transaction, it puts the transaction into the local pushTransactionQueue cache queue by calling the pushTransaction(final TransactionCapsule trx) function of the manager class and validates the transaction at the same time. And the return of this method is sort of elegant: if validation is successful, \u2018true' is returned for the transaction sent by the user to the node through the API, if the transaction validation fails, an exception will be returned to the user; for transactions received from other nodes through the network, exceptions will only be recorded locally After the transaction validation is successful, the transactions without problems will be put into the pendingTransactionQueue, and the pendingTransactionQueue is responsible for providing the transaction set when producing blocks. If the node is an SR node, when producing a block, it will take out all or part of it from the pendingTransactionQueue (depending on how many transactions are in the pendingTransactionQueue) to generate a block. Rollback when Receiving Blocks \u00b6 A node would receive transactions broadcasted from other nodes before receiving a new block, the transactions need to be validated to determine whether they can be executed correctly. Validation means that the state needs to be changed, and a successful validation does not mean that the transaction will be finally executed, and it will be considered successful after packing into a block and the block become solidified. This step can be considered to filter out those obviously wrong transactions in advance. This is just validation. When a new block arrives, the state changed by transaction validations should be rolled back. Only the state changed when applying new blocks will not be rolled back. When rolling back, java-tron move the transactions in the pendingTransactionQueue to rePushTransactions, and clear the pendingTransactionQueue, see the figure for a detailed explanation. Why does the pendingTransactionQueue need to be emptied after a new block arrives? First of all, it is clear that the pendingTransactionQueue queue is responsible for providing transaction data when generating blocks, that is to say, it stores validated transactions that can be directly packed into blocks. Since the new block will also change the account state, those validated transactions in pendingTransactionQueue may not pass the validation after applying the new block (the simplest example: a transaction in the new block is that accountA spends a part of the token, resulting in a transaction amount of accountA in the queue that is not enough to pay ). After the transaction is moved to rePushTransactions, a background thread will be responsible for re-validating the transaction in the queue. If nothing is wrong, it will be put into the pendingTransactionQueue again to provide data for block production. There is a session object in java-tron. A session represents the change in the state of a block. The session object is mainly used for rollback. For example,rolling back the state to the state of the previous block needs to be operated throughout the session, as shown in the following figure, In the above figure, you can see that there are many different types of databases in persistent storage. These data are jointly organized into a complete blockchain. For example, blocks are stored in khasodb and blockStore, and account information is stored in accountStore... The node maintains a session chain table, which stores the change information corresponding to the block/transaction, and the node can roll back through the change information. In the above figure, session1 is the status change of the current highest block. When a transaction is received, a new session2 will be generated. Each transaction that comes later will generate a temporary tmpSession, and after the transaction is validated, the tmpSession corresponded will be merged to session2. Before a new block is received again, all status changes generated by transaction validation will be saved in session2. When a new block arrives, directly execute the reset method of the session2 to roll back the state to the previous block. Rollback when Producing Blocks \u00b6 SR needs to roll back before producing blocks. The reasons are more complicated. Let's consider a scenario first: The pendingTransactionQueue stores the currently validated transactions, so when an SR node produces a block, it only needs to directly pack the transactions in the pendingTransactionQueue into the block, and then roll back the state to the state of the previous block after packing. However, there is a problem with this scheme: if the SR node has just received and applied a new block, the pendingTransactionQueue will be cleared. At this time, it is the turn of the SR to pack the block, but there is no transaction in pendingTransactionQueue. Therefore, the real implementation is that not only reads transactions from pendingTransactionQueue when generating blocks but also reads transactions from rePushTransactions and puts them into blocks if there are few transactions in pendingTransactionQueue. The above analysis shows that transactions in rePushTransactions may not be possible to pass the validation, so the transactions need to be validated again. Due to this validation logic, the state needs to be rolled back before the block is produced. In the process of producing the block, the transaction will be validated again, so there will be a state change, but this is just block production, and the block needs to be broadcast as well, and those blocks who received the broadcast will actually change the state, so the state changes incurred by block production also need to be rolled back. As shown in the figure above, when the block production is completed, session2\" needs to be rolled back. Block Solidity \u00b6 java-tron adopts the DPoS consensus mechanism. The DPoS of java-tron is to vote for 27 nodes as block producers (also known as SR), SR has the right and obligation to produce blocks, and blocks approved by more than 2/3 of SR are considered to reach a consensus. These blocks, which are no longer rolled back are called solidified blocks. Only solidified blocks can be written to the database. SnapshotManager in java-tron is the key entry to the storage module, holds references to all current business databases, and stores database references in a list. Each database instance supports adding a new layer of state set on its own called SnapshotImpl. It is an in-memory hashmap, multiple SnapshotImpl are associated in the form of a linked list, and one SnapshotImpl retains the data modification (in-merging or merging) involved in one state change, and SnapshotImpl is independent of each other. They are separated through this data structure, as shown in the following figure, The SnapshotRoot in the above figure is the encapsulation class for the persistent database, which is responsible for storing the solidified data. In the previous chapters, we talked about sessions. A session represents the changes of state in a block. In fact, a session contains the SnapshotImpl corresponding to each database. For example, all SnapshotImpl in the layer of block 5 in the above figure together constitutes the changes of block 5 to the entire database. The changes generated after the node receives a new block will not be directly stored in the persistent storage (SnapshotRoot), but will first be stored in snapshotImpl. Each block received corresponds to a snapshotImpl. Continuously receiving blocks will lead to more and more snapshotImpl. When will they be written to persistent storage? There are two variables in SnapshotManager: 'size' and 'maxSize'. Here we simply understand 'size' as how many layers of snapshotImpl are there currently in memory, and 'maxSize' represents the difference between the height of the current solidified block and the latest block. This is obvious. If 'size' > 'maxSize', it means that the blocks corresponding to the first (size-maxSize) snapshotImpl are already solidified blocks, they can be placed on the disk, and then the snapshotImpl will be merged into the persistent storage. This ensures that snapshotImpl does not occupy too much memory, and also ensures that the solidified block can be persisted in time. Atomicity \u00b6 The database storage of java-tron is slightly different from other public chains. For example, the Ethereum persistence layer uses only one database instance, and different types of data in Ethereum are distinguished by prefixes and stored in one database instance. However, java-tron currently stores data of different business types in its own database instances. The two implementations have their own advantages. A single instance is easy to maintain and can be written uniformly, but the disadvantages are also obvious. For example, the amount of data in a single database continues to grow over time, and frequent access to some business databases may drag down the read-and-write performance of other businesses. Multi-instance does not have the problem of the mutual influence of each business data read and write, and can configure different parameters according to their respective data volume and performance requirements to maximize performance, and can also independently split the database with a large amount of data. Alleviate data bloat problems. But there is a serious problem with multiple database instances: there is no native tool to support atomic writes among multiple database instances. In order to ensure the atomic writing of multiple database instances, java-tron has added a checkpoint mechanism, which writes the changed data to the checkpoint uniformly before the multiple instances are placed on the disk. If an accident occurs in writing to multiple database instances, the changed data will be recovered from the checkpoint when the service is restarted to ensure the atomicity of writing. The process of writing the snapshotImpl of the solidified block to the database in the previous section mainly includes two steps, create a checkpoint place snapshotImpl on disk The operation of creating a checkpoint is more critical. A checkpoint is to persistently store the snapshotImpl in memory that needs to be written to the database in a tmp database (currently, the underlying implementation is leveldb and rocksdb). After the checkpoint is successfully created, the snapshotImpl will place on the disk. If the machine is down while placing, it will first search for the existence of tmp checkpoint data when the node restart. And if so, the data in the checkpoint will be played back to snapshotRoot. A checkpoint data structure, Checkpoint stores all data of a state change in one database. Different types of data are distinguished by prefixes. In order to ensure that all changed data can be placed on disk this time, the bottom layer of the database calls writeBatch() when writing. This solution can be summarized as, the atomicity of writes cannot be guaranteed among multiple database instances, but a single database (most mainstream databases) supports atomic writes the data set that needs to be guaranteed to be written atomically is first written to a temporary database by atomic writing, and then the data is written to different database instances; if an accident occurs, it can be recovered through the data of the temporary database Summary \u00b6 This article analyzes the implementation details of rollback and database writing in the chainbase module through the processing flow of transactions and blocks and also analyzes the principle of atomic writing among multiple instances of the database to prevent database damage caused by accidental downtime. We hope that reading this article can help developers to further understand and develop the java-tron database. Network \u00b6 Overview \u00b6 P2P is a distributed network in which participants in the network share a part of the hardware resources they own, such as processing power, storage capacity, network connection capacity, printers, etc. These shared resources need to be provided services and content by the network, which can be accessed by other peers directly without going through an intermediate entity. Participants in this network are both providers and acquirers of service and content. Different from the traditional Client/Server central server structure, the status of each node in the P2P network is equal. While serving as a client, each node can also serve as a server to provide services to other nodes, which greatly improves the utilization of resources. Blockchain Network \u00b6 P2P is the network layer in the blockchain structure. The main purpose of the network layer is to realize information broadcast, verification and communication between nodes. The blockchain network is essentially a P2P network, and each node can both receive and generate information. Nodes keep communication by maintaining common blockchain data. As the foundation of the blockchain, the P2P network brings the following advantages to the blockchain: Prevent single-point attack High fault tolerance Better compatibility and scalability TRON Network \u00b6 The architecture diagram of TRON is as follows: As the most fundamental module of TRON, the P2P network directly determines the stability of the entire blockchain network. The network module can be divided into the following four parts according to the function: Node Discovery Node Connection Block Synchronization Block and Transaction Broadcast Below will separately introduce these four functional parts. Node Discovery \u00b6 Node discovery is the first step for nodes to access the blockchain network. The blockchain network is a structured P2P network which organizes all nodes in an orderly manner, such as forming a ring network or a tree-like network. Structured networks are generally implemented based on the DHT (Distributed Hash Table) algorithm. Specific implementation algorithms include Chord, Pastry, CAN, Kademlia and so on. The TRON network uses the Kademlia algorithm. Kademlia Algorithm \u00b6 Kademlia is an implementation of Distributed Hash Table (DHT), it is the core routing technology in the decentralized P2P network and can quickly find target nodes in the network without a central server. For a detailed introduction to the algorithm, please refer to Kademlia . Kademlia Implementation by TRON \u00b6 The main points of the Kademlia algorithm implemented by TRON are as follows: Node ID: Randomly generated 512bit ID Node Distance: The node distance is obtained through the XOR operation of two nodes' ID. The formula is: Node distance = 256 - the number of leading 0s in the node ID XOR result , if the calculation result is negative, the distance is equal to 0. K-Bucket: The node routing table. According to the distance between the nodes, the remote nodes are divided into different buckets. The remote nodes with the same distance as the current node are recorded in the same bucket, and each bucket can accommodate up to 16 nodes. According to the calculation formula of node distance, it can be seen that the Kademlia algorithm implemented by TRON maintains a total of 256 buckets. The node discovery protocol of TRON includes the following four UDP messages: DISCOVER_PING - used to detect if a node is online DISCOVER_PONG - used in response to DISCOVER_PING message DISCOVER_FIND_NODE - used to find other nodes closest to the target node DISCOVER_NEIGHBORS - used in response to DISCOVER_FIND_NODE message, will return one or more nodes, up to 16 Initialize K-Buckets \u00b6 After the node is started, it will read the seed nodes configured in the node configuration file and the peer nodes recorded in the database, and then send DISCOVER_PING message to them respectively. If the reply message DISCOVER_PONG from a peer is received, and at the condition that the K bucket is not full, it will then write the peer node into the K bucket; But if the corresponding bucket has already been full (that is the bucket has reached 16 nodes), it will challenge to the earliest node in the bucket. If the challenge is successful, the old node will be deleted, and the new node will be added to the K bucket. That is the K bucket initialization process, then the node discovery process is performed. Send DISCOVER_FIND_NODE to Find More Nodes \u00b6 The node discovery service will start two scheduled tasks ( DiscoverTask and RefreshTask ) to periodically perform the node discovery process to update k buckets. DiscoverTask is to discover more nodes that are closer to myself. It is executed every 30s. The execution flow is as follows: RefreshTask is to expand the local k-bucket by random node ID, that is, to find nodes that are closer to the random node ID. It is executed every 7.2s. The execution process is as follows: The node discovery algorithm used in DiscoverTask and RefreshTask will be executed 8 rounds in one call, and each round sends DISCOVER_FIND_NODE message to the 3 nodes closest to the target node ID in the K bucket, and waits for a reply. Receive Neighbors' Messages and Update K Bucket \u00b6 When the local node receives the DISCOVER_NEIGHBORS message replied by the remote node, it will send the DISCOVER_PING message to the received neighbor node in turn, and then if it receives the reply message DISCOVER_PONG , it will judge whether the corresponding K-bucket is full, if the K-bucket is not full, it will add the new node to the K bucket, if the K bucket is full, it will challenge one of the nodes, if the challenge is successful (send a DISCOVER_PING message to the old node, if it fails to receive the reply message DISCOVER_PONG , the challenge is successful, otherwise the challenge fails), the old node will be deleted from the K bucket, and the new node will be added to the K bucket. Nodes periodically perform node discovery tasks, continuously update K-buckets, and build their own node routing tables. The next step is to establish a connection with nodes. Node Connection \u00b6 Before understanding how to establish a TCP connection between nodes, we need to first understand the peer node type. Peer Node Management \u00b6 The local node needs to manage and classify peer nodes for efficient and stable node connection. Remote nodes can be divided into the following categories: Active nodes: specified in the configuration file. After the system starts, it will actively establish connections with the nodes. If the connection fails to be established, it will retry in each scheduled TCP connection task. Passive nodes: specified in the configuration file. The local node will passively accept connections from them. Trust nodes: specified in the configuration file, both Active nodes and Passive nodes are trusted nodes. When receiving a connection request from a trusted node, some other condition checks are skipped and the request is accepted directly. BadNodes: When an abnormal protocol packet is received, the sending node will be added to the badNodes list, valid for 1 hour. When a connection request from badNodes is received, the request will be rejected directly RecentlyDisconnectedNodes: When a connection is disconnected, the peer node will be added to the recentlyDisconnectedNodes list, valid for 30s, when a connection request from recentlyDisconnectedNodes is received, the request will be rejected directly Establish TCP Connection with Peers \u00b6 After the node is started, a scheduled task poolLoopExecutor will be created to establish a TCP connection with nodes. It will select nodes and establish connections with them. The working process is as follows: The TCP connection can be mainly divided into two steps: first, determine the node list which the node will establish a connection with. The list needs to contain the active nodes that have not successfully established a connection, and then calculate the number of connections that also need to be established, and filter out the nodes from discovered neighbors according to the node filtering strategy , then score and sort them according to the node scoring strategy , and the corresponding number of nodes with the highest score is added to the request list. Finally, TCP connections are established with the nodes in the request list. Node Filtering Strategy \u00b6 When establishing a node connection, it is necessary to filter out the following types of nodes and determine whether the node's own connection number has reached the maximum value. Myself Nodes in the recentlyDisconnectedNodes list Nodes in badNodes list Nodes that have already established a connection The number of connections established with the node IP has already reached the upper limit (maxConnectionsWithSameIp) But for trusted nodes, some filtering policies are ignored and connections are always established. Node Scoring Strategy \u00b6 The node score is used to determine the priority of nodes to establish a connection. The higher the score, the higher the priority. Scoring dimensions include: Packet loss rate: The lower the packet loss rate, the better the communication quality. The score is inversely proportional to the packet loss rate. The highest score is 100 and the lowest is 0. Network delay: The smaller the network delay, the better the network quality. The score is inversely proportional to the average network latency. The highest score is 20 and the lowest is 0. TCP traffic: The larger the TCP traffic, the more active the communication. The score is proportional to the TCP traffic, with a maximum score of 20 and a minimum of 0 Disconnection times: The fewer disconnection times, the more stable the node is. The score is inversely proportional to the number of disconnections. The score is 10 times the number of disconnections. Handshake: Nodes that have been handshake successfully before indicate that they have the same blockchain information, so it is preferred to establish a connection with them. When the number of successful Handshakes is greater than 0, the Handshake score is 20, otherwise, the score is 0. Penalty state: A node in the Penalty state has a score of 0 and does not participate in scoring in other dimensions. The following situations will be regarded as in the Penalty state: Node disconnection time is less than 60s The node is in the badNodes list Inconsistent blockchain information When calculating the node score, first determine whether the node is in the Penalty state, if so, the score is counted as 0, otherwise, the node score is the sum of the scores of each dimension. Handshake \u00b6 After the TCP connection is successfully established, the node that actively initiates the TCP connection request will send a handshake message P2P_HELLO to the neighbor node, in order to confirm whether the blockchain information between the nodes is consistent and whether it is necessary to initiate the block synchronization process. When the neighbor node receives P2P_HELLO , it will compare with the local information, such as checking whether the p2p version and the genesis block information are consistent. If all the check conditions are passed, it will reply to the P2P_HELLO message, and then perform the block synchronization or broadcast; otherwise, it will disconnect the connection. Channel Keep-Alive \u00b6 Channel keep-alive is accomplished through P2P_PING , P2P_PONG TCP messages. When a node establishes a TCP connection with a neighbor node and handshakes successfully, the node will open a thread pingTask for the connection and periodically send P2P_PING messages to maintain the TCP connection, which is scheduled every 10s. If the P2P_PONG message replied is not received within the timeout period, the connection will be terminated. Block Synchronization \u00b6 After completing the handshake with the peer node, if the peer node's blockchain is longer than the local blockchain, the block synchronization process syncService.startSync will be triggered according to the longest chain principle. The message interaction during the synchronization process is as follows: Node A sends an SYNC_BLOCK_CHAIN message to peer node B to announce the blockchain summary information of the local chain. After the peer node B receives it, it calculates the list of missing blocks of node A, and sends the lost block ID list to node A through the BLOCK_CHAIN_INVENTORY message, carrying a maximum of 2000 block ids at a time. After node A receives the BLOCK_CHAIN_INVENTORY message, it gets the missing block id, and sends a FETCH_INV_DATA message to node B asynchronously to request the missing block, up to 100 blocks at a time. If there are still blocks that need to be synchronized (that is, the remain_num in the BLOCK_CHAIN_INVENTORY message is greater than 0), a new round of block synchronization process will be triggered. After node B receives the FETCH_INV_DATA message from node A, it sends the block to node A through the BLOCK message. After node A receives the BLOCK message, it asynchronously processes the block. Blockchain Summary and List of Missing Blocks \u00b6 Below will take several different block synchronization scenarios as examples to illustrate the generation of the blockchain summary and the lost block ID list. Blockchain summary: an ordered list of block IDs, including the highest solidified block, the highest non-solidified block, and the blocks corresponding to the dichotomy. List of missing blocks: The neighbor node compares its own chain with the received blockchain summary, determines the missing blocks list of peers, and returns a set of consecutive block IDs and the number of remaining blocks. Normal Synchronization Scene \u00b6 The height of the local header block is 1018, and the height of the solidified block is 1000. The two nodes have just established a connection, so the height of the common block is 0. The local blockchain summary of node A obtained by the dichotomy is 1000, 1010, 1015, 1017, and 1018. After node B receives the blockchain summary of node A, combined with the local chain, it can produce the list of blocks that node A lacks: 1018, 1019, 1020, and 1021. Then, node A requests to synchronize blocks 1019, 1020, and 1021 according to the list of missing blocks. Chain-Switching Scene \u00b6 The head block height of the local main chain is 1018, and the height of the solidified block is 1000. The two nodes have just established a connection, so the height of the common block is 0. The local blockchain summary of node A obtained by the dichotomy is 1000, 1010, 1015, 1017, and 1018. After node B receives the chain summary of node A, it finds that the local main chain is not the same as the main chain of node A, compares the chain summary of node A and finds that the common block height is 1015, then it computes the list of blocks that node A lacks are 1015, 1016', 1017', 1018', and 1019'. Then, node A requests to synchronize blocks 1018' and 1019' according to the list of missing blocks. In another switching chain scenario, the height of the local main chain header block is 1018, the height of the solidified block is 1000, and the common block is 1017', which is located on the fork chain. The local blockchain summary of node A obtained by the dichotomy is 1000, 1009, 1014, 1016', and 1017'. After node B receives the chain summary of node A, combined with the local chain, it can produce the list of blocks that node A lacks 1017', 1018', and 1019'. Then, node A requests to synchronize blocks 1018', and 1019' according to the list of missing blocks. Block and Transaction Broadcast \u00b6 When the super representative node produces a new block, or the fullnode receives a new transaction initiated by the user, the transaction & block broadcasting process will be initiated. When a node receives a new block or new transaction, it will forward the corresponding block or transaction, and the forwarding process is the same as that of broadcasting. The message interaction is shown in the following figure: The types of messages involved include: INVENTORY - broadcast list: list of block or transaction ids FETCH_INV_DATA - the list data that the node needs to get: block or transaction id list BLOCK - block data TRXS - transaction data Node A sends the transaction or block to be broadcast to Node B via the INVENTORY list message. After node B receives the INVENTORY list message, it needs to check the status of the peer node, and if it can receive the message, it puts the blocks/transactions in the list into the \"to be fetched queue\" invToFetch . If it is a block list, it will also trigger the \"get block & transaction task\" immediately to send a FETCH_INV_DATA message to node A to get the block & transaction. After node A receives the FETCH_INV_DATA message, it will check whether an \"INVENTORY\" message has been sent to the peer. If it has been sent, it will send a transaction or block message to node B according to the list data. After node B receives the transaction or block message, it processes the message and triggers the forwarding process. Summary \u00b6 This article introduces the implementation details related to the P2P network, the lowest level module of TRON, including node discovery, node connection, block synchronization, and the process of block and transaction broadcasting. I hope that reading this article can help developers to further understand and develop java-tron network-related modules.","title":"Core Modules"},{"location":"developers/code-structure/#java-tron-core-modules","text":"","title":"java-tron Core Modules"},{"location":"developers/code-structure/#code-structure","text":"java-tron is a TRON network client developed based on the Java language. It implements all the functions mentioned in the TRON white paper, including consensus mechanism, cryptography, database, TVM virtual machine, network management, etc. We can run a TRON node by starting java-tron. In this article, we will describe the code structure of java-tron in detail, and introduce the functions of its various modules, to facilitate the subsequent code analysis and development of developers. java-tron adopts a modular code structure; the code structure is clear and easy to maintain and expand. Currently java-tron is divided into 7 modules: protocol , common , chainbase , consensus , actuator , crypto , framework , the following introduces the functions of each module and its code organization.","title":"Code Structure"},{"location":"developers/code-structure/#protocol","text":"For a distributed network such as blockchain, a concise and efficient data interaction protocol is very important. The protocol module defines: Inter-node communication protocol Communication protocol between modules within the node Agreement for Services Provided Externally The above protocols adopt the Google Protobuf data exchange format. Compared with JSON and XML, the Google Protobuf format is more efficient and flexible and can be compiled by the ProtoBuf compiler to generate language-specific serialization and deserialization source code for the defined protocol files. Protobuf is the basis for java-tron to achieve cross-language and cross-platform. protocol module's source code is located at: https://github.com/tronprotocol/java-tron/tree/develop/protocol , its directory structure is as follows: |-- protos |-- api | |-- api.proto | |-- zksnark.proto |-- core |-- Discover.proto |-- Tron.proto |-- TronInventoryItems.proto |-- contract protos/api/ - The gRPC interface and data structure provided by the java-tron node externally protos/core/ - Data structure for communication between nodes and between modules within nodes Discover.proto - Node discovers related data structures TronInventoryItems.proto - Data structure related to block transferring between nodes contract/ - Contract related data structures Tron.proto - Other important data structures, including accounts, blocks, transactions, resources, super representatives, voting, and proposals...","title":"protocol"},{"location":"developers/code-structure/#common","text":"The common module encapsulates common components and tools, such as exception handling, metrics monitoring tools, etc which make it easy to use by other modules. common module's source code is located at: https://github.com/tronprotocol/java-tron/tree/develop/common , its directory structure is as follows: |-- /common/src/main/java/org/tron |-- common | |-- args | |-- config | |-- entity | |-- logsfilter | |-- overlay | |-- parameter | |-- prometheus | |-- runtime | |-- setting | |-- utils |-- core |-- config |-- db |-- db2 |-- exception common/prometheus - Prometheus metrics monitoring common/utils - The wrapper class of basic data type core/config - Node configuration related classes core/exception - All exception handling related classes","title":"common"},{"location":"developers/code-structure/#chainbase","text":"Chainbase is a database module. For probabilistic consensus algorithms such as PoW, PoS and DPoS, situations of switching to a new chain, however unlikely, are inevitable. Because of this, chainbase defines an interface standard supporting databases that can roll back. This interface requires databases to have a state rollback mechanism, a checkpoint-based disaster tolerant mechanism and so on. In addition, the chainbase module features a well-designed abstract interface. Any database that implements the interface can be used for underlying storage on the blockchain, granting more flexibility to developers. LevelDB and RocksDB are two default implementations. chainbase module's source code is located at: https://github.com/tronprotocol/java-tron/tree/develop/chainbase , its directory structure is as follows: |-- chainbase.src.main.java.org.tron |-- common | |-- bloom | |-- error | |-- overlay | |-- runtime | |-- storage | | |-- leveldb | | |-- rocksdb | |-- utils | |-- zksnark |-- core |-- actuator |-- capsule |-- db | |-- RevokingDatabase.java | |-- TronStoreWithRevoking.java | |-- ...... |-- db2 | |-- common | |-- core | |-- SnapshotManager.java | |-- ...... |-- net |-- service |-- store common/ - Common components, such as exception handling, tools, etc storage/leveldb/ Implemented the use of LevelDB as the underlying storage database storage/rocksdb/ Implemented the use of RocksDB as the underlying storage database core/ - The core code of the chainbase module capsule/ The encapsulation class of each data structure, such as AccountCapsule, BlockCapsule, etc. AccountCapsule is the encapsulation class of Account data structure, which provides modification and query of account data; BlockCapsule is the encapsulation class of Block data structure, which provides modification and query of block data. store/ Various databases, such as AccountStore , ProposalStore , etc. AccountStore is the account database, the database name is account , which stores all account information in the TRON network; ProposalStore is the proposal database, and the database name is proposal , which stores all the proposal information in the TRON network. db/ and db2/ Implemented rollbackable databases, including two rollbackable databases: AbstractRevokingStore located in the db/ directory and SnapshotManager located in the db2/ directory. Compared with AbstractRevokingStore , SnapshotManager has a more stable data rollback function and supports the extension of the underlying database. Therefore, java-tron uses SnapshotManager to roll back the database. Several important interfaces and implementation classes are as follows: RevokingDatabase.java - It is the interface of the database container, used to manage all rollbackable databases, SnapshotManager is an implementation of this interface TronStoreWithRevoking.java - It is the base class that supports rollbackable databases. All rollbackable databases are their implementations, such as BlockStore , TransactionStore , etc","title":"chainbase"},{"location":"developers/code-structure/#consensus","text":"The consensus mechanism is a crucial module in blockchains. Common ones are PoW, PoS, DPoS and PBFT, etc. While Paxos, Raft, etc, are applied to consortium blockchains and other trusted networks. The consensus mechanism should match the business scenario. For instance, PoW is not suitable for real-time games that are sensitive to consensus efficiency, while PBFT can make an optimized choice for exchanges demanding high real-time capability. In this sense, a replaceable consensus is a creative innovation and an essential link in building application-specific blockchains. Even star blockchain programs like Cosmos SDK are still at a stage where the application layer provides developers with limited autonomy and the consensus at the base level is subject to Tendermint. Therefore, the ultimate goal of the consensus module is to make consensus switch as easy as configuring parameters for application developers. consensus module's source code is located at: https://github.com/tronprotocol/java-tron/tree/develop/consensus , its directory structure is as follows: |-- consensus/src/main/java/org/tron/consensus |-- Consensus.java |-- ConsensusDelegate.java |-- base | |-- ConsensusInterface.java | |-- ...... |-- dpos |-- pbft consensus module divides the consensus process into several important parts that are defined in ConsensusInterface : start - start the consensus service with customizable startup parameters stop - stop the consensus service receiveBlock - define the consensus logic of receiving blocks validBlock - define the consensus logic of validating blocks applyBlock - define the consensus logic of processing blocks Currently, java-tron implements DPOS consensus and PBFT consensus based on the ConsensusInterface interface, which is located in the dpos/ and pbft/ directories respectively. Developers can also implement the ConsensusInterface interface according to their own business needs to customize the consensus mechanism.","title":"consensus"},{"location":"developers/code-structure/#actuator","text":"Ethereum was the first to introduce the virtual machine and define the smart contract. However, smart contracts are constrained in terms of their functions and not flexible enough to accommodate the needs of complex applications. This is one of the reasons why java-tron supports the creation of a chain of applications. For the reasons mentioned, java-tron includes a separate module, Actuator, offering application developers a brand new way of development. They can choose to implant their application codes into a chain instead of running them on virtual machines. Actuator is the executor of transactions, while applications can be viewed as a cluster of different types of transactions, each of which is executed by a corresponding actuator. actuator module's source code is located at: https://github.com/tronprotocol/java-tron/tree/develop/actuator , its directory structure is as follows: |-- actuator/src/main/java/org/tron/core |-- actuator | |-- AbstractActuator.java | |-- ActuatorCreator.java | |-- ActuatorFactory.java | |-- TransferActuator.java | |-- VMActuator.java | |-- ...... |-- utils |-- vm actuator/ - The executors of various types of transactions in the TRON network which define the processing logic of different types of transactions. For example, TransferActuator is the processing class for transferring TRX, and FreezeBalanceV2Actuator is the processing class for staking TRX to obtain resource utils/ - tools needed to execute transaction vm/ - TRON virtual machine related code Actuator module defines the Actuator interface, which includes 4 different methods: execute - execute specific actions of transactions, such as state modification, communication between modules, logic execution, etc. validate - validate authenticity of transactions getOwnerAddress - acquire the address of transaction initiators calcFee - define the logic of calculating transaction fees Depending on their businesses, developers may set up Actuator accordingly and customize the processing of different types of transactions.","title":"actuator"},{"location":"developers/code-structure/#crypto","text":"Crypto is a relatively independent module, but it is also a very important module. Data security in java-tron is almost entirely guaranteed by this module. Currently, SM2 and ECKey encryption algorithms are supported. crypto module's source code is located at: https://github.com/tronprotocol/java-tron/tree/develop/crypto , its directory structure is as follows: |-- crypto/src/main/java/org/tron/common/crypto |-- Blake2bfMessageDigest.java |-- ECKey.java |-- Hash.java |-- SignInterface.java |-- SignUtils.java |-- SignatureInterface.java |-- cryptohash |-- jce |-- sm2 |-- zksnark sm2 and jce - Provide SM2 and ECKey encryption algorithm and signature algorithm zksnark - Provide a zero-knowledge proof algorithm","title":"crypto"},{"location":"developers/code-structure/#framework","text":"The framework is the core module of java-tron and the entrance of the node. The framework module is responsible for the initialization of each module and business logic. The framework module includes the services provided externally, the node discovery and node management process related to the P2P network, and the block broadcasting and processing procedures. framework module's source code is located at: https://github.com/tronprotocol/java-tron/tree/develop/framework , its directory structure is as follows: |-- framework/src/main/java/org/tron |-- common | |-- application | |-- backup | |-- logsfilter | |-- net | |-- overlay | | |-- client | | |-- discover | | |-- message | | |-- server | |-- runtime | |-- zksnark |-- core | |-- Wallet.java | |-- capsule | |-- config | |-- consensus | |-- db | |-- metrics | |-- net | |-- services | |-- trie | |-- zen |-- keystore |-- program | |-- FullNode.java |-- tool program/FullNode.java - It is the entry point of the program and initializes external HTTP, gRPC and json-rpc interface services core/services - Defines the externally provided services, its subdirectory http/ contains all http interface processing classes, json-rpc/ contains all json-rpc interface processing classes common/overlay/discover - Node discovery logic common/overlay/server - Node management and block synchronization logic among nodes core/net - Message processing, its subdirectory /service is transaction and block broadcasting, block fetching and synchronization logic core/db/Manager.java - Transaction and block verification and processing logic","title":"framework"},{"location":"developers/code-structure/#summary","text":"This article mainly introduces the code structure of java-tron, as well as the function, location and directory structure of each functional module. Through this article, you will have a general understanding of the overall structure and key interfaces of java-tron, which is helpful for subsequent code analysis and development.","title":"Summary"},{"location":"developers/code-structure/#chainbase_1","text":"","title":"ChainBase"},{"location":"developers/code-structure/#introduction","text":"As we all know, the blockchain is essentially a non-tamperable distributed ledger, which is very suitable for solving the problem of trust. In reality, blockchain is often used for bookkeeping and transactions. For example, many applications use BTC, ETH, TRX, and other cryptos to carry out economic activities to ensure the openness and transparency of funds. The realization of such an immutable distributed ledger is a very complex system engineering, involving many technical fields: such as p2p networks, smart contracts, databases, cryptography, consensus mechanisms, etc. Among them, the database is the basis of the underlying storage, and various blockchain teams are exploring the design and optimization of the database level. The database module of java-tron is also called the ChainBase module. This article mainly introduces some background knowledge and shows developers the implementation details of the ChainBase module by introducing logic such as transaction processing, state rollback, and data persistence.","title":"Introduction"},{"location":"developers/code-structure/#prerequisites","text":"The database is an important part of the blockchain system. It stores all the data on the blockchain and is the basis for the normal operation of the blockchain system. Each fullnode stores a full amount of data, including block data, state data, etc. java-tron uses the Account model to save the user's account state.","title":"Prerequisites"},{"location":"developers/code-structure/#account-models","text":"There are currently two mainstream account models, UTXO Account Model The UTXO model is stateless, makes it easier to process transactions concurrently, and has better privacy, but it is not programming-friendly. In the Account Model, user data is stored in the corresponding account, and smart contracts are also stored in the account in the form of code. This model is more intuitive and easier for developers to understand. For programmability, flexibility, and other considerations, java-tron adopts the Account Model.","title":"Account Models"},{"location":"developers/code-structure/#consensus_1","text":"The current mainstream consensus is PoW, PoS, DPoS, etc. PoW is proof of work, all nodes participate in the calculation of an expected hash result, and the node that first calculates the result has the right to produce a block, but as the computing power continues to increase, the energy consumption required to calculate the hash is also increasing. Moreover, large mining farms monopolize most of the computing power, which also goes against the original intention of decentralization. To solve the problems faced by PoW, some people proposed PoS (Proof of Stake), which is simply understood as the more coins that the node holds, the greater the probability of obtaining the right to produce blocks, but this will lead to monopoly problems as well. In order to improve, DPoS (Delegated Proof of Stake) is proposed: the decentralization feature is guaranteed by the elected super representative, and the super representative is responsible for the block production in turn to improve the efficiency. java-tron currently adopts the DPoS consensus mechanism. To learn more, please refer to Delegated Proof of Stake .","title":"Consensus"},{"location":"developers/code-structure/#persistent-storage","text":"There are certain differences between blockchain and traditional Internet business. The blockchain does not have particularly complex processing logic at the database level, but there are a large number of key-value read and write operations in the blockchain so there are higher requirements for data read and write performance. Based on this consideration, java-tron uses LevelDB as the underlying data storage by default, and java-tron has a good architecture design. The interface-oriented programming mode makes the chainbase module have better scalability. All databases implemented the chainbase interface can be used as the underlying storage engine of java-tron. For example, in the chainbase v2 version, a database implementation based on RocksDB is provided.","title":"Persistent Storage"},{"location":"developers/code-structure/#transaction-validation","text":"As we all know, the blockchain mainly stores transaction data. Before introducing the chainbase module, you need to understand the transaction processing logic in java-tron. The transaction will be distributed to each node through network broadcast. After receiving the transaction, the node will first validate the signature of the transaction. If successful, the transaction needs to be pre-executed to determine whether the transaction is legal. Note: The specific implementation of java-tron deviates from the above figure, and for the sake of convenience, this article collectively refers to the FullNode and SR as the nodes. For example, to process a transfer transaction: user A transfers 100 TRX to user B, and it needs to validate whether user A has enough balance to make the transfer. The account library in the database stores the account information of all users, including the user's balance information. How to judge whether this transfer transaction is legal? The logic of java-tron is: when a transaction is received from the network, the transaction operation will be executed immediately, that is, the account information will be modified in the local database: (accountA - 100TRX, accountB + 100TRX). If this operation can be executed successfully, it means that the transaction is legal at least in the current state, and can be packed into the block.","title":"Transaction Validation"},{"location":"developers/code-structure/#glossary","text":"SR\uff1a Super Representative, is responsible for block production. FullNode\uff1a stores all block data, is responsible for transactions, block broadcasting and validation, and provides query services. TRX\uff1a TRON native token.","title":"Glossary"},{"location":"developers/code-structure/#state-rollback","text":"Above we mentioned that java-tron validates whether the transaction is legal through pre-execution, but what we need to know is that the transaction is successfully validated on a certain node does not mean that the transaction has been successfully chained because the transaction has not been packed into the consensus blocks, there is a risk of being rolled back. The consensus of java-tron follows a principle: that is, the transactions in the blocks that are approved by more than 2/3 of the SRs are the ones that are really successful on the chain. can also be understood as below, transactions are packed into a block the block is approved by more than 2/3 of the SRs A transaction that satisfies the above two points is a successful transaction on the chain. A transaction in java-tron is finally confirmed through three stages, transaction validating transaction packing into the block block being accepted and applied This also leads to a problem: in the implementation of java-tron, if a node validates the transaction, its database state changes accordingly. If the transaction is not packed into the block yet or the block it is packed into has not been approved by more than 2/3 of SR, the state of this node will be inconsistent with the state of the entire network. Therefore, except for the processing transaction data in blocks approved by more than 2/3 SRs, all other data state changes resulting from transaction processing may need to be rolled back. There are three kinds of scenarios in total: after receiving a new block, roll back the state changes generated by transaction validation after producing a block, roll back the state changes generated by transaction validation if a forked takes place, roll back the state changes generated by the transactions of the blocks in the forked chain The data state changes caused by these three scenarios may need to be rolled back and the following section explains why.","title":"State Rollback"},{"location":"developers/code-structure/#rollback-after-receiving-a-new-block","text":"When receiving a new block, the node needs to roll back to the state at the end of the previous block and roll back all transactions validated afterward. As shown below, If the account balance of accountA is 100 at the block height is 1000, the node receives and validates a transaction 't1', in which accountA transfers 100TRX to accountB. After receiving the new block1001, the block contains a transaction 't2', in which accountA transfers 50TRX to accountC. In theory, t2 has been packed into the block, and the priority is higher than t1. However, if no operation is done, the validation of t2 will fail because accountA does not have enough balance. Therefore, after receiving the new block 1001, the state change generated by transaction t1 needs to be rolled back.","title":"Rollback after Receiving a New Block"},{"location":"developers/code-structure/#rollback-after-producing-a-new-block","text":"First of all, readers may have a question: the validated transaction can be directly packed into the block, and it will not change the database state. Why is there a change in the database state? Because java-tron does a secondary validation of the transaction when it is packed into the block. The secondary validation is due to the timeliness of the transaction. Still taking the above figure as an example, it can be seen from the figure, that after 1001 is received, the transaction t1 was rolled back, and the balance of accountA was deducted by 50. And then, it was the node's turn to produce a block, but t1 had become an illegal transaction at this time because the balance in accountA was not enough to transfer 100 TRX, it is not advisable to directly pack t1 into the block. So the transaction needs to be validated again, which is why the transaction needs to be validated twice when producing a block. After the block is packed successfully, the node will broadcast the block to the network and apply the block locally. And the logic of applying will re-check the transactions in the block. So after the block is packed, a rollback operation still needs to be performed.","title":"Rollback after Producing a New Block"},{"location":"developers/code-structure/#rollback-when-forking","text":"This is the last rollback situation, and the blockchain will inevitably fork, especially the blockchain system based on DPoS with a faster block production speed that is more prone to fork. java-tron maintains a data structure in memory as below, java-tron holds all blocks that have not reached consensus recently. When a forked chain occurs, according to the longest chain principle: if the block height of the forked chain is greater than the current main chain block height, the forked chain needs to be switched to the main chain. Part of the blocks on the previous main chain needs to roll back up to their common parent blocks when switching, and then apply new main chain blocks sequentially from the parent block. As shown in the figure, fork A in the dark part was originally the main chain. Because the height of fork B continues to grow and eventually exceeds the height of A, it is necessary to roll back the data in those three blocks with heights 1003, 1002, and 1001 in fork A. Then apply fork blocks 1001', 1002', 1003', and 1004' in B in sequence.","title":"Rollback when Forking"},{"location":"developers/code-structure/#state-rollback-implementation","text":"This chapter explains receiving and validating transactions, block production, validating and saving blocks from the perspective of code, to further analyze the chainbase module of java-tron. If there is no further declaration, the default description is dedicated to all the Fullnode (including SR).","title":"State Rollback Implementation"},{"location":"developers/code-structure/#receiving-transactions","text":"After the node receives a transaction, it puts the transaction into the local pushTransactionQueue cache queue by calling the pushTransaction(final TransactionCapsule trx) function of the manager class and validates the transaction at the same time. And the return of this method is sort of elegant: if validation is successful, \u2018true' is returned for the transaction sent by the user to the node through the API, if the transaction validation fails, an exception will be returned to the user; for transactions received from other nodes through the network, exceptions will only be recorded locally After the transaction validation is successful, the transactions without problems will be put into the pendingTransactionQueue, and the pendingTransactionQueue is responsible for providing the transaction set when producing blocks. If the node is an SR node, when producing a block, it will take out all or part of it from the pendingTransactionQueue (depending on how many transactions are in the pendingTransactionQueue) to generate a block.","title":"Receiving Transactions"},{"location":"developers/code-structure/#rollback-when-receiving-blocks","text":"A node would receive transactions broadcasted from other nodes before receiving a new block, the transactions need to be validated to determine whether they can be executed correctly. Validation means that the state needs to be changed, and a successful validation does not mean that the transaction will be finally executed, and it will be considered successful after packing into a block and the block become solidified. This step can be considered to filter out those obviously wrong transactions in advance. This is just validation. When a new block arrives, the state changed by transaction validations should be rolled back. Only the state changed when applying new blocks will not be rolled back. When rolling back, java-tron move the transactions in the pendingTransactionQueue to rePushTransactions, and clear the pendingTransactionQueue, see the figure for a detailed explanation. Why does the pendingTransactionQueue need to be emptied after a new block arrives? First of all, it is clear that the pendingTransactionQueue queue is responsible for providing transaction data when generating blocks, that is to say, it stores validated transactions that can be directly packed into blocks. Since the new block will also change the account state, those validated transactions in pendingTransactionQueue may not pass the validation after applying the new block (the simplest example: a transaction in the new block is that accountA spends a part of the token, resulting in a transaction amount of accountA in the queue that is not enough to pay ). After the transaction is moved to rePushTransactions, a background thread will be responsible for re-validating the transaction in the queue. If nothing is wrong, it will be put into the pendingTransactionQueue again to provide data for block production. There is a session object in java-tron. A session represents the change in the state of a block. The session object is mainly used for rollback. For example,rolling back the state to the state of the previous block needs to be operated throughout the session, as shown in the following figure, In the above figure, you can see that there are many different types of databases in persistent storage. These data are jointly organized into a complete blockchain. For example, blocks are stored in khasodb and blockStore, and account information is stored in accountStore... The node maintains a session chain table, which stores the change information corresponding to the block/transaction, and the node can roll back through the change information. In the above figure, session1 is the status change of the current highest block. When a transaction is received, a new session2 will be generated. Each transaction that comes later will generate a temporary tmpSession, and after the transaction is validated, the tmpSession corresponded will be merged to session2. Before a new block is received again, all status changes generated by transaction validation will be saved in session2. When a new block arrives, directly execute the reset method of the session2 to roll back the state to the previous block.","title":"Rollback when Receiving Blocks"},{"location":"developers/code-structure/#rollback-when-producing-blocks","text":"SR needs to roll back before producing blocks. The reasons are more complicated. Let's consider a scenario first: The pendingTransactionQueue stores the currently validated transactions, so when an SR node produces a block, it only needs to directly pack the transactions in the pendingTransactionQueue into the block, and then roll back the state to the state of the previous block after packing. However, there is a problem with this scheme: if the SR node has just received and applied a new block, the pendingTransactionQueue will be cleared. At this time, it is the turn of the SR to pack the block, but there is no transaction in pendingTransactionQueue. Therefore, the real implementation is that not only reads transactions from pendingTransactionQueue when generating blocks but also reads transactions from rePushTransactions and puts them into blocks if there are few transactions in pendingTransactionQueue. The above analysis shows that transactions in rePushTransactions may not be possible to pass the validation, so the transactions need to be validated again. Due to this validation logic, the state needs to be rolled back before the block is produced. In the process of producing the block, the transaction will be validated again, so there will be a state change, but this is just block production, and the block needs to be broadcast as well, and those blocks who received the broadcast will actually change the state, so the state changes incurred by block production also need to be rolled back. As shown in the figure above, when the block production is completed, session2\" needs to be rolled back.","title":"Rollback when Producing Blocks"},{"location":"developers/code-structure/#block-solidity","text":"java-tron adopts the DPoS consensus mechanism. The DPoS of java-tron is to vote for 27 nodes as block producers (also known as SR), SR has the right and obligation to produce blocks, and blocks approved by more than 2/3 of SR are considered to reach a consensus. These blocks, which are no longer rolled back are called solidified blocks. Only solidified blocks can be written to the database. SnapshotManager in java-tron is the key entry to the storage module, holds references to all current business databases, and stores database references in a list. Each database instance supports adding a new layer of state set on its own called SnapshotImpl. It is an in-memory hashmap, multiple SnapshotImpl are associated in the form of a linked list, and one SnapshotImpl retains the data modification (in-merging or merging) involved in one state change, and SnapshotImpl is independent of each other. They are separated through this data structure, as shown in the following figure, The SnapshotRoot in the above figure is the encapsulation class for the persistent database, which is responsible for storing the solidified data. In the previous chapters, we talked about sessions. A session represents the changes of state in a block. In fact, a session contains the SnapshotImpl corresponding to each database. For example, all SnapshotImpl in the layer of block 5 in the above figure together constitutes the changes of block 5 to the entire database. The changes generated after the node receives a new block will not be directly stored in the persistent storage (SnapshotRoot), but will first be stored in snapshotImpl. Each block received corresponds to a snapshotImpl. Continuously receiving blocks will lead to more and more snapshotImpl. When will they be written to persistent storage? There are two variables in SnapshotManager: 'size' and 'maxSize'. Here we simply understand 'size' as how many layers of snapshotImpl are there currently in memory, and 'maxSize' represents the difference between the height of the current solidified block and the latest block. This is obvious. If 'size' > 'maxSize', it means that the blocks corresponding to the first (size-maxSize) snapshotImpl are already solidified blocks, they can be placed on the disk, and then the snapshotImpl will be merged into the persistent storage. This ensures that snapshotImpl does not occupy too much memory, and also ensures that the solidified block can be persisted in time.","title":"Block Solidity"},{"location":"developers/code-structure/#atomicity","text":"The database storage of java-tron is slightly different from other public chains. For example, the Ethereum persistence layer uses only one database instance, and different types of data in Ethereum are distinguished by prefixes and stored in one database instance. However, java-tron currently stores data of different business types in its own database instances. The two implementations have their own advantages. A single instance is easy to maintain and can be written uniformly, but the disadvantages are also obvious. For example, the amount of data in a single database continues to grow over time, and frequent access to some business databases may drag down the read-and-write performance of other businesses. Multi-instance does not have the problem of the mutual influence of each business data read and write, and can configure different parameters according to their respective data volume and performance requirements to maximize performance, and can also independently split the database with a large amount of data. Alleviate data bloat problems. But there is a serious problem with multiple database instances: there is no native tool to support atomic writes among multiple database instances. In order to ensure the atomic writing of multiple database instances, java-tron has added a checkpoint mechanism, which writes the changed data to the checkpoint uniformly before the multiple instances are placed on the disk. If an accident occurs in writing to multiple database instances, the changed data will be recovered from the checkpoint when the service is restarted to ensure the atomicity of writing. The process of writing the snapshotImpl of the solidified block to the database in the previous section mainly includes two steps, create a checkpoint place snapshotImpl on disk The operation of creating a checkpoint is more critical. A checkpoint is to persistently store the snapshotImpl in memory that needs to be written to the database in a tmp database (currently, the underlying implementation is leveldb and rocksdb). After the checkpoint is successfully created, the snapshotImpl will place on the disk. If the machine is down while placing, it will first search for the existence of tmp checkpoint data when the node restart. And if so, the data in the checkpoint will be played back to snapshotRoot. A checkpoint data structure, Checkpoint stores all data of a state change in one database. Different types of data are distinguished by prefixes. In order to ensure that all changed data can be placed on disk this time, the bottom layer of the database calls writeBatch() when writing. This solution can be summarized as, the atomicity of writes cannot be guaranteed among multiple database instances, but a single database (most mainstream databases) supports atomic writes the data set that needs to be guaranteed to be written atomically is first written to a temporary database by atomic writing, and then the data is written to different database instances; if an accident occurs, it can be recovered through the data of the temporary database","title":"Atomicity"},{"location":"developers/code-structure/#summary_1","text":"This article analyzes the implementation details of rollback and database writing in the chainbase module through the processing flow of transactions and blocks and also analyzes the principle of atomic writing among multiple instances of the database to prevent database damage caused by accidental downtime. We hope that reading this article can help developers to further understand and develop the java-tron database.","title":"Summary"},{"location":"developers/code-structure/#network","text":"","title":"Network"},{"location":"developers/code-structure/#overview","text":"P2P is a distributed network in which participants in the network share a part of the hardware resources they own, such as processing power, storage capacity, network connection capacity, printers, etc. These shared resources need to be provided services and content by the network, which can be accessed by other peers directly without going through an intermediate entity. Participants in this network are both providers and acquirers of service and content. Different from the traditional Client/Server central server structure, the status of each node in the P2P network is equal. While serving as a client, each node can also serve as a server to provide services to other nodes, which greatly improves the utilization of resources.","title":"Overview"},{"location":"developers/code-structure/#blockchain-network","text":"P2P is the network layer in the blockchain structure. The main purpose of the network layer is to realize information broadcast, verification and communication between nodes. The blockchain network is essentially a P2P network, and each node can both receive and generate information. Nodes keep communication by maintaining common blockchain data. As the foundation of the blockchain, the P2P network brings the following advantages to the blockchain: Prevent single-point attack High fault tolerance Better compatibility and scalability","title":"Blockchain Network"},{"location":"developers/code-structure/#tron-network","text":"The architecture diagram of TRON is as follows: As the most fundamental module of TRON, the P2P network directly determines the stability of the entire blockchain network. The network module can be divided into the following four parts according to the function: Node Discovery Node Connection Block Synchronization Block and Transaction Broadcast Below will separately introduce these four functional parts.","title":"TRON Network"},{"location":"developers/code-structure/#node-discovery","text":"Node discovery is the first step for nodes to access the blockchain network. The blockchain network is a structured P2P network which organizes all nodes in an orderly manner, such as forming a ring network or a tree-like network. Structured networks are generally implemented based on the DHT (Distributed Hash Table) algorithm. Specific implementation algorithms include Chord, Pastry, CAN, Kademlia and so on. The TRON network uses the Kademlia algorithm.","title":"Node Discovery"},{"location":"developers/code-structure/#kademlia-algorithm","text":"Kademlia is an implementation of Distributed Hash Table (DHT), it is the core routing technology in the decentralized P2P network and can quickly find target nodes in the network without a central server. For a detailed introduction to the algorithm, please refer to Kademlia .","title":"Kademlia Algorithm"},{"location":"developers/code-structure/#kademlia-implementation-by-tron","text":"The main points of the Kademlia algorithm implemented by TRON are as follows: Node ID: Randomly generated 512bit ID Node Distance: The node distance is obtained through the XOR operation of two nodes' ID. The formula is: Node distance = 256 - the number of leading 0s in the node ID XOR result , if the calculation result is negative, the distance is equal to 0. K-Bucket: The node routing table. According to the distance between the nodes, the remote nodes are divided into different buckets. The remote nodes with the same distance as the current node are recorded in the same bucket, and each bucket can accommodate up to 16 nodes. According to the calculation formula of node distance, it can be seen that the Kademlia algorithm implemented by TRON maintains a total of 256 buckets. The node discovery protocol of TRON includes the following four UDP messages: DISCOVER_PING - used to detect if a node is online DISCOVER_PONG - used in response to DISCOVER_PING message DISCOVER_FIND_NODE - used to find other nodes closest to the target node DISCOVER_NEIGHBORS - used in response to DISCOVER_FIND_NODE message, will return one or more nodes, up to 16","title":"Kademlia Implementation by TRON"},{"location":"developers/code-structure/#initialize-k-buckets","text":"After the node is started, it will read the seed nodes configured in the node configuration file and the peer nodes recorded in the database, and then send DISCOVER_PING message to them respectively. If the reply message DISCOVER_PONG from a peer is received, and at the condition that the K bucket is not full, it will then write the peer node into the K bucket; But if the corresponding bucket has already been full (that is the bucket has reached 16 nodes), it will challenge to the earliest node in the bucket. If the challenge is successful, the old node will be deleted, and the new node will be added to the K bucket. That is the K bucket initialization process, then the node discovery process is performed.","title":"Initialize K-Buckets"},{"location":"developers/code-structure/#send-discover_find_node-to-find-more-nodes","text":"The node discovery service will start two scheduled tasks ( DiscoverTask and RefreshTask ) to periodically perform the node discovery process to update k buckets. DiscoverTask is to discover more nodes that are closer to myself. It is executed every 30s. The execution flow is as follows: RefreshTask is to expand the local k-bucket by random node ID, that is, to find nodes that are closer to the random node ID. It is executed every 7.2s. The execution process is as follows: The node discovery algorithm used in DiscoverTask and RefreshTask will be executed 8 rounds in one call, and each round sends DISCOVER_FIND_NODE message to the 3 nodes closest to the target node ID in the K bucket, and waits for a reply.","title":"Send DISCOVER_FIND_NODE to Find More Nodes"},{"location":"developers/code-structure/#receive-neighbors-messages-and-update-k-bucket","text":"When the local node receives the DISCOVER_NEIGHBORS message replied by the remote node, it will send the DISCOVER_PING message to the received neighbor node in turn, and then if it receives the reply message DISCOVER_PONG , it will judge whether the corresponding K-bucket is full, if the K-bucket is not full, it will add the new node to the K bucket, if the K bucket is full, it will challenge one of the nodes, if the challenge is successful (send a DISCOVER_PING message to the old node, if it fails to receive the reply message DISCOVER_PONG , the challenge is successful, otherwise the challenge fails), the old node will be deleted from the K bucket, and the new node will be added to the K bucket. Nodes periodically perform node discovery tasks, continuously update K-buckets, and build their own node routing tables. The next step is to establish a connection with nodes.","title":"Receive Neighbors' Messages and Update K Bucket"},{"location":"developers/code-structure/#node-connection","text":"Before understanding how to establish a TCP connection between nodes, we need to first understand the peer node type.","title":"Node Connection"},{"location":"developers/code-structure/#peer-node-management","text":"The local node needs to manage and classify peer nodes for efficient and stable node connection. Remote nodes can be divided into the following categories: Active nodes: specified in the configuration file. After the system starts, it will actively establish connections with the nodes. If the connection fails to be established, it will retry in each scheduled TCP connection task. Passive nodes: specified in the configuration file. The local node will passively accept connections from them. Trust nodes: specified in the configuration file, both Active nodes and Passive nodes are trusted nodes. When receiving a connection request from a trusted node, some other condition checks are skipped and the request is accepted directly. BadNodes: When an abnormal protocol packet is received, the sending node will be added to the badNodes list, valid for 1 hour. When a connection request from badNodes is received, the request will be rejected directly RecentlyDisconnectedNodes: When a connection is disconnected, the peer node will be added to the recentlyDisconnectedNodes list, valid for 30s, when a connection request from recentlyDisconnectedNodes is received, the request will be rejected directly","title":"Peer Node Management"},{"location":"developers/code-structure/#establish-tcp-connection-with-peers","text":"After the node is started, a scheduled task poolLoopExecutor will be created to establish a TCP connection with nodes. It will select nodes and establish connections with them. The working process is as follows: The TCP connection can be mainly divided into two steps: first, determine the node list which the node will establish a connection with. The list needs to contain the active nodes that have not successfully established a connection, and then calculate the number of connections that also need to be established, and filter out the nodes from discovered neighbors according to the node filtering strategy , then score and sort them according to the node scoring strategy , and the corresponding number of nodes with the highest score is added to the request list. Finally, TCP connections are established with the nodes in the request list.","title":"Establish TCP Connection with Peers"},{"location":"developers/code-structure/#node-filtering-strategy","text":"When establishing a node connection, it is necessary to filter out the following types of nodes and determine whether the node's own connection number has reached the maximum value. Myself Nodes in the recentlyDisconnectedNodes list Nodes in badNodes list Nodes that have already established a connection The number of connections established with the node IP has already reached the upper limit (maxConnectionsWithSameIp) But for trusted nodes, some filtering policies are ignored and connections are always established.","title":"Node Filtering Strategy"},{"location":"developers/code-structure/#node-scoring-strategy","text":"The node score is used to determine the priority of nodes to establish a connection. The higher the score, the higher the priority. Scoring dimensions include: Packet loss rate: The lower the packet loss rate, the better the communication quality. The score is inversely proportional to the packet loss rate. The highest score is 100 and the lowest is 0. Network delay: The smaller the network delay, the better the network quality. The score is inversely proportional to the average network latency. The highest score is 20 and the lowest is 0. TCP traffic: The larger the TCP traffic, the more active the communication. The score is proportional to the TCP traffic, with a maximum score of 20 and a minimum of 0 Disconnection times: The fewer disconnection times, the more stable the node is. The score is inversely proportional to the number of disconnections. The score is 10 times the number of disconnections. Handshake: Nodes that have been handshake successfully before indicate that they have the same blockchain information, so it is preferred to establish a connection with them. When the number of successful Handshakes is greater than 0, the Handshake score is 20, otherwise, the score is 0. Penalty state: A node in the Penalty state has a score of 0 and does not participate in scoring in other dimensions. The following situations will be regarded as in the Penalty state: Node disconnection time is less than 60s The node is in the badNodes list Inconsistent blockchain information When calculating the node score, first determine whether the node is in the Penalty state, if so, the score is counted as 0, otherwise, the node score is the sum of the scores of each dimension.","title":"Node Scoring Strategy"},{"location":"developers/code-structure/#handshake","text":"After the TCP connection is successfully established, the node that actively initiates the TCP connection request will send a handshake message P2P_HELLO to the neighbor node, in order to confirm whether the blockchain information between the nodes is consistent and whether it is necessary to initiate the block synchronization process. When the neighbor node receives P2P_HELLO , it will compare with the local information, such as checking whether the p2p version and the genesis block information are consistent. If all the check conditions are passed, it will reply to the P2P_HELLO message, and then perform the block synchronization or broadcast; otherwise, it will disconnect the connection.","title":"Handshake"},{"location":"developers/code-structure/#channel-keep-alive","text":"Channel keep-alive is accomplished through P2P_PING , P2P_PONG TCP messages. When a node establishes a TCP connection with a neighbor node and handshakes successfully, the node will open a thread pingTask for the connection and periodically send P2P_PING messages to maintain the TCP connection, which is scheduled every 10s. If the P2P_PONG message replied is not received within the timeout period, the connection will be terminated.","title":"Channel Keep-Alive"},{"location":"developers/code-structure/#block-synchronization","text":"After completing the handshake with the peer node, if the peer node's blockchain is longer than the local blockchain, the block synchronization process syncService.startSync will be triggered according to the longest chain principle. The message interaction during the synchronization process is as follows: Node A sends an SYNC_BLOCK_CHAIN message to peer node B to announce the blockchain summary information of the local chain. After the peer node B receives it, it calculates the list of missing blocks of node A, and sends the lost block ID list to node A through the BLOCK_CHAIN_INVENTORY message, carrying a maximum of 2000 block ids at a time. After node A receives the BLOCK_CHAIN_INVENTORY message, it gets the missing block id, and sends a FETCH_INV_DATA message to node B asynchronously to request the missing block, up to 100 blocks at a time. If there are still blocks that need to be synchronized (that is, the remain_num in the BLOCK_CHAIN_INVENTORY message is greater than 0), a new round of block synchronization process will be triggered. After node B receives the FETCH_INV_DATA message from node A, it sends the block to node A through the BLOCK message. After node A receives the BLOCK message, it asynchronously processes the block.","title":"Block Synchronization"},{"location":"developers/code-structure/#blockchain-summary-and-list-of-missing-blocks","text":"Below will take several different block synchronization scenarios as examples to illustrate the generation of the blockchain summary and the lost block ID list. Blockchain summary: an ordered list of block IDs, including the highest solidified block, the highest non-solidified block, and the blocks corresponding to the dichotomy. List of missing blocks: The neighbor node compares its own chain with the received blockchain summary, determines the missing blocks list of peers, and returns a set of consecutive block IDs and the number of remaining blocks.","title":"Blockchain Summary and List of Missing Blocks"},{"location":"developers/code-structure/#normal-synchronization-scene","text":"The height of the local header block is 1018, and the height of the solidified block is 1000. The two nodes have just established a connection, so the height of the common block is 0. The local blockchain summary of node A obtained by the dichotomy is 1000, 1010, 1015, 1017, and 1018. After node B receives the blockchain summary of node A, combined with the local chain, it can produce the list of blocks that node A lacks: 1018, 1019, 1020, and 1021. Then, node A requests to synchronize blocks 1019, 1020, and 1021 according to the list of missing blocks.","title":"Normal Synchronization Scene"},{"location":"developers/code-structure/#chain-switching-scene","text":"The head block height of the local main chain is 1018, and the height of the solidified block is 1000. The two nodes have just established a connection, so the height of the common block is 0. The local blockchain summary of node A obtained by the dichotomy is 1000, 1010, 1015, 1017, and 1018. After node B receives the chain summary of node A, it finds that the local main chain is not the same as the main chain of node A, compares the chain summary of node A and finds that the common block height is 1015, then it computes the list of blocks that node A lacks are 1015, 1016', 1017', 1018', and 1019'. Then, node A requests to synchronize blocks 1018' and 1019' according to the list of missing blocks. In another switching chain scenario, the height of the local main chain header block is 1018, the height of the solidified block is 1000, and the common block is 1017', which is located on the fork chain. The local blockchain summary of node A obtained by the dichotomy is 1000, 1009, 1014, 1016', and 1017'. After node B receives the chain summary of node A, combined with the local chain, it can produce the list of blocks that node A lacks 1017', 1018', and 1019'. Then, node A requests to synchronize blocks 1018', and 1019' according to the list of missing blocks.","title":"Chain-Switching Scene"},{"location":"developers/code-structure/#block-and-transaction-broadcast","text":"When the super representative node produces a new block, or the fullnode receives a new transaction initiated by the user, the transaction & block broadcasting process will be initiated. When a node receives a new block or new transaction, it will forward the corresponding block or transaction, and the forwarding process is the same as that of broadcasting. The message interaction is shown in the following figure: The types of messages involved include: INVENTORY - broadcast list: list of block or transaction ids FETCH_INV_DATA - the list data that the node needs to get: block or transaction id list BLOCK - block data TRXS - transaction data Node A sends the transaction or block to be broadcast to Node B via the INVENTORY list message. After node B receives the INVENTORY list message, it needs to check the status of the peer node, and if it can receive the message, it puts the blocks/transactions in the list into the \"to be fetched queue\" invToFetch . If it is a block list, it will also trigger the \"get block & transaction task\" immediately to send a FETCH_INV_DATA message to node A to get the block & transaction. After node A receives the FETCH_INV_DATA message, it will check whether an \"INVENTORY\" message has been sent to the peer. If it has been sent, it will send a transaction or block message to node B according to the list data. After node B receives the transaction or block message, it processes the message and triggers the forwarding process.","title":"Block and Transaction Broadcast"},{"location":"developers/code-structure/#summary_2","text":"This article introduces the implementation details related to the P2P network, the lowest level module of TRON, including node discovery, node connection, block synchronization, and the process of block and transaction broadcasting. I hope that reading this article can help developers to further understand and develop java-tron network-related modules.","title":"Summary"},{"location":"developers/contribution/","text":"How to contribute \u00b6 Getting Started as TRON Community Developers \u00b6 TRON is a global, open-source platform for decentralized applications. Thank you for considering to help out with the source code! We welcome contributions from anyone on the internet, and are grateful for even the smallest of fixes! GitHub is used to track issues and contribute code, suggestions, feature requests or documentation. If you'd like to contribute to TRON, please fork, fix, commit and send a pull request (PR) for the maintainers to review and merge into the main base. If you wish to submit more complex changes though, please check up with the core developers first on our channel to ensure those changes are in line with the general philosophy of the project and/or get some early feedback which can make both your efforts much lighter as well as our review and merge procedures quick and simple. Your PR will be reviewed according to the Code Review Guidelines. We encourage a PR early approach, meaning you create the PR the earliest even without the fix/feature. This will let core developers and other volunteers know you picked up an issue. These early PRs should indicate 'in progress' status. ** Developer Community ** java-tron gitter channel This channel is for TRON network issues. wallet-cli gitter channel This channel is for the client of TRON network issues. documentation gitter channel This channel is for TRON docunentation issues. tips gitter channel This channel is for TRON improment proposal issues. Check TRON Incentives Policy Submitting a TIP \u00b6 Please check Submitting a TIP Coding java-tron \u00b6 Please check Coding java-tron Reporting Vulnerabilities \u00b6 We think highly of all the security bugs in the TRON project seriously. Thank you for improving the security of TRON project. We really appreciate your efforts and responsible disclosure. We will make every effort to acknowledge your contributions. Report security bugs at https://hackerone.com/tronfoundation A developer from the core devs will follow up the issue. Firstly, we will confirm the bug and determine the affected versions. Secondly, we will try to find any potential similar bugs. Then we will do the fix and prepare for the release. After the initial reply to your report is sent, we will try to keep you informed on the progress towards the fix. The core devs may ask you for additional information or guidance. If you have suggestions on how this process could be improved, please submit a pull request. Writing Documentation \u00b6 There are two documentation repositories: documentation-en is the English version. documentation-zh is the Chinese version. We use MkDocs to build documentation project. Documentation source files are written in Markdown, and configured with a single YAML configuration file. You can edit or add a documentation file in /docs/ folder.","title":"How to contribute"},{"location":"developers/contribution/#how-to-contribute","text":"","title":"How to contribute"},{"location":"developers/contribution/#getting-started-as-tron-community-developers","text":"TRON is a global, open-source platform for decentralized applications. Thank you for considering to help out with the source code! We welcome contributions from anyone on the internet, and are grateful for even the smallest of fixes! GitHub is used to track issues and contribute code, suggestions, feature requests or documentation. If you'd like to contribute to TRON, please fork, fix, commit and send a pull request (PR) for the maintainers to review and merge into the main base. If you wish to submit more complex changes though, please check up with the core developers first on our channel to ensure those changes are in line with the general philosophy of the project and/or get some early feedback which can make both your efforts much lighter as well as our review and merge procedures quick and simple. Your PR will be reviewed according to the Code Review Guidelines. We encourage a PR early approach, meaning you create the PR the earliest even without the fix/feature. This will let core developers and other volunteers know you picked up an issue. These early PRs should indicate 'in progress' status. ** Developer Community ** java-tron gitter channel This channel is for TRON network issues. wallet-cli gitter channel This channel is for the client of TRON network issues. documentation gitter channel This channel is for TRON docunentation issues. tips gitter channel This channel is for TRON improment proposal issues. Check TRON Incentives Policy","title":"Getting Started as TRON Community Developers"},{"location":"developers/contribution/#submitting-a-tip","text":"Please check Submitting a TIP","title":"Submitting a TIP"},{"location":"developers/contribution/#coding-java-tron","text":"Please check Coding java-tron","title":"Coding java-tron"},{"location":"developers/contribution/#reporting-vulnerabilities","text":"We think highly of all the security bugs in the TRON project seriously. Thank you for improving the security of TRON project. We really appreciate your efforts and responsible disclosure. We will make every effort to acknowledge your contributions. Report security bugs at https://hackerone.com/tronfoundation A developer from the core devs will follow up the issue. Firstly, we will confirm the bug and determine the affected versions. Secondly, we will try to find any potential similar bugs. Then we will do the fix and prepare for the release. After the initial reply to your report is sent, we will try to keep you informed on the progress towards the fix. The core devs may ask you for additional information or guidance. If you have suggestions on how this process could be improved, please submit a pull request.","title":"Reporting Vulnerabilities"},{"location":"developers/contribution/#writing-documentation","text":"There are two documentation repositories: documentation-en is the English version. documentation-zh is the Chinese version. We use MkDocs to build documentation project. Documentation source files are written in Markdown, and configured with a single YAML configuration file. You can edit or add a documentation file in /docs/ folder.","title":"Writing Documentation"},{"location":"developers/demo/","text":"Development Example \u00b6 This article will take adding a new setPeer HTTP interface as an example to illustrate how to participate in the development of java-tron. Before developing, please configure the InteliJ IDE development environment . Sometimes java-tron nodes may not be able to connect to peers due to network reasons, if you can add trusted nodes while the node is running, this will allow the node to connect to the peer even if the node discovery function is not working. Fork java-tron Repository \u00b6 Fork a new repository from the https://github.com/tronprotocol/java-tron project to your personal repository, and then use the following command Clone the code locally: $ git clone https://github.com/yourname/java-tron.git $ git remote add upstream https://github.com/tronprotocol/java-tron.git Sync Repository \u00b6 Before developing new features, please synchronize your fork repository with the upstream repository. $ git fetch upstream $ git checkout develop $ git merge upstream/develop --no-ff Create New Branch \u00b6 Pull a new branch from the develop branch of your own repository for local development, please refer to branch naming convention . In this example, the name of the new branch is: feature/ add-new-http-demo . $ git checkout -b feature/add-new-http-demo develop Code Development \u00b6 Open the java-tron project in IDEA. Create a new servlet file in the java-tron/framework/src/main/java/org/tron/core/services/http directory to process HTTP requests: SetPeerServlet.java, the file should contain two functions doGet and doPost . doGet is used to handle http get requests and doPost is used to handle http post requests. If one of these types of requests is not supported, the method content can be empty. @Component @Slf4j ( topic = \"API\" ) public class SetPeerServlet extends HttpServlet { protected void doGet ( HttpServletRequest request , HttpServletResponse response ) {} protected void doPost ( HttpServletRequest request , HttpServletResponse response ) {} } In this example, the setPeer request should be sent by post, so you need to add processing logic in the doPost method, and the content of the doGet method keeps empty. The processing logic of the doPost method is: Get the incoming parameters Add peer information to the list of trusted nodes through the addPeer method Return the processing result of addPeer to the front-end user @Component @Slf4j ( topic = \"API\" ) public class SetPeerServlet extends HttpServlet { @Autowired private ChannelManager channelManager ; protected void doPost ( HttpServletRequest request , HttpServletResponse response ) { try { PostParams params = PostParams . getPostParams ( request ); JSONObject jsonObject = JSONObject . parseObject ( params . getParams ()); String peerIpPort = String . valueOf ( jsonObject . get ( \"peer\" )); boolean res = addPeer ( peerIpPort ); if ( res ) { response . getWriter (). println ( \"Success to set trusted peer:\" + peerIpPort ); } else { response . getWriter (). println ( \"Fail to set the trusted peer:\" + peerIpPort ); } } catch ( Exception e ) { logger . error ( \"Exception occurs when setting peer: {}\" , e . getMessage ()); try { response . getWriter (). println ( Util . printErrorMsg ( e )); } catch ( IOException ioe ) { logger . error ( \"IOException occurs when setting peer: {}\" , ioe . getMessage ()); } } } ...... } Put the processing logic of adding trust nodes in the addPeer method, which not only makes the code logic clearer, but also easier to test. The logic of the addPeer method is: Check the parameters the user entered to ensure that the node ip and port are not empty Construct node information through Node.instanceOf(peerIP) Make sure that the added trust node is not self Add the node to the trusted node list boolean addPeer ( String peerIP ) { try { if ( peerIP != \"\" ) { Node node = Node . instanceOf ( peerIP ); if ( ! ( CommonParameter . PARAMETER . nodeDiscoveryBindIp . equals ( node . getHost ()) || CommonParameter . PARAMETER . nodeExternalIp . equals ( node . getHost ()) || Constant . LOCAL_HOST . equals ( node . getHost ())) || CommonParameter . PARAMETER . nodeListenPort != node . getPort ()) { InetAddress address = new InetSocketAddress ( node . getHost (), node . getPort ()). getAddress (); channelManager . getTrustNodes (). put ( address , node ); return true ; } } } catch ( Exception e ) { logger . error ( \"addPeer error - {}\" , e . getMessage ()); } return false ; } } After completing the implementation of SetPeerServlet, you also need to register it in the node HTTP API service, FullNodeHttpApiService is the registration entry for the node HTTP API. Call the context.addServlet method in the start function of the FullNodeHttpApiService class to register the SetPeerServlet to the service. The name of the HTTP interface is defined as /wallet/setpeer . public class FullNodeHttpApiService implements Service { ...... @Autowired private SetPeerServlet setPeerServlet ; ....... @Override public void start () { ...... context . addServlet ( new ServletHolder ( setPeerServlet ), \"/wallet/setpeer\" ); ....... } } Then you can debug the above code, start the java-tron node in IDEA, and interact with the node through the below Curl command in the terminal: $ curl --location --request POST 'http://127.0.0.1:16667/wallet/setpeer' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"peer\":\"192.163.3.2:16667\" }' Return: Success to set trusted peer:192.163.3.2:16667 At this point, the code development is complete, and then you need to write unit tests for the changes. For simple changes, unit tests can be written after the development code is completed, but for larger changes, it is recommended to write unit tests at the same time as development. Write Unit Test \u00b6 The unit test of the java-tron project is based on the JUnit framework. For the usage of JUnit, please refer to JUnit official website . The following is a brief introduction to the java-tron unit test case specification and common annotations. java-tron Unit Test Cases Writing Specification \u00b6 When writing java-tron unit test cases, please follow the below guidelines: All test classes should be placed in the test directory, and the package of the test class should be consistent with the package structure of the tested code. Generally, use Test as the suffix of a class name The test method must be decorated with @Test and it must be public void type. Generally, test is used as the prefix of the method name Each test method in the test class must be independently testable, and there must be no dependencies between methods Common Annotations \u00b6 The following are descriptions of some commonly used annotations. For other annotations, please refer to JUnit official website documentation . @Test - transforms a normal method into a test method @Ignore - the decorated test method will be ignored by the test runner @BeforeClass - the method will be executed before all methods, static method (only executed once globally, and it is the first running one) @AfterClass - the method will be executed after all methods, static methods ( only executed once globally, and it will be the last running one) @Before - it will be executed once before each test method @After - it will be executed once after each test method The Composition Of The Unit Test Class \u00b6 A unit test class should contain the following three parts: @Before or @BeforeClass decorated function, used for initialization before test case execution @After or @BeforeClass decorated function, used to process data cleaning after the test case execution Test method decorated by @Test public class demoTest { @Before public void init () { // Initialization work before test case execution } @After public void destroy () { // Destroy work after test case execution } @Test public void testDemoMethod () { } } For this example in the article, a new file should be created in the framework/src/test/java/org/tron/core/services/http/ directory: SetPeerServletTest.java used to write test cases. public class SetPeerServletTest { private static TronApplicationContext context ; private static Application appT ; public static ChannelManager channelManager ; @Before public void init () { Args . setParam ( new String [] {}, Constant . TEST_CONF ); context = new TronApplicationContext ( DefaultConfig . class ); channelManager = context . getBean ( ChannelManager . class ); appT = ApplicationFactory . create ( context ); appT . initServices ( Args . getInstance ()); appT . startServices (); appT . startup (); } @After public void destroy () { Args . clearParam (); appT . shutdownServices (); appT . shutdown (); } @Test public void testAddPeer () { SetPeerServlet setPeerServlet = new SetPeerServlet (); Assert . assertFalse ( setPeerServlet . addPeer ( \"127.0.0.1\" )); } } Code Style Check \u00b6 Check the modified files one by one, and select Check Current File in the right-click menu. If there are code style problems, please modify them one by one according to the prompts. Fix the code style warning in the picture, and then check the file again until there is no warning. Commit Code \u00b6 Submit the code after development complete, please refer to the commit specification . git add . git commit -m 'add a new http api setpeer' Push the new branch to the personal remote repository: git push origin feature/add-new-http-demo Submit Pull Request \u00b6 Submit a pull request (PR) from your repository to tronprotocol/java-tron .","title":"Development Example"},{"location":"developers/demo/#development-example","text":"This article will take adding a new setPeer HTTP interface as an example to illustrate how to participate in the development of java-tron. Before developing, please configure the InteliJ IDE development environment . Sometimes java-tron nodes may not be able to connect to peers due to network reasons, if you can add trusted nodes while the node is running, this will allow the node to connect to the peer even if the node discovery function is not working.","title":"Development Example"},{"location":"developers/demo/#fork-java-tron-repository","text":"Fork a new repository from the https://github.com/tronprotocol/java-tron project to your personal repository, and then use the following command Clone the code locally: $ git clone https://github.com/yourname/java-tron.git $ git remote add upstream https://github.com/tronprotocol/java-tron.git","title":"Fork java-tron Repository"},{"location":"developers/demo/#sync-repository","text":"Before developing new features, please synchronize your fork repository with the upstream repository. $ git fetch upstream $ git checkout develop $ git merge upstream/develop --no-ff","title":"Sync Repository"},{"location":"developers/demo/#create-new-branch","text":"Pull a new branch from the develop branch of your own repository for local development, please refer to branch naming convention . In this example, the name of the new branch is: feature/ add-new-http-demo . $ git checkout -b feature/add-new-http-demo develop","title":"Create New Branch"},{"location":"developers/demo/#code-development","text":"Open the java-tron project in IDEA. Create a new servlet file in the java-tron/framework/src/main/java/org/tron/core/services/http directory to process HTTP requests: SetPeerServlet.java, the file should contain two functions doGet and doPost . doGet is used to handle http get requests and doPost is used to handle http post requests. If one of these types of requests is not supported, the method content can be empty. @Component @Slf4j ( topic = \"API\" ) public class SetPeerServlet extends HttpServlet { protected void doGet ( HttpServletRequest request , HttpServletResponse response ) {} protected void doPost ( HttpServletRequest request , HttpServletResponse response ) {} } In this example, the setPeer request should be sent by post, so you need to add processing logic in the doPost method, and the content of the doGet method keeps empty. The processing logic of the doPost method is: Get the incoming parameters Add peer information to the list of trusted nodes through the addPeer method Return the processing result of addPeer to the front-end user @Component @Slf4j ( topic = \"API\" ) public class SetPeerServlet extends HttpServlet { @Autowired private ChannelManager channelManager ; protected void doPost ( HttpServletRequest request , HttpServletResponse response ) { try { PostParams params = PostParams . getPostParams ( request ); JSONObject jsonObject = JSONObject . parseObject ( params . getParams ()); String peerIpPort = String . valueOf ( jsonObject . get ( \"peer\" )); boolean res = addPeer ( peerIpPort ); if ( res ) { response . getWriter (). println ( \"Success to set trusted peer:\" + peerIpPort ); } else { response . getWriter (). println ( \"Fail to set the trusted peer:\" + peerIpPort ); } } catch ( Exception e ) { logger . error ( \"Exception occurs when setting peer: {}\" , e . getMessage ()); try { response . getWriter (). println ( Util . printErrorMsg ( e )); } catch ( IOException ioe ) { logger . error ( \"IOException occurs when setting peer: {}\" , ioe . getMessage ()); } } } ...... } Put the processing logic of adding trust nodes in the addPeer method, which not only makes the code logic clearer, but also easier to test. The logic of the addPeer method is: Check the parameters the user entered to ensure that the node ip and port are not empty Construct node information through Node.instanceOf(peerIP) Make sure that the added trust node is not self Add the node to the trusted node list boolean addPeer ( String peerIP ) { try { if ( peerIP != \"\" ) { Node node = Node . instanceOf ( peerIP ); if ( ! ( CommonParameter . PARAMETER . nodeDiscoveryBindIp . equals ( node . getHost ()) || CommonParameter . PARAMETER . nodeExternalIp . equals ( node . getHost ()) || Constant . LOCAL_HOST . equals ( node . getHost ())) || CommonParameter . PARAMETER . nodeListenPort != node . getPort ()) { InetAddress address = new InetSocketAddress ( node . getHost (), node . getPort ()). getAddress (); channelManager . getTrustNodes (). put ( address , node ); return true ; } } } catch ( Exception e ) { logger . error ( \"addPeer error - {}\" , e . getMessage ()); } return false ; } } After completing the implementation of SetPeerServlet, you also need to register it in the node HTTP API service, FullNodeHttpApiService is the registration entry for the node HTTP API. Call the context.addServlet method in the start function of the FullNodeHttpApiService class to register the SetPeerServlet to the service. The name of the HTTP interface is defined as /wallet/setpeer . public class FullNodeHttpApiService implements Service { ...... @Autowired private SetPeerServlet setPeerServlet ; ....... @Override public void start () { ...... context . addServlet ( new ServletHolder ( setPeerServlet ), \"/wallet/setpeer\" ); ....... } } Then you can debug the above code, start the java-tron node in IDEA, and interact with the node through the below Curl command in the terminal: $ curl --location --request POST 'http://127.0.0.1:16667/wallet/setpeer' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"peer\":\"192.163.3.2:16667\" }' Return: Success to set trusted peer:192.163.3.2:16667 At this point, the code development is complete, and then you need to write unit tests for the changes. For simple changes, unit tests can be written after the development code is completed, but for larger changes, it is recommended to write unit tests at the same time as development.","title":"Code Development"},{"location":"developers/demo/#write-unit-test","text":"The unit test of the java-tron project is based on the JUnit framework. For the usage of JUnit, please refer to JUnit official website . The following is a brief introduction to the java-tron unit test case specification and common annotations.","title":"Write Unit Test"},{"location":"developers/demo/#java-tron-unit-test-cases-writing-specification","text":"When writing java-tron unit test cases, please follow the below guidelines: All test classes should be placed in the test directory, and the package of the test class should be consistent with the package structure of the tested code. Generally, use Test as the suffix of a class name The test method must be decorated with @Test and it must be public void type. Generally, test is used as the prefix of the method name Each test method in the test class must be independently testable, and there must be no dependencies between methods","title":"java-tron Unit Test Cases Writing Specification"},{"location":"developers/demo/#common-annotations","text":"The following are descriptions of some commonly used annotations. For other annotations, please refer to JUnit official website documentation . @Test - transforms a normal method into a test method @Ignore - the decorated test method will be ignored by the test runner @BeforeClass - the method will be executed before all methods, static method (only executed once globally, and it is the first running one) @AfterClass - the method will be executed after all methods, static methods ( only executed once globally, and it will be the last running one) @Before - it will be executed once before each test method @After - it will be executed once after each test method","title":"Common Annotations"},{"location":"developers/demo/#the-composition-of-the-unit-test-class","text":"A unit test class should contain the following three parts: @Before or @BeforeClass decorated function, used for initialization before test case execution @After or @BeforeClass decorated function, used to process data cleaning after the test case execution Test method decorated by @Test public class demoTest { @Before public void init () { // Initialization work before test case execution } @After public void destroy () { // Destroy work after test case execution } @Test public void testDemoMethod () { } } For this example in the article, a new file should be created in the framework/src/test/java/org/tron/core/services/http/ directory: SetPeerServletTest.java used to write test cases. public class SetPeerServletTest { private static TronApplicationContext context ; private static Application appT ; public static ChannelManager channelManager ; @Before public void init () { Args . setParam ( new String [] {}, Constant . TEST_CONF ); context = new TronApplicationContext ( DefaultConfig . class ); channelManager = context . getBean ( ChannelManager . class ); appT = ApplicationFactory . create ( context ); appT . initServices ( Args . getInstance ()); appT . startServices (); appT . startup (); } @After public void destroy () { Args . clearParam (); appT . shutdownServices (); appT . shutdown (); } @Test public void testAddPeer () { SetPeerServlet setPeerServlet = new SetPeerServlet (); Assert . assertFalse ( setPeerServlet . addPeer ( \"127.0.0.1\" )); } }","title":"The Composition Of The Unit Test Class"},{"location":"developers/demo/#code-style-check","text":"Check the modified files one by one, and select Check Current File in the right-click menu. If there are code style problems, please modify them one by one according to the prompts. Fix the code style warning in the picture, and then check the file again until there is no warning.","title":"Code Style Check"},{"location":"developers/demo/#commit-code","text":"Submit the code after development complete, please refer to the commit specification . git add . git commit -m 'add a new http api setpeer' Push the new branch to the personal remote repository: git push origin feature/add-new-http-demo","title":"Commit Code"},{"location":"developers/demo/#submit-pull-request","text":"Submit a pull request (PR) from your repository to tronprotocol/java-tron .","title":"Submit Pull Request"},{"location":"developers/deployment/","text":"Deployment \u00b6 Premise \u00b6 Create separate directories for fullnode and soliditynode NOTE: SolidityNode is deprecated. Now a FullNode supports all RPCs of a SolidityNode. New developers should deploy FullNode only. /deploy/fullnode /deploy/soliditynode Create two folders for fullnode and soliditynode. Clone the latest master branch of https://github.com/tronprotocol/java-tron and extract it to /deploy/java-tron Make sure you have the proper dependencies. JDK 1.8 (JDK 1.9+ is not supported yet) On Linux Ubuntu system (e.g. Ubuntu 16.04.4 LTS), ensure that the machine has Oracle JDK 8 , instead of having Open JDK 8 in the system. If you are building the source code by using Open JDK 8 , you will get Build Failed result. Open UDP ports for connection to the network MINIMUM 2 CPU Cores Deployment Guide \u00b6 1. Build the java-tron project cd /deploy/java-tron ./gradlew build 2. Copy the FullNode.jar and SolidityNode.jar along with configuration files into the respective directories download your needed configuration file from https://github.com/tronprotocol/TronDeployment. main_net_config.conf is the configuration for MainNet, and test_net_config.conf is the configuration for TestNet. please rename the configuration file to `config.conf` and use this config.conf to start FullNode and SolidityNode. cp build/libs/FullNode.jar ../fullnode cp build/libs/SolidityNode.jar ../soliditynode 3. You can now run your FullNode using the following command java -jar FullNode.jar -c config.conf // make sure that your config.conf is downloaded from https://github.com/tronprotocol/TronDeployment 4. Configure the SolidityNode configuration file You need to edit config.conf to connect to your local FullNode. Change trustNode in node to local 127.0.0.1:50051 , which is the default rpc port. Set listen.port to any number within the range of 1024-65535. Please don't use any ports between 0-1024 since you'll most likely hit conflicts with other system services. Also change rpc port to 50052 or something to avoid conflicts. Please forward the UDP port 18888 for FullNode. rpc { port = 50052 } 5. You can now run your SolidityNode using the following command\uff1a java -jar SolidityNode.jar -c config.conf //make sure that your config.conf is downloaded from https://github.com/tronprotocol/TronDeployment 6. Running a Super Representative Node for mainnet java -jar FullNode.jar -p your private key --witness -c your config.conf(Example\uff1a/data/java-tron/config.conf) Example: java -jar FullNode.jar -p 650950B193DDDDB35B6E48912DD28F7AB0E7140C1BFDEFD493348F02295BD812 --witness -c /data/java-tron/config.conf This is similar to running a private testnet, except that the IPs in the config.conf are officially declared by TRON. 7. Running a Super Representative Node for private testnet You should modify the config.conf: Replace existing entry in genesis.block.witnesses with your address Replace existing entry in seed.node ip.list with your ip list The first Super Node start, needSyncCheck should be set false Set p2pversion to 61 cd build/libs java -jar FullNode.jar -p your private key --witness -c your config.conf (Example\uff1a/data/java-tron/config.conf) Example: java -jar FullNode.jar -p 650950B193DDDDB35B6E48912DD28F7AB0E7140C1BFDEFD493348F02295BD812 --witness -c /data/java-tron/config.conf Logging and Network Connection Verification \u00b6 Logs for both nodes are located in /deploy/\\*/logs/tron.log . Use tail -f /logs/tron.log/ to follow along with the block syncing. You should see something similar to this in your logs for block synchronization: FullNode 12:00:57.658 INFO [pool-7-thread-1] [o.t.c.n.n.NodeImpl](NodeImpl.java:830) Success handle block Num:236610,ID:0000000000039c427569efa27cc2493c1fff243cc1515aa6665c617c45d2e1bf SolidityNode 12:00:40.691 INFO [pool-17-thread-1] [o.t.p.SolidityNode](SolidityNode.java:88) sync solidity block, lastSolidityBlockNum:209671, remoteLastSolidityBlockNum:211823 Stop Node Gracefully \u00b6 Create file stop.sh\uff0cuse kill -15 to close FullNode.jar(or SolidityNode.jar). You need to modify pid= ps -ef |grep FullNode.jar |grep -v grep |awk '{print $2}' to find the correct pid. #!/bin/bash while true; do pid=`ps -ef |grep FullNode.jar |grep -v grep |awk '{print $2}'` if [ -n \"$pid\" ]; then kill -15 $pid echo \"The java-tron process is exiting, it may take some time, forcing the exit may cause damage to the database, please wait patiently...\" sleep 1 else echo \"java-tron killed successfully!\" break fi done FullNode and SolidityNode Fast Deployment \u00b6 Download fast deployment script, run the script according to different types of node. Scope of use This script could be used on Linux/MacOS, but not on Windows. Just Support FullNode and SolidityNode. Download and run script wget https://raw.githubusercontent.com/tronprotocol/TronDeployment/master/deploy_tron.sh -O deploy_tron.sh Parameter Illustration bash deploy_tron.sh --app [ FullNode | SolidityNode ] --net [ mainnet | testnet | privatenet ] --db [ keep | remove | backup ] --heap-size <heapsize> --app Optional, Running application. The default node is Fullnode and it could be FullNode or SolidityNode. --net Optional, Connecting network. The default network is mainnet and it could be mainnet, testnet. --db Optional, The way of data processing could be keep, remove and backup. Default is keep. If you launch two different networks, like from mainnet to testnet or from testnet to mainnet, you need to delete database. --trust-node Optional, It only works when deploying SolidityNode. Default is 127 .0.0.1:50051. The specified gRPC service of Fullnode, like 127 .0.0.1:50051 or 13 .125.249.129:50051. --rpc-port Optional, Port of grpc. Default is 50051 . If you deploy SolidityNode and FullNode on the same host\uff0cyou need to configure different ports. --commit Optional, commitid of project. --branch Optional, branch of project. Mainnet default is latest release and Testnet default is master. --heap-size Optional, jvm option: Xmx. The default heap-size is 0 .8 * memory size. --work_space Optional, default is current directory. Deployment of FullNode on the one host wget https://raw.githubusercontent.com/tronprotocol/TronDeployment/master/deploy_tron.sh -O deploy_tron.sh bash deploy_tron.sh Deployment of SolidityNode on the one host wget https://raw.githubusercontent.com/tronprotocol/TronDeployment/master/deploy_tron.sh -O deploy_tron.sh # User can self-configure the IP and Port of GRPC service in the trust-node field of SolidityNode. trust-node is the fullnode you just deploy. bash deploy_tron.sh --app SolidityNode --trust-node <grpc-ip:grpc-port> Deployment of FullNode and SolidityNode on the same host # You need to configure different gRPC ports on the same host because gRPC port is available on SolidityNode and FullNodeConfigure and it cannot be set as default value 50051. In this case the default value of rpc port is set as 50041. wget https://raw.githubusercontent.com/tronprotocol/TronDeployment/master/deploy_tron.sh -O deploy_tron.sh bash deploy_tron.sh --app FullNode bash deploy_tron.sh --app SolidityNode --rpc-port 50041 Grpc Gateway Deployment \u00b6 Summary This script helps you download the code from https://github.com/tronprotocol/grpc-gateway and deploy the code on your environment. Pre-requests Please follow the guide on https://github.com/tronprotocol/grpc-gateway Install Golang, Protoc, and set $GOPATH environment variable according to your requirement. Download and run script wget https://raw.githubusercontent.com/tronprotocol/TronDeployment/master/deploy_grpc_gateway.sh -O deploy_grpc_gateway.sh Parameter Illustration bash deploy_grpc_gateway.sh --rpchost [ rpc host ip ] --rpcport [ rpc port number ] --httpport [ http port number ] --rpchost The fullnode or soliditynode IP where the grpc service is provided. Default value is \"localhost\" . --rpcport The fullnode or soliditynode port number grpc service is consuming. Default value is 50051 . --httpport The port intends to provide http service provided by grpc gateway. Default value is 18890 . Example Use default configuration\uff1a bash deploy_grpc_gateway.sh Use customized configuration\uff1a bash deploy_grpc_gateway.sh --rpchost 127 .0.0.1 --rpcport 50052 --httpport 18891 Event Subscribe plugin Deployment \u00b6 This is an implementation of TRON eventsubscribe model. api module defines IPluginEventListener, a protocol between java-tron and event plugin. app module is an example for loading plugin, developers could use it for debugging. kafkaplugin module is the implementation for kafka, it implements IPluginEventListener, it receives events subscribed from java-tron and relay events to kafka server. mongodbplugin mongodbplugin module is the implementation for mongodb. Setup/Build Clone the repo git clone https://github.com/tronprotocol/event-plugin.git Go to eventplugin cd event-plugin run ./gradlew build This will produce one plugin zip, named plugin-kafka-1.0.0.zip , located in the event-plugin/build/plugins/ directory. Edit **config.conf** of java-tron\uff0c add the following fields: event.subscribe = { path = \"\" // absolute path of plugin server = \"\" // target server address to receive event triggers dbconfig=\"\" // dbname|username|password topics = [ { triggerName = \"block\" // block trigger, the value can't be modified enable = false topic = \"block\" // plugin topic, the value could be modified }, { triggerName = \"transaction\" enable = false topic = \"transaction\" }, { triggerName = \"contractevent\" enable = true topic = \"contractevent\" }, { triggerName = \"contractlog\" enable = true topic = \"contractlog\" } ] filter = { fromblock = \"\" // the value could be \"\", \"earliest\" or a specified block number as the beginning of the queried range toblock = \"\" // the value could be \"\", \"latest\" or a specified block number as end of the queried range contractAddress = [ \"\" // contract address you want to subscribe, if it's set to \"\", you will receive contract logs/events with any contract address. ] contractTopic = [ \"\" // contract topic you want to subscribe, if it's set to \"\", you will receive contract logs/events with any contract topic. ] } } * path : is the absolute path of \"plugin-kafka-1.0.0.zip\" * server : Kafka server address * topics : each event type maps to one Kafka topic, we support four event types subscribing, block, transaction, contractlog and contractevent. * dbconfig : db configuration information for mongodb, if using kafka, delete this one; if using Mongodb, add like that dbname|username|password * triggerName : the trigger type, the value can't be modified. * enable : plugin can receive nothing if the value is false. * topic : the value is the kafka topic to receive events. Make sure it has been created and Kafka process is running * filter : filter condition for process trigger. note : if the server is not 127.0.0.1, pls set some properties in config/server.properties file remove comment and set listeners=PLAINTEXT://:9092 remove comment and set advertised.listeners to PLAINTEXT://host_ip:9092 Install Kafka On Mac : brew install kafka On Linux : cd /usr/local wget http://archive.apache.org/dist/kafka/0.10.2.2/kafka_2.10-0.10.2.2.tgz tar -xzvf kafka_2.10-0.10.2.2.tgz mv kafka_2.10-0.10.2.2 kafka add \"export PATH=$PATH:/usr/local/kafka/bin\" to end of /etc/profile source /etc/profile kafka-server-start.sh /usr/local/kafka/config/server.properties & Note : make sure the version of Kafka is the same as the version set in build.gradle of eventplugin project.(kafka_2.10-0.10.2.2 kafka) Run Kafka On Mac : zookeeper-server-start /usr/local/etc/kafka/zookeeper.properties & kafka-server-start /usr/local/etc/kafka/server.properties On Linux : zookeeper-server-start.sh /usr/local/kafka/config/zookeeper.properties & Sleep about 3 seconds kafka-server-start.sh /usr/local/kafka/config/server.properties & Create topics to receive events, the topic is defined in config.conf On Mac : kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic block kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic transaction kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic contractlog kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic contractevent On Linux : kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic block kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic transaction kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic contractlog kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic contractevent Kafka consumer On Mac : kafka-console-consumer --bootstrap-server localhost:9092 --topic block kafka-console-consumer --bootstrap-server localhost:9092 --topic transaction kafka-console-consumer --bootstrap-server localhost:9092 --topic contractlog kafka-console-consumer --bootstrap-server localhost:9092 --topic contractevent On Linux : kafka-console-consumer.sh --zookeeper localhost:2181 --topic block kafka-console-consumer.sh --zookeeper localhost:2181 --topic transaction kafka-console-consumer.sh --zookeeper localhost:2181 --topic contractlog kafka-console-consumer.sh --zookeeper localhost:2181 --topic contractevent Load plugin in java-tron add --es to command line, for example: java -jar FullNode.jar -p privatekey -c config.conf --es Event filter which is defined in config.conf, path: event.subscribe filter = { fromblock = \"\" // the value could be \"\", \"earliest\" or a specified block number as the beginning of the queried range toblock = \"\" // the value could be \"\", \"latest\" or a specified block number as end of the queried range contractAddress = [ \"TVkNuE1BYxECWq85d8UR9zsv6WppBns9iH\" // contract address you want to subscribe, if it's set to \"\", you will receive contract logs/events with any contract address. ] contractTopic = [ \"f0f1e23ddce8a520eaa7502e02fa767cb24152e9a86a4bf02529637c4e57504b\" // contract topic you want to subscribe, if it's set to \"\", you will receive contract logs/events with any contract topic. ] } Download and install MongoDB ** Suggested Configuration ** CPU/ RAM: 16Core / 32G DISK: 500G System: CentOS 64 The version of MongoDB is 4.0.4 , below is the command: cd /home/java-tron curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.4.tgz tar zxvf mongodb-linux-x86_64-4.0.4.tgz mv mongodb-linux-x86_64-4.0.4 mongodb ** Set environment ** - export MONGOPATH=/home/java-tron/mongodb/ - export PATH= PATH: PATH: MONGOPATH/bin ** Create mongodb config ** The path is : /etc/mongodb/mgdb.conf cd /etc/mongodb touch mgdb.conf Create data&log folder for mongodb Create data, log subfolder in mongodb directory, and add their absolute path to mgdb.conf ** Example: ** dbpath=/home/java-tron/mongodb/data logpath=/home/java-tron/mongodb/log/mongodb.log port=27017 logappend=true fork=true bind_ip=0.0.0.0 auth=true wiredTigerCacheSizeGB=2 ** Note: ** - bind_ip must be configured to 0.0.0.0\uff0cotherwise remote connection will be refused. - wiredTigerCacheSizeGB, must be configured to prevent OOM ** Launch MongoDB ** - mongod --config /etc/mongodb/mgdb.conf ** Create admin account: ** - mongo - use admin - db.createUser({user:\"root\",pwd:\"admin\",roles:[{role:\"root\",db:\"admin\"}]}) ** Create eventlog and its owner account ** db.auth(\"root\", \"admin\") use eventlog db.createUser({user:\"tron\",pwd:\"123456\",roles:[{role:\"dbOwner\",db:\"eventlog\"}]}) database: eventlog, username:tron, password: 123456 ** Firewall rule: ** - iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 27017 -j ACCEPT ** Remote connection via mongo: ** mongo 47.90.245.68:27017 use eventlog db.auth(\"tron\", \"123456\") show collections db.block.find() ** Query block trigger data: ** db.block.find({blockNumber: {$lt: 1000}}); // return records whose blockNumber less than1000 ** Set database index to speedup query: ** cd /{projectPath} sh insertIndex.sh Event query service deployment \u00b6 Download sourcecode Download sourcecode git clone https://github.com/tronprotocol/tron-eventquery.git cd troneventquery Build mvn package After the build command is executed successfully, troneventquery jar to release will be generated under troneventquery/target directory. Configuration of mongodb \"config.conf\" should be created for storing mongodb configuration, such as database name, username, password, and so on. We provided an example in sourcecode, which is \" troneventquery/config.conf \". Replace with your specified configuration if needed. Note : Make sure the relative path of config.conf and troneventquery jar. The config.conf 's path is the parent of troneventquery jar. mongo.host=IP mongo.port=27017 mongo.dbname=eventlog mongo.username=tron mongo.password=123456 mongo.connectionsPerHost=8 mongo.threadsAllowedToBlockForConnectionMultiplier=4 Any configuration could be modified except mongo.dbname , \" eventlog \" is the specified database name for event subscribe. Run troneventquery/deploy.sh is used to deploy troneventquery troneventquery/insertIndex.sh is used to setup mongodb index to speedup query. Advanced Configurations \u00b6 Read the Advanced Configuration","title":"Deployment"},{"location":"developers/deployment/#deployment","text":"","title":"Deployment"},{"location":"developers/deployment/#premise","text":"Create separate directories for fullnode and soliditynode NOTE: SolidityNode is deprecated. Now a FullNode supports all RPCs of a SolidityNode. New developers should deploy FullNode only. /deploy/fullnode /deploy/soliditynode Create two folders for fullnode and soliditynode. Clone the latest master branch of https://github.com/tronprotocol/java-tron and extract it to /deploy/java-tron Make sure you have the proper dependencies. JDK 1.8 (JDK 1.9+ is not supported yet) On Linux Ubuntu system (e.g. Ubuntu 16.04.4 LTS), ensure that the machine has Oracle JDK 8 , instead of having Open JDK 8 in the system. If you are building the source code by using Open JDK 8 , you will get Build Failed result. Open UDP ports for connection to the network MINIMUM 2 CPU Cores","title":"Premise"},{"location":"developers/deployment/#deployment-guide","text":"1. Build the java-tron project cd /deploy/java-tron ./gradlew build 2. Copy the FullNode.jar and SolidityNode.jar along with configuration files into the respective directories download your needed configuration file from https://github.com/tronprotocol/TronDeployment. main_net_config.conf is the configuration for MainNet, and test_net_config.conf is the configuration for TestNet. please rename the configuration file to `config.conf` and use this config.conf to start FullNode and SolidityNode. cp build/libs/FullNode.jar ../fullnode cp build/libs/SolidityNode.jar ../soliditynode 3. You can now run your FullNode using the following command java -jar FullNode.jar -c config.conf // make sure that your config.conf is downloaded from https://github.com/tronprotocol/TronDeployment 4. Configure the SolidityNode configuration file You need to edit config.conf to connect to your local FullNode. Change trustNode in node to local 127.0.0.1:50051 , which is the default rpc port. Set listen.port to any number within the range of 1024-65535. Please don't use any ports between 0-1024 since you'll most likely hit conflicts with other system services. Also change rpc port to 50052 or something to avoid conflicts. Please forward the UDP port 18888 for FullNode. rpc { port = 50052 } 5. You can now run your SolidityNode using the following command\uff1a java -jar SolidityNode.jar -c config.conf //make sure that your config.conf is downloaded from https://github.com/tronprotocol/TronDeployment 6. Running a Super Representative Node for mainnet java -jar FullNode.jar -p your private key --witness -c your config.conf(Example\uff1a/data/java-tron/config.conf) Example: java -jar FullNode.jar -p 650950B193DDDDB35B6E48912DD28F7AB0E7140C1BFDEFD493348F02295BD812 --witness -c /data/java-tron/config.conf This is similar to running a private testnet, except that the IPs in the config.conf are officially declared by TRON. 7. Running a Super Representative Node for private testnet You should modify the config.conf: Replace existing entry in genesis.block.witnesses with your address Replace existing entry in seed.node ip.list with your ip list The first Super Node start, needSyncCheck should be set false Set p2pversion to 61 cd build/libs java -jar FullNode.jar -p your private key --witness -c your config.conf (Example\uff1a/data/java-tron/config.conf) Example: java -jar FullNode.jar -p 650950B193DDDDB35B6E48912DD28F7AB0E7140C1BFDEFD493348F02295BD812 --witness -c /data/java-tron/config.conf","title":"Deployment Guide"},{"location":"developers/deployment/#logging-and-network-connection-verification","text":"Logs for both nodes are located in /deploy/\\*/logs/tron.log . Use tail -f /logs/tron.log/ to follow along with the block syncing. You should see something similar to this in your logs for block synchronization: FullNode 12:00:57.658 INFO [pool-7-thread-1] [o.t.c.n.n.NodeImpl](NodeImpl.java:830) Success handle block Num:236610,ID:0000000000039c427569efa27cc2493c1fff243cc1515aa6665c617c45d2e1bf SolidityNode 12:00:40.691 INFO [pool-17-thread-1] [o.t.p.SolidityNode](SolidityNode.java:88) sync solidity block, lastSolidityBlockNum:209671, remoteLastSolidityBlockNum:211823","title":"Logging and Network Connection Verification"},{"location":"developers/deployment/#stop-node-gracefully","text":"Create file stop.sh\uff0cuse kill -15 to close FullNode.jar(or SolidityNode.jar). You need to modify pid= ps -ef |grep FullNode.jar |grep -v grep |awk '{print $2}' to find the correct pid. #!/bin/bash while true; do pid=`ps -ef |grep FullNode.jar |grep -v grep |awk '{print $2}'` if [ -n \"$pid\" ]; then kill -15 $pid echo \"The java-tron process is exiting, it may take some time, forcing the exit may cause damage to the database, please wait patiently...\" sleep 1 else echo \"java-tron killed successfully!\" break fi done","title":"Stop Node Gracefully"},{"location":"developers/deployment/#fullnode-and-soliditynode-fast-deployment","text":"Download fast deployment script, run the script according to different types of node.","title":"FullNode and SolidityNode Fast Deployment"},{"location":"developers/deployment/#grpc-gateway-deployment","text":"","title":"Grpc Gateway Deployment"},{"location":"developers/deployment/#event-subscribe-plugin-deployment","text":"This is an implementation of TRON eventsubscribe model. api module defines IPluginEventListener, a protocol between java-tron and event plugin. app module is an example for loading plugin, developers could use it for debugging. kafkaplugin module is the implementation for kafka, it implements IPluginEventListener, it receives events subscribed from java-tron and relay events to kafka server. mongodbplugin mongodbplugin module is the implementation for mongodb.","title":"Event Subscribe plugin Deployment"},{"location":"developers/deployment/#event-query-service-deployment","text":"","title":"Event query service deployment"},{"location":"developers/deployment/#advanced-configurations","text":"Read the Advanced Configuration","title":"Advanced Configurations"},{"location":"developers/governance/","text":"Governance \u00b6 The governance of the TRON network is accomplished by modifying the network parameters . The modification of network parameters is also called a network upgrade. Anyone can propose a discussion on modifying one or several network parameters, however, only super representatives or super representative partners can submit voting requests on-chain. Before the voting deadline, 27 super representatives can vote on the proposal. After the voting deadline arrives and the number of votes meets the requirement, the proposal will take effect. You can view the list of the past completed proposals here . Please according to the following process to propose a voting request: Initiate a discussion on proposal Community discussion Initiate a voting request Voting and taking effective Initiate a discussion on a proposal \u00b6 Any TRON network participant can initiate a discussion on a proposal. Please create a proposal discussion issue in TIP repository . The Issue is used to introduce the proposal in detail, including the motivation of this proposal, the TRON network parameters to be modified and their values, technical specifications, and the impact of the modification, etc. for a new proposal, please refer to this example to create an issue for discussion. Below are the specifications of how to write an issue for proposal discussion. Title \u00b6 We hope that all users of the TRON ecosystem can participate in network governance. In order to be able to better publicize in the community, it is recommended to name the proposal and put the name at the beginning of the title. Here is an example: Palma Upgrade: proposal to change the unit price of energy to 210 sun Body \u00b6 In the issue body, the content of the proposal should be introduced in detail, including motivation, estimated time to initiate the proposal vote and effective time of the proposal, how to initiate a proposal vote, technical specifications or background information of the proposal, etc. # Simple Summary Briefly introduce the parameters to be modified by this proposal and their values, and summarize the issue it wants to solve # Motivation Describe the motivation for the proposal, what is the problem encountered now, that is, why one or some dynamic parameters need to be modified. # Timeline Indicate when to initiate the proposal voting request, and the estimated effective date of the proposal. After the issue is proposed, two weeks are generally reserved for community discussion. Therefore, the proposal initiation time set in the Issue should be two weeks after the issue is proposed. # How to Initialize the Voting Request Indicates the command to initiate the proposal voting request. # Technical Specification / Background The specific technical specifications or background information of the proposal Community discussion \u00b6 After the proposal issue is initiated, the initiator of the issue should try his best to promote it in the community, attract community users to participate in the discussion on the proposal, and update the proposal according to the results of the discussion. Initiate a voting request \u00b6 Generally, the initiation time of the voting request set in the proposal is two weeks after the proposed issue is initiated. When the community has already fully discussed on the proposal and formed a community consensus, the super representative or super representative partner will initiate a voting request on the chain. Vote and take effect \u00b6 The validity period of the voting request initiated on-chain is 3 days. During the validity period, all 27 super representatives can vote for the proposal. When the voting deadline is reached, if the number of votes obtained is equal to or greater than 18 votes, the proposal will take effect.","title":"Governance Workflow"},{"location":"developers/governance/#governance","text":"The governance of the TRON network is accomplished by modifying the network parameters . The modification of network parameters is also called a network upgrade. Anyone can propose a discussion on modifying one or several network parameters, however, only super representatives or super representative partners can submit voting requests on-chain. Before the voting deadline, 27 super representatives can vote on the proposal. After the voting deadline arrives and the number of votes meets the requirement, the proposal will take effect. You can view the list of the past completed proposals here . Please according to the following process to propose a voting request: Initiate a discussion on proposal Community discussion Initiate a voting request Voting and taking effective","title":"Governance"},{"location":"developers/governance/#initiate-a-discussion-on-a-proposal","text":"Any TRON network participant can initiate a discussion on a proposal. Please create a proposal discussion issue in TIP repository . The Issue is used to introduce the proposal in detail, including the motivation of this proposal, the TRON network parameters to be modified and their values, technical specifications, and the impact of the modification, etc. for a new proposal, please refer to this example to create an issue for discussion. Below are the specifications of how to write an issue for proposal discussion.","title":"Initiate a discussion on a proposal"},{"location":"developers/governance/#title","text":"We hope that all users of the TRON ecosystem can participate in network governance. In order to be able to better publicize in the community, it is recommended to name the proposal and put the name at the beginning of the title. Here is an example: Palma Upgrade: proposal to change the unit price of energy to 210 sun","title":"Title"},{"location":"developers/governance/#body","text":"In the issue body, the content of the proposal should be introduced in detail, including motivation, estimated time to initiate the proposal vote and effective time of the proposal, how to initiate a proposal vote, technical specifications or background information of the proposal, etc. # Simple Summary Briefly introduce the parameters to be modified by this proposal and their values, and summarize the issue it wants to solve # Motivation Describe the motivation for the proposal, what is the problem encountered now, that is, why one or some dynamic parameters need to be modified. # Timeline Indicate when to initiate the proposal voting request, and the estimated effective date of the proposal. After the issue is proposed, two weeks are generally reserved for community discussion. Therefore, the proposal initiation time set in the Issue should be two weeks after the issue is proposed. # How to Initialize the Voting Request Indicates the command to initiate the proposal voting request. # Technical Specification / Background The specific technical specifications or background information of the proposal","title":"Body"},{"location":"developers/governance/#community-discussion","text":"After the proposal issue is initiated, the initiator of the issue should try his best to promote it in the community, attract community users to participate in the discussion on the proposal, and update the proposal according to the results of the discussion.","title":"Community discussion"},{"location":"developers/governance/#initiate-a-voting-request","text":"Generally, the initiation time of the voting request set in the proposal is two weeks after the proposed issue is initiated. When the community has already fully discussed on the proposal and formed a community consensus, the super representative or super representative partner will initiate a voting request on the chain.","title":"Initiate a voting request"},{"location":"developers/governance/#vote-and-take-effect","text":"The validity period of the voting request initiated on-chain is 3 days. During the validity period, all 27 super representatives can vote for the proposal. When the voting deadline is reached, if the number of votes obtained is equal to or greater than 18 votes, the proposal will take effect.","title":"Vote and take effect"},{"location":"developers/gpg/","text":"This file contains the PGP keys of official support. Users: pgp < KEYS or gpg --import KEYS or gpg --keyserver hkp://keys.gnupg.net --search-keys support@tron.network pub rsa3072 2020-10-20 [SC] fingerprint = C07A AC17 C98D 205F 0CE3 0BF9 7F0A F58B 65C7 EEF4 uid Tron-Support support@tron.network sub rsa3072 2020-10-20 [E] -----BEGIN PGP PUBLIC KEY BLOCK----- mQGNBF+O4sMBDADTV2ymtGL+iZOAqc+U+jG8SLJRZlrw3k0Yc9aPeMvVvikAC7Sl j+3vTU5JjCYWPmcRqkHo1RyNImZg2GoikMB+y4/kAu/IHYyIbKlXQiC/XDPQ0Gpk 0mq74Df/24DFXBjYm9lpvisavaaVnQOxxwvLdVxBMdKZoZALcmy3dSBHVuqOfqrV znD5zE6fSpGonCiCZSx34VRCe5rNTBj0DnTjmBo3WzroxkjMqVeXpt8hWmfwUPGb EjvkopzGk+RtHfZvJrLrDsd3XF0M1iDzHSpBpVTs2kIoEMN2wK6YbMdYJk6mQDs4 3IH1uEiwNNd+npUDSPX2mUuPDmcZgO2msiXC/SuSSxZ3tEWQQ/g9Uzf5gv494em5 DNGmoS5EUDnWjv1CtmHsBclxmb1VS72CsxQobnUcQ4LosKJ1eCK6cgOCTbPAtwGf VitXUZRubwfUmPKEQOaoUoYtdOR50V0aSHfDFnNO3yhyZESUZBtNK9J7JdBTaGdo Z/TXxUbpNF5ZHrcAEQEAAbQjVHJvbi1TdXBwb3J0IDxzdXBwb3J0QHRyb24ubmV0 d29yaz6JAc4EEwEIADgWIQTAeqwXyY0gXwzjC/l/CvWLZcfu9AUCX47iwwIbAwUL CQgHAgYVCgkICwIEFgIDAQIeAQIXgAAKCRB/CvWLZcfu9GtCDACRsKze6Bk9TJik bz5IkdUfCBY9I8wCgcjqqO1knC47vwAwSt9GckEMu9LYTrrTzbedgBH0PF3FHFxy DpnQf9UgQ1AGOLm8H2ZN0W7ZF9wHtDJKjvV4GKIOmIi9tJ57LqqLAaPGbO01DAx4 0PoEM4257fbKGYnAUUgKZxRJBAMhE8DdlsnQ1qqPeVVxmBFYD8zEjvW0ROfV59FI OfReFJoCvJoX9LpMGLi1HwichJkcItXwtNAdFbNLJSYc8ZatcmDkkHTwRn2wRHBc aJOFGjZma2xjkCXB+4QFwjI2ng9Y2HpufwquP0ptUepq7kf1WeFdzChXlIOx+35y pK67EQxr/ExpIl8Sti2Oe4pPzhOoRVs05y+9ghVQ9rN7/16y7/w3GAZelrvEucM8 KYPBPIBILu7atuXHDhgeCDfbUIR3npAkFZJpW702BUg8jP/opwGlPvB7+A3+7r0e zLlwVyfKXTq1SbeaMgUyQ44vJpXBTiz2cqQZ5LC/OJuumw6NgBW5AY0EX47iwwEM AJjdQnztPlnTydbRf/XgAbNX5dFDE2+T86LW03ke/oHMFWTg3iWoQs/dAh3ucPw7 imU05mJr4+FrVFmU1NULLfG5T7dEPzPkZYN/pKa7EwBV2alLN6tab7gpS3ABYtnq GFZSOAGa9dwwhpAmItSG+2nBL76+7fdGmxzUsoGtjbM/m2nrMtuj/04y/aGD6xC8 6Ncup+syJtjhN2i+98PqNwhlAd9wYrzed8fzUH/84tXAIdKLZS7wdQA6fWyj78nW I9wMlS5h/QDBsDXDd9/Bv4FgUfIFgLR+K6M6gx6Hl4AyWN1JvWIlvuqPLqcEv3b5 bZlOCRB5NsuEzLBdEaydN8oEcL9G578o0sAp6qbdza/Mtbq+n1y9FSItuYJxHtZC RpeICwKgOS48YeLRjvBYhogTT2GqPaoT/a6iMKT4c+MgbvgD487SjagYlf0CJ6PD ENnjIZfERXgwAFq528CWJjYwF9acjEGQkcJzH5+R3Ev5d/YdlQLFtdUirB4rc/5T JQARAQABiQG2BBgBCAAgFiEEwHqsF8mNIF8M4wv5fwr1i2XH7vQFAl+O4sMCGwwA CgkQfwr1i2XH7vSfaQv/f8kcLDn+wCN7egSqt4XXKOpDLyKIB/cczGfRWQG4pZns 3rFjnvqKnYMTkm6vnf0JW8jUgW5V2PxNxVOKC0/KhbYX3QikUqO1wcjr7a4JsOtH PNZd8SXCRvLLifyw6QkK5FnFNLBA8oV5bej73gpEaSqF0kXZI9UP9dfvCp0R22Zw 48TxEbhj9i8x6pWZ4hckbojGVYqeo3LdTVMA75FXVfFzVoRJgvow0lEXqTKTPASU PuWejMXfqdN1Vu20IJvCgij7l0RTwK7ushX6a6mX5QAGIb4Qa3UkHGtEgwOJ/QVF WzjNwu0praNGHqIqirxpBT6ze/Oz47IsSGY727+4Edanz73upPwkt54Rb6wimxKf MTSixi+cpzJgsVBiJY4VRIuGSq3ITXZjaEoM7Zu6+0KIb19r6PcuP+wMZJPkup0/ 8nrS3HspazsZUq5kz3fFy2MkXv7dXduQN3iqKEtmedcCDCnglnzi0O/Ryl2niqWw iCwhvZAEFCYiEkUJdk+A =G5T7 -----END PGP PUBLIC KEY BLOCK-----","title":"Gpg"},{"location":"developers/incentives/","text":"Community Developers Incentives Programme \u00b6 Bonus point applies in TRON incentives programme. Developers can earn points by contributing to TRON. When a issue (or PR) is closed, it will be added into the reward programme. The core devs will discuss and comment the issue (or PR), the points of a issue (or PR) received will be added in the comment to track. You can find your points ranking at Tronscan . Reward 1: At the end of every month, we will calculate all points each developer gets in the current month and who finish in Top 5 will be rewarded with cash. At the end of every year, we will calculate all points each developer gets in the current year and who finish in Top 5 will be rewarded with cash. The Top 5 developers who win the cash reward will be announced at Tronscan. Also, there is a chance to display developers' photos at TRON official website. No. 1 No. 2 No. 3 No. 4 No. 5 200 USD 180 USD 150 USD 120 ~ 140 USD 100 ~ 120 USD Reward 2: Every developer who participates java-tron's development will be honored with a TRON Honorary Developer Certificate. And we will give a vote of thanks to the developers on TRON official website. The following shows the content you can contribute to. Non-code Related \u00b6 ** 1. TIP ** Description: TRON Improvement Proposal(TIP) Scope: Any improvement related to TRON ecosystem, like a new feature, TRC, protocol improvement, programming tool, etc. Points: Critical High Medium Low 20 15 10 < 5 ** 2. Documentation ** Description: To revise, update and add technical documentation related to TRON network. Scope: mechanism and algorithm, network architecture and database, contracts and other technical documentation Points: Critical High Medium Low 20 15 10 < 5 ** 3. Issue ** Description: Create a topic about a question, enhancement, bug or feature and so on to discuss Scope: java-tron, TRON ecosystem Points: Critical High Medium Low 10 8 5 < 2 Code Related \u00b6 ** 1. Feature Development ** Description: To add new features to TRON network Scope: java-tron, wallet-cli Points: Critical High Medium Low 100 80 50 < 20 ** 2. Bug Report ** Description: To report bugs in online TRON network Scope: java-tron, wallet-cli Points: Critical High Medium Low 20 15 10 < 5 3. Bug Fix Description: To fix bugs in online TRON network Scope: java-tron, wallet-cli Points: Critical High Medium Low 40 30 20 < 10 4. Security Related Description: To find the security risks and enhance the security of TRON network and ecosystem Scope: java-tron, TRON ecosystem Points: Critical High Medium Low 100 80 50 < 20 5. Others Description: Code improvements, etc. Scope: java-tron, wallet-cli Points: Critical High Medium Low 20 15 10 < 5 In order to get 5 (or more) points, the content of a PR should be creative, practical, critical or can reflect significant workload. One PR should aim at solving one type of problems, so do not break one type of PR into many small PRs.","title":"Community Developers Incentives Programme"},{"location":"developers/incentives/#community-developers-incentives-programme","text":"Bonus point applies in TRON incentives programme. Developers can earn points by contributing to TRON. When a issue (or PR) is closed, it will be added into the reward programme. The core devs will discuss and comment the issue (or PR), the points of a issue (or PR) received will be added in the comment to track. You can find your points ranking at Tronscan . Reward 1: At the end of every month, we will calculate all points each developer gets in the current month and who finish in Top 5 will be rewarded with cash. At the end of every year, we will calculate all points each developer gets in the current year and who finish in Top 5 will be rewarded with cash. The Top 5 developers who win the cash reward will be announced at Tronscan. Also, there is a chance to display developers' photos at TRON official website. No. 1 No. 2 No. 3 No. 4 No. 5 200 USD 180 USD 150 USD 120 ~ 140 USD 100 ~ 120 USD Reward 2: Every developer who participates java-tron's development will be honored with a TRON Honorary Developer Certificate. And we will give a vote of thanks to the developers on TRON official website. The following shows the content you can contribute to.","title":"Community Developers Incentives Programme"},{"location":"developers/incentives/#non-code-related","text":"** 1. TIP ** Description: TRON Improvement Proposal(TIP) Scope: Any improvement related to TRON ecosystem, like a new feature, TRC, protocol improvement, programming tool, etc. Points: Critical High Medium Low 20 15 10 < 5 ** 2. Documentation ** Description: To revise, update and add technical documentation related to TRON network. Scope: mechanism and algorithm, network architecture and database, contracts and other technical documentation Points: Critical High Medium Low 20 15 10 < 5 ** 3. Issue ** Description: Create a topic about a question, enhancement, bug or feature and so on to discuss Scope: java-tron, TRON ecosystem Points: Critical High Medium Low 10 8 5 < 2","title":"Non-code Related"},{"location":"developers/incentives/#code-related","text":"** 1. Feature Development ** Description: To add new features to TRON network Scope: java-tron, wallet-cli Points: Critical High Medium Low 100 80 50 < 20 ** 2. Bug Report ** Description: To report bugs in online TRON network Scope: java-tron, wallet-cli Points: Critical High Medium Low 20 15 10 < 5 3. Bug Fix Description: To fix bugs in online TRON network Scope: java-tron, wallet-cli Points: Critical High Medium Low 40 30 20 < 10 4. Security Related Description: To find the security risks and enhance the security of TRON network and ecosystem Scope: java-tron, TRON ecosystem Points: Critical High Medium Low 100 80 50 < 20 5. Others Description: Code improvements, etc. Scope: java-tron, wallet-cli Points: Critical High Medium Low 20 15 10 < 5 In order to get 5 (or more) points, the content of a PR should be creative, practical, critical or can reflect significant workload. One PR should aim at solving one type of problems, so do not break one type of PR into many small PRs.","title":"Code Related"},{"location":"developers/issue-workflow/","text":"Issue Work Flow \u00b6 We encourage community contributors to participate in the submission and discussion of java-tron issues. You can submit your questions or ideas in the form of issues, or participate in issue discussions or help to provide solutions. Your every question or comment is driving java-tron's development. We thank you for your contribution to java-tron. Submit an Issue \u00b6 If you encounter java-tron related problems or find related bugs, you are welcome to submit an Issue, but please respect the following rules: Search for existing issues Please check to see if someone has already reported your issue or requested your idea, this will not only solve your problem quickly but also avoid duplicate issues. Submit an issue Please select the type of issue you want to report and fill in the issue content according to the template requirements. Ask a question - Please elaborate on the problem you encountered, the results you expected, and the results you actually saw, so community participants can better understand your problem and come up with a solution faster. Report a bug - In addition to clarifying the problem, the expected behaviour, and the actual behaviour, the steps to reproduce the bug should also be described, and the java-tron log and backtrace when the problem occurs should be attached. Request a feature - Please clarify why should this feature exist\uff0cwhat are the use-cases\uff0cdo you have ideas regarding the implementation of this feature and are you willing to implement this feature. Issue Handling Process \u00b6 The issue handling process is as follows: Tag Issues - We hold weekly meetings to categorize Issues and tag Issues with appropriate Labels . Assign an Issue - Assign an Issue to one or several community core developers, and the core developers will participate in Issue investigations and discussions. Community Discussion - anyone can participate in the investigation and discussion of the Issue, and write their thoughts or opinions in the comments, and the solution to the problem can be obtained from the community discussion. Close the Issue - Issue submitters can close the Issue at any time. When the issue is resolved, or it has not been discussed by the community for a long time, we will close the Issue. Issue submitters or other users can also reopen the Issue as needed. Issue Labels \u00b6 Use the following labels according to the Issue feature: topic topic: Block/Transaction topic: Build topic: Consensus topic: DB topic: Deployment topic: Documentation topic: Event subscribe topic: gRPC/HTTP api topic: Net topic: Performance topic: Resource manage topic: Shielded Transaction topic: Smart contract topic: Solidity topic: Testnet/Privatenet type type: Announcement type: Bug type: Enhancement type: Feature Request type: Manual type: Other type: Question resolution resolution: Duplicated resolution: Needs More Information resolution: Wontfix improvement","title":"Issue Workflow"},{"location":"developers/issue-workflow/#issue-work-flow","text":"We encourage community contributors to participate in the submission and discussion of java-tron issues. You can submit your questions or ideas in the form of issues, or participate in issue discussions or help to provide solutions. Your every question or comment is driving java-tron's development. We thank you for your contribution to java-tron.","title":"Issue Work Flow"},{"location":"developers/issue-workflow/#submit-an-issue","text":"If you encounter java-tron related problems or find related bugs, you are welcome to submit an Issue, but please respect the following rules: Search for existing issues Please check to see if someone has already reported your issue or requested your idea, this will not only solve your problem quickly but also avoid duplicate issues. Submit an issue Please select the type of issue you want to report and fill in the issue content according to the template requirements. Ask a question - Please elaborate on the problem you encountered, the results you expected, and the results you actually saw, so community participants can better understand your problem and come up with a solution faster. Report a bug - In addition to clarifying the problem, the expected behaviour, and the actual behaviour, the steps to reproduce the bug should also be described, and the java-tron log and backtrace when the problem occurs should be attached. Request a feature - Please clarify why should this feature exist\uff0cwhat are the use-cases\uff0cdo you have ideas regarding the implementation of this feature and are you willing to implement this feature.","title":"Submit an Issue"},{"location":"developers/issue-workflow/#issue-handling-process","text":"The issue handling process is as follows: Tag Issues - We hold weekly meetings to categorize Issues and tag Issues with appropriate Labels . Assign an Issue - Assign an Issue to one or several community core developers, and the core developers will participate in Issue investigations and discussions. Community Discussion - anyone can participate in the investigation and discussion of the Issue, and write their thoughts or opinions in the comments, and the solution to the problem can be obtained from the community discussion. Close the Issue - Issue submitters can close the Issue at any time. When the issue is resolved, or it has not been discussed by the community for a long time, we will close the Issue. Issue submitters or other users can also reopen the Issue as needed.","title":"Issue Handling Process"},{"location":"developers/issue-workflow/#issue-labels","text":"Use the following labels according to the Issue feature: topic topic: Block/Transaction topic: Build topic: Consensus topic: DB topic: Deployment topic: Documentation topic: Event subscribe topic: gRPC/HTTP api topic: Net topic: Performance topic: Resource manage topic: Shielded Transaction topic: Smart contract topic: Solidity topic: Testnet/Privatenet type type: Announcement type: Bug type: Enhancement type: Feature Request type: Manual type: Other type: Question resolution resolution: Duplicated resolution: Needs More Information resolution: Wontfix improvement","title":"Issue Labels"},{"location":"developers/java-tron/","text":"Developer Guide \u00b6 Thank you for considering to help out with the source code! We welcome contributions from anyone, and are grateful for even the smallest of fixes! GitHub is used to track issues and contribute code, suggestions, feature requests or documentation. If you want to participate in java-tron development, please follow the Github code submission process as follows: Fork java-tron repository Fix the code Commit the code Send a pull request The maintainers review and merge into the main code base For small fixes, you can send a pull request (PR) directly, but make sure the PR includes a detailed description. For more complex changes, you need to submit an issue to the TIP repository detailing your motivations, implementation plans, etc. For how to submit a TIP issue, please refer to TIP Specification . We encourage java-tron developers to submit PRs as soon as possible. Even if they are not fully developed, you can submit a PR first, so that other developers can know that the TIP Issue corresponding to this PR is in the state of In Progress . Developers should develop and submit a PR based on the develop branch, reviewers will review the PR according to Code Review Guidelines . Key Branches \u00b6 java-tron only has master , develop , release-* , feature-* , and hotfix-* branches, which are described below: develop branch The develop branch only accepts merge requests from other forked branches or release_* branches. It is not allowed to directly push changes to the develop branch. A release_* branch has to be pulled from the develop branch when a new build is to be released. master branch release_* branches and hotfix/* branches should only be merged into the master branch when a new build is released. release branch release_* is a branch pulled from the develop branch for release. It should be merged into master after a regression test and will be permanently kept in the repository. If a bug is identified in a release_* branch, its fixes should be directly merged into the release_* branch. After the fixes passing the regression test, the release_* branch should be merged back into the develop branch. Essentially, a release_* branch serves as a snapshot for each release. feature branch feature/* is an important feature branch pulled from the develop branch. After the feature/* branch is code-complete, it should be merged back to the develop branch. The feature/* branch is maintainable. hotfix branch It is pulled from the master branch and should be merged back into the master branch and the develop branch. Only pull requests of the fork repository (pull requests for bug fixes) should be merged into the hotfix/ branch. hotfix/ branches are used only for fixing bugs found after release. Submitting Code \u00b6 If you want to contribute codes to java-tron, please follow the following steps: Fork java-tron repository Fork a new repository from tronprotocol/java-tron to your personal code repository $ git clone https://github.com/yourname/java-tron.git $ git remote add upstream https://github.com/tronprotocol/java-tron.git (\"upstream\" refers to upstream projects repositories, namely tronprotocol's repositories, and can be named as you like it. We usually call it \"upstream\" for convenience) Edit the code in the fork repository Before developing new features, please synchronize your fork repository with the upstream repository. git fetch upstream git checkout develop git merge upstream/develop --no-ff (Add --no-ff to turn off the default fast merge mode) Pull a new branch from the develop branch of your repository for local development. Please refer to Branch Naming Conventions \u3002 git checkout -b feature/branch_name develop Write and commit the new code when it is completed. Please refer to Commit Messages git add . git commit -m 'commit message' Commit the new branch to your personal remote repository git push origin new_feature Push code Submit a pull request (PR) from your repository to tronprotocol/java-tron . Please be sure to click on the link in the red box shown below. Select the base branch for tronprotocol and the compare branch for your personal fork repository. Code Review Guidelines \u00b6 The only way to get code into java-tron is to send a pull request. Those pull requests need to be reviewed by someone. The following guide explains our expectations around PRs for both authors and reviewers. The Process \u00b6 The first decision to make for any PR is whether it\u2019s worth including at all. To make the decision we must understand what the PR is about. If there isn\u2019t enough description content or the diff is too large, request an explanation. Anyone can do this part. We expect that reviewers check the style and functionality of the PR, providing comments to the author using the GitHub review system. Reviewers should follow up with the PR until it is in good shape, then approve the PR. Approved PRs can be merged by the code maintainer. When communicating with authors, be polite and respectful. Functional Checks \u00b6 For PRs that fix an issue, reviewers should try reproduce the issue and verify that the pull request actually fixes it. Authors can help with this by including a unit test that fails without (and passes with) the change. For PRs adding new features, reviewers should attempt to use the feature and comment on how it feels to use it. For example: if a PR adds a new command line flag, use the program with the flag and comment on whether the flag feels useful. We expect appropriate unit test coverage. Reviewers should verify that new code is covered by unit tests. Code Style \u00b6 We would like all developers to follow a standard development flow and coding style. Therefore, we suggest the following: Review the code with coding style checkers. Review the code before submission. Run standardized tests. Sonar -scanner and Travis CI continuous integration scanner will be automatically triggered when a pull request has been submitted. When a PR passes all the checks, the java-tron maintainers will then review the PR and offer feedback and modifications when necessary. Once adopted, the PR will be closed and merged into the develop branch. We are glad to receive your pull requests and will try our best to review them as soon as we can. Any pull request is welcome, even if it is for a typo. Please kindly address the issue you find. We would appreciate your contribution. Please do not be discouraged if your pull request is not accepted, as it may be an oversight. Please explain your code as detailed as possible to make it easier to understand. Please make sure your submission meets the following code style: The code must conform to Google Code Style . The code must have passed the Sonar scanner test. The code has to be pulled from the develop branch. Branch Naming Conventions \u00b6 Branch naming should follow the following guidelines: Always name the master branch and develop branch as \"master\" and \"develop\". Name the release_* branch using version numbers, which are assigned by the project lead (e.g., Odyssey-v3.1.3, 3.1.3, etc.). Use hotfix/ as the prefix of the hotfix branch, briefly describe the bug in the name, and connect words with underline (e.g., hotfix/typo, hotfix/null_point_exception, etc.). Use feature/ as the prefix of the feature branch, briefly describe the feature in the name, and connect words with underline (e.g., feature/new_resource_model, etc.). Pull Request Guidelines \u00b6 Pull Requests should follow the following specifications: Create one PR for one issue. Avoid massive PRs. Write an overview of the purpose of the PR in its title. Write a description of the PR for future reviewers. Elaborate on the feedback you need (if any). Commit Messages \u00b6 Commit messages should follow the rule below, we provide a template with corresponding instructions. Template: <commit type>(<scope>): <subject> <BLANK LINE> <body> <BLANK LINE> <footer> The message header is a single line that contains a succinct description of the change containing a commit type , an optional scope and a subject. commit type describes the kind of change that this commit is providing: * feat (new feature) * fix (bug fix) * docs (changes to documentation) * style (formatting, missing semi colons, etc. no code change) * refactor (refactoring production code) * test (adding or refactoring tests. no production code change) * chore (updating grunt tasks etc. no production code change) The scope can be anything specifying place of the commit change. For example: protobuf , api , test , docs , build , db , net .You can use * if there isn't a more fitting scope. The subject contains a succinct description of the change: 1. Limit the subject line, which briefly describes the purpose of the commit, to 50 characters. 2. Start with a verb and use first-person present-tense (e.g., use \"change\" instead of \"changed\" or \"changes\"). 3. Do not capitalize the first letter. 4. Do not end the subject line with a period. 5. Avoid meaningless commits. It is recommended to use the git rebase command. Message body use the imperative, present tense: \"change\" not \"changed\" nor \"changes\". The body should include the motivation for the change and contrast this with previous behavior. Here is an example: feat(block): optimize the block-producing logic 1. increase the priority that block producing thread acquires synchronization lock 2. add the interruption exception handling in block-producing thread Closes #1234 If the purpose of this submission is to modify one issue, you need to refer to the issue in the footer, starting with the keyword Closes, such as Closes #1234 , if multiple bugs have been modified, separate them with commas, such as Closes #123, #245, #992 . Special Situations And How To Deal With Them \u00b6 As a reviewer, you may find yourself in one of the situations below. Here\u2019s how to deal with those: The author doesn\u2019t follow up: ping them after a while (i.e. after a few days). If there is no further response, close the PR or complete the work yourself. Author insists on including refactoring changes alongside bug fixes: We can tolerate small refactorings alongside any change. If you feel lost in the diff, ask the author to submit the refactoring as an independent PR, or at least as an independent commit in the same PR. Author keeps rejecting your feedback: You may close the PR. Conduct \u00b6 While contributing, please be respectful and constructive, so that participation in our project is a positive experience for everyone. Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others\u2019 private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Developer Guide"},{"location":"developers/java-tron/#developer-guide","text":"Thank you for considering to help out with the source code! We welcome contributions from anyone, and are grateful for even the smallest of fixes! GitHub is used to track issues and contribute code, suggestions, feature requests or documentation. If you want to participate in java-tron development, please follow the Github code submission process as follows: Fork java-tron repository Fix the code Commit the code Send a pull request The maintainers review and merge into the main code base For small fixes, you can send a pull request (PR) directly, but make sure the PR includes a detailed description. For more complex changes, you need to submit an issue to the TIP repository detailing your motivations, implementation plans, etc. For how to submit a TIP issue, please refer to TIP Specification . We encourage java-tron developers to submit PRs as soon as possible. Even if they are not fully developed, you can submit a PR first, so that other developers can know that the TIP Issue corresponding to this PR is in the state of In Progress . Developers should develop and submit a PR based on the develop branch, reviewers will review the PR according to Code Review Guidelines .","title":"Developer Guide"},{"location":"developers/java-tron/#key-branches","text":"java-tron only has master , develop , release-* , feature-* , and hotfix-* branches, which are described below: develop branch The develop branch only accepts merge requests from other forked branches or release_* branches. It is not allowed to directly push changes to the develop branch. A release_* branch has to be pulled from the develop branch when a new build is to be released. master branch release_* branches and hotfix/* branches should only be merged into the master branch when a new build is released. release branch release_* is a branch pulled from the develop branch for release. It should be merged into master after a regression test and will be permanently kept in the repository. If a bug is identified in a release_* branch, its fixes should be directly merged into the release_* branch. After the fixes passing the regression test, the release_* branch should be merged back into the develop branch. Essentially, a release_* branch serves as a snapshot for each release. feature branch feature/* is an important feature branch pulled from the develop branch. After the feature/* branch is code-complete, it should be merged back to the develop branch. The feature/* branch is maintainable. hotfix branch It is pulled from the master branch and should be merged back into the master branch and the develop branch. Only pull requests of the fork repository (pull requests for bug fixes) should be merged into the hotfix/ branch. hotfix/ branches are used only for fixing bugs found after release.","title":"Key Branches"},{"location":"developers/java-tron/#submitting-code","text":"If you want to contribute codes to java-tron, please follow the following steps: Fork java-tron repository Fork a new repository from tronprotocol/java-tron to your personal code repository $ git clone https://github.com/yourname/java-tron.git $ git remote add upstream https://github.com/tronprotocol/java-tron.git (\"upstream\" refers to upstream projects repositories, namely tronprotocol's repositories, and can be named as you like it. We usually call it \"upstream\" for convenience) Edit the code in the fork repository Before developing new features, please synchronize your fork repository with the upstream repository. git fetch upstream git checkout develop git merge upstream/develop --no-ff (Add --no-ff to turn off the default fast merge mode) Pull a new branch from the develop branch of your repository for local development. Please refer to Branch Naming Conventions \u3002 git checkout -b feature/branch_name develop Write and commit the new code when it is completed. Please refer to Commit Messages git add . git commit -m 'commit message' Commit the new branch to your personal remote repository git push origin new_feature Push code Submit a pull request (PR) from your repository to tronprotocol/java-tron . Please be sure to click on the link in the red box shown below. Select the base branch for tronprotocol and the compare branch for your personal fork repository.","title":"Submitting Code"},{"location":"developers/java-tron/#code-review-guidelines","text":"The only way to get code into java-tron is to send a pull request. Those pull requests need to be reviewed by someone. The following guide explains our expectations around PRs for both authors and reviewers.","title":"Code Review Guidelines"},{"location":"developers/java-tron/#the-process","text":"The first decision to make for any PR is whether it\u2019s worth including at all. To make the decision we must understand what the PR is about. If there isn\u2019t enough description content or the diff is too large, request an explanation. Anyone can do this part. We expect that reviewers check the style and functionality of the PR, providing comments to the author using the GitHub review system. Reviewers should follow up with the PR until it is in good shape, then approve the PR. Approved PRs can be merged by the code maintainer. When communicating with authors, be polite and respectful.","title":"The Process"},{"location":"developers/java-tron/#functional-checks","text":"For PRs that fix an issue, reviewers should try reproduce the issue and verify that the pull request actually fixes it. Authors can help with this by including a unit test that fails without (and passes with) the change. For PRs adding new features, reviewers should attempt to use the feature and comment on how it feels to use it. For example: if a PR adds a new command line flag, use the program with the flag and comment on whether the flag feels useful. We expect appropriate unit test coverage. Reviewers should verify that new code is covered by unit tests.","title":"Functional Checks"},{"location":"developers/java-tron/#code-style","text":"We would like all developers to follow a standard development flow and coding style. Therefore, we suggest the following: Review the code with coding style checkers. Review the code before submission. Run standardized tests. Sonar -scanner and Travis CI continuous integration scanner will be automatically triggered when a pull request has been submitted. When a PR passes all the checks, the java-tron maintainers will then review the PR and offer feedback and modifications when necessary. Once adopted, the PR will be closed and merged into the develop branch. We are glad to receive your pull requests and will try our best to review them as soon as we can. Any pull request is welcome, even if it is for a typo. Please kindly address the issue you find. We would appreciate your contribution. Please do not be discouraged if your pull request is not accepted, as it may be an oversight. Please explain your code as detailed as possible to make it easier to understand. Please make sure your submission meets the following code style: The code must conform to Google Code Style . The code must have passed the Sonar scanner test. The code has to be pulled from the develop branch.","title":"Code Style"},{"location":"developers/java-tron/#branch-naming-conventions","text":"Branch naming should follow the following guidelines: Always name the master branch and develop branch as \"master\" and \"develop\". Name the release_* branch using version numbers, which are assigned by the project lead (e.g., Odyssey-v3.1.3, 3.1.3, etc.). Use hotfix/ as the prefix of the hotfix branch, briefly describe the bug in the name, and connect words with underline (e.g., hotfix/typo, hotfix/null_point_exception, etc.). Use feature/ as the prefix of the feature branch, briefly describe the feature in the name, and connect words with underline (e.g., feature/new_resource_model, etc.).","title":"Branch Naming Conventions"},{"location":"developers/java-tron/#pull-request-guidelines","text":"Pull Requests should follow the following specifications: Create one PR for one issue. Avoid massive PRs. Write an overview of the purpose of the PR in its title. Write a description of the PR for future reviewers. Elaborate on the feedback you need (if any).","title":"Pull Request Guidelines"},{"location":"developers/java-tron/#commit-messages","text":"Commit messages should follow the rule below, we provide a template with corresponding instructions. Template: <commit type>(<scope>): <subject> <BLANK LINE> <body> <BLANK LINE> <footer> The message header is a single line that contains a succinct description of the change containing a commit type , an optional scope and a subject. commit type describes the kind of change that this commit is providing: * feat (new feature) * fix (bug fix) * docs (changes to documentation) * style (formatting, missing semi colons, etc. no code change) * refactor (refactoring production code) * test (adding or refactoring tests. no production code change) * chore (updating grunt tasks etc. no production code change) The scope can be anything specifying place of the commit change. For example: protobuf , api , test , docs , build , db , net .You can use * if there isn't a more fitting scope. The subject contains a succinct description of the change: 1. Limit the subject line, which briefly describes the purpose of the commit, to 50 characters. 2. Start with a verb and use first-person present-tense (e.g., use \"change\" instead of \"changed\" or \"changes\"). 3. Do not capitalize the first letter. 4. Do not end the subject line with a period. 5. Avoid meaningless commits. It is recommended to use the git rebase command. Message body use the imperative, present tense: \"change\" not \"changed\" nor \"changes\". The body should include the motivation for the change and contrast this with previous behavior. Here is an example: feat(block): optimize the block-producing logic 1. increase the priority that block producing thread acquires synchronization lock 2. add the interruption exception handling in block-producing thread Closes #1234 If the purpose of this submission is to modify one issue, you need to refer to the issue in the footer, starting with the keyword Closes, such as Closes #1234 , if multiple bugs have been modified, separate them with commas, such as Closes #123, #245, #992 .","title":"Commit Messages"},{"location":"developers/java-tron/#special-situations-and-how-to-deal-with-them","text":"As a reviewer, you may find yourself in one of the situations below. Here\u2019s how to deal with those: The author doesn\u2019t follow up: ping them after a while (i.e. after a few days). If there is no further response, close the PR or complete the work yourself. Author insists on including refactoring changes alongside bug fixes: We can tolerate small refactorings alongside any change. If you feel lost in the diff, ask the author to submit the refactoring as an independent PR, or at least as an independent commit in the same PR. Author keeps rejecting your feedback: You may close the PR.","title":"Special Situations And How To Deal With Them"},{"location":"developers/java-tron/#conduct","text":"While contributing, please be respectful and constructive, so that participation in our project is a positive experience for everyone. Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others\u2019 private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Conduct"},{"location":"developers/litefullnode/","text":"Lite FullNode \u00b6 Lite FullNode runs the same code with FullNode, the difference is that Lite FullNode only starts based on state data snapshot, which only contains all account state data and historical data of the latest 65536 blocks. The state data snapshot is small, only about 3% of the FullNode data. Therefore, Lite Fullnode has the advantages of occupying less disk space and starting up fast, but it does not provide historical block and transaction data query by default, and only provides part of HTTP API and GRPC API of FullNode. For APIs that are not supported by Lite Fullnode, please refer to HTTP , GRPC . But these APIs can be opened by configuring openHistoryQueryWhenLiteFN = true in the configuration file, because after the Lite Fullnode startup, the saved data by the Lite Fullnode is exactly the same as that of the FullNode, so after this configuration item is turned on, the Lite Fullnode supports querying the block data synchronized after the node startup, but still does not support querying the block data before the node startup. Therefore, if developers only need to use node for block synchronization, processing and broadcasting transactions, or only query the blocks and transactions synchronized after the node starts up, then Lite Fullnoe will be a better choice. Lite FullNode Deployment \u00b6 The deployment steps and startup command of a Lite fullnode are the same as fullnode's, please refer to Deployment Instructions to deploy a Lite Fullnode. The only difference is the database. You need to obtain the Lite Fullnode database. You can download the Lite Fullnode data snapshot from the public backup data and use it directly; or use the Lite Fullnode data pruning tool to convert the Fullnode database to Lite Fullnode database. Lite FullNode Maintenance \u00b6 Since the Lite Fullnode will save the same data as the FullNode's after startup, although the data volume of the Lite Fullnode is very small at startup, the data expansion rate in the later period is the same as that of the FullNode, so it may be necessary to periodically cut the data. Pruning Lite Fullnode data is also to use Lite Fullnode data pruning tool to split Lite Fullnode data into snapshot dataset, that is, to obtain the pruned Lite Fullnode data.","title":"Lite FullNode"},{"location":"developers/litefullnode/#lite-fullnode","text":"Lite FullNode runs the same code with FullNode, the difference is that Lite FullNode only starts based on state data snapshot, which only contains all account state data and historical data of the latest 65536 blocks. The state data snapshot is small, only about 3% of the FullNode data. Therefore, Lite Fullnode has the advantages of occupying less disk space and starting up fast, but it does not provide historical block and transaction data query by default, and only provides part of HTTP API and GRPC API of FullNode. For APIs that are not supported by Lite Fullnode, please refer to HTTP , GRPC . But these APIs can be opened by configuring openHistoryQueryWhenLiteFN = true in the configuration file, because after the Lite Fullnode startup, the saved data by the Lite Fullnode is exactly the same as that of the FullNode, so after this configuration item is turned on, the Lite Fullnode supports querying the block data synchronized after the node startup, but still does not support querying the block data before the node startup. Therefore, if developers only need to use node for block synchronization, processing and broadcasting transactions, or only query the blocks and transactions synchronized after the node starts up, then Lite Fullnoe will be a better choice.","title":"Lite FullNode"},{"location":"developers/litefullnode/#lite-fullnode-deployment","text":"The deployment steps and startup command of a Lite fullnode are the same as fullnode's, please refer to Deployment Instructions to deploy a Lite Fullnode. The only difference is the database. You need to obtain the Lite Fullnode database. You can download the Lite Fullnode data snapshot from the public backup data and use it directly; or use the Lite Fullnode data pruning tool to convert the Fullnode database to Lite Fullnode database.","title":"Lite FullNode Deployment"},{"location":"developers/litefullnode/#lite-fullnode-maintenance","text":"Since the Lite Fullnode will save the same data as the FullNode's after startup, although the data volume of the Lite Fullnode is very small at startup, the data expansion rate in the later period is the same as that of the FullNode, so it may be necessary to periodically cut the data. Pruning Lite Fullnode data is also to use Lite Fullnode data pruning tool to split Lite Fullnode data into snapshot dataset, that is, to obtain the pruned Lite Fullnode data.","title":"Lite FullNode Maintenance"},{"location":"developers/resources/","text":"Resources \u00b6 TRON Official Website https://tron.network/ TRON White Paper https://tron.network/resources?lng=&name=1 TRON Blockchain Browser https://tronscan.org/ TRON Wallet https://github.com/tronprotocol/wallet-cli TRON Zksnark-java-sdk https://github.com/tronprotocol/zksnark-java-sdk TRON Sun-network https://github.com/tronprotocol/sun-network TRON Javascript API https://github.com/tronprotocol/tronweb","title":"Resources"},{"location":"developers/resources/#resources","text":"TRON Official Website https://tron.network/ TRON White Paper https://tron.network/resources?lng=&name=1 TRON Blockchain Browser https://tronscan.org/ TRON Wallet https://github.com/tronprotocol/wallet-cli TRON Zksnark-java-sdk https://github.com/tronprotocol/zksnark-java-sdk TRON Sun-network https://github.com/tronprotocol/sun-network TRON Javascript API https://github.com/tronprotocol/tronweb","title":"Resources"},{"location":"developers/run-in-idea/","text":"Configure the IntelliJ IDEA IDE \u00b6 For Java development, in order to reduce development difficulty and improve development efficiency, developers should first select and configure a Java integrated development environment, such as IntelliJ IDEA, NetBeans or Eclipse, etc. This article will take InteliJ IDEA as an example to introduce how to configure java-tron integration development environment. This article describes the configuration of the java-tron integrated development environment in InteliJ IDEA. java-tron nodes support to be deployed on Linux or MacOS operating systems, and rely on Oracle JDK 1.8 , other versions of JDK are not supported. Before configuring the InteliJ IDE development environment, please ensure the following prerequisites: Configure the development environment on Linux or MacOS operating system Oracle JDK 1.8 , git , InteliJ IDEA are installed Configure InteliJ IDEA \u00b6 The IntelliJ IDEA configuration steps are as follows: Install Lombok plugin Search for lombok in [IDEA]->[Preferences]->[Plugins] to install Lombok plugin, Lombok makes java-tron code more concise by adding annotations. Enable Enable annotation processing configuration item Check the JDK version and make sure that Oracle JDK 1.8 is used in IntelliJ IDEA Download java-tron source code Clone the java-tron source code locally and switch to the develop branch. $ git clone https://github.com/tronprotocol/java-tron.git $ git checkout -t origin/develop Configure the code style check plugin \u00b6 The java-tron code style needs to meet the Google check style specification. In IDEA, you can use the Checkstyle plugin to check whether the code conforms to the Google check style specification. The installation and configuration process of the plugin is as follows: Search for checkstyle in [IDEA]->[Preferences]->[Plugins] to install the plugin Code style configuration First, download the java-tron code style check configuration file , then in the Checkstyle configuration page, click \"+ \", choose to use the \"checkStyleAll.xml\" just downloaded, after adding that, you can see this file in the \"Configuration Files\" list, and finally click \"Apply\" to complete the configuration. After configuring the Checkstyle plugin, you can use Checkstyle to check the code. Checkstyle can check a module or the whole project, and can also check a single file. Select \"Check Current File\" in the right-click menu of the file editor, and Checkstyle will check the file. If a code problem is detected, you need to modify it according to the prompts. Code can only be submitted when there are no code problems. Compile java-tron \u00b6 You can use the terminal to compile java-tron with the following command in the java-tron project directory: $ ./gradlew clean build The above compile command will execute all test cases, you can use -x test to skip the execution of test cases: $ ./gradlew clean build -x test You can also compile java-tron in IDEA: Open the java-tron project in IDEA and click \"Build\" -> \"Build Project\" to compile the project. Run and Debug \u00b6 Before running java-tron, you need to create a working directory to store the database files and log files generated when the node is running. $ mkdir /Users/javatrondeploy In the \"Run/Debug Configurations\" configuration panel, specify the JDK version running java-tron as java 8 , and then configure the command parameters for running java-tron, for example, specify the node configuration file through the -c parameter as config.conf . \"Working directory\" is configured as the working directory of java-tron created earlier. When java-tron starts, it will look for the config.conf configuration file in this directory. Please make sure that config.conf has already been in this directory. After the setting, click the \"Apply\" button to complete the configuration. Then you can click \"Run\"->\"Run FullNode\" in IDEA to start the java-tron node or click \"Run\"->\"Debug FullNode\" to start the node in debug mode. After the node is started, java-tron logs are stored in the working directory. If you want to debug the java-tron code, you can set breakpoints in the java-tron code and start it in debug mode, so that you can trace the debug code line by line.","title":"Configure the IDE"},{"location":"developers/run-in-idea/#configure-the-intellij-idea-ide","text":"For Java development, in order to reduce development difficulty and improve development efficiency, developers should first select and configure a Java integrated development environment, such as IntelliJ IDEA, NetBeans or Eclipse, etc. This article will take InteliJ IDEA as an example to introduce how to configure java-tron integration development environment. This article describes the configuration of the java-tron integrated development environment in InteliJ IDEA. java-tron nodes support to be deployed on Linux or MacOS operating systems, and rely on Oracle JDK 1.8 , other versions of JDK are not supported. Before configuring the InteliJ IDE development environment, please ensure the following prerequisites: Configure the development environment on Linux or MacOS operating system Oracle JDK 1.8 , git , InteliJ IDEA are installed","title":"Configure the IntelliJ IDEA IDE"},{"location":"developers/run-in-idea/#configure-intelij-idea","text":"The IntelliJ IDEA configuration steps are as follows: Install Lombok plugin Search for lombok in [IDEA]->[Preferences]->[Plugins] to install Lombok plugin, Lombok makes java-tron code more concise by adding annotations. Enable Enable annotation processing configuration item Check the JDK version and make sure that Oracle JDK 1.8 is used in IntelliJ IDEA Download java-tron source code Clone the java-tron source code locally and switch to the develop branch. $ git clone https://github.com/tronprotocol/java-tron.git $ git checkout -t origin/develop","title":"Configure InteliJ IDEA"},{"location":"developers/run-in-idea/#configure-the-code-style-check-plugin","text":"The java-tron code style needs to meet the Google check style specification. In IDEA, you can use the Checkstyle plugin to check whether the code conforms to the Google check style specification. The installation and configuration process of the plugin is as follows: Search for checkstyle in [IDEA]->[Preferences]->[Plugins] to install the plugin Code style configuration First, download the java-tron code style check configuration file , then in the Checkstyle configuration page, click \"+ \", choose to use the \"checkStyleAll.xml\" just downloaded, after adding that, you can see this file in the \"Configuration Files\" list, and finally click \"Apply\" to complete the configuration. After configuring the Checkstyle plugin, you can use Checkstyle to check the code. Checkstyle can check a module or the whole project, and can also check a single file. Select \"Check Current File\" in the right-click menu of the file editor, and Checkstyle will check the file. If a code problem is detected, you need to modify it according to the prompts. Code can only be submitted when there are no code problems.","title":"Configure the code style check plugin"},{"location":"developers/run-in-idea/#compile-java-tron","text":"You can use the terminal to compile java-tron with the following command in the java-tron project directory: $ ./gradlew clean build The above compile command will execute all test cases, you can use -x test to skip the execution of test cases: $ ./gradlew clean build -x test You can also compile java-tron in IDEA: Open the java-tron project in IDEA and click \"Build\" -> \"Build Project\" to compile the project.","title":"Compile java-tron"},{"location":"developers/run-in-idea/#run-and-debug","text":"Before running java-tron, you need to create a working directory to store the database files and log files generated when the node is running. $ mkdir /Users/javatrondeploy In the \"Run/Debug Configurations\" configuration panel, specify the JDK version running java-tron as java 8 , and then configure the command parameters for running java-tron, for example, specify the node configuration file through the -c parameter as config.conf . \"Working directory\" is configured as the working directory of java-tron created earlier. When java-tron starts, it will look for the config.conf configuration file in this directory. Please make sure that config.conf has already been in this directory. After the setting, click the \"Apply\" button to complete the configuration. Then you can click \"Run\"->\"Run FullNode\" in IDEA to start the java-tron node or click \"Run\"->\"Debug FullNode\" to start the node in debug mode. After the node is started, java-tron logs are stored in the working directory. If you want to debug the java-tron code, you can set breakpoints in the java-tron code and start it in debug mode, so that you can trace the debug code line by line.","title":"Run and Debug"},{"location":"developers/tips/","text":"TRON Improvement Proposals (TIPs) \u00b6 TIP stands for TRON Improvement Proposal. TIPs record the entire process of TRON improvement, including the process of community making suggestions, discussions, and adoption. A TIP is a design document about a proposal, including the rationale and technical specifications of the proposal. Community users can read the TIP document to learn more about the proposal. TIPs are the unit around which governance happens in TRON\uff0canyone is free to propose one, and then community participants will debate to determine if it should be adopted as a standard or included in a network upgrade. The TIP author is responsible for building consensus within the community and documenting dissenting opinions. TIP Types \u00b6 TIPs are mainly divided into Standard Track and Informational : Standard Track : Describes any change that affects most or all TRON implementations, such as a change in block or transaction validity rules, proposed application standards/conventions, or any change or addition that affects the interoperability of applications using TRON. Furthermore, Standard TIPs can be broken down into the following categories. Core : Improvements requiring a consensus fork, as well as changes that are not necessarily consensus critical but may be relevant to \"core dev\" discussions. Networking : Improvements around network protocol. Interface : Improvements around client API/RPC specifications and standards. TRC \uff1aApplication-level standards and conventions, including contract standards such as token standards (TRC-20). TVM \uff1amprovements around TRON Virtual Machine. Informational : Describes a TRON design issue, or provides general guidelines or information to the TRON community, but does not propose a new feature. TIP Work Flow \u00b6 Before you submit a TIP, you need to create an issue for comment and add the issue URL to your TIP header. The format of a TIP issue is consistent with the content of TIP. The process of submitting TIP is as follows: Fork the TIP repository by clicking \"Fork\" in the top right. Add your TIP to your fork of the repository. There is a TIP template here. Submit a Pull Request to TRON's TIPs repository. Please use markdown to write TIP in strict accordance with the requirements of template . Make sure you include a discussions-to header with the URL to a discussion forum or open GitHub issue where people can discuss the TIP as a whole. If a TIP is about the feature development of java-tron, and a PR of the development exists, in your TIP and your java-tron's PR you need to refer each other's github link to make the requirements analysis of new features and development code traceable. Your first PR for a new TIP will be in the state of draft . It must meet the formatting criteria enforced by the build. An editor will manually review it and assign it a number before merging it. When you believe your TIP is mature and ready to progress past the draft phase, you should do one of two things: For a Standards Track TIP of type Core, ask to have your issue added to the agenda of an upcoming All Core Devs meeting, where it can be discussed for inclusion in a future hard fork. If core devs agree to include it, the TIP editors will update the state of your TIP to Accepted . For all other TIPs, open a PR changing the state of your TIP to Final(non-Core) . An editor will review your draft and ask if anyone objects to its being finalized. If the editor decides there is no rough consensus, they may close the PR and request you fix the issues in the draft before trying again. TIP Status \u00b6 A TIP may go through the following states: Draft : A TIP that is undergoing rapid iteration and changes. Last Call : A TIP that is done with its initial iteration and ready for review by a wide audience. Accepted : A core TIP that has been in the Last Call for at least 2 weeks and any technical changes that were requested have been addressed by the author. The process for Core Devs to decide whether to encode a TIP into their clients as part of a hard fork is not part of the TIP process. If such a decision is made, the TIP will move to the final . Final (non-Core) : A TIP that has been in the Last Call for at least 2 weeks and any technical changes that were requested have been addressed by the author. Final (Core) : A TIP that the Core Devs have decided to implement and release in a future version or has already been released. Active : If the TIPs are never meant to be completed, the TIPs may have a status of Active . Abandoned : If a TIP is no longer pursued by the original authors or it may not be a (technically) preferred option anymore. Rejected : A TIP that is fundamentally broken or a Core TIP that was rejected by the Core Devs and will not be implemented. Superseded : A TIP which was previously Final but is no longer considered state-of-the-art. Another TIP will be in the Final status and cite the Superseded TIP. Deferred : A TIP which isn't accepted now, may be accepted in the future. TIP Structure \u00b6 A TIP consists of a title preamble and body content. TIP Header Preamble \u00b6 The TIP header preamble contains the TIP number, a short descriptive title (limited to a maximum of 44 characters), author details, discussion link, TIP status, TIP type, creation time, etc. Please refer to the specific format: --- tip: <to be assigned> title: <TIP title> author: <a list of the author's or authors' name(s) and/or username(s), or name(s) and email(s), e.g. (use with the parentheses or triangular brackets): FirstName LastName (@GitHubUsername), FirstName LastName <foo@bar.com>, FirstName (@GitHubUsername) and GitHubUsername (@GitHubUsername)> discussions-to: <URL> status: <Draft | Last Call | Accepted | Final | Deferred> type: <Standards Track (Core, Networking, Interface, TRC, VM) | Informational> category (*only required for Standard Track): <Core | Networking | Interface | TRC | VM> created: <date created on, in ISO 8601 (yyyy-mm-dd) format> requires (*optional): <TIP number(s)> replaces (*optional): <TIP number(s)> --- TIP Body \u00b6 TIP body should have the following parts: Simple Summary \uff1aProvide a simplified explanation of the TIP. Abstract \uff1a A short (~200 word) description of the technical issue being addressed. It should be a very terse and human-readable version of the specification section. Someone should be able to read only the abstract to get the gist of what this specification does. Motivation : (optional) A motivation section is critical for TIPs. It should clearly explain why the existing protocol specification is inadequate to address the problem that the TIP solves. This section may be omitted if the motivation is evident. Specification \uff1aThe technical specification should detail the syntax and semantics of any new feature. Rationale \uff1aThe rationale fleshes out the specification by describing what motivated the design and why particular design decisions were made. It should describe alternate designs that were considered and related work. The rationale should discuss important objections or concerns raised during the discussion around the TIP. Backwards Compatibility \uff1a(optional) All TIPs that introduce backward incompatibilities must include a section describing these incompatibilities and their consequences. The TIP must explain how the author proposes to deal with these incompatibilities. Test Cases \uff1a(optional) Test cases for an implementation are mandatory for TIPs that are affecting consensus changes. This section may be omitted for non-Core proposals. Implementation \uff1aThe implementations must be completed before any TIP is given the status Final , but it need not be completed before the TIP is accepted . The principle of \"rough consensus and running code\" is still useful when it comes to resolving many discussions of API details. Linking to External Resources \u00b6 Links to external resources SHOULD NOT be included. External resources may disappear, move, or change unexpectedly. Linking to other TIPs \u00b6 References to other TIPs should follow the format TIP-N where N is the TIP number you are referring to. Each TIP that is referenced in a TIP MUST be accompanied by a relative markdown link. The link MUST always be done via relative paths so that the links work in TIP GitHub repository and forks of TIP repository. For example, you would link to TIP-1 with [TIP-1](/TIPS/tip-1) . Auxiliary Files \u00b6 Images, diagrams and auxiliary files should be included in a subdirectory of the assets folder for that TIP as follows: assets/tip-N (where N is to be replaced with the TIP number). When linking to an image in the TIP, use relative links such as ../assets/tip-1/image.png .","title":"TIPs Workflow"},{"location":"developers/tips/#tron-improvement-proposals-tips","text":"TIP stands for TRON Improvement Proposal. TIPs record the entire process of TRON improvement, including the process of community making suggestions, discussions, and adoption. A TIP is a design document about a proposal, including the rationale and technical specifications of the proposal. Community users can read the TIP document to learn more about the proposal. TIPs are the unit around which governance happens in TRON\uff0canyone is free to propose one, and then community participants will debate to determine if it should be adopted as a standard or included in a network upgrade. The TIP author is responsible for building consensus within the community and documenting dissenting opinions.","title":"TRON Improvement Proposals (TIPs)"},{"location":"developers/tips/#tip-types","text":"TIPs are mainly divided into Standard Track and Informational : Standard Track : Describes any change that affects most or all TRON implementations, such as a change in block or transaction validity rules, proposed application standards/conventions, or any change or addition that affects the interoperability of applications using TRON. Furthermore, Standard TIPs can be broken down into the following categories. Core : Improvements requiring a consensus fork, as well as changes that are not necessarily consensus critical but may be relevant to \"core dev\" discussions. Networking : Improvements around network protocol. Interface : Improvements around client API/RPC specifications and standards. TRC \uff1aApplication-level standards and conventions, including contract standards such as token standards (TRC-20). TVM \uff1amprovements around TRON Virtual Machine. Informational : Describes a TRON design issue, or provides general guidelines or information to the TRON community, but does not propose a new feature.","title":"TIP Types"},{"location":"developers/tips/#tip-work-flow","text":"Before you submit a TIP, you need to create an issue for comment and add the issue URL to your TIP header. The format of a TIP issue is consistent with the content of TIP. The process of submitting TIP is as follows: Fork the TIP repository by clicking \"Fork\" in the top right. Add your TIP to your fork of the repository. There is a TIP template here. Submit a Pull Request to TRON's TIPs repository. Please use markdown to write TIP in strict accordance with the requirements of template . Make sure you include a discussions-to header with the URL to a discussion forum or open GitHub issue where people can discuss the TIP as a whole. If a TIP is about the feature development of java-tron, and a PR of the development exists, in your TIP and your java-tron's PR you need to refer each other's github link to make the requirements analysis of new features and development code traceable. Your first PR for a new TIP will be in the state of draft . It must meet the formatting criteria enforced by the build. An editor will manually review it and assign it a number before merging it. When you believe your TIP is mature and ready to progress past the draft phase, you should do one of two things: For a Standards Track TIP of type Core, ask to have your issue added to the agenda of an upcoming All Core Devs meeting, where it can be discussed for inclusion in a future hard fork. If core devs agree to include it, the TIP editors will update the state of your TIP to Accepted . For all other TIPs, open a PR changing the state of your TIP to Final(non-Core) . An editor will review your draft and ask if anyone objects to its being finalized. If the editor decides there is no rough consensus, they may close the PR and request you fix the issues in the draft before trying again.","title":"TIP Work Flow"},{"location":"developers/tips/#tip-status","text":"A TIP may go through the following states: Draft : A TIP that is undergoing rapid iteration and changes. Last Call : A TIP that is done with its initial iteration and ready for review by a wide audience. Accepted : A core TIP that has been in the Last Call for at least 2 weeks and any technical changes that were requested have been addressed by the author. The process for Core Devs to decide whether to encode a TIP into their clients as part of a hard fork is not part of the TIP process. If such a decision is made, the TIP will move to the final . Final (non-Core) : A TIP that has been in the Last Call for at least 2 weeks and any technical changes that were requested have been addressed by the author. Final (Core) : A TIP that the Core Devs have decided to implement and release in a future version or has already been released. Active : If the TIPs are never meant to be completed, the TIPs may have a status of Active . Abandoned : If a TIP is no longer pursued by the original authors or it may not be a (technically) preferred option anymore. Rejected : A TIP that is fundamentally broken or a Core TIP that was rejected by the Core Devs and will not be implemented. Superseded : A TIP which was previously Final but is no longer considered state-of-the-art. Another TIP will be in the Final status and cite the Superseded TIP. Deferred : A TIP which isn't accepted now, may be accepted in the future.","title":"TIP Status"},{"location":"developers/tips/#tip-structure","text":"A TIP consists of a title preamble and body content.","title":"TIP Structure"},{"location":"developers/tips/#tip-header-preamble","text":"The TIP header preamble contains the TIP number, a short descriptive title (limited to a maximum of 44 characters), author details, discussion link, TIP status, TIP type, creation time, etc. Please refer to the specific format: --- tip: <to be assigned> title: <TIP title> author: <a list of the author's or authors' name(s) and/or username(s), or name(s) and email(s), e.g. (use with the parentheses or triangular brackets): FirstName LastName (@GitHubUsername), FirstName LastName <foo@bar.com>, FirstName (@GitHubUsername) and GitHubUsername (@GitHubUsername)> discussions-to: <URL> status: <Draft | Last Call | Accepted | Final | Deferred> type: <Standards Track (Core, Networking, Interface, TRC, VM) | Informational> category (*only required for Standard Track): <Core | Networking | Interface | TRC | VM> created: <date created on, in ISO 8601 (yyyy-mm-dd) format> requires (*optional): <TIP number(s)> replaces (*optional): <TIP number(s)> ---","title":"TIP Header Preamble"},{"location":"developers/tips/#tip-body","text":"TIP body should have the following parts: Simple Summary \uff1aProvide a simplified explanation of the TIP. Abstract \uff1a A short (~200 word) description of the technical issue being addressed. It should be a very terse and human-readable version of the specification section. Someone should be able to read only the abstract to get the gist of what this specification does. Motivation : (optional) A motivation section is critical for TIPs. It should clearly explain why the existing protocol specification is inadequate to address the problem that the TIP solves. This section may be omitted if the motivation is evident. Specification \uff1aThe technical specification should detail the syntax and semantics of any new feature. Rationale \uff1aThe rationale fleshes out the specification by describing what motivated the design and why particular design decisions were made. It should describe alternate designs that were considered and related work. The rationale should discuss important objections or concerns raised during the discussion around the TIP. Backwards Compatibility \uff1a(optional) All TIPs that introduce backward incompatibilities must include a section describing these incompatibilities and their consequences. The TIP must explain how the author proposes to deal with these incompatibilities. Test Cases \uff1a(optional) Test cases for an implementation are mandatory for TIPs that are affecting consensus changes. This section may be omitted for non-Core proposals. Implementation \uff1aThe implementations must be completed before any TIP is given the status Final , but it need not be completed before the TIP is accepted . The principle of \"rough consensus and running code\" is still useful when it comes to resolving many discussions of API details.","title":"TIP Body"},{"location":"developers/tips/#linking-to-external-resources","text":"Links to external resources SHOULD NOT be included. External resources may disappear, move, or change unexpectedly.","title":"Linking to External Resources"},{"location":"developers/tips/#linking-to-other-tips","text":"References to other TIPs should follow the format TIP-N where N is the TIP number you are referring to. Each TIP that is referenced in a TIP MUST be accompanied by a relative markdown link. The link MUST always be done via relative paths so that the links work in TIP GitHub repository and forks of TIP repository. For example, you would link to TIP-1 with [TIP-1](/TIPS/tip-1) .","title":"Linking to other TIPs"},{"location":"developers/tips/#auxiliary-files","text":"Images, diagrams and auxiliary files should be included in a subdirectory of the assets folder for that TIP as follows: assets/tip-N (where N is to be replaced with the TIP number). When linking to an image in the TIP, use relative links such as ../assets/tip-1/image.png .","title":"Auxiliary Files"},{"location":"faq/","text":"The TRON FAQ \u00b6 The TRON FAQ Network Design and Protocol How can I generate an account? What is the network flow? After you create a token, how to change its status from 'not started yet' to 'participate'? Is there a place to see if all the SuperNodes are producing blocks? Is the block producing time interval always remain the same? Will the block producing reward reduce half? If one of the top 27 SuperNodes goes wrong, will it be removed from the SRs list? Is there a threshold to become a SR? 27 SRs shares the block producing reward equally or by their computing power? Will there be an over 50% computing power issue in TRON network? Will voting burns TRX? How long does SR's power last? What is the proof of a transaction\uff1f Why I Can't stake TRX longer than 3 days How to watch my account for transactions How to calculate the transaction fee? How to calculate the number of bytes of transactions? How to reset my vote? Node Configuration If I replace the field value of 'genesis.block.witnesses' with the address generated in Tronscan in config.conf, do I need to delete other addresses? Do I need to delete the field 'url' and 'voteCount'? How can I specify the data storage path when start a node? Is there any config file option, which I can use for sending logs to stdout? How to change log level How can I get asset from private net? Compile and Build java-tron build failed with unit test issue Deployment How to test if the deployment works normally, if there is a test api or command like redis: get ping return pong? When to deploy private environment, what's the relationship of SuperNode and FullNode? Should I firstly deploy a SuperNode, and then deploy a FullNode\uff1f How to know whether my test SuperNode is running or not? Can SolidityNode and FullNode be deployed in one machine? Will they share the data? Running a Node As under private environment, why the log keeps updating with all other public nodes? What's the difference of private and public environment\uff1f Under private environment, should I submit application information to TRON to become a SR? At the worst scenario, if the SuperNode can not be connected, the maximum time it allows the SuperNode to recover its service\uff1f Does SolidityNode sync data from FullNode? Does a node have wallet function? Why does the block process time take so long? Test Net We want to test our SuperNode's performance under test environment, do we need to be voted to become a SR under test environment? What is the different between Shasta and Test Net? Where can I get the test TRX? Smart Contract RPC Client and API How to sign transaction from offline node and broadcast to online node? How to sync wallet-cli with wallet on Tronscan? Is gateway connected to SolidityNode\uff1f What is the different between 'getTransactionById' and 'getTransactionInfoById'? How to broadcast raw transaction\uff1f How to get token balance of an account? Error Log What does the following error message mean? Other Questions My Question is Not Listed Here? Network Design and Protocol \u00b6 How can I generate an account? \u00b6 You can use wallet-cli or Tronscan . What is the network flow? \u00b6 Network flow depends on transaction volume. As a reference, the average size of a transaction currently is 200 bytes. After you create a token, how to change its status from 'not started yet' to 'participate'? \u00b6 You need to wait till the time reaches the start time of participation you set when create a token. After a token is created, only the token url and description can be modified. Is there a place to see if all the SuperNodes are producing blocks? \u00b6 Please refer to Tronscan Is the block producing time interval always remain the same? \u00b6 The current block producing time interval is 3 seconds. In the future, it may be improved to 1 second. Will the block producing reward reduce half? \u00b6 No. If one of the top 27 SuperNodes goes wrong, will it be removed from the SRs list? \u00b6 If people stop voting for it, it will drop out of the top 27 SRs. Is there a threshold to become a SR? \u00b6 When the amount of votes you get ranks into top 27, you will become a SR. 27 SRs shares the block producing reward equally or by their computing power? \u00b6 It has nothing to do with computing power. The reward is a fixed 32 TRX for each block produced. Will there be an over 50% computing power issue in TRON network? \u00b6 No. Will voting burns TRX? \u00b6 No. How long does SR's power last? \u00b6 Every 6 hours, the votes will be counted to check the qualifications of all the SRs. What is the proof of a transaction\uff1f \u00b6 Transaction hash. Why I Can't stake TRX longer than 3 days \u00b6 Staked duration must be 3 days now. It means you can not unstake until the 3 days duration expires. If you don't unstake after 3 days, the staked TRX will remain in staked status until you unstake it. How to watch my account for transactions \u00b6 To meet your needs, you can use TRON event subscription plugin. For more detail, please refer to https://tronprotocol.github.io/documentation-en/architecture/plugin/#tron-event-subscription How to calculate the transaction fee? \u00b6 please refer to https://tronprotocol.github.io/documentation-en/mechanism-algorithm/resource/ How to calculate the number of bytes of transactions? \u00b6 tx-size = grpcClient.getTransactionById(txId).get().getSerializedSize() + 60 How to reset my vote? \u00b6 You need to vote again, set your votes number to 0. Node Configuration \u00b6 If I replace the field value of 'genesis.block.witnesses' with the address generated in Tronscan in config.conf, do I need to delete other addresses? Do I need to delete the field 'url' and 'voteCount'? \u00b6 No need to delete other addresses, these addresses will be a part of your net, but if you do not own the private keys of these addresses, they will act like abandoned addresses. Note: The addresses of Zion\u3001Sun and Blackhole can not be deleted, but can be modified. How can I specify the data storage path when start a node? \u00b6 You can add the data storage path when you start the node, like: java -jar FullNode.jar -c config.conf -d /data/output Is there any config file option, which I can use for sending logs to stdout? \u00b6 Steps to send logs to stdout: Download https://github.com/tronprotocol/java-tron/blob/develop/src/main/resources/logback.xml Uncomment the configuration: appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\" Go to the configuration: root level=\"INFO\" uncomment the configuration: appender-ref ref=\"STDOUT\" comment the configuration: appender-ref ref=\"ASYNC\" Move logback.xml to the same directory with FullNode.jar Launch FullNode.jar with additional parameter: --log-config logback.xml, for example: java -jar FullNode.jar --log-config logback.xml How to change log level \u00b6 The log level is defined in logback.xml. Please set the root level to \"ERROR\" if you want to filter only error logs. Please refer to the configuration below. <root level= \"ERROR\" > <!--<appender-ref ref=\"STDOUT\"/>--> <appender-ref ref= \"ASYNC\" /> </root> <logger name= \"app\" level= \"ERROR\" /> <logger name= \"net\" level= \"ERROR\" /> <logger name= \"backup\" level= \"ERROR\" /> <logger name= \"discover\" level= \"ERROR\" /> <logger name= \"crypto\" level= \"ERROR\" /> <logger name= \"utils\" level= \"ERROR\" /> <logger name= \"actuator\" level= \"ERROR\" /> <logger name= \"API\" level= \"ERROR\" /> <logger name= \"witness\" level= \"ERROR\" /> <logger name= \"DB\" level= \"ERROR\" /> <logger name= \"capsule\" level= \"ERROR\" /> <logger name= \"VM\" level= \"ERROR\" /> How can I get asset from private net? \u00b6 In private network, you can set the initial account balance in config file. Please refer to below settings: genesis.block = { # Reserve balance assets = [ { accountName = \"TestA\" accountType = \"AssetIssue\" address = \"THRR7uvFbRLfNzpKPXEyQa8KCJqi59V59e\" balance = \"1000000000000000\" }, { accountName = \"TestB\" accountType = \"AssetIssue\" address = \"TBLZaw93rsnLJ1SWTvoPkr7GVg5ixn2Jv1\" balance = \"1000000000000000\" }, { accountName = \"TestC\" accountType = \"AssetIssue\" address = \"TJg8yZ4Co8RXsHmTWissmSL1VpL7dCybY1\" balance = \"1000000000000000\" } ] Compile and Build \u00b6 java-tron build failed with unit test issue \u00b6 Please use './gradlew build -x test' to skip the test cases. Deployment \u00b6 How to test if the deployment works normally, if there is a test api or command like redis: get ping return pong? \u00b6 java-tron does not provide a default api to test. Once the service start, grpc commands can be sent. Based on that, there are several ways to test if the deployment is successful. You can also use the following command to test: > tail -f logs/tron.log |grep \"MyheadBlockNumber\" When to deploy private environment, what's the relationship of SuperNode and FullNode? Should I firstly deploy a SuperNode, and then deploy a FullNode\uff1f \u00b6 Under private environment, there should be at least one SuperNode, there is no amount limit for FullNode. How to know whether my test SuperNode is running or not? \u00b6 Using the following command > tail -f logs/tron.log |grep \"Try Produce Block\" Can SolidityNode and FullNode be deployed in one machine? Will they share the data? \u00b6 They can be deployed in one machine. You can specify the data storage path in configuration file db.directory = \"database\"\uff0cindex.directory = \"index\" . You can run FullNode.jar and SolidityNode.jar in different paths to separate the data and log. Remember to change the port in config.conf , because two nodes can not work using the same port. SolidityNode is deprecated. Now a FullNode supports all RPCs of a SolidityNode. New developers should deploy FullNode only. Running a Node \u00b6 As under private environment, why the log keeps updating with all other public nodes? What's the difference of private and public environment\uff1f \u00b6 If it is related to ip list: You need to update 'seed.ip' in config.conf, if it is the same as your public ip, and your computer is connected to the internet, it will try to connect other nodes, even if it fails to connect, the ip list will be stored into DB. If it is related to block and transaction: Under private environment, you need to modify the p2p version and parent hash. If they are the same as MainNet or TestNet, and the computer is connected to internet, the node will sync data from public node. Under private environment, should I submit application information to TRON to become a SR? \u00b6 Under private environment, no need to submit application information to TRON to become a SR. Ask\uff1aWhich service port should be public to public network? Default port 18888, 50051 At the worst scenario, if the SuperNode can not be connected, the maximum time it allows the SuperNode to recover its service\uff1f \u00b6 The internet connection recovery time only depends on the recovery of SuperNode itself, has nothing to do with internet situation. Does SolidityNode sync data from FullNode? \u00b6 Yes. Does a node have wallet function? \u00b6 No, but the node provides wallet rpc api. Why does the block process time take so long? \u00b6 java-tron need more RAM to process transactions. Test Net \u00b6 We want to test our SuperNode's performance under test environment, do we need to be voted to become a SR under test environment? \u00b6 Yes. Under test environment, we can vote you to become SR. What is the different between Shasta and Test Net? \u00b6 to be answered Where can I get the test TRX? \u00b6 http://testnet.tronex.io/join/getJoinPage Smart Contract \u00b6 RPC Client and API \u00b6 How to sign transaction from offline node and broadcast to online node? \u00b6 You can use tronweb How to sync wallet-cli with wallet on Tronscan? \u00b6 By using wallet-cli api 'ImportWallet'. Is gateway connected to SolidityNode\uff1f \u00b6 Gateway can connect to SolidityNode and FullNode. What is the different between 'getTransactionById' and 'getTransactionInfoById'? \u00b6 The data they return is from different data modules. 'getTransactionById' focuses on general transaction data, while 'getTransactionInfoById' focuses on transaction fee data. How to broadcast raw transaction\uff1f \u00b6 You can use 'wallet/broadcasthex'. How to get token balance of an account? \u00b6 You can use the following wallet-cli api: triggercontract contractaddress balanceOf(address) \"youraddress\" false 0 0 0 # Error Log \u00b6 What does the following error message mean? \u00b6 17:02:42.699 INFO [o.t.c.s.WitnessService] Try Produce Block 17:02:42.699 INFO [o.t.c.s.WitnessService] Not sync This message means your node does not sync with the network. Before producing blocks, it needs to sync data. You can use the following command to check the block height. > tail -f logs/tron.log |grep \"MyheadBlockNumber\" Other Questions \u00b6 My Question is Not Listed Here? \u00b6 Feel free to join our community, just open an Issue on github: Github: tronprotocol/java-tron","title":"The TRON FAQ"},{"location":"faq/#the-tron-faq","text":"The TRON FAQ Network Design and Protocol How can I generate an account? What is the network flow? After you create a token, how to change its status from 'not started yet' to 'participate'? Is there a place to see if all the SuperNodes are producing blocks? Is the block producing time interval always remain the same? Will the block producing reward reduce half? If one of the top 27 SuperNodes goes wrong, will it be removed from the SRs list? Is there a threshold to become a SR? 27 SRs shares the block producing reward equally or by their computing power? Will there be an over 50% computing power issue in TRON network? Will voting burns TRX? How long does SR's power last? What is the proof of a transaction\uff1f Why I Can't stake TRX longer than 3 days How to watch my account for transactions How to calculate the transaction fee? How to calculate the number of bytes of transactions? How to reset my vote? Node Configuration If I replace the field value of 'genesis.block.witnesses' with the address generated in Tronscan in config.conf, do I need to delete other addresses? Do I need to delete the field 'url' and 'voteCount'? How can I specify the data storage path when start a node? Is there any config file option, which I can use for sending logs to stdout? How to change log level How can I get asset from private net? Compile and Build java-tron build failed with unit test issue Deployment How to test if the deployment works normally, if there is a test api or command like redis: get ping return pong? When to deploy private environment, what's the relationship of SuperNode and FullNode? Should I firstly deploy a SuperNode, and then deploy a FullNode\uff1f How to know whether my test SuperNode is running or not? Can SolidityNode and FullNode be deployed in one machine? Will they share the data? Running a Node As under private environment, why the log keeps updating with all other public nodes? What's the difference of private and public environment\uff1f Under private environment, should I submit application information to TRON to become a SR? At the worst scenario, if the SuperNode can not be connected, the maximum time it allows the SuperNode to recover its service\uff1f Does SolidityNode sync data from FullNode? Does a node have wallet function? Why does the block process time take so long? Test Net We want to test our SuperNode's performance under test environment, do we need to be voted to become a SR under test environment? What is the different between Shasta and Test Net? Where can I get the test TRX? Smart Contract RPC Client and API How to sign transaction from offline node and broadcast to online node? How to sync wallet-cli with wallet on Tronscan? Is gateway connected to SolidityNode\uff1f What is the different between 'getTransactionById' and 'getTransactionInfoById'? How to broadcast raw transaction\uff1f How to get token balance of an account? Error Log What does the following error message mean? Other Questions My Question is Not Listed Here?","title":"The TRON FAQ"},{"location":"faq/#network-design-and-protocol","text":"","title":"Network Design and Protocol"},{"location":"faq/#how-can-i-generate-an-account","text":"You can use wallet-cli or Tronscan .","title":"How can I generate an account?"},{"location":"faq/#what-is-the-network-flow","text":"Network flow depends on transaction volume. As a reference, the average size of a transaction currently is 200 bytes.","title":"What is the network flow?"},{"location":"faq/#after-you-create-a-token-how-to-change-its-status-from-not-started-yet-to-participate","text":"You need to wait till the time reaches the start time of participation you set when create a token. After a token is created, only the token url and description can be modified.","title":"After you create a token, how to change its status from 'not started yet' to 'participate'?"},{"location":"faq/#is-there-a-place-to-see-if-all-the-supernodes-are-producing-blocks","text":"Please refer to Tronscan","title":"Is there a place to see if all the SuperNodes are producing blocks?"},{"location":"faq/#is-the-block-producing-time-interval-always-remain-the-same","text":"The current block producing time interval is 3 seconds. In the future, it may be improved to 1 second.","title":"Is the block producing time interval always remain the same?"},{"location":"faq/#will-the-block-producing-reward-reduce-half","text":"No.","title":"Will the block producing reward reduce half?"},{"location":"faq/#if-one-of-the-top-27-supernodes-goes-wrong-will-it-be-removed-from-the-srs-list","text":"If people stop voting for it, it will drop out of the top 27 SRs.","title":"If one of the top 27 SuperNodes goes wrong, will it be removed from the SRs list?"},{"location":"faq/#is-there-a-threshold-to-become-a-sr","text":"When the amount of votes you get ranks into top 27, you will become a SR.","title":"Is there a threshold to become a SR?"},{"location":"faq/#27-srs-shares-the-block-producing-reward-equally-or-by-their-computing-power","text":"It has nothing to do with computing power. The reward is a fixed 32 TRX for each block produced.","title":"27 SRs shares the block producing reward equally or by their computing power?"},{"location":"faq/#will-there-be-an-over-50-computing-power-issue-in-tron-network","text":"No.","title":"Will there be an over 50% computing power issue in TRON network?"},{"location":"faq/#will-voting-burns-trx","text":"No.","title":"Will voting burns TRX?"},{"location":"faq/#how-long-does-srs-power-last","text":"Every 6 hours, the votes will be counted to check the qualifications of all the SRs.","title":"How long does SR's power last?"},{"location":"faq/#what-is-the-proof-of-a-transaction","text":"Transaction hash.","title":"What is the proof of a transaction\uff1f"},{"location":"faq/#why-i-cant-stake-trx-longer-than-3-days","text":"Staked duration must be 3 days now. It means you can not unstake until the 3 days duration expires. If you don't unstake after 3 days, the staked TRX will remain in staked status until you unstake it.","title":"Why I Can't stake TRX longer than 3 days"},{"location":"faq/#how-to-watch-my-account-for-transactions","text":"To meet your needs, you can use TRON event subscription plugin. For more detail, please refer to https://tronprotocol.github.io/documentation-en/architecture/plugin/#tron-event-subscription","title":"How to watch my account for transactions"},{"location":"faq/#how-to-calculate-the-transaction-fee","text":"please refer to https://tronprotocol.github.io/documentation-en/mechanism-algorithm/resource/","title":"How to calculate the transaction fee?"},{"location":"faq/#how-to-calculate-the-number-of-bytes-of-transactions","text":"tx-size = grpcClient.getTransactionById(txId).get().getSerializedSize() + 60","title":"How to calculate the number of bytes of transactions?"},{"location":"faq/#how-to-reset-my-vote","text":"You need to vote again, set your votes number to 0.","title":"How to reset my vote?"},{"location":"faq/#node-configuration","text":"","title":"Node Configuration"},{"location":"faq/#if-i-replace-the-field-value-of-genesisblockwitnesses-with-the-address-generated-in-tronscan-in-configconf-do-i-need-to-delete-other-addresses-do-i-need-to-delete-the-field-url-and-votecount","text":"No need to delete other addresses, these addresses will be a part of your net, but if you do not own the private keys of these addresses, they will act like abandoned addresses. Note: The addresses of Zion\u3001Sun and Blackhole can not be deleted, but can be modified.","title":"If I replace the field value of 'genesis.block.witnesses' with the address generated in Tronscan in config.conf, do I need to delete other addresses? Do I need to delete the field 'url' and 'voteCount'?"},{"location":"faq/#how-can-i-specify-the-data-storage-path-when-start-a-node","text":"You can add the data storage path when you start the node, like: java -jar FullNode.jar -c config.conf -d /data/output","title":"How can I specify the data storage path when start a node?"},{"location":"faq/#is-there-any-config-file-option-which-i-can-use-for-sending-logs-to-stdout","text":"Steps to send logs to stdout: Download https://github.com/tronprotocol/java-tron/blob/develop/src/main/resources/logback.xml Uncomment the configuration: appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\" Go to the configuration: root level=\"INFO\" uncomment the configuration: appender-ref ref=\"STDOUT\" comment the configuration: appender-ref ref=\"ASYNC\" Move logback.xml to the same directory with FullNode.jar Launch FullNode.jar with additional parameter: --log-config logback.xml, for example: java -jar FullNode.jar --log-config logback.xml","title":"Is there any config file option, which I can use for sending logs to stdout?"},{"location":"faq/#how-to-change-log-level","text":"The log level is defined in logback.xml. Please set the root level to \"ERROR\" if you want to filter only error logs. Please refer to the configuration below. <root level= \"ERROR\" > <!--<appender-ref ref=\"STDOUT\"/>--> <appender-ref ref= \"ASYNC\" /> </root> <logger name= \"app\" level= \"ERROR\" /> <logger name= \"net\" level= \"ERROR\" /> <logger name= \"backup\" level= \"ERROR\" /> <logger name= \"discover\" level= \"ERROR\" /> <logger name= \"crypto\" level= \"ERROR\" /> <logger name= \"utils\" level= \"ERROR\" /> <logger name= \"actuator\" level= \"ERROR\" /> <logger name= \"API\" level= \"ERROR\" /> <logger name= \"witness\" level= \"ERROR\" /> <logger name= \"DB\" level= \"ERROR\" /> <logger name= \"capsule\" level= \"ERROR\" /> <logger name= \"VM\" level= \"ERROR\" />","title":"How to change log level"},{"location":"faq/#how-can-i-get-asset-from-private-net","text":"In private network, you can set the initial account balance in config file. Please refer to below settings: genesis.block = { # Reserve balance assets = [ { accountName = \"TestA\" accountType = \"AssetIssue\" address = \"THRR7uvFbRLfNzpKPXEyQa8KCJqi59V59e\" balance = \"1000000000000000\" }, { accountName = \"TestB\" accountType = \"AssetIssue\" address = \"TBLZaw93rsnLJ1SWTvoPkr7GVg5ixn2Jv1\" balance = \"1000000000000000\" }, { accountName = \"TestC\" accountType = \"AssetIssue\" address = \"TJg8yZ4Co8RXsHmTWissmSL1VpL7dCybY1\" balance = \"1000000000000000\" } ]","title":"How can I get asset from private net?"},{"location":"faq/#compile-and-build","text":"","title":"Compile and Build"},{"location":"faq/#java-tron-build-failed-with-unit-test-issue","text":"Please use './gradlew build -x test' to skip the test cases.","title":"java-tron build failed with unit test issue"},{"location":"faq/#deployment","text":"","title":"Deployment"},{"location":"faq/#how-to-test-if-the-deployment-works-normally-if-there-is-a-test-api-or-command-like-redis-get-ping-return-pong","text":"java-tron does not provide a default api to test. Once the service start, grpc commands can be sent. Based on that, there are several ways to test if the deployment is successful. You can also use the following command to test: > tail -f logs/tron.log |grep \"MyheadBlockNumber\"","title":"How to test if the deployment works normally, if there is a test api or command like redis: get ping return pong?"},{"location":"faq/#when-to-deploy-private-environment-whats-the-relationship-of-supernode-and-fullnode-should-i-firstly-deploy-a-supernode-and-then-deploy-a-fullnode","text":"Under private environment, there should be at least one SuperNode, there is no amount limit for FullNode.","title":"When to deploy private environment, what's the relationship of SuperNode and FullNode? Should I firstly deploy a SuperNode, and then deploy a FullNode\uff1f"},{"location":"faq/#how-to-know-whether-my-test-supernode-is-running-or-not","text":"Using the following command > tail -f logs/tron.log |grep \"Try Produce Block\"","title":"How to know whether my test SuperNode is running or not?"},{"location":"faq/#can-soliditynode-and-fullnode-be-deployed-in-one-machine-will-they-share-the-data","text":"They can be deployed in one machine. You can specify the data storage path in configuration file db.directory = \"database\"\uff0cindex.directory = \"index\" . You can run FullNode.jar and SolidityNode.jar in different paths to separate the data and log. Remember to change the port in config.conf , because two nodes can not work using the same port. SolidityNode is deprecated. Now a FullNode supports all RPCs of a SolidityNode. New developers should deploy FullNode only.","title":"Can SolidityNode and FullNode be deployed in one machine? Will they share the data?"},{"location":"faq/#running-a-node","text":"","title":"Running a Node"},{"location":"faq/#as-under-private-environment-why-the-log-keeps-updating-with-all-other-public-nodes-whats-the-difference-of-private-and-public-environment","text":"If it is related to ip list: You need to update 'seed.ip' in config.conf, if it is the same as your public ip, and your computer is connected to the internet, it will try to connect other nodes, even if it fails to connect, the ip list will be stored into DB. If it is related to block and transaction: Under private environment, you need to modify the p2p version and parent hash. If they are the same as MainNet or TestNet, and the computer is connected to internet, the node will sync data from public node.","title":"As under private environment, why the log keeps updating with all other public nodes? What's the difference of private and public environment\uff1f"},{"location":"faq/#under-private-environment-should-i-submit-application-information-to-tron-to-become-a-sr","text":"Under private environment, no need to submit application information to TRON to become a SR. Ask\uff1aWhich service port should be public to public network? Default port 18888, 50051","title":"Under private environment, should I submit application information to TRON to become a SR?"},{"location":"faq/#at-the-worst-scenario-if-the-supernode-can-not-be-connected-the-maximum-time-it-allows-the-supernode-to-recover-its-service","text":"The internet connection recovery time only depends on the recovery of SuperNode itself, has nothing to do with internet situation.","title":"At the worst scenario, if the SuperNode can not be connected, the maximum time it allows the SuperNode to recover its service\uff1f"},{"location":"faq/#does-soliditynode-sync-data-from-fullnode","text":"Yes.","title":"Does SolidityNode sync data from FullNode?"},{"location":"faq/#does-a-node-have-wallet-function","text":"No, but the node provides wallet rpc api.","title":"Does a node have wallet function?"},{"location":"faq/#why-does-the-block-process-time-take-so-long","text":"java-tron need more RAM to process transactions.","title":"Why does the block process time take so long?"},{"location":"faq/#test-net","text":"","title":"Test Net"},{"location":"faq/#we-want-to-test-our-supernodes-performance-under-test-environment-do-we-need-to-be-voted-to-become-a-sr-under-test-environment","text":"Yes. Under test environment, we can vote you to become SR.","title":"We want to test our SuperNode's performance under test environment, do we need to be voted to become a SR under test environment?"},{"location":"faq/#what-is-the-different-between-shasta-and-test-net","text":"to be answered","title":"What is the different between Shasta and Test Net?"},{"location":"faq/#where-can-i-get-the-test-trx","text":"http://testnet.tronex.io/join/getJoinPage","title":"Where can I get the test TRX?"},{"location":"faq/#smart-contract","text":"","title":"Smart Contract"},{"location":"faq/#rpc-client-and-api","text":"","title":"RPC Client and API"},{"location":"faq/#how-to-sign-transaction-from-offline-node-and-broadcast-to-online-node","text":"You can use tronweb","title":"How to sign transaction from offline node and broadcast to online node?"},{"location":"faq/#how-to-sync-wallet-cli-with-wallet-on-tronscan","text":"By using wallet-cli api 'ImportWallet'.","title":"How to sync wallet-cli with wallet on Tronscan?"},{"location":"faq/#is-gateway-connected-to-soliditynode","text":"Gateway can connect to SolidityNode and FullNode.","title":"Is gateway connected to SolidityNode\uff1f"},{"location":"faq/#what-is-the-different-between-gettransactionbyid-and-gettransactioninfobyid","text":"The data they return is from different data modules. 'getTransactionById' focuses on general transaction data, while 'getTransactionInfoById' focuses on transaction fee data.","title":"What is the different between 'getTransactionById' and 'getTransactionInfoById'?"},{"location":"faq/#how-to-broadcast-raw-transaction","text":"You can use 'wallet/broadcasthex'.","title":"How to broadcast raw transaction\uff1f"},{"location":"faq/#how-to-get-token-balance-of-an-account","text":"You can use the following wallet-cli api: triggercontract contractaddress balanceOf(address) \"youraddress\" false 0 0 0 #","title":"How to get token balance of an account?"},{"location":"faq/#error-log","text":"","title":"Error Log"},{"location":"faq/#what-does-the-following-error-message-mean","text":"17:02:42.699 INFO [o.t.c.s.WitnessService] Try Produce Block 17:02:42.699 INFO [o.t.c.s.WitnessService] Not sync This message means your node does not sync with the network. Before producing blocks, it needs to sync data. You can use the following command to check the block height. > tail -f logs/tron.log |grep \"MyheadBlockNumber\"","title":"What does the following error message mean?"},{"location":"faq/#other-questions","text":"","title":"Other Questions"},{"location":"faq/#my-question-is-not-listed-here","text":"Feel free to join our community, just open an Issue on github: Github: tronprotocol/java-tron","title":"My Question is Not Listed Here?"},{"location":"getting_started/getting_started_with_javatron/","text":"Getting Started with java-tron \u00b6 This page mainly explains how to start the java-tron node and use the command line tool wallet-cli to execute basic commands to interact with the java-tron node. Regarding the installation of java-tron, you can download the runnable file directly or build it from source code. Instructions for installing java-tron can be found on the Install and Build page. This tutorial on this page assumes java-tron and associated developer tools have been successfully installed. This page covers the basics of using java-tron, which includes generating accounts, joining the TRON Nile testnet, and sending TRX between accounts. Wallet-cli is also used in this document. Wallet-cli is a command-line tool of the TRON network. This tool provides user interactive commands, which can be used to interact with java-tron more conveniently. java-tron is a TRON network client written in Java. This means a computer running java-tron will become a TRON network node. TRON is a distributed network where information is shared directly between nodes rather than being managed by a central server. After the super representative's node generates a new block, it will send the block to its peers. On receiving a new block, each node checks that it is valid and adds it to their database. java-tron uses the information provided by each block to update its \"state\" - the balance of each account on the TRON network. There are two types of accounts on the TRON network: externally owned accounts and contract accounts. The contract account executes the contract code when a transaction is received. An external account is an account that a user manages locally in order to sign and submit transactions. Each external account is a public-private key pair, where the public key is used to derive a unique address for the user, and the private key is used to protect the account and securely sign messages. Therefore, in order to use the TRON network, it is first necessary to generate an external account (hereinafter referred to as \"account\"). This tutorial will guide users on how to create an account, deposit TRX tokens, and transfer TRX. Generating accounts \u00b6 There are various ways to generate a TRON network account, here we will demonstrate how to generate an account using wallet-cli. An account is a pair of keys (public and private keys). Enter the command java -jar wallet-cli.jar in the terminal to start a wallet-cli: $ java -jar wallet-cli.jar Welcome to TRON Wallet-Cli Please type one of the following commands to proceed. Login, RegisterWallet or ImportWallet You may also use the Help command at anytime to display a full list of commands. wallet> Enter the command: registerwallet , and then enter the password as prompted. This command will generate a TRON network account and register it with wallet-cli, that is, wallet-cli will save the private key of this account, and then you can use the private key to sign transactions. wallet> registerwallet Please input password. password: user defined config file doesn't exists, use default config file in jar WalletApi getRpcVsersion: 2 Please input password again. password: Register a wallet successful, keystore file name is UTC--2022-07-04T06-35-35.304000000Z--TQXjm2J8K2DKTV49MdfT2anjUehbU3WDJz.json wallet> Login wallet-cli \u00b6 After the registration is complete, enter the login command to log in to wallet-cli. wallet> login Select the account you want to login, and then enter the password. If the password is entered correctly, you will see the following result to the terminal: \"Login successful !!!\". Please choose between 1 and 3 2 Please input your password. password: Login successful !!! wallet> After logging in, you can view the login account address through the getaddress command: wallet> getaddress GetAddress successful !! address = TQXjm2J8K2DKTV49MdfT2anjUehbU3WDJz wallet> Then you can use the backupwallet command to view the private key of the account, you need to enter the password according to the prompt. It is recommended to save the private key. Run a java-tron node \u00b6 java-tron is a TRON network client that enables computers to connect to the TRON network. The network in this tutorial refers to the TRON Nile testnet. To start java-tron, you need first obtain the java-tron executable file, please refer to the Installation and Deployment chapter, and then run the following command to start java-tron. $ java -Xmx24g -XX:+UseConcMarkSweepGC -jar FullNode.jar -c nile_net_config.conf After java-tron starts, the logs will include the following: 11:07:58.758 INFO [main] [app](Args.java:1143) ************************ Net config ************************ 11:07:58.758 INFO [main] [app](Args.java:1144) P2P version: 201910292 11:07:58.758 INFO [main] [app](Args.java:1145) Bind IP: 192.168.20.101 11:07:58.758 INFO [main] [app](Args.java:1146) External IP: 203.12.203.3 11:07:58.758 INFO [main] [app](Args.java:1147) Listen port: 18888 11:07:58.758 INFO [main] [app](Args.java:1148) Discover enable: true The above logs indicate that java-tron has started and connected to the Nile testnet, then it will look for peers to connect to. Once it has found peers, it can request blocks from them, and the logs confirm this: 11:08:42.547 INFO [TronJClientWorker-1] [net](Channel.java:116) Finish handshake with /123.56.3.74:18888. 11:08:42.547 INFO [TronJClientWorker-1] [net](ChannelManager.java:161) Add active peer /123.56.3.74:18888 | fea80a0298b465a54fd332ff36819545d850115e77b327858b5306c9a58c6b8c2e7c08df76ab508a7594ed3577a8f4157727108442877077ab499b102b488467, total active peers: 1 11:08:42.549 INFO [TronJClientWorker-1] [net](Channel.java:208) Peer /123.56.3.74:18888 status change to SYNCING. 11:08:42.566 INFO [TronJClientWorker-1] [DB](Manager.java:1636) headNumber:23113867 11:08:42.566 INFO [TronJClientWorker-1] [DB](Manager.java:1638) syncBeginNumber:23113867 11:08:42.567 INFO [TronJClientWorker-1] [DB](Manager.java:1642) solidBlockNumber:23113849 11:08:42.567 INFO [TronJClientWorker-1] [net](SyncService.java:179) Get block chain summary, low: 23113867, highNoFork: 23113867, high: 23113867, realHigh: 23113867 11:08:42.572 INFO [TronJClientWorker-1] [net](MessageQueue.java:106) Send to /123.56.3.74:18888, type: SYNC_BLOCK_CHAIN size: 1, start block: Num:23113867,ID:000000000160b08b510b6c501c980a2567bff1229eed62ca79874c9ca7828e9c 11:08:42.631 INFO [TronJClientWorker-1] [net](MessageQueue.java:121) Receive from /123.56.3.74:18888, type: BLOCK_CHAIN_INVENTORY size: 2001, first blockId: Num:23113867,ID:000000000160b08b510b6c501c980a2567bff1229eed62ca79874c9ca7828e9c, end blockId: Num:23115867,ID:000000000160b85b587ef18d00a1905d8022ec0a8fd174f3980b78f6aacf0ede ...... 11:08:43.478 INFO [pool-49-thread-1] [net](MessageQueue.java:106) Send to /123.56.3.74:18888, type: FETCH_INV_DATA invType: BLOCK, size: 100, First hash: 000000000160b08c6eeba60eced4fb13d7c56e46a3c5220a67bb2801a05e5679, End hash: 000000000160b0efd90560e389d1f6e5b3c8d3877709ce375a8e063f5db73af9 11:08:43.502 INFO [TronJClientWorker-1] [net](MessageQueue.java:121) Receive from /123.56.3.74:18888, type: BLOCK Num:23113868,ID:000000000160b08c6eeba60eced4fb13d7c56e46a3c5220a67bb2801a05e5679, trx size: 1 11:08:43.504 INFO [TronJClientWorker-1] [net](MessageQueue.java:121) Receive from /123.56.3.74:18888, type: BLOCK Num:23113869,ID:000000000160b08d231e450ae1993a72ba19eb8f3c748fa70d105dadd0c9fd5f, trx size: 0 11:08:43.504 INFO [TronJClientWorker-1] [net](MessageQueue.java:121) Receive from /123.56.3.74:18888, type: BLOCK Num:23113870,ID:000000000160b08e37cb9951d31a4233f106c7e77e0535c597dbb6a16f163699, trx size: 0 These logs show that java-tron is running as expected. You can determine whether the node has been started and check the status of the node by sending the following http request to the java-tron node: $ curl http://127.0.0.1:16887/wallet/getnodeinfo If no error messages are reported in the node logs, everything is fine. In order for users to interact with the TRON network, the java-tron node must be running and in a normal state of synchronization. Whether the node is synchronized with other nodes in the network, you can query the current block height in Tronscan and compare it with the result of the local java-tron node /wallet/getnowblock . If they are equal, it means that the synchronization status of the local node is normal. If you want to shut down java-tron node, please use this command: kill -15 process id . Get TRX on Nile testnet \u00b6 In order to make some transactions, the user must fund their account with TRX. On TRON mainnet, TRX can only be obtained in three ways: 1. Rewards for block production by SRs/rewards for voting for SRs\uff1b 2. Another TRON account transfers TRX to it; 3. Obtained from the exchange. In the TRON testnet, TRX has no real value and can be obtained for free through faucet . Interact with java-tron \u00b6 Interacting with java-tron nodes using wallet-cli \u00b6 java-tron provides http interface and grpc interface externally, which is convenient for users to interact with TRON network. wallet-cli uses the grpc interface. Get account information \u00b6 After entering the getaccount command in wallet-cli, it will request account information data from the java-tron node, and then display the result in the terminal. wallet> getaccount TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM Result: { \"address\": \"TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\", \"balance\": 93643857919, \"create_time\": 1619681898000, \"latest_opration_time\": 1655358327000, \"is_witness\": true, \"asset_issued_name\": \"TestTRC10T\", \"latest_consume_free_time\": 1652948766000, \"account_resource\": { \"latest_consume_time_for_energy\": 1655358327000 }, ...... } Get account balance \u00b6 Get the balance of an account with the getbalance command: wallet> getbalance Balance = 93642857919 wallet> Transferring TRX \u00b6 To transfer TRX through the sendcoin command, enter the transfer address, and the amount: wallet> sendcoin TUznHJfHe6gdYY7gvWmf6bNZHuPHDZtowf 1000000 { \"raw_data\":{ \"contract\":[ { \"parameter\":{ \"value\":{ \"amount\":1000000, \"owner_address\":\"TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\", \"to_address\":\"TUznHJfHe6gdYY7gvWmf6bNZHuPHDZtowf\" }, \"type_url\":\"type.googleapis.com/protocol.TransferContract\" }, \"type\":\"TransferContract\" } ], \"ref_block_bytes\":\"cbc3\", \"ref_block_hash\":\"8581ae7e29258a52\", \"expiration\":1656917577000, \"timestamp\":1656917518232 }, \"raw_data_hex\":\"0a02cbc322088581ae7e29258a5240a89aefbf9c305a67080112630a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412320a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca121541d0b69631440f0a494bb51f7eee68ff5c593c00f018c0843d7098cfebbf9c30\" } before sign transaction hex string is 0a85010a02cbc322088581ae7e29258a5240a89aefbf9c305a67080112630a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412320a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca121541d0b69631440f0a494bb51f7eee68ff5c593c00f018c0843d7098cfebbf9c30 Please confirm and input your permission id, if input y or Y means default 0, other non-numeric characters will cancel transaction. This command returns the transaction of transferring TRX. After confirmation, enter y to confirm, and other letters indicate to cancel the transaction. If you enter y , then according to the prompt, choose which account's private key to use for signing, and finally enter the password to complete the signing of the transaction, and wallet-cli will send the signed transaction to the java-tron node. Please confirm and input your permission id, if input y or Y means default 0, other non-numeric characters will cancel transaction. y Please choose your key for sign. The 1th keystore file name is .DS_Store The 2th keystore file name is UTC--2022-07-04T06-35-35.304000000Z--TQXjm2J8K2DKTV49MdfT2anjUehbU3WDJz.json The 3th keystore file name is UTC--2022-06-21T09-51-26.367000000Z--TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM.json Please choose between 1 and 3 3 Please input your password. password: after sign transaction hex string is 0a85010a02cbc322088581ae7e29258a5240dbfc91ca9c305a67080112630a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412320a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca121541d0b69631440f0a494bb51f7eee68ff5c593c00f018c0843d7098cfebbf9c301241241a3ce4797ccc2fedf49ae41af28b49df1e15a476e4948af4df5aadf23a1e940ad5cc2133f501c08f2bab6a2231cdc82a745fed0fc6a012dc19310532d9138600 txid is 21851bcf1faf22c99a7a49c4f246d709cf9f54db2f264ca145adcd464ea155a4 Send 1000000 Sun to TUznHJfHe6gdYY7gvWmf6bNZHuPHDZtowf successful !! wallet> Query transaction by transaction id \u00b6 The above step sends a transferring TRX transaction through the sendcoin command, and prints the id of the transaction on the wallet-cli terminal: 21851bcf1faf22c99a7a49c4f246d709cf9f54db2f264ca145adcd464ea155a4 . Next, you can query the transaction through gettransactionbyid , or query the result of the transaction through gettransactioninfobyid . wallet> gettransactionbyid 21851bcf1faf22c99a7a49c4f246d709cf9f54db2f264ca145adcd464ea155a4 { \"ret\":[ { \"contractRet\":\"SUCCESS\" } ], \"signature\":[ \"241a3ce4797ccc2fedf49ae41af28b49df1e15a476e4948af4df5aadf23a1e940ad5cc2133f501c08f2bab6a2231cdc82a745fed0fc6a012dc19310532d9138600\" ], \"txID\":\"21851bcf1faf22c99a7a49c4f246d709cf9f54db2f264ca145adcd464ea155a4\", \"raw_data\":{ \"contract\":[ { \"parameter\":{ \"value\":{ \"amount\":1000000, \"owner_address\":\"TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\", \"to_address\":\"TUznHJfHe6gdYY7gvWmf6bNZHuPHDZtowf\" }, \"type_url\":\"type.googleapis.com/protocol.TransferContract\" }, \"type\":\"TransferContract\" } ], \"ref_block_bytes\":\"cbc3\", \"ref_block_hash\":\"8581ae7e29258a52\", \"expiration\":1656939118171, \"timestamp\":1656917518232 }, \"raw_data_hex\":\"0a02cbc322088581ae7e29258a5240dbfc91ca9c305a67080112630a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412320a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca121541d0b69631440f0a494bb51f7eee68ff5c593c00f018c0843d7098cfebbf9c30\" } wallet> wallet> gettransactioninfobyid 21851bcf1faf22c99a7a49c4f246d709cf9f54db2f264ca145adcd464ea155a4 { \"id\": \"21851bcf1faf22c99a7a49c4f246d709cf9f54db2f264ca145adcd464ea155a4\", \"blockNumber\": 27773932, \"blockTimeStamp\": 1656917586000, \"contractResult\": [ \"\" ], \"receipt\": { \"net_usage\": 267 } } wallet> Interacting with java-tron nodes using Curl \u00b6 The above describes how to use wallet-cli to interact with java-tron. Compared with sending grpc/http commands directly, this tool provides more friendly interactive commands, allowing users to send commands to java-tron more conveniently. But, how to send HTTP requests directly to the java-tron node? Curl is a command line tool for sending HTTP requests. This chapter will explain how to check account balances and send transactions through Curl. Get account balance \u00b6 You can query the TRX balance information of the account through the node HTTP interface wallet/getaccount . The balance field in the returned result is the TRX balance, in sun: curl -X POST http://127.0.0.1:16887/wallet/getaccount -d '{\"address\": \"TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\", \"visible\": true }' Result\uff1a {\"account_name\": \"testacc2\",\"address\": \"TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\",\"balance\": 1000000000000000,\"account_resource\": {}} Send transactions \u00b6 Sending a transaction through the http interface requires a total of three steps: Create a transaction Sign the transaction Broadcast transaction The following takes the transferring TRX as an example to illustrate how to send a transaction to java-tron node. Create an unsigned TRX transferring transaction through the fullnode HTTP interface wallet/createtransaction : curl -X POST http://127.0.0.1:16887/wallet/createtransaction -d '{ \"to_address\": \"TUznHJfHe6gdYY7gvWmf6bNZHuPHDZtowf\", \"owner_address\": \"TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\", \"amount\": 10000000, \"visible\":true }' Returns an unsigned TRX transferring transaction: { \"visible\": true, \"txID\": \"c558bd35978267d8999baf6148703cbc94786f3f2e22893637588ca05437d7f0\", \"raw_data\": { \"contract\": [ { \"parameter\": { \"value\": { \"amount\": 10000000, \"owner_address\": \"TPswDDCAWhJAZGdHPidFg5nEf8TkNToDX1\", \"to_address\": \"TUznHJfHe6gdYY7gvWmf6bNZHuPHDZtowf\" }, \"type_url\": \"type.googleapis.com/protocol.TransferContract\" }, \"type\": \"TransferContract\" } ], \"ref_block_bytes\": \"193b\", \"ref_block_hash\": \"aaecd88e4e0e7528\", \"expiration\": 1656580476000, \"timestamp\": 1656580418228 }, \"raw_data_hex\": \"0a02193b2208aaecd88e4e0e752840e098909f9b305a68080112640a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412330a154198927ffb9f554dc4a453c64b2e553a02d6df514b121541d0b69631440f0a494bb51f7eee68ff5c593c00f01880ade20470b4d58c9f9b30\" } Then sign the transaction offline. Finally, Broadcast the signed transaction to the java-tron node through the wallet/broadcasttransaction interface to complete the sending of the TRX transferring transaction. curl --location --request POST 'http://127.0.0.1:16887/wallet/broadcasttransaction' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"visible\": true, \"signature\": [ \"e12996cfaf52f8b49e64400987f9158a87b1aa809a11a75e01bb230722db97a26204334aea945b1ece0851a89c96459872e56229b0bd725c4f6a0577bfe331c301\" ], \"txID\": \"c558bd35978267d8999baf6148703cbc94786f3f2e22893637588ca05437d7f0\", \"raw_data\": { \"contract\": [ { \"parameter\": { \"value\": { \"amount\": 10000000, \"owner_address\": \"TPswDDCAWhJAZGdHPidFg5nEf8TkNToDX1\", \"to_address\": \"TUznHJfHe6gdYY7gvWmf6bNZHuPHDZtowf\" }, \"type_url\": \"type.googleapis.com/protocol.TransferContract\" }, \"type\": \"TransferContract\" } ], \"ref_block_bytes\": \"193b\", \"ref_block_hash\": \"aaecd88e4e0e7528\", \"expiration\": 1656580476000, \"timestamp\": 1656580418228 }, \"raw_data_hex\": \"0a02193b2208aaecd88e4e0e752840e098909f9b305a68080112640a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412330a154198927ffb9f554dc4a453c64b2e553a02d6df514b121541d0b69631440f0a494bb51f7eee68ff5c593c00f01880ade20470b4d58c9f9b30\" }' Result\uff1a { \"result\": true, \"txid\": \"c558bd35978267d8999baf6148703cbc94786f3f2e22893637588ca05437d7f0\" } The return result is true, indicating that the transaction broadcast was successful. Query transaction by transaction id \u00b6 Query the content of the transaction through the http interface wallet/gettransactionbyid : curl --location --request POST 'http://127.0.0.1:16887/wallet/gettransactionbyid' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"value\": \"c558bd35978267d8999baf6148703cbc94786f3f2e22893637588ca05437d7f0\" }' Result: { \"ret\" : [ { \"contractRet\" : \"SUCCESS\" } ], \"signature\" : [ \"e12996cfaf52f8b49e64400987f9158a87b1aa809a11a75e01bb230722db97a26204334aea945b1ece0851a89c96459872e56229b0bd725c4f6a0577bfe331c301\" ], \"txID\" : \"c558bd35978267d8999baf6148703cbc94786f3f2e22893637588ca05437d7f0\" , \"raw_data\" : { \"contract\" : [ { \"parameter\" : { \"value\" : { \"amount\" : 10000000 , \"owner_address\" : \"4198927ffb9f554dc4a453c64b2e553a02d6df514b\" , \"to_address\" : \"41d0b69631440f0a494bb51f7eee68ff5c593c00f0\" }, \"type_url\" : \"type.googleapis.com/protocol.TransferContract\" }, \"type\" : \"TransferContract\" } ], \"ref_block_bytes\" : \"193b\" , \"ref_block_hash\" : \"aaecd88e4e0e7528\" , \"expiration\" : 1656580476000 , \"timestamp\" : 1656580418228 }, \"raw_data_hex\" : \"0a02193b2208aaecd88e4e0e752840e098909f9b305a68080112640a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412330a154198927ffb9f554dc4a453c64b2e553a02d6df514b121541d0b69631440f0a494bb51f7eee68ff5c593c00f01880ade20470b4d58c9f9b30\" } Query transaction results and transaction receipts through the http interface wallet/gettransactioninfobyid : curl --location --request POST 'http://127.0.0.1:16887/wallet/gettransactioninfobyid' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"value\": \"c558bd35978267d8999baf6148703cbc94786f3f2e22893637588ca05437d7f0\" }' Result: { \"id\": \"c558bd35978267d8999baf6148703cbc94786f3f2e22893637588ca05437d7f0\", \"blockNumber\": 27662687, \"blockTimeStamp\": 1656580470000, \"contractResult\": [ \"\" ], \"receipt\": { \"net_usage\": 268 } }","title":"Getting Started with java-tron"},{"location":"getting_started/getting_started_with_javatron/#getting-started-with-java-tron","text":"This page mainly explains how to start the java-tron node and use the command line tool wallet-cli to execute basic commands to interact with the java-tron node. Regarding the installation of java-tron, you can download the runnable file directly or build it from source code. Instructions for installing java-tron can be found on the Install and Build page. This tutorial on this page assumes java-tron and associated developer tools have been successfully installed. This page covers the basics of using java-tron, which includes generating accounts, joining the TRON Nile testnet, and sending TRX between accounts. Wallet-cli is also used in this document. Wallet-cli is a command-line tool of the TRON network. This tool provides user interactive commands, which can be used to interact with java-tron more conveniently. java-tron is a TRON network client written in Java. This means a computer running java-tron will become a TRON network node. TRON is a distributed network where information is shared directly between nodes rather than being managed by a central server. After the super representative's node generates a new block, it will send the block to its peers. On receiving a new block, each node checks that it is valid and adds it to their database. java-tron uses the information provided by each block to update its \"state\" - the balance of each account on the TRON network. There are two types of accounts on the TRON network: externally owned accounts and contract accounts. The contract account executes the contract code when a transaction is received. An external account is an account that a user manages locally in order to sign and submit transactions. Each external account is a public-private key pair, where the public key is used to derive a unique address for the user, and the private key is used to protect the account and securely sign messages. Therefore, in order to use the TRON network, it is first necessary to generate an external account (hereinafter referred to as \"account\"). This tutorial will guide users on how to create an account, deposit TRX tokens, and transfer TRX.","title":"Getting Started with java-tron"},{"location":"getting_started/getting_started_with_javatron/#generating-accounts","text":"There are various ways to generate a TRON network account, here we will demonstrate how to generate an account using wallet-cli. An account is a pair of keys (public and private keys). Enter the command java -jar wallet-cli.jar in the terminal to start a wallet-cli: $ java -jar wallet-cli.jar Welcome to TRON Wallet-Cli Please type one of the following commands to proceed. Login, RegisterWallet or ImportWallet You may also use the Help command at anytime to display a full list of commands. wallet> Enter the command: registerwallet , and then enter the password as prompted. This command will generate a TRON network account and register it with wallet-cli, that is, wallet-cli will save the private key of this account, and then you can use the private key to sign transactions. wallet> registerwallet Please input password. password: user defined config file doesn't exists, use default config file in jar WalletApi getRpcVsersion: 2 Please input password again. password: Register a wallet successful, keystore file name is UTC--2022-07-04T06-35-35.304000000Z--TQXjm2J8K2DKTV49MdfT2anjUehbU3WDJz.json wallet>","title":"Generating accounts"},{"location":"getting_started/getting_started_with_javatron/#login-wallet-cli","text":"After the registration is complete, enter the login command to log in to wallet-cli. wallet> login Select the account you want to login, and then enter the password. If the password is entered correctly, you will see the following result to the terminal: \"Login successful !!!\". Please choose between 1 and 3 2 Please input your password. password: Login successful !!! wallet> After logging in, you can view the login account address through the getaddress command: wallet> getaddress GetAddress successful !! address = TQXjm2J8K2DKTV49MdfT2anjUehbU3WDJz wallet> Then you can use the backupwallet command to view the private key of the account, you need to enter the password according to the prompt. It is recommended to save the private key.","title":"Login wallet-cli"},{"location":"getting_started/getting_started_with_javatron/#run-a-java-tron-node","text":"java-tron is a TRON network client that enables computers to connect to the TRON network. The network in this tutorial refers to the TRON Nile testnet. To start java-tron, you need first obtain the java-tron executable file, please refer to the Installation and Deployment chapter, and then run the following command to start java-tron. $ java -Xmx24g -XX:+UseConcMarkSweepGC -jar FullNode.jar -c nile_net_config.conf After java-tron starts, the logs will include the following: 11:07:58.758 INFO [main] [app](Args.java:1143) ************************ Net config ************************ 11:07:58.758 INFO [main] [app](Args.java:1144) P2P version: 201910292 11:07:58.758 INFO [main] [app](Args.java:1145) Bind IP: 192.168.20.101 11:07:58.758 INFO [main] [app](Args.java:1146) External IP: 203.12.203.3 11:07:58.758 INFO [main] [app](Args.java:1147) Listen port: 18888 11:07:58.758 INFO [main] [app](Args.java:1148) Discover enable: true The above logs indicate that java-tron has started and connected to the Nile testnet, then it will look for peers to connect to. Once it has found peers, it can request blocks from them, and the logs confirm this: 11:08:42.547 INFO [TronJClientWorker-1] [net](Channel.java:116) Finish handshake with /123.56.3.74:18888. 11:08:42.547 INFO [TronJClientWorker-1] [net](ChannelManager.java:161) Add active peer /123.56.3.74:18888 | fea80a0298b465a54fd332ff36819545d850115e77b327858b5306c9a58c6b8c2e7c08df76ab508a7594ed3577a8f4157727108442877077ab499b102b488467, total active peers: 1 11:08:42.549 INFO [TronJClientWorker-1] [net](Channel.java:208) Peer /123.56.3.74:18888 status change to SYNCING. 11:08:42.566 INFO [TronJClientWorker-1] [DB](Manager.java:1636) headNumber:23113867 11:08:42.566 INFO [TronJClientWorker-1] [DB](Manager.java:1638) syncBeginNumber:23113867 11:08:42.567 INFO [TronJClientWorker-1] [DB](Manager.java:1642) solidBlockNumber:23113849 11:08:42.567 INFO [TronJClientWorker-1] [net](SyncService.java:179) Get block chain summary, low: 23113867, highNoFork: 23113867, high: 23113867, realHigh: 23113867 11:08:42.572 INFO [TronJClientWorker-1] [net](MessageQueue.java:106) Send to /123.56.3.74:18888, type: SYNC_BLOCK_CHAIN size: 1, start block: Num:23113867,ID:000000000160b08b510b6c501c980a2567bff1229eed62ca79874c9ca7828e9c 11:08:42.631 INFO [TronJClientWorker-1] [net](MessageQueue.java:121) Receive from /123.56.3.74:18888, type: BLOCK_CHAIN_INVENTORY size: 2001, first blockId: Num:23113867,ID:000000000160b08b510b6c501c980a2567bff1229eed62ca79874c9ca7828e9c, end blockId: Num:23115867,ID:000000000160b85b587ef18d00a1905d8022ec0a8fd174f3980b78f6aacf0ede ...... 11:08:43.478 INFO [pool-49-thread-1] [net](MessageQueue.java:106) Send to /123.56.3.74:18888, type: FETCH_INV_DATA invType: BLOCK, size: 100, First hash: 000000000160b08c6eeba60eced4fb13d7c56e46a3c5220a67bb2801a05e5679, End hash: 000000000160b0efd90560e389d1f6e5b3c8d3877709ce375a8e063f5db73af9 11:08:43.502 INFO [TronJClientWorker-1] [net](MessageQueue.java:121) Receive from /123.56.3.74:18888, type: BLOCK Num:23113868,ID:000000000160b08c6eeba60eced4fb13d7c56e46a3c5220a67bb2801a05e5679, trx size: 1 11:08:43.504 INFO [TronJClientWorker-1] [net](MessageQueue.java:121) Receive from /123.56.3.74:18888, type: BLOCK Num:23113869,ID:000000000160b08d231e450ae1993a72ba19eb8f3c748fa70d105dadd0c9fd5f, trx size: 0 11:08:43.504 INFO [TronJClientWorker-1] [net](MessageQueue.java:121) Receive from /123.56.3.74:18888, type: BLOCK Num:23113870,ID:000000000160b08e37cb9951d31a4233f106c7e77e0535c597dbb6a16f163699, trx size: 0 These logs show that java-tron is running as expected. You can determine whether the node has been started and check the status of the node by sending the following http request to the java-tron node: $ curl http://127.0.0.1:16887/wallet/getnodeinfo If no error messages are reported in the node logs, everything is fine. In order for users to interact with the TRON network, the java-tron node must be running and in a normal state of synchronization. Whether the node is synchronized with other nodes in the network, you can query the current block height in Tronscan and compare it with the result of the local java-tron node /wallet/getnowblock . If they are equal, it means that the synchronization status of the local node is normal. If you want to shut down java-tron node, please use this command: kill -15 process id .","title":"Run a java-tron node"},{"location":"getting_started/getting_started_with_javatron/#get-trx-on-nile-testnet","text":"In order to make some transactions, the user must fund their account with TRX. On TRON mainnet, TRX can only be obtained in three ways: 1. Rewards for block production by SRs/rewards for voting for SRs\uff1b 2. Another TRON account transfers TRX to it; 3. Obtained from the exchange. In the TRON testnet, TRX has no real value and can be obtained for free through faucet .","title":"Get TRX on Nile testnet"},{"location":"getting_started/getting_started_with_javatron/#interact-with-java-tron","text":"","title":"Interact with java-tron"},{"location":"getting_started/getting_started_with_javatron/#interacting-with-java-tron-nodes-using-wallet-cli","text":"java-tron provides http interface and grpc interface externally, which is convenient for users to interact with TRON network. wallet-cli uses the grpc interface.","title":"Interacting with java-tron nodes using wallet-cli"},{"location":"getting_started/getting_started_with_javatron/#get-account-information","text":"After entering the getaccount command in wallet-cli, it will request account information data from the java-tron node, and then display the result in the terminal. wallet> getaccount TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM Result: { \"address\": \"TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\", \"balance\": 93643857919, \"create_time\": 1619681898000, \"latest_opration_time\": 1655358327000, \"is_witness\": true, \"asset_issued_name\": \"TestTRC10T\", \"latest_consume_free_time\": 1652948766000, \"account_resource\": { \"latest_consume_time_for_energy\": 1655358327000 }, ...... }","title":"Get account information"},{"location":"getting_started/getting_started_with_javatron/#get-account-balance","text":"Get the balance of an account with the getbalance command: wallet> getbalance Balance = 93642857919 wallet>","title":"Get account balance"},{"location":"getting_started/getting_started_with_javatron/#transferring-trx","text":"To transfer TRX through the sendcoin command, enter the transfer address, and the amount: wallet> sendcoin TUznHJfHe6gdYY7gvWmf6bNZHuPHDZtowf 1000000 { \"raw_data\":{ \"contract\":[ { \"parameter\":{ \"value\":{ \"amount\":1000000, \"owner_address\":\"TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\", \"to_address\":\"TUznHJfHe6gdYY7gvWmf6bNZHuPHDZtowf\" }, \"type_url\":\"type.googleapis.com/protocol.TransferContract\" }, \"type\":\"TransferContract\" } ], \"ref_block_bytes\":\"cbc3\", \"ref_block_hash\":\"8581ae7e29258a52\", \"expiration\":1656917577000, \"timestamp\":1656917518232 }, \"raw_data_hex\":\"0a02cbc322088581ae7e29258a5240a89aefbf9c305a67080112630a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412320a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca121541d0b69631440f0a494bb51f7eee68ff5c593c00f018c0843d7098cfebbf9c30\" } before sign transaction hex string is 0a85010a02cbc322088581ae7e29258a5240a89aefbf9c305a67080112630a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412320a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca121541d0b69631440f0a494bb51f7eee68ff5c593c00f018c0843d7098cfebbf9c30 Please confirm and input your permission id, if input y or Y means default 0, other non-numeric characters will cancel transaction. This command returns the transaction of transferring TRX. After confirmation, enter y to confirm, and other letters indicate to cancel the transaction. If you enter y , then according to the prompt, choose which account's private key to use for signing, and finally enter the password to complete the signing of the transaction, and wallet-cli will send the signed transaction to the java-tron node. Please confirm and input your permission id, if input y or Y means default 0, other non-numeric characters will cancel transaction. y Please choose your key for sign. The 1th keystore file name is .DS_Store The 2th keystore file name is UTC--2022-07-04T06-35-35.304000000Z--TQXjm2J8K2DKTV49MdfT2anjUehbU3WDJz.json The 3th keystore file name is UTC--2022-06-21T09-51-26.367000000Z--TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM.json Please choose between 1 and 3 3 Please input your password. password: after sign transaction hex string is 0a85010a02cbc322088581ae7e29258a5240dbfc91ca9c305a67080112630a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412320a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca121541d0b69631440f0a494bb51f7eee68ff5c593c00f018c0843d7098cfebbf9c301241241a3ce4797ccc2fedf49ae41af28b49df1e15a476e4948af4df5aadf23a1e940ad5cc2133f501c08f2bab6a2231cdc82a745fed0fc6a012dc19310532d9138600 txid is 21851bcf1faf22c99a7a49c4f246d709cf9f54db2f264ca145adcd464ea155a4 Send 1000000 Sun to TUznHJfHe6gdYY7gvWmf6bNZHuPHDZtowf successful !! wallet>","title":"Transferring TRX"},{"location":"getting_started/getting_started_with_javatron/#query-transaction-by-transaction-id","text":"The above step sends a transferring TRX transaction through the sendcoin command, and prints the id of the transaction on the wallet-cli terminal: 21851bcf1faf22c99a7a49c4f246d709cf9f54db2f264ca145adcd464ea155a4 . Next, you can query the transaction through gettransactionbyid , or query the result of the transaction through gettransactioninfobyid . wallet> gettransactionbyid 21851bcf1faf22c99a7a49c4f246d709cf9f54db2f264ca145adcd464ea155a4 { \"ret\":[ { \"contractRet\":\"SUCCESS\" } ], \"signature\":[ \"241a3ce4797ccc2fedf49ae41af28b49df1e15a476e4948af4df5aadf23a1e940ad5cc2133f501c08f2bab6a2231cdc82a745fed0fc6a012dc19310532d9138600\" ], \"txID\":\"21851bcf1faf22c99a7a49c4f246d709cf9f54db2f264ca145adcd464ea155a4\", \"raw_data\":{ \"contract\":[ { \"parameter\":{ \"value\":{ \"amount\":1000000, \"owner_address\":\"TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\", \"to_address\":\"TUznHJfHe6gdYY7gvWmf6bNZHuPHDZtowf\" }, \"type_url\":\"type.googleapis.com/protocol.TransferContract\" }, \"type\":\"TransferContract\" } ], \"ref_block_bytes\":\"cbc3\", \"ref_block_hash\":\"8581ae7e29258a52\", \"expiration\":1656939118171, \"timestamp\":1656917518232 }, \"raw_data_hex\":\"0a02cbc322088581ae7e29258a5240dbfc91ca9c305a67080112630a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412320a1541ce8a0cf0c16d48bcf22825f6053248df653c89ca121541d0b69631440f0a494bb51f7eee68ff5c593c00f018c0843d7098cfebbf9c30\" } wallet> wallet> gettransactioninfobyid 21851bcf1faf22c99a7a49c4f246d709cf9f54db2f264ca145adcd464ea155a4 { \"id\": \"21851bcf1faf22c99a7a49c4f246d709cf9f54db2f264ca145adcd464ea155a4\", \"blockNumber\": 27773932, \"blockTimeStamp\": 1656917586000, \"contractResult\": [ \"\" ], \"receipt\": { \"net_usage\": 267 } } wallet>","title":"Query transaction by transaction id"},{"location":"getting_started/getting_started_with_javatron/#interacting-with-java-tron-nodes-using-curl","text":"The above describes how to use wallet-cli to interact with java-tron. Compared with sending grpc/http commands directly, this tool provides more friendly interactive commands, allowing users to send commands to java-tron more conveniently. But, how to send HTTP requests directly to the java-tron node? Curl is a command line tool for sending HTTP requests. This chapter will explain how to check account balances and send transactions through Curl.","title":"Interacting with java-tron nodes using Curl"},{"location":"getting_started/getting_started_with_javatron/#get-account-balance_1","text":"You can query the TRX balance information of the account through the node HTTP interface wallet/getaccount . The balance field in the returned result is the TRX balance, in sun: curl -X POST http://127.0.0.1:16887/wallet/getaccount -d '{\"address\": \"TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\", \"visible\": true }' Result\uff1a {\"account_name\": \"testacc2\",\"address\": \"TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\",\"balance\": 1000000000000000,\"account_resource\": {}}","title":"Get account balance"},{"location":"getting_started/getting_started_with_javatron/#send-transactions","text":"Sending a transaction through the http interface requires a total of three steps: Create a transaction Sign the transaction Broadcast transaction The following takes the transferring TRX as an example to illustrate how to send a transaction to java-tron node. Create an unsigned TRX transferring transaction through the fullnode HTTP interface wallet/createtransaction : curl -X POST http://127.0.0.1:16887/wallet/createtransaction -d '{ \"to_address\": \"TUznHJfHe6gdYY7gvWmf6bNZHuPHDZtowf\", \"owner_address\": \"TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\", \"amount\": 10000000, \"visible\":true }' Returns an unsigned TRX transferring transaction: { \"visible\": true, \"txID\": \"c558bd35978267d8999baf6148703cbc94786f3f2e22893637588ca05437d7f0\", \"raw_data\": { \"contract\": [ { \"parameter\": { \"value\": { \"amount\": 10000000, \"owner_address\": \"TPswDDCAWhJAZGdHPidFg5nEf8TkNToDX1\", \"to_address\": \"TUznHJfHe6gdYY7gvWmf6bNZHuPHDZtowf\" }, \"type_url\": \"type.googleapis.com/protocol.TransferContract\" }, \"type\": \"TransferContract\" } ], \"ref_block_bytes\": \"193b\", \"ref_block_hash\": \"aaecd88e4e0e7528\", \"expiration\": 1656580476000, \"timestamp\": 1656580418228 }, \"raw_data_hex\": \"0a02193b2208aaecd88e4e0e752840e098909f9b305a68080112640a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412330a154198927ffb9f554dc4a453c64b2e553a02d6df514b121541d0b69631440f0a494bb51f7eee68ff5c593c00f01880ade20470b4d58c9f9b30\" } Then sign the transaction offline. Finally, Broadcast the signed transaction to the java-tron node through the wallet/broadcasttransaction interface to complete the sending of the TRX transferring transaction. curl --location --request POST 'http://127.0.0.1:16887/wallet/broadcasttransaction' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"visible\": true, \"signature\": [ \"e12996cfaf52f8b49e64400987f9158a87b1aa809a11a75e01bb230722db97a26204334aea945b1ece0851a89c96459872e56229b0bd725c4f6a0577bfe331c301\" ], \"txID\": \"c558bd35978267d8999baf6148703cbc94786f3f2e22893637588ca05437d7f0\", \"raw_data\": { \"contract\": [ { \"parameter\": { \"value\": { \"amount\": 10000000, \"owner_address\": \"TPswDDCAWhJAZGdHPidFg5nEf8TkNToDX1\", \"to_address\": \"TUznHJfHe6gdYY7gvWmf6bNZHuPHDZtowf\" }, \"type_url\": \"type.googleapis.com/protocol.TransferContract\" }, \"type\": \"TransferContract\" } ], \"ref_block_bytes\": \"193b\", \"ref_block_hash\": \"aaecd88e4e0e7528\", \"expiration\": 1656580476000, \"timestamp\": 1656580418228 }, \"raw_data_hex\": \"0a02193b2208aaecd88e4e0e752840e098909f9b305a68080112640a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412330a154198927ffb9f554dc4a453c64b2e553a02d6df514b121541d0b69631440f0a494bb51f7eee68ff5c593c00f01880ade20470b4d58c9f9b30\" }' Result\uff1a { \"result\": true, \"txid\": \"c558bd35978267d8999baf6148703cbc94786f3f2e22893637588ca05437d7f0\" } The return result is true, indicating that the transaction broadcast was successful.","title":"Send transactions"},{"location":"getting_started/getting_started_with_javatron/#query-transaction-by-transaction-id_1","text":"Query the content of the transaction through the http interface wallet/gettransactionbyid : curl --location --request POST 'http://127.0.0.1:16887/wallet/gettransactionbyid' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"value\": \"c558bd35978267d8999baf6148703cbc94786f3f2e22893637588ca05437d7f0\" }' Result: { \"ret\" : [ { \"contractRet\" : \"SUCCESS\" } ], \"signature\" : [ \"e12996cfaf52f8b49e64400987f9158a87b1aa809a11a75e01bb230722db97a26204334aea945b1ece0851a89c96459872e56229b0bd725c4f6a0577bfe331c301\" ], \"txID\" : \"c558bd35978267d8999baf6148703cbc94786f3f2e22893637588ca05437d7f0\" , \"raw_data\" : { \"contract\" : [ { \"parameter\" : { \"value\" : { \"amount\" : 10000000 , \"owner_address\" : \"4198927ffb9f554dc4a453c64b2e553a02d6df514b\" , \"to_address\" : \"41d0b69631440f0a494bb51f7eee68ff5c593c00f0\" }, \"type_url\" : \"type.googleapis.com/protocol.TransferContract\" }, \"type\" : \"TransferContract\" } ], \"ref_block_bytes\" : \"193b\" , \"ref_block_hash\" : \"aaecd88e4e0e7528\" , \"expiration\" : 1656580476000 , \"timestamp\" : 1656580418228 }, \"raw_data_hex\" : \"0a02193b2208aaecd88e4e0e752840e098909f9b305a68080112640a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412330a154198927ffb9f554dc4a453c64b2e553a02d6df514b121541d0b69631440f0a494bb51f7eee68ff5c593c00f01880ade20470b4d58c9f9b30\" } Query transaction results and transaction receipts through the http interface wallet/gettransactioninfobyid : curl --location --request POST 'http://127.0.0.1:16887/wallet/gettransactioninfobyid' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"value\": \"c558bd35978267d8999baf6148703cbc94786f3f2e22893637588ca05437d7f0\" }' Result: { \"id\": \"c558bd35978267d8999baf6148703cbc94786f3f2e22893637588ca05437d7f0\", \"blockNumber\": 27662687, \"blockTimeStamp\": 1656580470000, \"contractResult\": [ \"\" ], \"receipt\": { \"net_usage\": 268 } }","title":"Query transaction by transaction id"},{"location":"introduction/","text":"Repository \u00b6 Project Repository \u00b6 Github URL: https://github.com/tronprotocol . tronprotocol/java-tron is the source code of the MainNet. tronprotocol/protocol is the definition of the api and data structure. tronprotocol/wallet-cli is the official command line wallet. tronprotocol/tips is the TRON Improvement Proposals. tronprotocol/sun-network is a project dedicated to building a trustful decentralized sidechain of TRON Main Chain. Configuration File for the Net \u00b6 MainNet Configuration: GH tronprotocol/TronDeployment/main_net_config.conf TestNet Configuration: GH tronprotocol/TronDeployment/test_net_config.conf","title":"Repository"},{"location":"introduction/#repository","text":"","title":"Repository"},{"location":"introduction/#project-repository","text":"Github URL: https://github.com/tronprotocol . tronprotocol/java-tron is the source code of the MainNet. tronprotocol/protocol is the definition of the api and data structure. tronprotocol/wallet-cli is the official command line wallet. tronprotocol/tips is the TRON Improvement Proposals. tronprotocol/sun-network is a project dedicated to building a trustful decentralized sidechain of TRON Main Chain.","title":"Project Repository"},{"location":"introduction/#configuration-file-for-the-net","text":"MainNet Configuration: GH tronprotocol/TronDeployment/main_net_config.conf TestNet Configuration: GH tronprotocol/TronDeployment/test_net_config.conf","title":"Configuration File for the Net"},{"location":"introduction/dpos/","text":"DPoS \u00b6 Overview \u00b6 Blockchain is a distributed accounting system. In a blockchain system, there can be thousands of nodes, each of which independently stores the same ledger. If new transaction data is to be written into the ledger, approvals from these nodes are needed. Achieving this goal in an untrusted distributed environment is a complicated systematic quest. The blockchain system operates normally means each node in the blockchain can always keep the same ledger, provided that most nodes in the system are honest and reliable. In order to ensure that honest and reliable nodes can jointly supervise the transaction data written into the ledgers, each blockchain system needs to build its own consensus, which is equivalent to the constitution of the blockchain. As long as the vast majority of nodes comply with the consensus requirements, it is able to guarantee the results will certainly be credible, even in an untrusted distributed environment. Therefore, the significance of the consensus is that the honest nodes in the blockchain can ultimately achieve the agreement of the ledgers as long as they strictly abide by this consensus. There are several types of consensus, and the most commonly used are POW, POS, and DPoS. Definitely, different blockchain systems will have a unique way of implementation. This article will mainly introduce the DPoS consensus on which TRON based. We will also explain the basic components and mechanisms of DPoS. Block Producing Process \u00b6 The SR(Super Representatives) of the blockchain network collect the newly generated transactions in the blockchain network and verify the legality of these transactions, then package the transactions in a block, record them as a new page on the ledger, and broadcast the page to the entire blockchain network. Other nodes will receive the new page and verify the legality of the transaction data on the page and add it to their own ledger. The SR(Super Representatives) will repeat this process so all new transaction data in the blockchain system can be recorded in the ledger. DPoS overview \u00b6 The role of consensus is to select the SR(Super Representatives) in the blockchain system. The SR(Super Representatives) verify the transaction data and keep the account in order to broadcast new accounts to other nodes in the network and obtains the approval of the new accounts from other nodes. As a specific implementation of consensus, DPoS works in the following way: The DPoS consensus selects some nodes as SR(Super Representatives) in the blockchain system based on the number of votes they receive. First, when the blockchain system starts to operate, a certain number of tokens will be issued, and then the tokens will be given to nodes in the blockchain system. A node can apply to be a super representative candidate in the blockchain system with a portion of the tokens. Any token-holding node in the blockchain system can vote for these candidates. Every t period of time, the votes for all the candidates will be counted. Top N candidate nodes with the most votes will become SR(Super Representatives) for the next t period. After t period of time, the votes will be counted again to elect the new SR(Super Representatives), and the cycle continues. Let's see how it's realized in the context of TRON: Definition \u00b6 TRON: refers to the TRON network. The document does not distinguish between TRON, TRON blockchain, TRON blockchain system, etc. TRON token: refers to the equity token issued by and circulating in TRON, known as TRX. super representative candidates: nodes eligible for becoming super representatives in TRON. SR(Super Representatives): nodes in TRON qualified for book-keeping. They are usually called super representatives in DPoS consensus. In TRON, there will be 27 super representatives, which are also called super nodes (or SR). Here, we will not distinguish between bookkeeper, witness, supernode, SR, etc. Bookkeeping: the process of verifying transactions and recording them in a ledger. Because ledgers in TRON are carried by blocks, the bookkeeping process is also called block generation. We will not distinguish between bookkeeping and block generation in the document. Bookkeeping order: block generation order. The descending order of the 27 super representatives based on the number of votes they receive. Slot: In TRON, every three seconds is regarded as one slot. Under normal circumstances, each SR will produce a block within the corresponding slot time. Therefore, the average block interval of TRON is approximately three seconds. If an SR fails to produce a block for some reasons, the corresponding slot will be vacant and the next SR will produce a block in the following slot. During the maintenance period, block production will skip two slots. Epoch: TRON sets an Epoch to be 6 hours. The last 2 block time of an Epoch is the maintenance period, during which block generating order for the next Epoch will be decided. The maintenance period: TRON sets the period to be 2 block time, which is 6 seconds. This period of time is used to count the votes for candidates. There are 4 Epochs in 24 hours, and naturally, 4 maintenance periods. During the maintenance period, no block is generated and block generation order for the next Epoch is decided. Election mechanism \u00b6 Votes In TRON, 1 TRX equals 1 vote. Voting process In TRON, voting for candidates is a special transaction. Nodes can vote for candidates through generating a voting transaction. Vote counting During each maintenance period, the votes for candidates will be counted. The top 27 candidates with the most votes will be the super representatives for the next Epoch. Block generation mechanism \u00b6 During each Epoch, the 27 super representatives will take turns to generate blocks according to the bookkeeping order. Each super representative can only generate blocks when it is their turn. Super representatives package the data of multiple verified transactions into each block. The hash of the previous block will be included in each new block as the parentHash. The super representative will sign the data of this block with his/her private key and fill in witness_signature, along with the address of the super representative, the block height, and the time that block is generated, etc. Through storing the hash of the previous block, blocks are logically connected. Eventually, they form a chain. A typical blockchain structure is shown in the following picture: In ideal circumstances, the bookkeeping process in a DPoS consensus-based blockchain system proceeds according to the bookkeeping order calculated in advance. Blocks are generated by super representatives in turn (see figure a). However, in reality, the blockchain network is a distributed and untrusted complex system in the following three ways. - Due to poor network environment, blocks generated by some super representatives cannot be received by other super representatives in valid time (see figure b1 and b2). - The normal operation of a certain super representative cannot always be guaranteed (see figure c). - Some malicious super representatives will generate fork blocks in order to fork the chain (see figure d). As mentioned above, the basis for the blockchain system to operate normally is that most of the nodes in the system are honest and reliable. Furthermore, the primary guarantee for the security of the blockchain system is the security of the ledger, meaning that illegal data cannot be written into the ledger maliciously and ledger copies saved on each node should be consistent as well. Based on the DPoS consensus, the bookkeeping process is carried out by super representatives. Therefore, the safety of TRON depends on the reliability of the majority of the super representatives. TRON has put confirmed blocks in the system which are irreversible. At the same time, in order to resist the malicious behaviors of a small number of super representatives nodes, TRON recognizes the longest chain as the main chain based on \"the longest chain principle\". The confirmed block principle The newly produced blocks are in unconfirmed state, and only those blocks that are \"approved\" by more than 70% (i.e. 27 * 70% = 19, rounded down) of the 27 super representatives are considered to be irreversible blocks, commonly referred to as solidified blocks, and the transactions contained in the solidified blocks have been confirmed by the entire blockchain network. The way to \"approve\" the unconfirmed state block is that the SR producing subsequent blocks after it, as shown in Figure d, the SR C produces block 103, the SR E produces 104' on the basis of block 103, the block 105', 106', and 107' produced respectively by the SR G, A and B, are also subsequent blocks of the 103rd block, which means these four blocks approve the 103rd block. It can be seen that when the block of height 121 is produced, the 103rd block becomes a solidified block, since by this time the 103rd block has 19 subsequent blocks, and the point to be emphasized here is that the super representatives producing these 19 blocks must be different from each other and from the super representatives producing the 103rd block. The longest chain principle When a fork occurs, an honest super representative would always choose to produce blocks on the longest chain. Incentive model \u00b6 To ensure the safe and efficient operation of the blockchain system, TRON sets up an incentive model to encourage more nodes to join the network, thereby expanding the scale of the network. Every time a block is generated by the TRON network, a block reward of 16 TRX will be awarded to the super representative who produced the block, and a voting reward of 160 TRX will be awarded to all super representatives and super partners (super representative candidates who ranking 28th~ 127th are also called super partners), and they share the voting rewards proportionally according to the number of votes they get. At the same time, super representatives and partners will also deduct the rewards according to their commission ratio, and distribute the remaining part to voters according to the voter voting ratio. Proposal-based parameter adjustment \u00b6 An important characteristic of DPoS is that any parameter adjustment can be proposed on the chain, and super representatives will decide whether to approve the proposal by starting a vote. The advantage of this method is that it avoids hard fork upgrades when adding new features. For the current dynamic parameters and values \u200b\u200bof the TRON network, as well as past proposals, please refer to here . Appendix: Reference Documentations \u00b6 Delegated Proof of Stake (DPoS) \u2013 Total Beginners Guide Consensus Algorithms: Proof-of-Stake & Cryptoeconomics Role of Delegates What is Delegated Proof of Stake?","title":"DPoS"},{"location":"introduction/dpos/#dpos","text":"","title":"DPoS"},{"location":"introduction/dpos/#overview","text":"Blockchain is a distributed accounting system. In a blockchain system, there can be thousands of nodes, each of which independently stores the same ledger. If new transaction data is to be written into the ledger, approvals from these nodes are needed. Achieving this goal in an untrusted distributed environment is a complicated systematic quest. The blockchain system operates normally means each node in the blockchain can always keep the same ledger, provided that most nodes in the system are honest and reliable. In order to ensure that honest and reliable nodes can jointly supervise the transaction data written into the ledgers, each blockchain system needs to build its own consensus, which is equivalent to the constitution of the blockchain. As long as the vast majority of nodes comply with the consensus requirements, it is able to guarantee the results will certainly be credible, even in an untrusted distributed environment. Therefore, the significance of the consensus is that the honest nodes in the blockchain can ultimately achieve the agreement of the ledgers as long as they strictly abide by this consensus. There are several types of consensus, and the most commonly used are POW, POS, and DPoS. Definitely, different blockchain systems will have a unique way of implementation. This article will mainly introduce the DPoS consensus on which TRON based. We will also explain the basic components and mechanisms of DPoS.","title":"Overview"},{"location":"introduction/dpos/#block-producing-process","text":"The SR(Super Representatives) of the blockchain network collect the newly generated transactions in the blockchain network and verify the legality of these transactions, then package the transactions in a block, record them as a new page on the ledger, and broadcast the page to the entire blockchain network. Other nodes will receive the new page and verify the legality of the transaction data on the page and add it to their own ledger. The SR(Super Representatives) will repeat this process so all new transaction data in the blockchain system can be recorded in the ledger.","title":"Block Producing Process"},{"location":"introduction/dpos/#dpos-overview","text":"The role of consensus is to select the SR(Super Representatives) in the blockchain system. The SR(Super Representatives) verify the transaction data and keep the account in order to broadcast new accounts to other nodes in the network and obtains the approval of the new accounts from other nodes. As a specific implementation of consensus, DPoS works in the following way: The DPoS consensus selects some nodes as SR(Super Representatives) in the blockchain system based on the number of votes they receive. First, when the blockchain system starts to operate, a certain number of tokens will be issued, and then the tokens will be given to nodes in the blockchain system. A node can apply to be a super representative candidate in the blockchain system with a portion of the tokens. Any token-holding node in the blockchain system can vote for these candidates. Every t period of time, the votes for all the candidates will be counted. Top N candidate nodes with the most votes will become SR(Super Representatives) for the next t period. After t period of time, the votes will be counted again to elect the new SR(Super Representatives), and the cycle continues. Let's see how it's realized in the context of TRON:","title":"DPoS overview"},{"location":"introduction/dpos/#definition","text":"TRON: refers to the TRON network. The document does not distinguish between TRON, TRON blockchain, TRON blockchain system, etc. TRON token: refers to the equity token issued by and circulating in TRON, known as TRX. super representative candidates: nodes eligible for becoming super representatives in TRON. SR(Super Representatives): nodes in TRON qualified for book-keeping. They are usually called super representatives in DPoS consensus. In TRON, there will be 27 super representatives, which are also called super nodes (or SR). Here, we will not distinguish between bookkeeper, witness, supernode, SR, etc. Bookkeeping: the process of verifying transactions and recording them in a ledger. Because ledgers in TRON are carried by blocks, the bookkeeping process is also called block generation. We will not distinguish between bookkeeping and block generation in the document. Bookkeeping order: block generation order. The descending order of the 27 super representatives based on the number of votes they receive. Slot: In TRON, every three seconds is regarded as one slot. Under normal circumstances, each SR will produce a block within the corresponding slot time. Therefore, the average block interval of TRON is approximately three seconds. If an SR fails to produce a block for some reasons, the corresponding slot will be vacant and the next SR will produce a block in the following slot. During the maintenance period, block production will skip two slots. Epoch: TRON sets an Epoch to be 6 hours. The last 2 block time of an Epoch is the maintenance period, during which block generating order for the next Epoch will be decided. The maintenance period: TRON sets the period to be 2 block time, which is 6 seconds. This period of time is used to count the votes for candidates. There are 4 Epochs in 24 hours, and naturally, 4 maintenance periods. During the maintenance period, no block is generated and block generation order for the next Epoch is decided.","title":"Definition"},{"location":"introduction/dpos/#election-mechanism","text":"Votes In TRON, 1 TRX equals 1 vote. Voting process In TRON, voting for candidates is a special transaction. Nodes can vote for candidates through generating a voting transaction. Vote counting During each maintenance period, the votes for candidates will be counted. The top 27 candidates with the most votes will be the super representatives for the next Epoch.","title":"Election mechanism"},{"location":"introduction/dpos/#block-generation-mechanism","text":"During each Epoch, the 27 super representatives will take turns to generate blocks according to the bookkeeping order. Each super representative can only generate blocks when it is their turn. Super representatives package the data of multiple verified transactions into each block. The hash of the previous block will be included in each new block as the parentHash. The super representative will sign the data of this block with his/her private key and fill in witness_signature, along with the address of the super representative, the block height, and the time that block is generated, etc. Through storing the hash of the previous block, blocks are logically connected. Eventually, they form a chain. A typical blockchain structure is shown in the following picture: In ideal circumstances, the bookkeeping process in a DPoS consensus-based blockchain system proceeds according to the bookkeeping order calculated in advance. Blocks are generated by super representatives in turn (see figure a). However, in reality, the blockchain network is a distributed and untrusted complex system in the following three ways. - Due to poor network environment, blocks generated by some super representatives cannot be received by other super representatives in valid time (see figure b1 and b2). - The normal operation of a certain super representative cannot always be guaranteed (see figure c). - Some malicious super representatives will generate fork blocks in order to fork the chain (see figure d). As mentioned above, the basis for the blockchain system to operate normally is that most of the nodes in the system are honest and reliable. Furthermore, the primary guarantee for the security of the blockchain system is the security of the ledger, meaning that illegal data cannot be written into the ledger maliciously and ledger copies saved on each node should be consistent as well. Based on the DPoS consensus, the bookkeeping process is carried out by super representatives. Therefore, the safety of TRON depends on the reliability of the majority of the super representatives. TRON has put confirmed blocks in the system which are irreversible. At the same time, in order to resist the malicious behaviors of a small number of super representatives nodes, TRON recognizes the longest chain as the main chain based on \"the longest chain principle\". The confirmed block principle The newly produced blocks are in unconfirmed state, and only those blocks that are \"approved\" by more than 70% (i.e. 27 * 70% = 19, rounded down) of the 27 super representatives are considered to be irreversible blocks, commonly referred to as solidified blocks, and the transactions contained in the solidified blocks have been confirmed by the entire blockchain network. The way to \"approve\" the unconfirmed state block is that the SR producing subsequent blocks after it, as shown in Figure d, the SR C produces block 103, the SR E produces 104' on the basis of block 103, the block 105', 106', and 107' produced respectively by the SR G, A and B, are also subsequent blocks of the 103rd block, which means these four blocks approve the 103rd block. It can be seen that when the block of height 121 is produced, the 103rd block becomes a solidified block, since by this time the 103rd block has 19 subsequent blocks, and the point to be emphasized here is that the super representatives producing these 19 blocks must be different from each other and from the super representatives producing the 103rd block. The longest chain principle When a fork occurs, an honest super representative would always choose to produce blocks on the longest chain.","title":"Block generation mechanism"},{"location":"introduction/dpos/#incentive-model","text":"To ensure the safe and efficient operation of the blockchain system, TRON sets up an incentive model to encourage more nodes to join the network, thereby expanding the scale of the network. Every time a block is generated by the TRON network, a block reward of 16 TRX will be awarded to the super representative who produced the block, and a voting reward of 160 TRX will be awarded to all super representatives and super partners (super representative candidates who ranking 28th~ 127th are also called super partners), and they share the voting rewards proportionally according to the number of votes they get. At the same time, super representatives and partners will also deduct the rewards according to their commission ratio, and distribute the remaining part to voters according to the voter voting ratio.","title":"Incentive model"},{"location":"introduction/dpos/#proposal-based-parameter-adjustment","text":"An important characteristic of DPoS is that any parameter adjustment can be proposed on the chain, and super representatives will decide whether to approve the proposal by starting a vote. The advantage of this method is that it avoids hard fork upgrades when adding new features. For the current dynamic parameters and values \u200b\u200bof the TRON network, as well as past proposals, please refer to here .","title":"Proposal-based parameter adjustment"},{"location":"introduction/dpos/#appendix-reference-documentations","text":"Delegated Proof of Stake (DPoS) \u2013 Total Beginners Guide Consensus Algorithms: Proof-of-Stake & Cryptoeconomics Role of Delegates What is Delegated Proof of Stake?","title":"Appendix: Reference Documentations"},{"location":"introduction/overview/","text":"Overview \u00b6 1. Project Repository \u00b6 Github Url: https://github.com/tronprotocol java-tron is the source code of the MainNet. protocol is the definition of the api and data structure. wallet-cli is the official command line wallet. MainNet Configuration: https://github.com/tronprotocol/TronDeployment/blob/master/main_net_config.conf TestNet Configuration: https://github.com/tronprotocol/TronDeployment/blob/master/test_net_config.conf 2. SRs and Committee \u00b6 2.1 How to Become a Super Representative \u00b6 In TRON network, any account can apply to become a super representative candidate. Every account can vote for super representative candidates. The top 27 candidates with the most votes are the super representatives. Super representatives can produce blocks. The votes will be counted every 6 hours, so super representatives may also change every 6 hours. To prevent vicious attack, TRON network burns 9999 TRX from the account that applies to become a super representative candidate. 2.2 Super Representatives Election \u00b6 To vote, you need to have TRON Power(TP). To get TRON Power, you need to stake TRX. Every 1 staked TRX accounts for one TRON Power(TP). Every account in TRON network has the right to vote for a super representative candidate. After you unstake your staked TRX, you will lose the responding TRON Power(TP), so your previous vote will be invalid. Note: Only your latest vote will be counted in TRON network which means your previous vote will be over written by your latest vote. Example (Using wallet-cli): freezebalancev2 10,000,000 3 // stake 10 TRX to get 10 TRON Power(TP) votewitness SR1 4 SR2 6 // Vote 4 votes for SR1, 6 votes for SR2 votewitness SR1 3 SR2 7 // Vote 3 votes for SR1, 7 votes for SR2 The final output above is: Vote 3 votes for SR1, 7 votes for SR2 2.3 Reward for Super Representatives \u00b6 Votes Reward: Every 6 hours, the top 127 super representative candidates with the most votes will share a total amount of 115,200 TRX according to their votes percentage. The annual votes reward is 168,192,000 TRX in total. Block Producing Reward: Every time after a super representative produces a block, it will be reward 32 TRX. The 27 super representatives take turns to produce blocks every 3 seconds. The annual block producing reward is 336,384,000 TRX in total. Every time after a super representative produces a block, the 32 TRX block producing reward will be sent to it's sub-account. The sub-account is a read-only account, it allows a withdraw action from sub-account to super representative account every 24 hours. 2.4 Committee \u00b6 2.4.1 What is Committee \u00b6 Committee can modify the TRON network parameters, like transaction fees, block producing reward amount, etc. Committee is composed of the current 27 super representatives. Every super representative has the right to start a proposal. The proposal will be passed after it gets more than 19 approves from the super representatives and will become valid in the next maintenance period. 2.4.2 Create a Proposal \u00b6 Only the account of a super representative can create a proposal. The network parameters can be modified([min,max]): 0: MAINTENANCE_TIME_INTERVAL, [3 * 27* 1000, 24 * 3600 * 1000] //super representative votes count time interval, currently 6 * 3600 * 1000 ms 1: ACCOUNT_UPGRADE_COST, [0, 100 000 000 000 000 000] //the fee to apply to become a super representative candidate, currently 9,999,000,000 SUN 2: CREATE_ACCOUNT_FEE, [0, 100 000 000 000 000 000] //the fee to create an account, currently 100,000 SUN 3: TRANSACTION_FEE, [0, 100 000 000 000 000 000] //the fee for bandwidth, currently 1,000 SUN/byte 4: ASSET_ISSUE_FEE, [0, 100 000 000 000 000 000] //the fee to issue an asset, currently 1,024,000,000 SUN 5: WITNESS_PAY_PER_BLOCK, [0, 100 000 000 000 000 000] //the block producing reward, currently 32,000,000 SUN 6: WITNESS_STANDBY_ALLOWANCE, [0, 100 000 000 000 000 000] //the votes reward for top 127 super representative candidates, currently 115,200,000,000 SUN 7: CREATE_NEW_ACCOUNT_FEE_IN_SYSTEM_CONTRACT, //the fee to create an account in system, currently 1,000,000 SUN 8: CREATE_NEW_ACCOUNT_BANDWIDTH_RATE, //the consumption of bandwidth or TRX while creating an account, using together with #7 9: ALLOW_CREATION_OF_CONTRACTS, //to enable the VM 10: REMOVE_THE_POWER_OF_THE_GR, //to clear the votes of GR 11: ENERGY_FEE, [0,100 000 000 000 000 000] //SUN 12: EXCHANGE_CREATE_FEE, [0, 100 000 000 000 000 000] //SUN 13: MAX_CPU_TIME_OF_ONE_TX, [0, 1000] //ms 14: ALLOW_UPDATE_ACCOUNT_NAME, //to allow users to change account name and allow account duplicate name, currently 0, means false 15: ALLOW_SAME_TOKEN_NAME, //to allow create a token with duplicate name, currently 1, means true 16: ALLOW_DELEGATE_RESOURCE, //to enable the resource delegation 17: TOTAL_ENERGY_LIMIT, //to modify the energy limit 18: ALLOW_TVM_TRANSFER_TRC10, //to allow smart contract to transfer TRC-10 token, currently 0, means false Example (Using wallet-cli): createproposal id value id: the serial number (0 ~ 18) value: the parameter value Note: In TRON network, 1 TRX = 1,000,000 SUN 2.4.3 Vote for a Proposal \u00b6 Proposal only support YES vote. Since the creation time of the proposal, the proposal is valid within 3 days. If the proposal does not receive enough YES votes within the period of validity, the proposal will be invalid beyond the period of validity. Yes vote can be cancelled. Example (Using wallet-cli): approveProposal id is_or_not_add_approval id: proposal id is_or_not_add_approval: YES vote or cancel YES vote 2.4.4 Cancel Proposal \u00b6 Proposal creator can cancel the proposal before it is passed. Example (Using wallet-cli): deleteProposal id id: proposal id 2.4.5 Query Proposal \u00b6 Query all the proposals list (ListProposals) Query all the proposals list by pagination (GetPaginatedProposalList) Query a proposal by proposal id (GetProposalById) For more api detail, please refer to TRON HTTP API 3. Account Model \u00b6 3.1 Introduction \u00b6 TRON uses account model. An account's identity is address, it needs private key signature to operate an account. An account has many attributes, like TRX balance, tokens balance, bandwidth, etc. TRX and tokens can be transferred from account to account and it costs bandwidth. An account can also issue a smart contract, apply to become a super representative candidate, vote, etc. All TRON's activities are based on account. 3.2 How to Create an Account \u00b6 1. Use a wallet to generate the address and private key. To activate the account, you need to transfer TRX or transfer token to the new created account. 2. Use an account already existed in TRON network to create an account 3.3 Key-pair Generation Algorithm \u00b6 TRON signature algorithm is ECDSA, curve used is SECP256K1. Private key is a random number, public key is a point in the elliptic curve. The process is: first generate a random number d to be the private key, then calculate P = d * G as the public key, G is the elliptic curve base point. 3.4 Address Format \u00b6 Use the public key P as the input, by SHA3 get the result H. The length of the public key is 64 bytes, SHA3 uses Keccak256. Use the last 20 bytes of H, and add a byte of 0x41 in front of it, then the address comes out. Do basecheck to address, here is the final address. All addresses start with 'T'. basecheck process: first do sha256 calculation to address to get h1, then do sha256 to h1 to get h2, use the first 4 bytes as check to add it to the end of the address to get address||check, do base58 encode to address||check to get the final result. Character map: ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\" 3.5 Signature \u00b6 Signature introduction 4. Network Node \u00b6 4.1 SuperNode \u00b6 4.1.1 SuperNode Introduction \u00b6 Super Representative(abbr: SR) is the block producer in TRON network, there are 27 SR. They verify the transactions and write the transactions into the blocks, they take turns to produce blocks. The super Representatives' information is public to everyone in TRON network. The best way to browse is using tronscan . 4.1.2 SuperNode Deployment \u00b6 SuperNode Deployment 4.1.3 Recommended Hardware Configuration \u00b6 minimum requirement: CPU: 16 cores, RAM: 32G, Bandwidth: 100M, Disk: 1T Recommended requirement: CPU: > 64 cores RAM: > 64G, Bandwidth: > 500M, Disk: > 20T 4.2 FullNode \u00b6 4.2.1 FullNode Introduction \u00b6 FullNode has the complete block chain data, can update data in real time. It can broadcast the transactions and provide api service. 4.2.2 FullNode Deployment \u00b6 please refer to TRON-Deployment 4.2.3 Recommended Hardware Configuration \u00b6 Minimum requirement: CPU: 16 cores, RAM: 32G, Bandwidth: 100M, Disk: 1T Recommended requirement: CPU: > 64 cores RAM: > 64G, Bandwidth: > 500M, Disk: > 20T 4.3 SolidityNode \u00b6 4.3.1 SolidityNode Introduction \u00b6 SolidityNode only synchronizes solidified block data from the fullNode it specifies. It also provides api service. 4.3.2 SolidityNode Deployment \u00b6 Please refer to TRON-Deployment 4.3.3 Recommended Hardware Configuration \u00b6 Minimum requirement: CPU: 16 cores, RAM: 32G, Bandwidth: 100M, Disk: 1T Recommended requirement: CPU: > 64 cores RAM: > 64G, Bandwidth: > 500M, Disk: > 20T 4.4 TRON Network Instructure \u00b6 TRON network uses Peer-to-Peer(P2P) network infrastructure, all nodes status equal. There are three types of node: SuperNode, FullNode, SolidityNode. SuperNode produces blocks, FullNode synchronizes blocks and broadcasts transactions, SolidityNode synchronizes solidified blocks. Any device that deploy the java-tron code can join TRON network as a node. 4.5 FullNode and SolidityNode Fast Deployment \u00b6 Download fast deployment script, run the script according to different types of node. please refer to Node Fast Deployment 4.6 MainNet, TestNet, PrivateNet \u00b6 MainNet, TestNet, PrivateNet all use the same code, only the node start configuration varies. 4.6.1 MainNet \u00b6 MainNet configuration 4.6.2 TestNet \u00b6 TestNet configuration 4.6.3 PrivateNet \u00b6 4.6.3.1 Preconditions at least two accounts at least deploy one SuperNode to produce blocks deploy serval FullNodes to synchronize blocks and broadcast transactions SuperNode and FullNode comprise the private network 4.6.3.2 Deployment 4.6.3.2.1 Step 1: SuperNode Deployment 1. download private_net_config.conf wget https://raw.githubusercontent.com/tronprotocol/tron-deployment/master/private_net_config.conf 2. add your private key in localwitness 3. set genesis.block.witnesses as the private key's corresponding address 4. set p2p.version, any positive integer but 11111 5. set the first SR needSyncCheck = false, others can be set true 6. set node.discovery.enable = true 7. run the script nohup java -Xmx6g -XX:+HeapDumpOnOutOfMemoryError -jar FullNode.jar --witness -c private_net_config.conf command line parameters introduction: --witness: start witness function . For SuperNode, this parameter is required, i.e.: --witness --log-config: specify the log configuration file path, i.e.: --log-config logback.xml -c: specify the configuration file path, i.e.: -c config.conf The usage of the log file: You can change the level of the module to control the log output. The default level of each module is INFO, for example: only print the message with the level higher than warn: The parameters in configuration file that need to modify: localwitness: witnesses: version: enable: 4.6.3.2.2 Step 2: FullNode Deployment 1. Download private_net_config.conf wget https://raw.githubusercontent.com/tronprotocol/tron-deployment/master/private_net_config.conf 2. set seed.node ip.list with SR's ip and port 3. set p2p.version the same as SuperNode's p2p.version 4. set genesis.block the same as genesis.block 5. set needSyncCheck true 6. set node.discovery.enable true 7. run the script nohup java -Xmx6g -XX:+HeapDumpOnOutOfMemoryError -jar FullNode.jar -c private_net_config.conf command lines parameters --log-config: specify the log configuration file path, i.e.: --log-config logback.xml -c: specify the configuration file path, i.e.: -c config.conf The usage of the log file: You can change the level of the module to control the log output. The default level of each module is INFO, for example: only print the message with the level higher than warn: The parameters in configuration file that need to modify: ip.list: p2p.version: genesis.block: needSyncCheck: node.discovery.enable: 4.7 DB Engine \u00b6 4.7.1 Rocksdb \u00b6 4.7.1.1 Configuration Use rocksdb as the data storage engine, need to set db.engine to \"ROCKSDB\" Note: rocksdb only support db.version=2, do not support db.version=1 The optimization parameters rocksdb support: 4.7.1.2 Use rocksdb's data backup function Choose rocksdb to be the data storage engine, you can use it's data backup function while running Note: FullNode can use data backup function. In order not to affect SuperNode's block producing performance, SuperNode does not support backup service, but SuperNode's backup service node can use this function. 4.7.1.3 Convert leveldb data to rocksdb data The data storage structure of leveldb and rocksdb is not compatible, please make sure the node use the same type of data engine all the time. We provide data conversion script which can convert leveldb data to rocksdb data. Usage: cd to the source code root directory ./gradlew build #build the source code java -jar build/libs/DBConvert.jar #run data conversion command Note: If the node's data storage directory is self-defined, before run DBConvert.jar, you need to add the following parameters: src_db_path : specify LevelDB source directory, default output-directory/database dst_db_path : specify RocksDb source directory, default output-directory-dst/database Example, if you run the script like this: nohup java -jar FullNode.jar -d your_database_dir & Then, you should run DBConvert.jar this way: java -jar build/libs/DBConvert.jar your_database_dir/database output-directory-dst/database Note: You have to stop the running of the node, and then to run the data conversion script. If you do not want to stop the running of the node for too long, after node is shut down, you can copy leveldb's output-directory to the new directory, and then restart the node. Run DBConvert.jar in the previous directory of the new directory, and specify the parameters: src_db_path \u548c dst_db_path . Example: cp -rf output-directory /tmp/output-directory cd /tmp java -jar DBConvert.jar output-directory/database output-directory-dst/database All the whole data conversion process may take 10 hours. 4.7.1.4 rocksdb vs leveldb You can refer to: ROCKSDB vs LEVELDB 5. Smart Contract \u00b6 5.1 TRON Smart Contract Introduction \u00b6 Smart contract is a computerized transaction protocol that automatically implements its terms. Smart contract is the same as common contract, they all define the terms and rules related to the participants. Once the contract is started, it can run in the way it is designed. TRON smart contract support Solidity language in (Ethereum). Currently recommend Solidity language version is 0.4.24 ~ 0.4.25. Write a smart contract, then build the smart contract and deploy it to TRON network. When the smart contract is triggered, the corresponding function will be executed automatically. 5.2 TRON Smart Contract Features \u00b6 TRON virtual machine is based on Ethereum solidity language, it also has TRON's own features. 5.2.1 Smart Contract \u00b6 TRON VM is compatible with Ethereum's smart contract, using protobuf to define the content of the contract: message SmartContract { message ABI { message Entry { enum EntryType { UnknownEntryType = 0; Constructor = 1; Function = 2; Event = 3; Fallback = 4; } message Param { bool indexed = 1; string name = 2; string type = 3; // SolidityType type = 3; } enum StateMutabilityType { UnknownMutabilityType = 0; Pure = 1; View = 2; Nonpayable = 3; Payable = 4; } bool anonymous = 1; bool constant = 2; string name = 3; repeated Param inputs = 4; repeated Param outputs = 5; EntryType type = 6; bool payable = 7; StateMutabilityType stateMutability = 8; } repeated Entry entrys = 1; } bytes origin_address = 1; bytes contract_address = 2; ABI abi = 3; bytes bytecode = 4; int64 call_value = 5; int64 consume_user_resource_percent = 6; string name = 7\uff1b int64 origin_energy_limit = 8; } origin_address: smart contract creator address contract_address: smart contract address abi: the api information of the all the function of the smart contract bytecode: smart contract byte code call_value: TRX transferred into smart contract while call the contract consume_user_resource_percent: resource consumption percentage set by the developer name: smart contract name origin_energy_limit: energy consumption of the developer limit in one call, must greater than 0. For the old contracts, if this parameter is not set, it will be set 0, developer can use updateEnergyLimit api to update this parameter (must greater than 0) Through other two grpc message types CreateSmartContract and TriggerSmartContract to create and use smart contracts. 5.2.2 The Usage of the Function of Smart Contract \u00b6 1. constant function and inconstant function There are two types of function according to whether any change will be made to the properties on the chain: constant function and inconstant function Constant function uses view/pure/constant to decorate, will return the result on the node it is called and not be broadcasted in the form of a transaction Inconstant function will be broadcasted in the form of a transaction while being called, the function will change the data on the chain, such as transfer, changing the value of the internal variables of contracts, etc. Note: If you use create command inside a contract (CREATE instruction), even use view/pure/constant to decorate the dynamically created contract function, this function will still be treated as inconstant function, be dealt in the form of transaction. 2. message calls Message calls can call the functions of other contracts, also can transfer TRX to the accounts of contract and none-contract. Like the common TRON triggercontract, Message calls have initiator, recipient, data, transfer amount, fees and return attributes. Every message call can generate a new one recursively. Contract can define the distribution of the remaining energy in the internal message call. If it comes with OutOfEnergyException in the internal message call, it will return false, but not error. In the meanwhile, only the gas sent with the internal message call will be consumed, if energy is not specified in call.value(energy), all the remaining energy will be used. 3. delegate call/call code/library There is a special type of message call, delegate call. The difference with common message call is the code of the target address will be run in the context of the contract that initiates the call, msg.sender and msg.value remain unchanged. This means a contract can dynamically load code from another address while running. Storage, current address and balance all point to the contract that initiates the call, only the code is get from the address being called. This gives Solidity the ability to achieve the 'lib' function: the reusable code lib can be put in the storage of a contract to implement complex data structure library. 4. CREATE command This command will create a new contract with a new address. The only difference with Ethereum is the newly generated TRON address used the smart contract creation transaction id and the hash of nonce called combined. Different from Ethereum, the definition of nonce is the comtract sequence number of the creation of the root call. Even there are many CREATE commands calls, contract number in sequence from 1. Refer to the source code for more detail. Note: Different from creating a contract by grpc's deploycontract, contract created by CREATE command does not store contract abi. 5. built-in function and built-in function attribute (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 1)TVM is compatible with solidity language's transfer format, including: - accompany with constructor to call transfer - accompany with internal function to call transfer - use transfer/send/call/callcode/delegatecall to call transfer Note: TRON's smart contract is different from TRON's system contract, if the transfer to address does not exist it can not create an account by smart contract transfer. 2)Different accounts vote for SuperNode (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 3)SuperNode gets all the reward (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 4)SuperNode approves or disapproves the proposal (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 5)SuperNode proposes a proposal (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 6)SuperNode deletes a proposal (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 7)TRON byte address converts to solidity address (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 8)TRON string address converts to solidity address (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 9)Send token to target address (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 10)Query token amount of target address (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 11)Compatible with all the built-in functions of Ethereum Note: Ethereum's RIPEMD160 function is not recommended, because the return of TRON is a hash result based on TRON's sha256, not an accurate Ethereum RIPEMD160. 5.2.3 Contract Address Using in Solidity Language \u00b6 Ethereum VM address is 20 bytes, but TRON's VM address is 21 bytes. 1. address conversion Need to convert TRON's address while using in solidity (recommended): /** * @dev convert uint256 (HexString add 0x at beginning) TRON address to solidity address type * @param tronAddress uint256 tronAddress, begin with 0x, followed by HexString * @return Solidity address type */ function convertFromTronInt(uint256 tronAddress) public view returns(address){ return address(tronAddress); } This is similar with the grammar of the conversion from other types converted to address type in Ethereum. 2. address judgement Solidity has address constant judgement, if using 21 bytes address the compiler will throw out an error, so you should use 20 bytes address, like: function compareAddress(address tronAddress) public view returns (uint256){ // if (tronAddress == 0x41ca35b7d915458ef540ade6068dfe2f44e8fa733c) { // compile error if (tronAddress == 0xca35b7d915458ef540ade6068dfe2f44e8fa733c) { // right return 1; } else { return 0; } } But if you are using wallet-cli, you can use 21 bytes address, like 0000000000000000000041ca35b7d915458ef540ade6068dfe2f44e8fa733c 3. variable assignment Solidity has address constant assignment, if using 21 bytes address the compiler will throw out an error, so you should use 20 bytes address, like: function assignAddress() public view { // address newAddress = 0x41ca35b7d915458ef540ade6068dfe2f44e8fa733c; // compile error address newAddress = 0xca35b7d915458ef540ade6068dfe2f44e8fa733c; // do something } If you want to use TRON address of string type (TLLM21wteSPs4hKjbxgmH1L6poyMjeTbHm) please refer to (2-4-7,2-4-8). 5.2.4 The Special Constants Differ from Ethereum \u00b6 Currency Like solidity supports ETH, TRON VM supports trx and sun, 1 trx = 1000000 sun, case sensitive, only support lower case. tron-studio supports trx and sun, remix does not support trx and sun. We recommend to use tron-studio instead of remix to build TRON smart contract. Block block.blockhash (uint blockNumber) returns (bytes32): specified block hash, can only apply to the latest 256 blocks and current block excluded block.coinbase (address): SuperNode address that produced the current block block.difficulty (uint): current block difficulty, not recommended, set 0 block.gaslimit (uint): current block gas limit, not supported, set 0 block.number (uint): current block number block.timestamp (uint): current block timestamp gasleft() returns (uint256): remaining gas msg.data (bytes): complete call data msg.gas (uint): remaining gas - since 0.4.21, not recommended, replaced by gesleft() msg.sender (address): message sender (current call) msg.sig (bytes4): first 4 bytes of call data (function identifier) msg.value (uint): the amount of SUN send with message now (uint): current block timestamp (block.timestamp) tx.gasprice (uint): the gas price of transaction, not recommended, set 0 tx.origin (address): transaction initiator 5.3 Energy Introduction \u00b6 Each command of smart contract consume system resource while running, we use 'Energy' as the unit of the consumption of the resource. 5.3.1 How to Get Energy \u00b6 Stake TRX to get energy. Example (Using wallet-cli): freezeBalanceV2 frozen_balance [ResourceCode:0 BANDWIDTH,1 ENERGY] Stake TRX to get energy, energy obtained = user's TRX staked amount / total amount of staked TRX in TRON * 50,000,000,000. Example: If there are only two users, A stakes 2 TRX, B stakes 2 TRX the energy they can get is: A: 25,000,000,000 and energy_limit is 25,000,000,000 B: 25,000,000,000 and energy_limit is 25,000,000,000 when C stakes 1 TRX: the energy they can get is: A: 20,000,000,000 and energy_limit is 20,000,000,000 B: 20,000,000,000 and energy_limit is 20,000,000,000 C: 10,000,000,000 and energy_limit is 10,000,000,000 ** Energy Recovery ** The energy consumed will reduce to 0 smoothly within 24 hours. Example: at one moment, A has used 72,000,000 Energy if there is no continuous consumption or TRX stake one hour later, the energy consumption amount will be 72,000,000 - (72,000,000 * (60*60/60*60*24)) Energy = 69,000,000 Energy 24 hours later, the energy consumption amount will be 0 Energy 5.3.2 How to Set Fee Limit (Caller Must Read) \u00b6 Within the scope of this section, the smart contract developer will be called \"developer\", the users or other contracts which call the smart contract will be called \"caller\" The amount of energy consumed while call the contract can be converted to TRX or SUN, so within the scope of this section, when refer to the consumption of the resource, there's no strict difference between Energy, TRX and SUN, unless they are used as a number unit. Set a rational fee limit can guarantee the smart contract execution. And if the execution of the contract cost great energy, it will not consume too much energy from the caller. Before you set fee limit, you need to know several conception: 1. The legal fee limit is a integer between 0 - 10^9, unit is SUN. 2. Different smart contracts consume different amount of energy due to their complexity. The same trigger in the same contract almost consumes the same amount fo energy[1]. When the contract is triggered, the commands will be executed one by one and consume energy. If it reaches the fee limit, commands will fail to be executed, and energy is not refundable. 3. Currently fee limit only refers to the energy converted to SUN that will be consumed from the caller[2]. The energy consumed by triggering contract also includes developer's share. 4. For a vicious contract, if it encounters execution timeout or bug crash, all it's energy will be consumed. 5. Developer may undertake a proportion of energy consumption(like 90%). But if the developer's energy is not enough for consumption, the rest of the energy consumption will be undertaken by caller completely. Within the fee limit range, if the caller does not have enough energy, then it will burn equivalent amount of TRX [2]. To encourage caller to trigger the contract, usually developer has enough energy. ** Example ** How to estimate the fee limit: Assume contract C's last execution consumes 18000 Energy, so estimate the energy consumption limit to be 20000 Energy[3] According to the staked TRX amount and energy conversion, assume 1 TRX = 400 energy. When to burn TRX, 1 TRX = 10000 energy[4] Assume developer undertake 90% energy consumption, and developer has enough energy. Then the way to estimate the fee limit is: 1). A = 20000 energy * (1 TRX / 400 energy) = 50 TRX = 50,000,000 SUN, 2). B = 20000 energy * (1 TRX / 10000 energy) = 2 TRX = 2,000,000 SUN, 3). Take the greater number of A and B, which is 50,000,000 SUN, 4). Developer undertakes 90% energy consumption, caller undertakes 10% energy consumption, So, the caller is suggested to set fee limit to 50,000,000 SUN * 10% = 5,000,000 SUN Note: [1] The energy consumption of each execution may fluctuate slightly due to the situation of all the nodes. [2] TRON may change this policy. [3] The estimated energy consumption limit for the next execution should be greater than the last one. [4] 1 TRX = 10^4 energy is a fixed number for burning TRX to get energy, TRON may change it in future. 5.3.3 Energy Calculation (Developer Must Read) \u00b6 1. In order to punish the vicious developer, for the abnormal contract, if the execution times out (more than 50ms) or quits due to bug (revert not included), the maximum available energy will be deducted. If the contract runs normally or revert, only the energy needed for the execution of the commands will be deducted. 2. Developer can set the proportion of the energy consumption it undertakes during the execution, this proportion can be changed later. If the developer's energy is not enough, it will consume the caller's energy. 3. Currently, the total energy available when trigger a contract is composed of caller fee limit and developer's share Note: - If the developer is not sure about whether the contract is normal, do not set caller's energy consumption proportion to 0%, in case all developer's energy will be deducted due to vicious execution[1]. - We recommend to set caller's energy consumption proportion to 10% ~ 100%[2]. Example 1 A has an account with a balance of 90 TRX(90000000 SUN) and 10 TRX staked for 100000 energy. Smart contract C set the caller energy consumption proportion to 100% which means the caller will pay for the energy consumption completely. A triggers C, the fee limit set is 30000000 (unit SUN, 30 TRX) So during this trigger the energy A can use is from two parts: - A's energy by staking TRX; - The energy converted from the amount of TRX burning according to a fixed rate; If fee limit is greater than the energy obtained from staking TRX, then it will burn TRX to get energy. The fixed rate is: 1 Energy = 100 SUN, fee limit still has (30 - 10) TRX = 20 TRX available, so the energy it can keep consuming is 20 TRX / 100 SUN = 200000 energy. Finally, in this call, the energy A can use is (100000 + 200000) = 300000 energy. If contract executes successfully without any exception, the energy needed for the execution will be deducted. Generally, it is far more less than the amount of energy this trigger can use. If Assert-style error come out, it will consume the whole number of energy set for fee limit. Assert-style error introduction, refer to https://developers.tron.network/docs/vm-exception Example 2 A has an account with a balance of 90 TRX(90000000 SUN) and 10 TRX staked for 100000 energy. Smart contract C set the caller energy consumption proportion to 40% which means the developer will pay for the rest 60% energy consumption. Developer D stakes 50 TRX to get 500000 energy. A triggers C, the fee limit set is 200000000 (unit SUN, 200 TRX). So during this trigger the energy A can use is from three parts: - A's energy by staking TRX -- X; - The energy converted from the amount of TRX bruning according to a fixed rate -- Y; If fee limit is greater than the energy obtained from staking TRX, then it will burn TRX to get energy. The fixed rate is: 1 Energy = 100 SUN, fee limit still has (200 - 10) TRX = 190 TRX available, but A only has 90 TRX left, so the energy it can keep consuming is 90 TRX / 100 SUN = 900000 energy; - D's energy by staking TRX -- Z; There are two situation: if (X + Y) / 40% >= Z / 60%, the energy A can use is X + Y + Z if (X + Y) / 40% < Z / 60%, the energy A can use is (X + Y) / 40% If contract executes successfully without any exception, the energy needed for the execution will be deducted. Generally, it is far more less than the amount of energy this trigger can use. Assert-style error introduction, refer to https://developers.tron.network/docs/vm-exception Note: when developer create a contract, do not set consume_user_resource_percent to 0, which means developer will undertake all the energy consumption. If Assert-style error comes out, it will consume all energy from the developer itself. To avoid unnecessary lost, 10 - 100 is recommended for consume_user_resource_percent. 5.4 Smart Contract Development Tool \u00b6 5.4.1 TronBox \u00b6 Support the build, deploy, transplant, etc. for solidity language written smart contract. https://developers.tron.network/docs/tron-box-user-guide 5.4.2 TronWeb \u00b6 Provide http api service for the usage of smart contract. https://developers.tron.network/docs/tron-web-intro 5.4.3 TronGrid \u00b6 Provide smart contract event query service. https://developers.tron.network/docs/tron-grid-intro 5.5 Using Command Lines Tool to Develop Smart Contract \u00b6 First you can use TronStudio to write, build and debug the smart contract. After you finish the development of the contract, you can copy it to SimpleWebCompiler to compile to get ABI and ByteCode. We provide a simple data read/write smart contract code example to demonstrate: pragma solidity ^0.4.0; contract DataStore { mapping(uint256 => uint256) data; function set(uint256 key, uint256 value) public { data[key] = value; } function get(uint256 key) view public returns (uint256 value) { value = data[key]; } } Start a Private Net Make sure the fullnode code has been deployed locally, you can check if 'Produce block successfully' log appears in FullNode/logs/tron.log Develop a Smart Contract Copy the code example above to remix to debug. Compile in SimpleWebCompiler for ABI and ByteCode Copy the code example above to SimpleWebCompiler to get ABI and ByteCode. Because TRON's compiler is a little different from Ethereum, so you can not get ABI and ByteCode by using Remix. But it will soon be supported. Using Wallet-cli to Deploy Download Wallet-Cli and build # download source code git clone https://github.com/tronprotocol/wallet-cli cd wallet-cli # build ./gradlew build cd build/libs Note: You need to change the node ip and port in config.conf start wallet-cli java -jar wallet-cli.jar after started, you can use command lines to operate: importwallet <input your password twice for your account> <input your private key> login <input your password you set> getbalance deploy contract Shell # contract deployment command DeployContract contractName ABI byteCode constructor params isHex fee_limit consume_user_resource_percent <value> <library:address,library:address,...> # parameters contract_name: Contract name ABI: ABI from SimpleWebCompiler bytecode: ByteCode from SimpleWebCompiler constructor: When deploy contract, this will be called. If is needed, write as constructor(uint256,string). If not, just write # params: The parameters of the constructor, use ',' to split, like 1, \"test\", if no constructor, just write # fee_limit: The TRX consumption limit for the deployment, unit is SUN(1 SUN = 10^-6 TRX) consume_user_resource_percent: Consume user's resource percentage. It should be an integer between [0, 100]. if 0, means it does not consume user's resource until the developer's resource has been used up value: The amount of TRX transfer to the contract when deploy library: If the contract contains library, you need to specify the library address # example deploycontract DataStore [{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}] 608060405234801561001057600080fd5b5060de8061001f6000396000f30060806040526004361060485763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631ab06ee58114604d5780639507d39a146067575b600080fd5b348015605857600080fd5b506065600435602435608e565b005b348015607257600080fd5b50607c60043560a0565b60408051918252519081900360200190f35b60009182526020829052604090912055565b600090815260208190526040902054905600a165627a7a72305820fdfe832221d60dd582b4526afa20518b98c2e1cb0054653053a844cf265b25040029 # # false 1000000 30 0 If it is deployed successfully, it will return 'Deploy the contract successfully' get the contract address Your smart contract address will be: <contract address> # in this example Your smart contract address will be: TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 call the contract to store data, query data Shell # call contract command triggercontract <contract_address> <method> <args> <is_hex> <fee_limit> <value> # parameters contract_address: Contract address, like TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 method: The method called, like set(uint256,uint256) or fool(), use ',' to split the parameters. Do not leave space between parameters args: The parameters passed to the method called, use ',' to split the parameters. Do not leave space between parameters is_hex: whether the input parameters is Hex, false or true fee_limit: The TRX consumption limit for the trigger, unit is SUN(1 SUN = 10^-6 TRX) value: The amount of TRX transfer to the contract when trigger # trigger example ## set mapping 1->1 triggercontract TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 set(uint256,uint256) 1,1 false 1000000 0000000000000000000000000000000000000000000000000000000000000000 ## get mapping key = 1 triggercontract TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 get(uint256) 1 false 1000000 0000000000000000000000000000000000000000000000000000000000000000 If the function called is constant or view, wallet-cli will return the result directly. If it contains library, before deploy the contract you need to deploy the library first. After you deploy library, you can get the library address, then fill the address in library:address,library:address,... # for instance, using remix to get the bytecode of the contract, like: 608060405234801561001057600080fd5b5061013f806100206000396000f300608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f75dac5a14610046575b600080fd5b34801561005257600080fd5b5061005b610071565b6040518082815260200191505060405180910390f35b600073<b>__browser/oneLibrary.sol.Math3__________<\\b>634f2be91f6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156100d357600080fd5b505af41580156100e7573d6000803e3d6000fd5b505050506040513d60208110156100fd57600080fd5b81019080805190602001909291905050509050905600a165627a7a7230582052333e136f236d95e9d0b59c4490a39e25dd3a3dcdc16285820ee0a7508eb8690029 The address of the library deployed before is: TSEJ29gnBkxQZR3oDdLdeQtQQykpVLSk54 When you deploy, you need to use browser/oneLibrary.sol.Math3:TSEJ29gnBkxQZR3oDdLdeQtQQykpVLSk54 as the parameter of deploycontract. 6. Built-in Contracts and API \u00b6 6.1 Built-in Contracts \u00b6 Please refer to: https://github.com/tronprotocol/documentation/blob/master/English_Documentation/TRON_Protocol/TX_ContractTypes_Update.MD 6.2 GRPC API Introduction \u00b6 Please refer to: https://github.com/tronprotocol/documentation/blob/master/English_Documentation/TRON_Protocol/TRON_Wallet_RPC-API.md 6.3 Http API Introduction \u00b6 Please refer to: https://github.com/tronprotocol/documentation/blob/master/TRX/Tron-http.md 7. TRC-10 Token Introduction \u00b6 TRON network support two types of token, one is TRC-20 token issued by smart contract, the other one is TRC-10 token issued by system contract. 7.1 How to Issue a TRC-10 Token \u00b6 HTTP API: wallet/createassetissue Description: Issue a token demo: curl -X POST http://127.0.0.1:8090/wallet/createassetissue -d '{ \"owner_address\":\"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"name\":\"0x6173736574497373756531353330383934333132313538\", \"abbr\": \"0x6162627231353330383934333132313538\", \"total_supply\" :4321, \"trx_num\":1, \"num\":1, \"start_time\" : 1530894315158, \"end_time\":1533894312158, \"description\":\"007570646174654e616d6531353330363038383733343633\", \"url\":\"007570646174654e616d6531353330363038383733343633\", \"free_asset_net_limit\":10000, \"public_free_asset_net_limit\":10000, \"frozen_supply\":{\"frozen_amount\":1, \"frozen_days\":2} }' Parameter owner_address: Owner address, default hexString Parameter name: Token name, default hexString Parameter abbr: Token name abbreviation, default hexString Parameter total_supply: Token total supply Parameter trx_num: Define the price by the ratio of trx_num/num, Parameter num: Define the price by the ratio of trx_num/num Parameter start_time: ICO start time Parameter end_time: ICO end time Parameter description: Token description, default hexString Parameter url: Token official website url, default hexString Parameter free_asset_net_limit: Token free asset net limit Parameter public_free_asset_net_limit: Token public free asset net limit Parameter frozen_supply: Token staked supply Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'trx_num' is SUN 7.2 Participate TRC-10 Token \u00b6 HTTP API: wallet/participateassetissue Description: Participate a token demo: curl -X POST http://127.0.0.1:8090/wallet/participateassetissue -d '{ \"to_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"owner_address\":\"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", \"amount\":100, \"asset_name\":\"3230313271756265696a696e67\" }' Parameter to_address: The issuer address of the token, default hexString Parameter owner_address: The participant address, default hexString Parameter amount: Participate token amount Parameter asset_name: Token id, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token 7.3 TRC-10 Token Transfer \u00b6 HTTP API: wallet/transferasset Description: Transfer token demo: curl -X POST http://127.0.0.1:8090/wallet/transferasset -d '{\"owner_address\":\"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"to_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"asset_name\": \"31303030303031\", \"amount\": 100}' Parameter owner_address: Owner address, default hexString Parameter to_address: To address, default hexString Parameter asset_name: Token id, default hexString Parameter amount: Token transfer amount Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token 8. Resource Model \u00b6 8.1 Resource Model Introduction \u00b6 TRON network has 4 types of resources: Bandwidth, CPU, Storage and RAM. Benefit by TRON's exclusive RAM model, TRON's RAM resource is almost infinite. TRON network imports two resource conceptions: Bandwidth points and Energy. Bandwidth Point represents Bandwidth, Energy represents CPU and Storage. Note: - Ordinary transaction only consumes Bandwidth points - Smart contract related transaction not only consumes Bandwidth points, but also Energy 8.2 Bandwidth Points \u00b6 The transaction information is stored and transmitted in the form of byte array, Bandwidth Points consumed = the number of bytes of the transaction * Bandwidth Points rate. Currently Bandwidth Points rate = 1 Such as if the number of bytes of a transaction is 200, so this transaction consumes 200 Bandwidth Points. Note: Due to the change of the total amount of the staked TRX in the network and the self-staked TRX amount, the Bandwidth Points an account possesses is not fixed. 8.2.1 How to Get Bandwidth Points \u00b6 1. By staking TRX to get Bandwidth Points, Bandwidth Points = the amount of TRX self-staked / the total amount of TRX staked for Bandwidth Points in the network * 43,200,000,000 2. Every account has a fixed amount of free Bandwidth Points every day, it is defined in #61 network parameter, user can check the value on tronscan(https://tronscan.org/#/sr/committee). 8.2.2 Bandwidth Points Consumption \u00b6 Transactions other than queries consume Bandwidth points. A special scenario: When transferring TRX or TRC-10 tokens to an account that does not yet exist, this procedure creates the account prior to the transfer. To create an account, a flat charge of 1 TRX is required. If there are insufficient Bandwidth points obtained by TRX staking, an additional 0.1 TRX will be spent. Bandwidth points consumption sequence for TRC-10 transfer: Free Bandwidth points. TRC-10 issuer's Bandwidth points(if possible.) Bandwidth points TRX staking. Bandwidth points obtained by TRX burning, the rate = the number of bytes of the transaction * 1,000 SUN; Bandwidth points consumption sequence for other transactions: Free Bandwidth points. Bandwidth points TRX staking. Bandwidth points obtained by TRX burning, the rate = the number of bytes of the transaction * 1,000 SUN; 8.2.3 Bandwidth Points Recovery \u00b6 Every 24 hours, the amount of the usage of Bandwidth points of an account will be reset to 0. For the specific formula: Every 24 hours, the amount of the usage of Bandwidth points of an account will be reset to 0. 8.3 Energy \u00b6 5.3 Energy Introduction 8.4 Resource Delegation \u00b6 In TRON network, an account can stake TRX for Bandwidth or Energy for other accounts. The primary account owns the staked TRX and TRON power, the recipient account owns the Bandwidth or Energy. Like ordinary staking, resource delegation staking is also at least 3 days. Example(Using wallet-cli) freezeBalanceV2 frozen_balance [ResourceCode:0 BANDWIDTH,1 ENERGY] [receiverAddress] frozen_balance: the amount of TRX to stake (unit SUN) ResourceCode: 0 for Bandwidth, 1 for Energy receiverAddress: recipient account address 8.5 Other Fees \u00b6 Type Fee Create a SR(Super Representative) 9999 TRX Issue a TRC-10 token 1024 TRX Create an account 1 TRX Create an exchange 1024 TRX 9. DEX Introduction \u00b6 TRON network supports decentralized exchange(DEX) using Bancor protocol. DEX is composed of many exchange pairs. 9.1 What is an Exchange Pair \u00b6 The term of 'Exchange Pair' describes a trade between one token with another, like A/B, A/TRX. 9.2 Exchange Pair Creation \u00b6 Any account can create an exchange pair, it burns 1024 TRX. Please refer to 'wallet/exchangecreate': https://github.com/tronprotocol/documentation/blob/master/TRX/Tron-http.md 9.3 Exchange Pair Transaction \u00b6 Any account can trade in the DEX. The trade follows Bancor protocol. Please refer to 'wallet/exchangetransaction': https://github.com/tronprotocol/documentation/blob/master/TRX/Tron-http.md 9.4 Exchange Pair Injection \u00b6 The exchange pair creator can inject more tokens into the exchange pair. Injection can decrease the range of ratio fluctuation. If one token is injected, the other one will be injected automatically to keep the current ratio of the two tokens unchanged. Please refer to 'wallet/exchangeinject': https://github.com/tronprotocol/documentation/blob/master/TRX/Tron-http.md 9.5 Exchange Pair Withdrawal \u00b6 The exchange pair creator can withdraw tokens from the exchange pair. Withdrawal can increase the range of ratio fluctuation. If one token is withdrawn, the other one will be withdrawn automatically to keep the current ratio of the two tokens unchanged. Please refer to 'wallet/exchangewithdraw': https://github.com/tronprotocol/documentation/blob/master/TRX/Tron-http.md) 9.6 Query \u00b6 9.6.1 Transaction Query \u00b6 ListExchanges: Query the list of all the exchange pairs GetPaginatedExchangeList: Query the list of all the exchange pairs by pagination GetExchangeById: Query an exchange pair by exchange pair id Please refer to: https://github.com/tronprotocol/documentation/blob/master/TRX/Tron-http.md 9.6.2 Price Calculation \u00b6 The token price is determined by the ratio of the balance of the two tokens. 9.6.3 Calculate the Amount of Token You Can Get \u00b6 sellTokenQuant is the amount of the first_token you want to sell; buyTokenQuant is the amount of second_token you can get; supply = 1,000,000,000,000,000,000L; supplyQuant = -supply * (1.0 - Math.pow(1.0 + (double) sellTokenQuant/(firstTokenBalance + sellTokenQuant, 0.0005)); buyTokenQuant = (long)balance * (Math.pow(1.0 + (double) supplyQuant / supply, 2000.0) - 1.0); 10. Account Permission Management \u00b6 Please refer to: Account Permission Management 11. Shielded Transaction \u00b6 Please refer to: Shielded Transaction 12. Wallet Introduction \u00b6 12.1 wallet-cli Introduction \u00b6 Please refer to: https://github.com/tronprotocol/wallet-cli/blob/master/README.md 12.2 Get Transaction ID \u00b6 Hash.sha256(transaction.getRawData().toByteArray()) 12.3 Get Block ID \u00b6 private byte[] generateBlockId(long blockNum, byte[] blockHash) { byte[] numBytes = Longs.toByteArray(blockNum); byte[] hash = blockHash; System.arraycopy(numBytes, 0, hash, 0, 8); return hash; } 12.4 How to Build a Transaction Locally \u00b6 According to the definition of the transaction, you need to fill up all the fields of the transaction. You need to set reference block and expiration time information, so you need to connect to the Mainnet. We recommend to use the latest block on fullnode as the value of reference block, use the latest block time plus N minutes as the value of expiration time. The network judgment condition is if (expiration > latest block time and expiration < latest block time + 24 hours) means the transaction is in period of validity. Otherwise, it will be an overdue transaction, will not be accepted by the Mainnet. Way to set reference block: set RefBlockHash the bytes from the 8 to 16(not included) of the hash of the latest block, set BlockBytes the bytes from 6 to 8(not included) of the height of the latest block. public static Transaction setReference(Transaction transaction, Block newestBlock) { long blockHeight = newestBlock.getBlockHeader().getRawData().getNumber(); byte[] blockHash = getBlockHash(newestBlock).getBytes(); byte[] refBlockNum = ByteArray.fromLong(blockHeight); Transaction.raw rawData = transaction.getRawData().toBuilder() .setRefBlockHash(ByteString.copyFrom(ByteArray.subArray(blockHash, 8, 16))) .setRefBlockBytes(ByteString.copyFrom(ByteArray.subArray(refBlockNum, 6, 8))) .build(); return transaction.toBuilder().setRawData(rawData).build(); } Way to set expiration time and transaction timestamp: public static Transaction createTransaction(byte[] from, byte[] to, long amount) { Transaction.Builder transactionBuilder = Transaction.newBuilder(); Block newestBlock = WalletClient.getBlock(-1); Transaction.Contract.Builder contractBuilder = Transaction.Contract.newBuilder(); Contract.TransferContract.Builder transferContractBuilder = Contract.TransferContract .newBuilder(); transferContractBuilder.setAmount(amount); ByteString bsTo = ByteString.copyFrom(to); ByteString bsOwner = ByteString.copyFrom(from); transferContractBuilder.setToAddress(bsTo); transferContractBuilder.setOwnerAddress(bsOwner); try { Any any = Any.pack(transferContractBuilder.build()); contractBuilder.setParameter(any); } catch (Exception e) { return null; } contractBuilder.setType(Transaction.Contract.ContractType.TransferContract); transactionBuilder.getRawDataBuilder().addContract(contractBuilder) .setTimestamp(System.currentTimeMillis()) //in the form of millisecond .setExpiration(newestBlock.getBlockHeader().getRawData().getTimestamp() + 10 * 60 * 60 * 1000); Transaction transaction = transactionBuilder.build(); Transaction refTransaction = setReference(transaction, newestBlock); return refTransaction; } 12.5 Related Demo \u00b6 Build transaction locally, signature demo, please refer to: https://github.com/tronprotocol/wallet-cli/blob/master/src/main/java/org/tron/demo/TransactionSignDemo.java nodejs demo, please refer to: https://github.com/tronprotocol/tron-demo/tree/master/demo/nodejs","title":"Overview"},{"location":"introduction/overview/#overview","text":"","title":"Overview"},{"location":"introduction/overview/#1-project-repository","text":"Github Url: https://github.com/tronprotocol java-tron is the source code of the MainNet. protocol is the definition of the api and data structure. wallet-cli is the official command line wallet. MainNet Configuration: https://github.com/tronprotocol/TronDeployment/blob/master/main_net_config.conf TestNet Configuration: https://github.com/tronprotocol/TronDeployment/blob/master/test_net_config.conf","title":"1. Project Repository"},{"location":"introduction/overview/#2-srs-and-committee","text":"","title":"2. SRs and Committee"},{"location":"introduction/overview/#21-how-to-become-a-super-representative","text":"In TRON network, any account can apply to become a super representative candidate. Every account can vote for super representative candidates. The top 27 candidates with the most votes are the super representatives. Super representatives can produce blocks. The votes will be counted every 6 hours, so super representatives may also change every 6 hours. To prevent vicious attack, TRON network burns 9999 TRX from the account that applies to become a super representative candidate.","title":"2.1 How to Become a Super Representative"},{"location":"introduction/overview/#22-super-representatives-election","text":"To vote, you need to have TRON Power(TP). To get TRON Power, you need to stake TRX. Every 1 staked TRX accounts for one TRON Power(TP). Every account in TRON network has the right to vote for a super representative candidate. After you unstake your staked TRX, you will lose the responding TRON Power(TP), so your previous vote will be invalid. Note: Only your latest vote will be counted in TRON network which means your previous vote will be over written by your latest vote. Example (Using wallet-cli): freezebalancev2 10,000,000 3 // stake 10 TRX to get 10 TRON Power(TP) votewitness SR1 4 SR2 6 // Vote 4 votes for SR1, 6 votes for SR2 votewitness SR1 3 SR2 7 // Vote 3 votes for SR1, 7 votes for SR2 The final output above is: Vote 3 votes for SR1, 7 votes for SR2","title":"2.2 Super Representatives Election"},{"location":"introduction/overview/#23-reward-for-super-representatives","text":"Votes Reward: Every 6 hours, the top 127 super representative candidates with the most votes will share a total amount of 115,200 TRX according to their votes percentage. The annual votes reward is 168,192,000 TRX in total. Block Producing Reward: Every time after a super representative produces a block, it will be reward 32 TRX. The 27 super representatives take turns to produce blocks every 3 seconds. The annual block producing reward is 336,384,000 TRX in total. Every time after a super representative produces a block, the 32 TRX block producing reward will be sent to it's sub-account. The sub-account is a read-only account, it allows a withdraw action from sub-account to super representative account every 24 hours.","title":"2.3 Reward for Super Representatives"},{"location":"introduction/overview/#24-committee","text":"","title":"2.4 Committee"},{"location":"introduction/overview/#241-what-is-committee","text":"Committee can modify the TRON network parameters, like transaction fees, block producing reward amount, etc. Committee is composed of the current 27 super representatives. Every super representative has the right to start a proposal. The proposal will be passed after it gets more than 19 approves from the super representatives and will become valid in the next maintenance period.","title":"2.4.1 What is Committee"},{"location":"introduction/overview/#242-create-a-proposal","text":"Only the account of a super representative can create a proposal. The network parameters can be modified([min,max]): 0: MAINTENANCE_TIME_INTERVAL, [3 * 27* 1000, 24 * 3600 * 1000] //super representative votes count time interval, currently 6 * 3600 * 1000 ms 1: ACCOUNT_UPGRADE_COST, [0, 100 000 000 000 000 000] //the fee to apply to become a super representative candidate, currently 9,999,000,000 SUN 2: CREATE_ACCOUNT_FEE, [0, 100 000 000 000 000 000] //the fee to create an account, currently 100,000 SUN 3: TRANSACTION_FEE, [0, 100 000 000 000 000 000] //the fee for bandwidth, currently 1,000 SUN/byte 4: ASSET_ISSUE_FEE, [0, 100 000 000 000 000 000] //the fee to issue an asset, currently 1,024,000,000 SUN 5: WITNESS_PAY_PER_BLOCK, [0, 100 000 000 000 000 000] //the block producing reward, currently 32,000,000 SUN 6: WITNESS_STANDBY_ALLOWANCE, [0, 100 000 000 000 000 000] //the votes reward for top 127 super representative candidates, currently 115,200,000,000 SUN 7: CREATE_NEW_ACCOUNT_FEE_IN_SYSTEM_CONTRACT, //the fee to create an account in system, currently 1,000,000 SUN 8: CREATE_NEW_ACCOUNT_BANDWIDTH_RATE, //the consumption of bandwidth or TRX while creating an account, using together with #7 9: ALLOW_CREATION_OF_CONTRACTS, //to enable the VM 10: REMOVE_THE_POWER_OF_THE_GR, //to clear the votes of GR 11: ENERGY_FEE, [0,100 000 000 000 000 000] //SUN 12: EXCHANGE_CREATE_FEE, [0, 100 000 000 000 000 000] //SUN 13: MAX_CPU_TIME_OF_ONE_TX, [0, 1000] //ms 14: ALLOW_UPDATE_ACCOUNT_NAME, //to allow users to change account name and allow account duplicate name, currently 0, means false 15: ALLOW_SAME_TOKEN_NAME, //to allow create a token with duplicate name, currently 1, means true 16: ALLOW_DELEGATE_RESOURCE, //to enable the resource delegation 17: TOTAL_ENERGY_LIMIT, //to modify the energy limit 18: ALLOW_TVM_TRANSFER_TRC10, //to allow smart contract to transfer TRC-10 token, currently 0, means false Example (Using wallet-cli): createproposal id value id: the serial number (0 ~ 18) value: the parameter value Note: In TRON network, 1 TRX = 1,000,000 SUN","title":"2.4.2 Create a Proposal"},{"location":"introduction/overview/#243-vote-for-a-proposal","text":"Proposal only support YES vote. Since the creation time of the proposal, the proposal is valid within 3 days. If the proposal does not receive enough YES votes within the period of validity, the proposal will be invalid beyond the period of validity. Yes vote can be cancelled. Example (Using wallet-cli): approveProposal id is_or_not_add_approval id: proposal id is_or_not_add_approval: YES vote or cancel YES vote","title":"2.4.3 Vote for a Proposal"},{"location":"introduction/overview/#244-cancel-proposal","text":"Proposal creator can cancel the proposal before it is passed. Example (Using wallet-cli): deleteProposal id id: proposal id","title":"2.4.4 Cancel Proposal"},{"location":"introduction/overview/#245-query-proposal","text":"Query all the proposals list (ListProposals) Query all the proposals list by pagination (GetPaginatedProposalList) Query a proposal by proposal id (GetProposalById) For more api detail, please refer to TRON HTTP API","title":"2.4.5 Query Proposal"},{"location":"introduction/overview/#3-account-model","text":"","title":"3. Account Model"},{"location":"introduction/overview/#31-introduction","text":"TRON uses account model. An account's identity is address, it needs private key signature to operate an account. An account has many attributes, like TRX balance, tokens balance, bandwidth, etc. TRX and tokens can be transferred from account to account and it costs bandwidth. An account can also issue a smart contract, apply to become a super representative candidate, vote, etc. All TRON's activities are based on account.","title":"3.1 Introduction"},{"location":"introduction/overview/#32-how-to-create-an-account","text":"1. Use a wallet to generate the address and private key. To activate the account, you need to transfer TRX or transfer token to the new created account. 2. Use an account already existed in TRON network to create an account","title":"3.2 How to Create an Account"},{"location":"introduction/overview/#33-key-pair-generation-algorithm","text":"TRON signature algorithm is ECDSA, curve used is SECP256K1. Private key is a random number, public key is a point in the elliptic curve. The process is: first generate a random number d to be the private key, then calculate P = d * G as the public key, G is the elliptic curve base point.","title":"3.3 Key-pair Generation Algorithm"},{"location":"introduction/overview/#34-address-format","text":"Use the public key P as the input, by SHA3 get the result H. The length of the public key is 64 bytes, SHA3 uses Keccak256. Use the last 20 bytes of H, and add a byte of 0x41 in front of it, then the address comes out. Do basecheck to address, here is the final address. All addresses start with 'T'. basecheck process: first do sha256 calculation to address to get h1, then do sha256 to h1 to get h2, use the first 4 bytes as check to add it to the end of the address to get address||check, do base58 encode to address||check to get the final result. Character map: ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"","title":"3.4 Address Format"},{"location":"introduction/overview/#35-signature","text":"Signature introduction","title":"3.5 Signature"},{"location":"introduction/overview/#4-network-node","text":"","title":"4. Network Node"},{"location":"introduction/overview/#41-supernode","text":"","title":"4.1 SuperNode"},{"location":"introduction/overview/#411-supernode-introduction","text":"Super Representative(abbr: SR) is the block producer in TRON network, there are 27 SR. They verify the transactions and write the transactions into the blocks, they take turns to produce blocks. The super Representatives' information is public to everyone in TRON network. The best way to browse is using tronscan .","title":"4.1.1 SuperNode Introduction"},{"location":"introduction/overview/#412-supernode-deployment","text":"SuperNode Deployment","title":"4.1.2 SuperNode Deployment"},{"location":"introduction/overview/#413-recommended-hardware-configuration","text":"minimum requirement: CPU: 16 cores, RAM: 32G, Bandwidth: 100M, Disk: 1T Recommended requirement: CPU: > 64 cores RAM: > 64G, Bandwidth: > 500M, Disk: > 20T","title":"4.1.3 Recommended Hardware Configuration"},{"location":"introduction/overview/#42-fullnode","text":"","title":"4.2 FullNode"},{"location":"introduction/overview/#421-fullnode-introduction","text":"FullNode has the complete block chain data, can update data in real time. It can broadcast the transactions and provide api service.","title":"4.2.1 FullNode Introduction"},{"location":"introduction/overview/#422-fullnode-deployment","text":"please refer to TRON-Deployment","title":"4.2.2 FullNode Deployment"},{"location":"introduction/overview/#423-recommended-hardware-configuration","text":"Minimum requirement: CPU: 16 cores, RAM: 32G, Bandwidth: 100M, Disk: 1T Recommended requirement: CPU: > 64 cores RAM: > 64G, Bandwidth: > 500M, Disk: > 20T","title":"4.2.3 Recommended Hardware Configuration"},{"location":"introduction/overview/#43-soliditynode","text":"","title":"4.3 SolidityNode"},{"location":"introduction/overview/#431-soliditynode-introduction","text":"SolidityNode only synchronizes solidified block data from the fullNode it specifies. It also provides api service.","title":"4.3.1 SolidityNode Introduction"},{"location":"introduction/overview/#432-soliditynode-deployment","text":"Please refer to TRON-Deployment","title":"4.3.2 SolidityNode Deployment"},{"location":"introduction/overview/#433-recommended-hardware-configuration","text":"Minimum requirement: CPU: 16 cores, RAM: 32G, Bandwidth: 100M, Disk: 1T Recommended requirement: CPU: > 64 cores RAM: > 64G, Bandwidth: > 500M, Disk: > 20T","title":"4.3.3 Recommended Hardware Configuration"},{"location":"introduction/overview/#44-tron-network-instructure","text":"TRON network uses Peer-to-Peer(P2P) network infrastructure, all nodes status equal. There are three types of node: SuperNode, FullNode, SolidityNode. SuperNode produces blocks, FullNode synchronizes blocks and broadcasts transactions, SolidityNode synchronizes solidified blocks. Any device that deploy the java-tron code can join TRON network as a node.","title":"4.4 TRON Network Instructure"},{"location":"introduction/overview/#45-fullnode-and-soliditynode-fast-deployment","text":"Download fast deployment script, run the script according to different types of node. please refer to Node Fast Deployment","title":"4.5 FullNode and SolidityNode Fast Deployment"},{"location":"introduction/overview/#46-mainnet-testnet-privatenet","text":"MainNet, TestNet, PrivateNet all use the same code, only the node start configuration varies.","title":"4.6 MainNet, TestNet, PrivateNet"},{"location":"introduction/overview/#461-mainnet","text":"MainNet configuration","title":"4.6.1 MainNet"},{"location":"introduction/overview/#462-testnet","text":"TestNet configuration","title":"4.6.2 TestNet"},{"location":"introduction/overview/#463-privatenet","text":"4.6.3.1 Preconditions at least two accounts at least deploy one SuperNode to produce blocks deploy serval FullNodes to synchronize blocks and broadcast transactions SuperNode and FullNode comprise the private network 4.6.3.2 Deployment 4.6.3.2.1 Step 1: SuperNode Deployment 1. download private_net_config.conf wget https://raw.githubusercontent.com/tronprotocol/tron-deployment/master/private_net_config.conf 2. add your private key in localwitness 3. set genesis.block.witnesses as the private key's corresponding address 4. set p2p.version, any positive integer but 11111 5. set the first SR needSyncCheck = false, others can be set true 6. set node.discovery.enable = true 7. run the script nohup java -Xmx6g -XX:+HeapDumpOnOutOfMemoryError -jar FullNode.jar --witness -c private_net_config.conf command line parameters introduction: --witness: start witness function . For SuperNode, this parameter is required, i.e.: --witness --log-config: specify the log configuration file path, i.e.: --log-config logback.xml -c: specify the configuration file path, i.e.: -c config.conf The usage of the log file: You can change the level of the module to control the log output. The default level of each module is INFO, for example: only print the message with the level higher than warn: The parameters in configuration file that need to modify: localwitness: witnesses: version: enable: 4.6.3.2.2 Step 2: FullNode Deployment 1. Download private_net_config.conf wget https://raw.githubusercontent.com/tronprotocol/tron-deployment/master/private_net_config.conf 2. set seed.node ip.list with SR's ip and port 3. set p2p.version the same as SuperNode's p2p.version 4. set genesis.block the same as genesis.block 5. set needSyncCheck true 6. set node.discovery.enable true 7. run the script nohup java -Xmx6g -XX:+HeapDumpOnOutOfMemoryError -jar FullNode.jar -c private_net_config.conf command lines parameters --log-config: specify the log configuration file path, i.e.: --log-config logback.xml -c: specify the configuration file path, i.e.: -c config.conf The usage of the log file: You can change the level of the module to control the log output. The default level of each module is INFO, for example: only print the message with the level higher than warn: The parameters in configuration file that need to modify: ip.list: p2p.version: genesis.block: needSyncCheck: node.discovery.enable:","title":"4.6.3 PrivateNet"},{"location":"introduction/overview/#47-db-engine","text":"","title":"4.7 DB Engine"},{"location":"introduction/overview/#471-rocksdb","text":"4.7.1.1 Configuration Use rocksdb as the data storage engine, need to set db.engine to \"ROCKSDB\" Note: rocksdb only support db.version=2, do not support db.version=1 The optimization parameters rocksdb support: 4.7.1.2 Use rocksdb's data backup function Choose rocksdb to be the data storage engine, you can use it's data backup function while running Note: FullNode can use data backup function. In order not to affect SuperNode's block producing performance, SuperNode does not support backup service, but SuperNode's backup service node can use this function. 4.7.1.3 Convert leveldb data to rocksdb data The data storage structure of leveldb and rocksdb is not compatible, please make sure the node use the same type of data engine all the time. We provide data conversion script which can convert leveldb data to rocksdb data. Usage: cd to the source code root directory ./gradlew build #build the source code java -jar build/libs/DBConvert.jar #run data conversion command Note: If the node's data storage directory is self-defined, before run DBConvert.jar, you need to add the following parameters: src_db_path : specify LevelDB source directory, default output-directory/database dst_db_path : specify RocksDb source directory, default output-directory-dst/database Example, if you run the script like this: nohup java -jar FullNode.jar -d your_database_dir & Then, you should run DBConvert.jar this way: java -jar build/libs/DBConvert.jar your_database_dir/database output-directory-dst/database Note: You have to stop the running of the node, and then to run the data conversion script. If you do not want to stop the running of the node for too long, after node is shut down, you can copy leveldb's output-directory to the new directory, and then restart the node. Run DBConvert.jar in the previous directory of the new directory, and specify the parameters: src_db_path \u548c dst_db_path . Example: cp -rf output-directory /tmp/output-directory cd /tmp java -jar DBConvert.jar output-directory/database output-directory-dst/database All the whole data conversion process may take 10 hours. 4.7.1.4 rocksdb vs leveldb You can refer to: ROCKSDB vs LEVELDB","title":"4.7.1 Rocksdb"},{"location":"introduction/overview/#5-smart-contract","text":"","title":"5. Smart Contract"},{"location":"introduction/overview/#51-tron-smart-contract-introduction","text":"Smart contract is a computerized transaction protocol that automatically implements its terms. Smart contract is the same as common contract, they all define the terms and rules related to the participants. Once the contract is started, it can run in the way it is designed. TRON smart contract support Solidity language in (Ethereum). Currently recommend Solidity language version is 0.4.24 ~ 0.4.25. Write a smart contract, then build the smart contract and deploy it to TRON network. When the smart contract is triggered, the corresponding function will be executed automatically.","title":"5.1 TRON Smart Contract Introduction"},{"location":"introduction/overview/#52-tron-smart-contract-features","text":"TRON virtual machine is based on Ethereum solidity language, it also has TRON's own features.","title":"5.2 TRON Smart Contract Features"},{"location":"introduction/overview/#521-smart-contract","text":"TRON VM is compatible with Ethereum's smart contract, using protobuf to define the content of the contract: message SmartContract { message ABI { message Entry { enum EntryType { UnknownEntryType = 0; Constructor = 1; Function = 2; Event = 3; Fallback = 4; } message Param { bool indexed = 1; string name = 2; string type = 3; // SolidityType type = 3; } enum StateMutabilityType { UnknownMutabilityType = 0; Pure = 1; View = 2; Nonpayable = 3; Payable = 4; } bool anonymous = 1; bool constant = 2; string name = 3; repeated Param inputs = 4; repeated Param outputs = 5; EntryType type = 6; bool payable = 7; StateMutabilityType stateMutability = 8; } repeated Entry entrys = 1; } bytes origin_address = 1; bytes contract_address = 2; ABI abi = 3; bytes bytecode = 4; int64 call_value = 5; int64 consume_user_resource_percent = 6; string name = 7\uff1b int64 origin_energy_limit = 8; } origin_address: smart contract creator address contract_address: smart contract address abi: the api information of the all the function of the smart contract bytecode: smart contract byte code call_value: TRX transferred into smart contract while call the contract consume_user_resource_percent: resource consumption percentage set by the developer name: smart contract name origin_energy_limit: energy consumption of the developer limit in one call, must greater than 0. For the old contracts, if this parameter is not set, it will be set 0, developer can use updateEnergyLimit api to update this parameter (must greater than 0) Through other two grpc message types CreateSmartContract and TriggerSmartContract to create and use smart contracts.","title":"5.2.1 Smart Contract"},{"location":"introduction/overview/#522-the-usage-of-the-function-of-smart-contract","text":"1. constant function and inconstant function There are two types of function according to whether any change will be made to the properties on the chain: constant function and inconstant function Constant function uses view/pure/constant to decorate, will return the result on the node it is called and not be broadcasted in the form of a transaction Inconstant function will be broadcasted in the form of a transaction while being called, the function will change the data on the chain, such as transfer, changing the value of the internal variables of contracts, etc. Note: If you use create command inside a contract (CREATE instruction), even use view/pure/constant to decorate the dynamically created contract function, this function will still be treated as inconstant function, be dealt in the form of transaction. 2. message calls Message calls can call the functions of other contracts, also can transfer TRX to the accounts of contract and none-contract. Like the common TRON triggercontract, Message calls have initiator, recipient, data, transfer amount, fees and return attributes. Every message call can generate a new one recursively. Contract can define the distribution of the remaining energy in the internal message call. If it comes with OutOfEnergyException in the internal message call, it will return false, but not error. In the meanwhile, only the gas sent with the internal message call will be consumed, if energy is not specified in call.value(energy), all the remaining energy will be used. 3. delegate call/call code/library There is a special type of message call, delegate call. The difference with common message call is the code of the target address will be run in the context of the contract that initiates the call, msg.sender and msg.value remain unchanged. This means a contract can dynamically load code from another address while running. Storage, current address and balance all point to the contract that initiates the call, only the code is get from the address being called. This gives Solidity the ability to achieve the 'lib' function: the reusable code lib can be put in the storage of a contract to implement complex data structure library. 4. CREATE command This command will create a new contract with a new address. The only difference with Ethereum is the newly generated TRON address used the smart contract creation transaction id and the hash of nonce called combined. Different from Ethereum, the definition of nonce is the comtract sequence number of the creation of the root call. Even there are many CREATE commands calls, contract number in sequence from 1. Refer to the source code for more detail. Note: Different from creating a contract by grpc's deploycontract, contract created by CREATE command does not store contract abi. 5. built-in function and built-in function attribute (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 1)TVM is compatible with solidity language's transfer format, including: - accompany with constructor to call transfer - accompany with internal function to call transfer - use transfer/send/call/callcode/delegatecall to call transfer Note: TRON's smart contract is different from TRON's system contract, if the transfer to address does not exist it can not create an account by smart contract transfer. 2)Different accounts vote for SuperNode (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 3)SuperNode gets all the reward (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 4)SuperNode approves or disapproves the proposal (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 5)SuperNode proposes a proposal (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 6)SuperNode deletes a proposal (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 7)TRON byte address converts to solidity address (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 8)TRON string address converts to solidity address (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 9)Send token to target address (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 10)Query token amount of target address (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 11)Compatible with all the built-in functions of Ethereum Note: Ethereum's RIPEMD160 function is not recommended, because the return of TRON is a hash result based on TRON's sha256, not an accurate Ethereum RIPEMD160.","title":"5.2.2 The Usage of the Function of Smart Contract"},{"location":"introduction/overview/#523-contract-address-using-in-solidity-language","text":"Ethereum VM address is 20 bytes, but TRON's VM address is 21 bytes. 1. address conversion Need to convert TRON's address while using in solidity (recommended): /** * @dev convert uint256 (HexString add 0x at beginning) TRON address to solidity address type * @param tronAddress uint256 tronAddress, begin with 0x, followed by HexString * @return Solidity address type */ function convertFromTronInt(uint256 tronAddress) public view returns(address){ return address(tronAddress); } This is similar with the grammar of the conversion from other types converted to address type in Ethereum. 2. address judgement Solidity has address constant judgement, if using 21 bytes address the compiler will throw out an error, so you should use 20 bytes address, like: function compareAddress(address tronAddress) public view returns (uint256){ // if (tronAddress == 0x41ca35b7d915458ef540ade6068dfe2f44e8fa733c) { // compile error if (tronAddress == 0xca35b7d915458ef540ade6068dfe2f44e8fa733c) { // right return 1; } else { return 0; } } But if you are using wallet-cli, you can use 21 bytes address, like 0000000000000000000041ca35b7d915458ef540ade6068dfe2f44e8fa733c 3. variable assignment Solidity has address constant assignment, if using 21 bytes address the compiler will throw out an error, so you should use 20 bytes address, like: function assignAddress() public view { // address newAddress = 0x41ca35b7d915458ef540ade6068dfe2f44e8fa733c; // compile error address newAddress = 0xca35b7d915458ef540ade6068dfe2f44e8fa733c; // do something } If you want to use TRON address of string type (TLLM21wteSPs4hKjbxgmH1L6poyMjeTbHm) please refer to (2-4-7,2-4-8).","title":"5.2.3 Contract Address Using in Solidity Language"},{"location":"introduction/overview/#524-the-special-constants-differ-from-ethereum","text":"Currency Like solidity supports ETH, TRON VM supports trx and sun, 1 trx = 1000000 sun, case sensitive, only support lower case. tron-studio supports trx and sun, remix does not support trx and sun. We recommend to use tron-studio instead of remix to build TRON smart contract. Block block.blockhash (uint blockNumber) returns (bytes32): specified block hash, can only apply to the latest 256 blocks and current block excluded block.coinbase (address): SuperNode address that produced the current block block.difficulty (uint): current block difficulty, not recommended, set 0 block.gaslimit (uint): current block gas limit, not supported, set 0 block.number (uint): current block number block.timestamp (uint): current block timestamp gasleft() returns (uint256): remaining gas msg.data (bytes): complete call data msg.gas (uint): remaining gas - since 0.4.21, not recommended, replaced by gesleft() msg.sender (address): message sender (current call) msg.sig (bytes4): first 4 bytes of call data (function identifier) msg.value (uint): the amount of SUN send with message now (uint): current block timestamp (block.timestamp) tx.gasprice (uint): the gas price of transaction, not recommended, set 0 tx.origin (address): transaction initiator","title":"5.2.4 The Special Constants Differ from Ethereum"},{"location":"introduction/overview/#53-energy-introduction","text":"Each command of smart contract consume system resource while running, we use 'Energy' as the unit of the consumption of the resource.","title":"5.3 Energy Introduction"},{"location":"introduction/overview/#531-how-to-get-energy","text":"Stake TRX to get energy. Example (Using wallet-cli): freezeBalanceV2 frozen_balance [ResourceCode:0 BANDWIDTH,1 ENERGY] Stake TRX to get energy, energy obtained = user's TRX staked amount / total amount of staked TRX in TRON * 50,000,000,000. Example: If there are only two users, A stakes 2 TRX, B stakes 2 TRX the energy they can get is: A: 25,000,000,000 and energy_limit is 25,000,000,000 B: 25,000,000,000 and energy_limit is 25,000,000,000 when C stakes 1 TRX: the energy they can get is: A: 20,000,000,000 and energy_limit is 20,000,000,000 B: 20,000,000,000 and energy_limit is 20,000,000,000 C: 10,000,000,000 and energy_limit is 10,000,000,000 ** Energy Recovery ** The energy consumed will reduce to 0 smoothly within 24 hours. Example: at one moment, A has used 72,000,000 Energy if there is no continuous consumption or TRX stake one hour later, the energy consumption amount will be 72,000,000 - (72,000,000 * (60*60/60*60*24)) Energy = 69,000,000 Energy 24 hours later, the energy consumption amount will be 0 Energy","title":"5.3.1 How to Get Energy"},{"location":"introduction/overview/#532-how-to-set-fee-limit-caller-must-read","text":"Within the scope of this section, the smart contract developer will be called \"developer\", the users or other contracts which call the smart contract will be called \"caller\" The amount of energy consumed while call the contract can be converted to TRX or SUN, so within the scope of this section, when refer to the consumption of the resource, there's no strict difference between Energy, TRX and SUN, unless they are used as a number unit. Set a rational fee limit can guarantee the smart contract execution. And if the execution of the contract cost great energy, it will not consume too much energy from the caller. Before you set fee limit, you need to know several conception: 1. The legal fee limit is a integer between 0 - 10^9, unit is SUN. 2. Different smart contracts consume different amount of energy due to their complexity. The same trigger in the same contract almost consumes the same amount fo energy[1]. When the contract is triggered, the commands will be executed one by one and consume energy. If it reaches the fee limit, commands will fail to be executed, and energy is not refundable. 3. Currently fee limit only refers to the energy converted to SUN that will be consumed from the caller[2]. The energy consumed by triggering contract also includes developer's share. 4. For a vicious contract, if it encounters execution timeout or bug crash, all it's energy will be consumed. 5. Developer may undertake a proportion of energy consumption(like 90%). But if the developer's energy is not enough for consumption, the rest of the energy consumption will be undertaken by caller completely. Within the fee limit range, if the caller does not have enough energy, then it will burn equivalent amount of TRX [2]. To encourage caller to trigger the contract, usually developer has enough energy. ** Example ** How to estimate the fee limit: Assume contract C's last execution consumes 18000 Energy, so estimate the energy consumption limit to be 20000 Energy[3] According to the staked TRX amount and energy conversion, assume 1 TRX = 400 energy. When to burn TRX, 1 TRX = 10000 energy[4] Assume developer undertake 90% energy consumption, and developer has enough energy. Then the way to estimate the fee limit is: 1). A = 20000 energy * (1 TRX / 400 energy) = 50 TRX = 50,000,000 SUN, 2). B = 20000 energy * (1 TRX / 10000 energy) = 2 TRX = 2,000,000 SUN, 3). Take the greater number of A and B, which is 50,000,000 SUN, 4). Developer undertakes 90% energy consumption, caller undertakes 10% energy consumption, So, the caller is suggested to set fee limit to 50,000,000 SUN * 10% = 5,000,000 SUN Note: [1] The energy consumption of each execution may fluctuate slightly due to the situation of all the nodes. [2] TRON may change this policy. [3] The estimated energy consumption limit for the next execution should be greater than the last one. [4] 1 TRX = 10^4 energy is a fixed number for burning TRX to get energy, TRON may change it in future.","title":"5.3.2 How to Set Fee Limit (Caller Must Read)"},{"location":"introduction/overview/#533-energy-calculation-developer-must-read","text":"1. In order to punish the vicious developer, for the abnormal contract, if the execution times out (more than 50ms) or quits due to bug (revert not included), the maximum available energy will be deducted. If the contract runs normally or revert, only the energy needed for the execution of the commands will be deducted. 2. Developer can set the proportion of the energy consumption it undertakes during the execution, this proportion can be changed later. If the developer's energy is not enough, it will consume the caller's energy. 3. Currently, the total energy available when trigger a contract is composed of caller fee limit and developer's share Note: - If the developer is not sure about whether the contract is normal, do not set caller's energy consumption proportion to 0%, in case all developer's energy will be deducted due to vicious execution[1]. - We recommend to set caller's energy consumption proportion to 10% ~ 100%[2]. Example 1 A has an account with a balance of 90 TRX(90000000 SUN) and 10 TRX staked for 100000 energy. Smart contract C set the caller energy consumption proportion to 100% which means the caller will pay for the energy consumption completely. A triggers C, the fee limit set is 30000000 (unit SUN, 30 TRX) So during this trigger the energy A can use is from two parts: - A's energy by staking TRX; - The energy converted from the amount of TRX burning according to a fixed rate; If fee limit is greater than the energy obtained from staking TRX, then it will burn TRX to get energy. The fixed rate is: 1 Energy = 100 SUN, fee limit still has (30 - 10) TRX = 20 TRX available, so the energy it can keep consuming is 20 TRX / 100 SUN = 200000 energy. Finally, in this call, the energy A can use is (100000 + 200000) = 300000 energy. If contract executes successfully without any exception, the energy needed for the execution will be deducted. Generally, it is far more less than the amount of energy this trigger can use. If Assert-style error come out, it will consume the whole number of energy set for fee limit. Assert-style error introduction, refer to https://developers.tron.network/docs/vm-exception Example 2 A has an account with a balance of 90 TRX(90000000 SUN) and 10 TRX staked for 100000 energy. Smart contract C set the caller energy consumption proportion to 40% which means the developer will pay for the rest 60% energy consumption. Developer D stakes 50 TRX to get 500000 energy. A triggers C, the fee limit set is 200000000 (unit SUN, 200 TRX). So during this trigger the energy A can use is from three parts: - A's energy by staking TRX -- X; - The energy converted from the amount of TRX bruning according to a fixed rate -- Y; If fee limit is greater than the energy obtained from staking TRX, then it will burn TRX to get energy. The fixed rate is: 1 Energy = 100 SUN, fee limit still has (200 - 10) TRX = 190 TRX available, but A only has 90 TRX left, so the energy it can keep consuming is 90 TRX / 100 SUN = 900000 energy; - D's energy by staking TRX -- Z; There are two situation: if (X + Y) / 40% >= Z / 60%, the energy A can use is X + Y + Z if (X + Y) / 40% < Z / 60%, the energy A can use is (X + Y) / 40% If contract executes successfully without any exception, the energy needed for the execution will be deducted. Generally, it is far more less than the amount of energy this trigger can use. Assert-style error introduction, refer to https://developers.tron.network/docs/vm-exception Note: when developer create a contract, do not set consume_user_resource_percent to 0, which means developer will undertake all the energy consumption. If Assert-style error comes out, it will consume all energy from the developer itself. To avoid unnecessary lost, 10 - 100 is recommended for consume_user_resource_percent.","title":"5.3.3 Energy Calculation (Developer Must Read)"},{"location":"introduction/overview/#54-smart-contract-development-tool","text":"","title":"5.4 Smart Contract Development Tool"},{"location":"introduction/overview/#541-tronbox","text":"Support the build, deploy, transplant, etc. for solidity language written smart contract. https://developers.tron.network/docs/tron-box-user-guide","title":"5.4.1 TronBox"},{"location":"introduction/overview/#542-tronweb","text":"Provide http api service for the usage of smart contract. https://developers.tron.network/docs/tron-web-intro","title":"5.4.2 TronWeb"},{"location":"introduction/overview/#543-trongrid","text":"Provide smart contract event query service. https://developers.tron.network/docs/tron-grid-intro","title":"5.4.3 TronGrid"},{"location":"introduction/overview/#55-using-command-lines-tool-to-develop-smart-contract","text":"First you can use TronStudio to write, build and debug the smart contract. After you finish the development of the contract, you can copy it to SimpleWebCompiler to compile to get ABI and ByteCode. We provide a simple data read/write smart contract code example to demonstrate: pragma solidity ^0.4.0; contract DataStore { mapping(uint256 => uint256) data; function set(uint256 key, uint256 value) public { data[key] = value; } function get(uint256 key) view public returns (uint256 value) { value = data[key]; } } Start a Private Net Make sure the fullnode code has been deployed locally, you can check if 'Produce block successfully' log appears in FullNode/logs/tron.log Develop a Smart Contract Copy the code example above to remix to debug. Compile in SimpleWebCompiler for ABI and ByteCode Copy the code example above to SimpleWebCompiler to get ABI and ByteCode. Because TRON's compiler is a little different from Ethereum, so you can not get ABI and ByteCode by using Remix. But it will soon be supported. Using Wallet-cli to Deploy Download Wallet-Cli and build # download source code git clone https://github.com/tronprotocol/wallet-cli cd wallet-cli # build ./gradlew build cd build/libs Note: You need to change the node ip and port in config.conf start wallet-cli java -jar wallet-cli.jar after started, you can use command lines to operate: importwallet <input your password twice for your account> <input your private key> login <input your password you set> getbalance deploy contract Shell # contract deployment command DeployContract contractName ABI byteCode constructor params isHex fee_limit consume_user_resource_percent <value> <library:address,library:address,...> # parameters contract_name: Contract name ABI: ABI from SimpleWebCompiler bytecode: ByteCode from SimpleWebCompiler constructor: When deploy contract, this will be called. If is needed, write as constructor(uint256,string). If not, just write # params: The parameters of the constructor, use ',' to split, like 1, \"test\", if no constructor, just write # fee_limit: The TRX consumption limit for the deployment, unit is SUN(1 SUN = 10^-6 TRX) consume_user_resource_percent: Consume user's resource percentage. It should be an integer between [0, 100]. if 0, means it does not consume user's resource until the developer's resource has been used up value: The amount of TRX transfer to the contract when deploy library: If the contract contains library, you need to specify the library address # example deploycontract DataStore [{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}] 608060405234801561001057600080fd5b5060de8061001f6000396000f30060806040526004361060485763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631ab06ee58114604d5780639507d39a146067575b600080fd5b348015605857600080fd5b506065600435602435608e565b005b348015607257600080fd5b50607c60043560a0565b60408051918252519081900360200190f35b60009182526020829052604090912055565b600090815260208190526040902054905600a165627a7a72305820fdfe832221d60dd582b4526afa20518b98c2e1cb0054653053a844cf265b25040029 # # false 1000000 30 0 If it is deployed successfully, it will return 'Deploy the contract successfully' get the contract address Your smart contract address will be: <contract address> # in this example Your smart contract address will be: TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 call the contract to store data, query data Shell # call contract command triggercontract <contract_address> <method> <args> <is_hex> <fee_limit> <value> # parameters contract_address: Contract address, like TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 method: The method called, like set(uint256,uint256) or fool(), use ',' to split the parameters. Do not leave space between parameters args: The parameters passed to the method called, use ',' to split the parameters. Do not leave space between parameters is_hex: whether the input parameters is Hex, false or true fee_limit: The TRX consumption limit for the trigger, unit is SUN(1 SUN = 10^-6 TRX) value: The amount of TRX transfer to the contract when trigger # trigger example ## set mapping 1->1 triggercontract TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 set(uint256,uint256) 1,1 false 1000000 0000000000000000000000000000000000000000000000000000000000000000 ## get mapping key = 1 triggercontract TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 get(uint256) 1 false 1000000 0000000000000000000000000000000000000000000000000000000000000000 If the function called is constant or view, wallet-cli will return the result directly. If it contains library, before deploy the contract you need to deploy the library first. After you deploy library, you can get the library address, then fill the address in library:address,library:address,... # for instance, using remix to get the bytecode of the contract, like: 608060405234801561001057600080fd5b5061013f806100206000396000f300608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f75dac5a14610046575b600080fd5b34801561005257600080fd5b5061005b610071565b6040518082815260200191505060405180910390f35b600073<b>__browser/oneLibrary.sol.Math3__________<\\b>634f2be91f6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156100d357600080fd5b505af41580156100e7573d6000803e3d6000fd5b505050506040513d60208110156100fd57600080fd5b81019080805190602001909291905050509050905600a165627a7a7230582052333e136f236d95e9d0b59c4490a39e25dd3a3dcdc16285820ee0a7508eb8690029 The address of the library deployed before is: TSEJ29gnBkxQZR3oDdLdeQtQQykpVLSk54 When you deploy, you need to use browser/oneLibrary.sol.Math3:TSEJ29gnBkxQZR3oDdLdeQtQQykpVLSk54 as the parameter of deploycontract.","title":"5.5 Using Command Lines Tool to Develop Smart Contract"},{"location":"introduction/overview/#6-built-in-contracts-and-api","text":"","title":"6. Built-in Contracts and API"},{"location":"introduction/overview/#61-built-in-contracts","text":"Please refer to: https://github.com/tronprotocol/documentation/blob/master/English_Documentation/TRON_Protocol/TX_ContractTypes_Update.MD","title":"6.1 Built-in Contracts"},{"location":"introduction/overview/#62-grpc-api-introduction","text":"Please refer to: https://github.com/tronprotocol/documentation/blob/master/English_Documentation/TRON_Protocol/TRON_Wallet_RPC-API.md","title":"6.2 GRPC API Introduction"},{"location":"introduction/overview/#63-http-api-introduction","text":"Please refer to: https://github.com/tronprotocol/documentation/blob/master/TRX/Tron-http.md","title":"6.3 Http API Introduction"},{"location":"introduction/overview/#7-trc-10-token-introduction","text":"TRON network support two types of token, one is TRC-20 token issued by smart contract, the other one is TRC-10 token issued by system contract.","title":"7. TRC-10 Token Introduction"},{"location":"introduction/overview/#71-how-to-issue-a-trc-10-token","text":"HTTP API: wallet/createassetissue Description: Issue a token demo: curl -X POST http://127.0.0.1:8090/wallet/createassetissue -d '{ \"owner_address\":\"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"name\":\"0x6173736574497373756531353330383934333132313538\", \"abbr\": \"0x6162627231353330383934333132313538\", \"total_supply\" :4321, \"trx_num\":1, \"num\":1, \"start_time\" : 1530894315158, \"end_time\":1533894312158, \"description\":\"007570646174654e616d6531353330363038383733343633\", \"url\":\"007570646174654e616d6531353330363038383733343633\", \"free_asset_net_limit\":10000, \"public_free_asset_net_limit\":10000, \"frozen_supply\":{\"frozen_amount\":1, \"frozen_days\":2} }' Parameter owner_address: Owner address, default hexString Parameter name: Token name, default hexString Parameter abbr: Token name abbreviation, default hexString Parameter total_supply: Token total supply Parameter trx_num: Define the price by the ratio of trx_num/num, Parameter num: Define the price by the ratio of trx_num/num Parameter start_time: ICO start time Parameter end_time: ICO end time Parameter description: Token description, default hexString Parameter url: Token official website url, default hexString Parameter free_asset_net_limit: Token free asset net limit Parameter public_free_asset_net_limit: Token public free asset net limit Parameter frozen_supply: Token staked supply Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'trx_num' is SUN","title":"7.1 How to Issue a TRC-10 Token"},{"location":"introduction/overview/#72-participate-trc-10-token","text":"HTTP API: wallet/participateassetissue Description: Participate a token demo: curl -X POST http://127.0.0.1:8090/wallet/participateassetissue -d '{ \"to_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"owner_address\":\"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", \"amount\":100, \"asset_name\":\"3230313271756265696a696e67\" }' Parameter to_address: The issuer address of the token, default hexString Parameter owner_address: The participant address, default hexString Parameter amount: Participate token amount Parameter asset_name: Token id, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token","title":"7.2 Participate TRC-10 Token"},{"location":"introduction/overview/#73-trc-10-token-transfer","text":"HTTP API: wallet/transferasset Description: Transfer token demo: curl -X POST http://127.0.0.1:8090/wallet/transferasset -d '{\"owner_address\":\"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"to_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"asset_name\": \"31303030303031\", \"amount\": 100}' Parameter owner_address: Owner address, default hexString Parameter to_address: To address, default hexString Parameter asset_name: Token id, default hexString Parameter amount: Token transfer amount Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token","title":"7.3 TRC-10 Token Transfer"},{"location":"introduction/overview/#8-resource-model","text":"","title":"8. Resource Model"},{"location":"introduction/overview/#81-resource-model-introduction","text":"TRON network has 4 types of resources: Bandwidth, CPU, Storage and RAM. Benefit by TRON's exclusive RAM model, TRON's RAM resource is almost infinite. TRON network imports two resource conceptions: Bandwidth points and Energy. Bandwidth Point represents Bandwidth, Energy represents CPU and Storage. Note: - Ordinary transaction only consumes Bandwidth points - Smart contract related transaction not only consumes Bandwidth points, but also Energy","title":"8.1 Resource Model Introduction"},{"location":"introduction/overview/#82-bandwidth-points","text":"The transaction information is stored and transmitted in the form of byte array, Bandwidth Points consumed = the number of bytes of the transaction * Bandwidth Points rate. Currently Bandwidth Points rate = 1 Such as if the number of bytes of a transaction is 200, so this transaction consumes 200 Bandwidth Points. Note: Due to the change of the total amount of the staked TRX in the network and the self-staked TRX amount, the Bandwidth Points an account possesses is not fixed.","title":"8.2 Bandwidth Points"},{"location":"introduction/overview/#821-how-to-get-bandwidth-points","text":"1. By staking TRX to get Bandwidth Points, Bandwidth Points = the amount of TRX self-staked / the total amount of TRX staked for Bandwidth Points in the network * 43,200,000,000 2. Every account has a fixed amount of free Bandwidth Points every day, it is defined in #61 network parameter, user can check the value on tronscan(https://tronscan.org/#/sr/committee).","title":"8.2.1 How to Get Bandwidth Points"},{"location":"introduction/overview/#822-bandwidth-points-consumption","text":"Transactions other than queries consume Bandwidth points. A special scenario: When transferring TRX or TRC-10 tokens to an account that does not yet exist, this procedure creates the account prior to the transfer. To create an account, a flat charge of 1 TRX is required. If there are insufficient Bandwidth points obtained by TRX staking, an additional 0.1 TRX will be spent. Bandwidth points consumption sequence for TRC-10 transfer: Free Bandwidth points. TRC-10 issuer's Bandwidth points(if possible.) Bandwidth points TRX staking. Bandwidth points obtained by TRX burning, the rate = the number of bytes of the transaction * 1,000 SUN; Bandwidth points consumption sequence for other transactions: Free Bandwidth points. Bandwidth points TRX staking. Bandwidth points obtained by TRX burning, the rate = the number of bytes of the transaction * 1,000 SUN;","title":"8.2.2 Bandwidth Points Consumption"},{"location":"introduction/overview/#823-bandwidth-points-recovery","text":"Every 24 hours, the amount of the usage of Bandwidth points of an account will be reset to 0. For the specific formula: Every 24 hours, the amount of the usage of Bandwidth points of an account will be reset to 0.","title":"8.2.3 Bandwidth Points Recovery"},{"location":"introduction/overview/#83-energy","text":"5.3 Energy Introduction","title":"8.3 Energy"},{"location":"introduction/overview/#84-resource-delegation","text":"In TRON network, an account can stake TRX for Bandwidth or Energy for other accounts. The primary account owns the staked TRX and TRON power, the recipient account owns the Bandwidth or Energy. Like ordinary staking, resource delegation staking is also at least 3 days. Example(Using wallet-cli) freezeBalanceV2 frozen_balance [ResourceCode:0 BANDWIDTH,1 ENERGY] [receiverAddress] frozen_balance: the amount of TRX to stake (unit SUN) ResourceCode: 0 for Bandwidth, 1 for Energy receiverAddress: recipient account address","title":"8.4 Resource Delegation"},{"location":"introduction/overview/#85-other-fees","text":"Type Fee Create a SR(Super Representative) 9999 TRX Issue a TRC-10 token 1024 TRX Create an account 1 TRX Create an exchange 1024 TRX","title":"8.5 Other Fees"},{"location":"introduction/overview/#9-dex-introduction","text":"TRON network supports decentralized exchange(DEX) using Bancor protocol. DEX is composed of many exchange pairs.","title":"9. DEX Introduction"},{"location":"introduction/overview/#91-what-is-an-exchange-pair","text":"The term of 'Exchange Pair' describes a trade between one token with another, like A/B, A/TRX.","title":"9.1 What is an Exchange Pair"},{"location":"introduction/overview/#92-exchange-pair-creation","text":"Any account can create an exchange pair, it burns 1024 TRX. Please refer to 'wallet/exchangecreate': https://github.com/tronprotocol/documentation/blob/master/TRX/Tron-http.md","title":"9.2 Exchange Pair Creation"},{"location":"introduction/overview/#93-exchange-pair-transaction","text":"Any account can trade in the DEX. The trade follows Bancor protocol. Please refer to 'wallet/exchangetransaction': https://github.com/tronprotocol/documentation/blob/master/TRX/Tron-http.md","title":"9.3 Exchange Pair Transaction"},{"location":"introduction/overview/#94-exchange-pair-injection","text":"The exchange pair creator can inject more tokens into the exchange pair. Injection can decrease the range of ratio fluctuation. If one token is injected, the other one will be injected automatically to keep the current ratio of the two tokens unchanged. Please refer to 'wallet/exchangeinject': https://github.com/tronprotocol/documentation/blob/master/TRX/Tron-http.md","title":"9.4 Exchange Pair Injection"},{"location":"introduction/overview/#95-exchange-pair-withdrawal","text":"The exchange pair creator can withdraw tokens from the exchange pair. Withdrawal can increase the range of ratio fluctuation. If one token is withdrawn, the other one will be withdrawn automatically to keep the current ratio of the two tokens unchanged. Please refer to 'wallet/exchangewithdraw': https://github.com/tronprotocol/documentation/blob/master/TRX/Tron-http.md)","title":"9.5 Exchange Pair Withdrawal"},{"location":"introduction/overview/#96-query","text":"","title":"9.6 Query"},{"location":"introduction/overview/#961-transaction-query","text":"ListExchanges: Query the list of all the exchange pairs GetPaginatedExchangeList: Query the list of all the exchange pairs by pagination GetExchangeById: Query an exchange pair by exchange pair id Please refer to: https://github.com/tronprotocol/documentation/blob/master/TRX/Tron-http.md","title":"9.6.1 Transaction Query"},{"location":"introduction/overview/#962-price-calculation","text":"The token price is determined by the ratio of the balance of the two tokens.","title":"9.6.2 Price Calculation"},{"location":"introduction/overview/#963-calculate-the-amount-of-token-you-can-get","text":"sellTokenQuant is the amount of the first_token you want to sell; buyTokenQuant is the amount of second_token you can get; supply = 1,000,000,000,000,000,000L; supplyQuant = -supply * (1.0 - Math.pow(1.0 + (double) sellTokenQuant/(firstTokenBalance + sellTokenQuant, 0.0005)); buyTokenQuant = (long)balance * (Math.pow(1.0 + (double) supplyQuant / supply, 2000.0) - 1.0);","title":"9.6.3 Calculate the Amount of Token You Can Get"},{"location":"introduction/overview/#10-account-permission-management","text":"Please refer to: Account Permission Management","title":"10. Account Permission Management"},{"location":"introduction/overview/#11-shielded-transaction","text":"Please refer to: Shielded Transaction","title":"11. Shielded Transaction"},{"location":"introduction/overview/#12-wallet-introduction","text":"","title":"12. Wallet Introduction"},{"location":"introduction/overview/#121-wallet-cli-introduction","text":"Please refer to: https://github.com/tronprotocol/wallet-cli/blob/master/README.md","title":"12.1 wallet-cli Introduction"},{"location":"introduction/overview/#122-get-transaction-id","text":"Hash.sha256(transaction.getRawData().toByteArray())","title":"12.2 Get Transaction ID"},{"location":"introduction/overview/#123-get-block-id","text":"private byte[] generateBlockId(long blockNum, byte[] blockHash) { byte[] numBytes = Longs.toByteArray(blockNum); byte[] hash = blockHash; System.arraycopy(numBytes, 0, hash, 0, 8); return hash; }","title":"12.3 Get Block ID"},{"location":"introduction/overview/#124-how-to-build-a-transaction-locally","text":"According to the definition of the transaction, you need to fill up all the fields of the transaction. You need to set reference block and expiration time information, so you need to connect to the Mainnet. We recommend to use the latest block on fullnode as the value of reference block, use the latest block time plus N minutes as the value of expiration time. The network judgment condition is if (expiration > latest block time and expiration < latest block time + 24 hours) means the transaction is in period of validity. Otherwise, it will be an overdue transaction, will not be accepted by the Mainnet. Way to set reference block: set RefBlockHash the bytes from the 8 to 16(not included) of the hash of the latest block, set BlockBytes the bytes from 6 to 8(not included) of the height of the latest block. public static Transaction setReference(Transaction transaction, Block newestBlock) { long blockHeight = newestBlock.getBlockHeader().getRawData().getNumber(); byte[] blockHash = getBlockHash(newestBlock).getBytes(); byte[] refBlockNum = ByteArray.fromLong(blockHeight); Transaction.raw rawData = transaction.getRawData().toBuilder() .setRefBlockHash(ByteString.copyFrom(ByteArray.subArray(blockHash, 8, 16))) .setRefBlockBytes(ByteString.copyFrom(ByteArray.subArray(refBlockNum, 6, 8))) .build(); return transaction.toBuilder().setRawData(rawData).build(); } Way to set expiration time and transaction timestamp: public static Transaction createTransaction(byte[] from, byte[] to, long amount) { Transaction.Builder transactionBuilder = Transaction.newBuilder(); Block newestBlock = WalletClient.getBlock(-1); Transaction.Contract.Builder contractBuilder = Transaction.Contract.newBuilder(); Contract.TransferContract.Builder transferContractBuilder = Contract.TransferContract .newBuilder(); transferContractBuilder.setAmount(amount); ByteString bsTo = ByteString.copyFrom(to); ByteString bsOwner = ByteString.copyFrom(from); transferContractBuilder.setToAddress(bsTo); transferContractBuilder.setOwnerAddress(bsOwner); try { Any any = Any.pack(transferContractBuilder.build()); contractBuilder.setParameter(any); } catch (Exception e) { return null; } contractBuilder.setType(Transaction.Contract.ContractType.TransferContract); transactionBuilder.getRawDataBuilder().addContract(contractBuilder) .setTimestamp(System.currentTimeMillis()) //in the form of millisecond .setExpiration(newestBlock.getBlockHeader().getRawData().getTimestamp() + 10 * 60 * 60 * 1000); Transaction transaction = transactionBuilder.build(); Transaction refTransaction = setReference(transaction, newestBlock); return refTransaction; }","title":"12.4 How to Build a Transaction Locally"},{"location":"introduction/overview/#125-related-demo","text":"Build transaction locally, signature demo, please refer to: https://github.com/tronprotocol/wallet-cli/blob/master/src/main/java/org/tron/demo/TransactionSignDemo.java nodejs demo, please refer to: https://github.com/tronprotocol/tron-demo/tree/master/demo/nodejs","title":"12.5 Related Demo"},{"location":"mechanism-algorithm/account/","text":"Account Model \u00b6 Introduction \u00b6 TRON uses the account model. The address is the unique identifier of an account, and a private key signature is required to operate an account. An account has many attributes, including TRX & TRC10 token balances, bandwidth, energy, Etc. An account can send transactions to increase or reduce its TRX or TRC10 token balances, deploy smart contracts, and trigger the smart contracts released by itself or others. All TRON accounts can apply to be Super Representatives or vote for the elected Super Representatives. Accounts are the basis of all activities on TRON. How to Create an Account \u00b6 Use a wallet to generate the address and private key. To active the account, you need to transfer TRX or transfer token to the new created account. Generate an account Use an account already existed in TRON network to create an account If you have enough staked BandWidth Points, creating an account only consume your staked BandWidth Points, otherwise, it burns 0.1 TRX. Key-pair Generation \u00b6 TRON signature algorithm is ECDSA, curve used is SECP256K1. Private key is a random number, public key is a point in the elliptic curve. The process is: first generate a random number d to be the private key, then calculate P = d * G as the public key, G is the elliptic curve base point. Address Format \u00b6 Use the public key P as the input, by SHA3 get the result H. The length of the public key is 64 bytes, SHA3 uses Keccak256. Use the last 20 bytes of H, and add a byte of 0x41 in front of it, then the address come out. Do basecheck to address, here is the final address. All addresses start with 'T'. basecheck process: first do sha256 calculation to address to get h1, then do sha256 to h1 to get h2, use the first 4 bytes as check to add it to the end of the address to get address||check, do base58 encode to address||check to get the final result. character map: ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\" Signature \u00b6 Steps \u00b6 Get the rawdata of the transaction, then transfer it to byte[] Do sha256 calculation to the rawdata Use the private key to sign the result gained from step 2 Add the signature back into the transaction Algorithm \u00b6 ECDSA, SECP256K Example: priKey:::8e812436a0e3323166e1f0e8ba79e19e217b2c4a53c970d4cca0cfb1078979df pubKey::04a5bb3b28466f578e6e93fbfd5f75cee1ae86033aa4bbea690e3312c087181eb366f9a1d1d6a437a9bf9fc65ec853b9fd60fa322be3997c47144eb20da658b3d1 hash:::159817a085f113d099d3d93c051410e9bfe043cc5c20e43aa9a083bf73660145 r:::38b7dac5ee932ac1bf2bc62c05b792cd93c3b4af61dc02dbb4b93dacb758123f s:::08bf123eabe77480787d664ca280dc1f20d9205725320658c39c6c143fd5642d v:::0 Note: The size of the signature result is 65 bytes. r 32 bytes, s 32 bytes, v 1 bytes. fullnode will verify the signature, it generates an address with the value of hash and r\u3001s\u3001v, then it compares with the address in the transaction. Demo \u00b6 public static Transaction sign ( Transaction transaction , ECKey myKey ) { Transaction . Builder transactionBuilderSigned = transaction . toBuilder (); byte [] hash = sha256 ( transaction . getRawData (). toByteArray ()); List < Contract > listContract = transaction . getRawData (). getContractList (); for ( int i = 0 ; i < listContract . size (); i ++ ) { ECDSASignature signature = myKey . sign ( hash ); ByteString bsSign = ByteString . copyFrom ( signature . toByteArray ()); // Each contract may be signed with a different private key in the future. transactionBuilderSigned . addSignature ( bsSign ); } }","title":"Account Model"},{"location":"mechanism-algorithm/account/#account-model","text":"","title":"Account Model"},{"location":"mechanism-algorithm/account/#introduction","text":"TRON uses the account model. The address is the unique identifier of an account, and a private key signature is required to operate an account. An account has many attributes, including TRX & TRC10 token balances, bandwidth, energy, Etc. An account can send transactions to increase or reduce its TRX or TRC10 token balances, deploy smart contracts, and trigger the smart contracts released by itself or others. All TRON accounts can apply to be Super Representatives or vote for the elected Super Representatives. Accounts are the basis of all activities on TRON.","title":"Introduction"},{"location":"mechanism-algorithm/account/#how-to-create-an-account","text":"Use a wallet to generate the address and private key. To active the account, you need to transfer TRX or transfer token to the new created account. Generate an account Use an account already existed in TRON network to create an account If you have enough staked BandWidth Points, creating an account only consume your staked BandWidth Points, otherwise, it burns 0.1 TRX.","title":"How to Create an Account"},{"location":"mechanism-algorithm/account/#key-pair-generation","text":"TRON signature algorithm is ECDSA, curve used is SECP256K1. Private key is a random number, public key is a point in the elliptic curve. The process is: first generate a random number d to be the private key, then calculate P = d * G as the public key, G is the elliptic curve base point.","title":"Key-pair Generation"},{"location":"mechanism-algorithm/account/#address-format","text":"Use the public key P as the input, by SHA3 get the result H. The length of the public key is 64 bytes, SHA3 uses Keccak256. Use the last 20 bytes of H, and add a byte of 0x41 in front of it, then the address come out. Do basecheck to address, here is the final address. All addresses start with 'T'. basecheck process: first do sha256 calculation to address to get h1, then do sha256 to h1 to get h2, use the first 4 bytes as check to add it to the end of the address to get address||check, do base58 encode to address||check to get the final result. character map: ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"","title":"Address Format"},{"location":"mechanism-algorithm/account/#signature","text":"","title":"Signature"},{"location":"mechanism-algorithm/account/#steps","text":"Get the rawdata of the transaction, then transfer it to byte[] Do sha256 calculation to the rawdata Use the private key to sign the result gained from step 2 Add the signature back into the transaction","title":"Steps"},{"location":"mechanism-algorithm/account/#algorithm","text":"ECDSA, SECP256K Example: priKey:::8e812436a0e3323166e1f0e8ba79e19e217b2c4a53c970d4cca0cfb1078979df pubKey::04a5bb3b28466f578e6e93fbfd5f75cee1ae86033aa4bbea690e3312c087181eb366f9a1d1d6a437a9bf9fc65ec853b9fd60fa322be3997c47144eb20da658b3d1 hash:::159817a085f113d099d3d93c051410e9bfe043cc5c20e43aa9a083bf73660145 r:::38b7dac5ee932ac1bf2bc62c05b792cd93c3b4af61dc02dbb4b93dacb758123f s:::08bf123eabe77480787d664ca280dc1f20d9205725320658c39c6c143fd5642d v:::0 Note: The size of the signature result is 65 bytes. r 32 bytes, s 32 bytes, v 1 bytes. fullnode will verify the signature, it generates an address with the value of hash and r\u3001s\u3001v, then it compares with the address in the transaction.","title":"Algorithm"},{"location":"mechanism-algorithm/account/#demo","text":"public static Transaction sign ( Transaction transaction , ECKey myKey ) { Transaction . Builder transactionBuilderSigned = transaction . toBuilder (); byte [] hash = sha256 ( transaction . getRawData (). toByteArray ()); List < Contract > listContract = transaction . getRawData (). getContractList (); for ( int i = 0 ; i < listContract . size (); i ++ ) { ECDSASignature signature = myKey . sign ( hash ); ByteString bsSign = ByteString . copyFrom ( signature . toByteArray ()); // Each contract may be signed with a different private key in the future. transactionBuilderSigned . addSignature ( bsSign ); } }","title":"Demo"},{"location":"mechanism-algorithm/dex/","text":"Decentralized Exchange(DEX) \u00b6 TRON network supports decentralized exchange(DEX) using Bancor protocol. DEX is composed of many exchange pairs. You can find the api below in HTTP API . What is an Exchange Pair \u00b6 The term of 'Exchange Pair' describes a trade between one token with another, like A/B, A/TRX. Exchange Pair Creation \u00b6 Any account can create an exchange pair, it burns 1024 TRX. Please refer to 'wallet/exchangecreate'. Exchange Pair Transaction \u00b6 Any account can trade in the DEX. The trade follows Bancor protocol. Please refer to 'wallet/exchangetransaction'. Exchange Pair Injection \u00b6 The exchange pair creator can inject more tokens into the exchange pair. Injection can decrease the range of ratio fluctuation. If one token is injected, the other one will be injected automatically to keep the current ratio of the two tokens unchanged. Please refer to 'wallet/exchangeinject'. Exchange Pair Withdrawal \u00b6 The exchange pair creator can withdraw tokens from the exchange pair. Withdrawal can increase the range of ratio fluctuation. If one token is withdrawn, the other one will be withdrawn automatically to keep the current ratio of the two tokens unchanged. Please refer to 'wallet/exchangewithdraw'. Query \u00b6 Transaction Query \u00b6 ListExchanges : Query the list of all the exchange pairs. GetPaginatedExchangeList : Query the list of all the exchange pairs by pagination. GetExchangeById : Query an exchange pair by exchange pair id. Price Calculation \u00b6 The token price is determined by the ratio of the balance of the two tokens. Calculate the Amount of Token You Can Get \u00b6 sellTokenQuant is the amount of the first_token you want to sell. buyTokenQuant is the amount of second_token you can get. supply = 1 , 000 , 000 , 000 , 000 , 000 , 000L supplyQuant = - supply * ( 1.0 - Math . pow ( 1.0 + ( double ) sellTokenQuant / ( firstTokenBalance + sellTokenQuant , 0.0005 )) buyTokenQuant = ( long ) balance * ( Math . pow ( 1.0 + ( double ) supplyQuant / supply , 2000.0 ) - 1.0 )","title":"Decentralized Exchange"},{"location":"mechanism-algorithm/dex/#decentralized-exchangedex","text":"TRON network supports decentralized exchange(DEX) using Bancor protocol. DEX is composed of many exchange pairs. You can find the api below in HTTP API .","title":"Decentralized Exchange(DEX)"},{"location":"mechanism-algorithm/dex/#what-is-an-exchange-pair","text":"The term of 'Exchange Pair' describes a trade between one token with another, like A/B, A/TRX.","title":"What is an Exchange Pair"},{"location":"mechanism-algorithm/dex/#exchange-pair-creation","text":"Any account can create an exchange pair, it burns 1024 TRX. Please refer to 'wallet/exchangecreate'.","title":"Exchange Pair Creation"},{"location":"mechanism-algorithm/dex/#exchange-pair-transaction","text":"Any account can trade in the DEX. The trade follows Bancor protocol. Please refer to 'wallet/exchangetransaction'.","title":"Exchange Pair Transaction"},{"location":"mechanism-algorithm/dex/#exchange-pair-injection","text":"The exchange pair creator can inject more tokens into the exchange pair. Injection can decrease the range of ratio fluctuation. If one token is injected, the other one will be injected automatically to keep the current ratio of the two tokens unchanged. Please refer to 'wallet/exchangeinject'.","title":"Exchange Pair Injection"},{"location":"mechanism-algorithm/dex/#exchange-pair-withdrawal","text":"The exchange pair creator can withdraw tokens from the exchange pair. Withdrawal can increase the range of ratio fluctuation. If one token is withdrawn, the other one will be withdrawn automatically to keep the current ratio of the two tokens unchanged. Please refer to 'wallet/exchangewithdraw'.","title":"Exchange Pair Withdrawal"},{"location":"mechanism-algorithm/dex/#query","text":"","title":"Query"},{"location":"mechanism-algorithm/dex/#transaction-query","text":"ListExchanges : Query the list of all the exchange pairs. GetPaginatedExchangeList : Query the list of all the exchange pairs by pagination. GetExchangeById : Query an exchange pair by exchange pair id.","title":"Transaction Query"},{"location":"mechanism-algorithm/dex/#price-calculation","text":"The token price is determined by the ratio of the balance of the two tokens.","title":"Price Calculation"},{"location":"mechanism-algorithm/dex/#calculate-the-amount-of-token-you-can-get","text":"sellTokenQuant is the amount of the first_token you want to sell. buyTokenQuant is the amount of second_token you can get. supply = 1 , 000 , 000 , 000 , 000 , 000 , 000L supplyQuant = - supply * ( 1.0 - Math . pow ( 1.0 + ( double ) sellTokenQuant / ( firstTokenBalance + sellTokenQuant , 0.0005 )) buyTokenQuant = ( long ) balance * ( Math . pow ( 1.0 + ( double ) supplyQuant / supply , 2000.0 ) - 1.0 )","title":"Calculate the Amount of Token You Can Get"},{"location":"mechanism-algorithm/multi-signatures/","text":"Account Permission Management \u00b6 Background \u00b6 Account permission management functions allow for permission grading, and each permission can correspond to multiple private keys. This makes it possible to achieve multi-person joint control of accounts. This guide walks the user through TRON's account permission management implementation and design. Concept \u00b6 There are three types of permission: owner\u3001witness and active. Owner permission has the right to execute all the contracts. Witness permission is for SR. Active permission contains a set of contracts selected execution permissions. Protocol Definition \u00b6 Account \u00b6 message Account { // ... Permission owner_permission = 31 ; Permission witness_permission = 32 ; repeated Permission active_permission = 33 ; } Three attributes are added, owner_permission\u3001witness_permission and active_permission. active_permission is a list, the length can not be bigger than 8. ContractType \u00b6 message Transaction { message Contract { enum ContractType { AccountCreateContract = 0 ; // ... AccountPermissionUpdateContract = 46 ; } } } AccountPermissionUpdateContract is a new contract type used to update the account permission. AccountPermissionUpdateContract \u00b6 message AccountPermissionUpdateContract { bytes owner_address = 1 ; Permission owner = 2 ; Permission witness = 3 ; repeated Permission actives = 4 ; } owner_address : The address of the account whose permissions are to be modified owner : Owner permission witness : Witness permission (if the account is a SR(Super Representative)) actives : Active permission This will override the Original account permission. Therefore, if you only want to modify the owner permission, witness (if it is a SR account) and active permission also need to be set Permission \u00b6 message Permission { enum PermissionType { Owner = 0 ; Witness = 1 ; Active = 2 ; } PermissionType type = 1 ; int32 id = 2 ; string permission_name = 3 ; int64 threshold = 4 ; int32 parent_id = 5 ; bytes operations = 6 ; repeated Key keys = 7 ; } PermissionType : Permission type id : Generated by system. Owner id=0, Witness id=1, Active id increases from 2. Specifying using which permission to execute a contract by setting id. For instance, using owner permission, set id=0 permission_name : Permission name, 32 bytes length limit threshold : The threshold of the signature weight parent_id : Current 0 operations : 32 bytes (256 b), each bit represent the execution permission of one contract, 1 means it owns the execution permission of the contract. For instance, operations=0x0100...00(hex), 100...0(binary), refer to the definition of Transaction.ContractType in proto, the id of AccountCreateContract is 0, means this permission only owns the execution permission of AccountCreateContract keys : The accounts and weights that all own the permission, 5 keys at most. Key \u00b6 message Key { bytes address = 1 ; int64 weight = 2 ; } address : The account address weight : The signature weight Transaction \u00b6 message Transaction { // ... int32 Permission_id = 5 ; } Permission_id is added. It is corresponding to Permission.id 1 is not allowed, because witness permission is only used to produce blocks, not for transaction signature. Owner Permission \u00b6 Owner permission is the top permission of an account. It is used to control account ownership, adjust permission structure. Owner Permission has the right to execute all the contracts. Owner permission's features: The account that has owner permission can change the owner permission When owner permission is null, the default owner of the account owns the owner permission When you create a new account, the address will be insert into owner permission automatically, default weight is 1, keys field only contains this address and also weight is 1. If a permissionId is not specified when a contract is executed, using owner permission by default. Witness Permission \u00b6 Super representatives can use this permission to manage block producing. Only SR(Super Representative) account has this permission. Usage scenario example: A super representative deploys a witness node on cloud server. In order to keep the account on the cloud server safe, you can only give the block producing permission to the account you put on cloud server. Because this account only owns block producing permission, no TRX transfer permission, so even if the account on the cloud server is leaked, the TRX will not be lost. Witness node configuration: if no witness permission is used, no need to configure if itness permission is used, need to reconfigure: # config.conf // Optional.The default is empty. // It is used when the SR(Super Representative) account has set the witnessPermission. // When it is not empty, the localWitnessAccountAddress represents the address of the SR(Super Representative) account, // and the localwitness is configured with the private key of the witnessPermissionAddress in the SR(Super Representatives) account. // When it is empty,the localwitness is configured with the private key of the SR(Super Representatives) account. //localWitnessAccountAddress = localwitness = [ f4df789d3210ac881cb900464dd30409453044d2777060a0c391cbdf4c6a4f57 ] Active Permission \u00b6 Active permission is composed of a set of contract execution permission, like creating an account, transfer function, etc. Active permission's features: the account owns owner permission can change active permission the account owns the execution permission of AccountPermissionUpdateContract can also change active permission 8 permissions at most permissionId increases from 2 automatically when a new account is created, an active permission will be created automatically, and the address will be inserted into it, default weight is 1, keys field only contains this address and weight is 1 Fee \u00b6 Using AccountPermissionUpdateContract costs 100TRX If a transaction contains 2 or more than 2 signatures, it charges an extra 1 TRX besides the transaction fee The fee can be modified by proposing API \u00b6 Change Permission \u00b6 AccountPermissionUpdateContract , steps: call getaccount to query the account, get the original permission change permission build transaction and sign send transaction Demo HTTP request: // POST to http://{{host}}:{{port}}/wallet/accountpermissionupdate { \"owner_address\": \"41ffa9466d5bf6bb6b7e4ab6ef2b1cb9f1f41f9700\", \"owner\": { \"type\": 0, \"id\": 0, \"permission_name\": \"owner\", \"threshold\": 2, \"keys\": [{ \"address\": \"41F08012B4881C320EB40B80F1228731898824E09D\", \"weight\": 1 }, { \"address\": \"41DF309FEF25B311E7895562BD9E11AAB2A58816D2\", \"weight\": 1 }, { \"address\": \"41BB7322198D273E39B940A5A4C955CB7199A0CDEE\", \"weight\": 1 } ] }, \"witness\": { \"type\": 1, \"id\": 1, \"permission_name\": \"witness\", \"threshold\": 1, \"keys\": [{ \"address\": \"41F08012B4881C320EB40B80F1228731898824E09D\", \"weight\": 1 } ] }, \"actives\": [{ \"type\": 2, \"id\": 2, \"permission_name\": \"active0\", \"threshold\": 3, \"operations\": \"7fff1fc0037e0000000000000000000000000000000000000000000000000000\", \"keys\": [{ \"address\": \"41F08012B4881C320EB40B80F1228731898824E09D\", \"weight\": 1 }, { \"address\": \"41DF309FEF25B311E7895562BD9E11AAB2A58816D2\", \"weight\": 1 }, { \"address\": \"41BB7322198D273E39B940A5A4C955CB7199A0CDEE\", \"weight\": 1 } ] }] } Calculate the Active Permission's Operations \u00b6 public static void main ( String [] args ) { //you need to specify the id of the contract you need to give permission to by referring to the definition of Transaction.ContractType in proto to get the id of the contract, below includes all the contract except AccountPermissionUpdateContract(id=46) Integer [] contractId = { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 30 , 31 , 32 , 33 , 41 , 42 , 43 , 44 , 45 }; List < Integer > list = new ArrayList <> ( Arrays . asList ( contractId )); byte [] operations = new byte [ 32 ] ; list . forEach ( e -> { operations [ e / 8 ] |= ( 1 << e % 8 ); }); //7fff1fc0033e0000000000000000000000000000000000000000000000000000 System . out . println ( ByteArray . toHexString ( operations )); } Contract Execution \u00b6 (1). Create transaction, the same as none multi-signatures (2). Specify Permission_id , default 0, represent owner permission, demo (3). User A sign the transaction, and then send it to user B (4). User B sign the transaction gets from A, and then send it to user C ...... (n). The last users that signs the transaction broadcast it to the node (n+1). The node will verify if the sum of the weight of all signatures is bigger than threshold, if true, the transaction is accepted, otherwise, is rejected Other APIs \u00b6 Please refer to HTTP API and RPC API for more information. query the addresses that already signed a transaction > curl -X POST http://127.0.0.1:8090/wallet/getapprovedlist -d '{\"transaction\"}' rpc GetTransactionApprovedList ( Transaction ) returns ( TransactionApprovedList ) { } query the signature weight of a transaction > curl -X POST http://127.0.0.1:8090/wallet/getsignweight -d '{\"transaction\"}' rpc GetTransactionSignWeight ( Transaction ) returns ( TransactionSignWeight ) {}","title":"Account Permission Management"},{"location":"mechanism-algorithm/multi-signatures/#account-permission-management","text":"","title":"Account Permission Management"},{"location":"mechanism-algorithm/multi-signatures/#background","text":"Account permission management functions allow for permission grading, and each permission can correspond to multiple private keys. This makes it possible to achieve multi-person joint control of accounts. This guide walks the user through TRON's account permission management implementation and design.","title":"Background"},{"location":"mechanism-algorithm/multi-signatures/#concept","text":"There are three types of permission: owner\u3001witness and active. Owner permission has the right to execute all the contracts. Witness permission is for SR. Active permission contains a set of contracts selected execution permissions.","title":"Concept"},{"location":"mechanism-algorithm/multi-signatures/#protocol-definition","text":"","title":"Protocol Definition"},{"location":"mechanism-algorithm/multi-signatures/#account","text":"message Account { // ... Permission owner_permission = 31 ; Permission witness_permission = 32 ; repeated Permission active_permission = 33 ; } Three attributes are added, owner_permission\u3001witness_permission and active_permission. active_permission is a list, the length can not be bigger than 8.","title":"Account"},{"location":"mechanism-algorithm/multi-signatures/#contracttype","text":"message Transaction { message Contract { enum ContractType { AccountCreateContract = 0 ; // ... AccountPermissionUpdateContract = 46 ; } } } AccountPermissionUpdateContract is a new contract type used to update the account permission.","title":"ContractType"},{"location":"mechanism-algorithm/multi-signatures/#accountpermissionupdatecontract","text":"message AccountPermissionUpdateContract { bytes owner_address = 1 ; Permission owner = 2 ; Permission witness = 3 ; repeated Permission actives = 4 ; } owner_address : The address of the account whose permissions are to be modified owner : Owner permission witness : Witness permission (if the account is a SR(Super Representative)) actives : Active permission This will override the Original account permission. Therefore, if you only want to modify the owner permission, witness (if it is a SR account) and active permission also need to be set","title":"AccountPermissionUpdateContract"},{"location":"mechanism-algorithm/multi-signatures/#permission","text":"message Permission { enum PermissionType { Owner = 0 ; Witness = 1 ; Active = 2 ; } PermissionType type = 1 ; int32 id = 2 ; string permission_name = 3 ; int64 threshold = 4 ; int32 parent_id = 5 ; bytes operations = 6 ; repeated Key keys = 7 ; } PermissionType : Permission type id : Generated by system. Owner id=0, Witness id=1, Active id increases from 2. Specifying using which permission to execute a contract by setting id. For instance, using owner permission, set id=0 permission_name : Permission name, 32 bytes length limit threshold : The threshold of the signature weight parent_id : Current 0 operations : 32 bytes (256 b), each bit represent the execution permission of one contract, 1 means it owns the execution permission of the contract. For instance, operations=0x0100...00(hex), 100...0(binary), refer to the definition of Transaction.ContractType in proto, the id of AccountCreateContract is 0, means this permission only owns the execution permission of AccountCreateContract keys : The accounts and weights that all own the permission, 5 keys at most.","title":"Permission"},{"location":"mechanism-algorithm/multi-signatures/#key","text":"message Key { bytes address = 1 ; int64 weight = 2 ; } address : The account address weight : The signature weight","title":"Key"},{"location":"mechanism-algorithm/multi-signatures/#transaction","text":"message Transaction { // ... int32 Permission_id = 5 ; } Permission_id is added. It is corresponding to Permission.id 1 is not allowed, because witness permission is only used to produce blocks, not for transaction signature.","title":"Transaction"},{"location":"mechanism-algorithm/multi-signatures/#owner-permission","text":"Owner permission is the top permission of an account. It is used to control account ownership, adjust permission structure. Owner Permission has the right to execute all the contracts. Owner permission's features: The account that has owner permission can change the owner permission When owner permission is null, the default owner of the account owns the owner permission When you create a new account, the address will be insert into owner permission automatically, default weight is 1, keys field only contains this address and also weight is 1. If a permissionId is not specified when a contract is executed, using owner permission by default.","title":"Owner Permission"},{"location":"mechanism-algorithm/multi-signatures/#witness-permission","text":"Super representatives can use this permission to manage block producing. Only SR(Super Representative) account has this permission. Usage scenario example: A super representative deploys a witness node on cloud server. In order to keep the account on the cloud server safe, you can only give the block producing permission to the account you put on cloud server. Because this account only owns block producing permission, no TRX transfer permission, so even if the account on the cloud server is leaked, the TRX will not be lost. Witness node configuration: if no witness permission is used, no need to configure if itness permission is used, need to reconfigure: # config.conf // Optional.The default is empty. // It is used when the SR(Super Representative) account has set the witnessPermission. // When it is not empty, the localWitnessAccountAddress represents the address of the SR(Super Representative) account, // and the localwitness is configured with the private key of the witnessPermissionAddress in the SR(Super Representatives) account. // When it is empty,the localwitness is configured with the private key of the SR(Super Representatives) account. //localWitnessAccountAddress = localwitness = [ f4df789d3210ac881cb900464dd30409453044d2777060a0c391cbdf4c6a4f57 ]","title":"Witness Permission"},{"location":"mechanism-algorithm/multi-signatures/#active-permission","text":"Active permission is composed of a set of contract execution permission, like creating an account, transfer function, etc. Active permission's features: the account owns owner permission can change active permission the account owns the execution permission of AccountPermissionUpdateContract can also change active permission 8 permissions at most permissionId increases from 2 automatically when a new account is created, an active permission will be created automatically, and the address will be inserted into it, default weight is 1, keys field only contains this address and weight is 1","title":"Active Permission"},{"location":"mechanism-algorithm/multi-signatures/#fee","text":"Using AccountPermissionUpdateContract costs 100TRX If a transaction contains 2 or more than 2 signatures, it charges an extra 1 TRX besides the transaction fee The fee can be modified by proposing","title":"Fee"},{"location":"mechanism-algorithm/multi-signatures/#api","text":"","title":"API"},{"location":"mechanism-algorithm/multi-signatures/#change-permission","text":"AccountPermissionUpdateContract , steps: call getaccount to query the account, get the original permission change permission build transaction and sign send transaction Demo HTTP request: // POST to http://{{host}}:{{port}}/wallet/accountpermissionupdate { \"owner_address\": \"41ffa9466d5bf6bb6b7e4ab6ef2b1cb9f1f41f9700\", \"owner\": { \"type\": 0, \"id\": 0, \"permission_name\": \"owner\", \"threshold\": 2, \"keys\": [{ \"address\": \"41F08012B4881C320EB40B80F1228731898824E09D\", \"weight\": 1 }, { \"address\": \"41DF309FEF25B311E7895562BD9E11AAB2A58816D2\", \"weight\": 1 }, { \"address\": \"41BB7322198D273E39B940A5A4C955CB7199A0CDEE\", \"weight\": 1 } ] }, \"witness\": { \"type\": 1, \"id\": 1, \"permission_name\": \"witness\", \"threshold\": 1, \"keys\": [{ \"address\": \"41F08012B4881C320EB40B80F1228731898824E09D\", \"weight\": 1 } ] }, \"actives\": [{ \"type\": 2, \"id\": 2, \"permission_name\": \"active0\", \"threshold\": 3, \"operations\": \"7fff1fc0037e0000000000000000000000000000000000000000000000000000\", \"keys\": [{ \"address\": \"41F08012B4881C320EB40B80F1228731898824E09D\", \"weight\": 1 }, { \"address\": \"41DF309FEF25B311E7895562BD9E11AAB2A58816D2\", \"weight\": 1 }, { \"address\": \"41BB7322198D273E39B940A5A4C955CB7199A0CDEE\", \"weight\": 1 } ] }] }","title":"Change Permission"},{"location":"mechanism-algorithm/multi-signatures/#calculate-the-active-permissions-operations","text":"public static void main ( String [] args ) { //you need to specify the id of the contract you need to give permission to by referring to the definition of Transaction.ContractType in proto to get the id of the contract, below includes all the contract except AccountPermissionUpdateContract(id=46) Integer [] contractId = { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 30 , 31 , 32 , 33 , 41 , 42 , 43 , 44 , 45 }; List < Integer > list = new ArrayList <> ( Arrays . asList ( contractId )); byte [] operations = new byte [ 32 ] ; list . forEach ( e -> { operations [ e / 8 ] |= ( 1 << e % 8 ); }); //7fff1fc0033e0000000000000000000000000000000000000000000000000000 System . out . println ( ByteArray . toHexString ( operations )); }","title":"Calculate the Active Permission's Operations"},{"location":"mechanism-algorithm/multi-signatures/#contract-execution","text":"(1). Create transaction, the same as none multi-signatures (2). Specify Permission_id , default 0, represent owner permission, demo (3). User A sign the transaction, and then send it to user B (4). User B sign the transaction gets from A, and then send it to user C ...... (n). The last users that signs the transaction broadcast it to the node (n+1). The node will verify if the sum of the weight of all signatures is bigger than threshold, if true, the transaction is accepted, otherwise, is rejected","title":"Contract Execution"},{"location":"mechanism-algorithm/multi-signatures/#other-apis","text":"Please refer to HTTP API and RPC API for more information. query the addresses that already signed a transaction > curl -X POST http://127.0.0.1:8090/wallet/getapprovedlist -d '{\"transaction\"}' rpc GetTransactionApprovedList ( Transaction ) returns ( TransactionApprovedList ) { } query the signature weight of a transaction > curl -X POST http://127.0.0.1:8090/wallet/getsignweight -d '{\"transaction\"}' rpc GetTransactionSignWeight ( Transaction ) returns ( TransactionSignWeight ) {}","title":"Other APIs"},{"location":"mechanism-algorithm/resource/","text":"Resource Model \u00b6 Introduction \u00b6 Voting Right, bandwidth and energy are important system resources of the TRON network. Among them, voting rights are used to vote for super representatives; Bandwidth is the unit that measures the size of the transaction bytes stored in the blockchain database. The larger the transaction, the more bandwidth resources will be consumed. Energy is the unit that measures the amount of computation required by the TRON virtual machine to perform specific operations on the TRON network. Since smart contract transactions require computing resources to execute, each smart contract transaction requires to pay for the energy fee. Note Ordinary transaction only consumes Bandwidth points Smart contract related transaction not only consumes Bandwidth points, but also Energy Voting Right \u00b6 Before any account can vote for super representatives, it needs to obtain voting rights, that is, TRON Power (TP). Voting rights can be obtained by staking TRX. In addition to obtaining bandwidth or energy, staking TRX will also obtain voting rights at the same time. Voters who stake 1TRX will receive 1TP. For how to stake, please refer to the Staking on TRON Network chapter. Voters can stake multiple times, and the voting rights obtained by multiple stake will be added to the voter's account. Voters can query the total number of voting rights owned by the account and the number of used voting rights through the wallet/getaccountresource interface. Bandwidth Points \u00b6 The transaction information is stored and transmitted in the form of byte array, Bandwidth Points consumed = the number of bytes of the transaction * Bandwidth Points rate. Currently Bandwidth Points rate = 1. Such as if the number of bytes of a transaction is 200, so this transaction consumes 200 Bandwidth Points. Note Due to the change of the total amount of the staked TRX in the network and the self-staked TRX amount, the Bandwidth Points an account possesses is not fixed. 1. How to Get Bandwidth Points \u00b6 By staking TRX to get Bandwidth Points, Bandwidth Points = the amount of TRX self-staked / the total amount of TRX staked for Bandwidth Points in the network * 43,200,000,000 Every account has a fixed amount of free Bandwidth Points(600) every day 2. Bandwidth Points Consumption \u00b6 Except for query operation, any transaction consumes Bandwidth points. Bandwidth points consumption sequence for TRC-10 transfer: Free Bandwidth points. TRC-10 issuer's Bandwidth points(if possible.) Bandwidth points TRX staking. Bandwidth points obtained by TRX burning, the rate = the number of bytes of the transaction * 1,000 SUN; Bandwidth points consumption sequence for other transactions: Free Bandwidth points. Bandwidth points TRX staking. Bandwidth points obtained by TRX burning, the rate = the number of bytes of the transaction * 1,000 SUN; 3. Bandwidth Points Recovery \u00b6 After the account's free bandwidth and the bandwidth obtained by staking TRX are consumed, they will gradually recover within 24 hours. 4. Account Bandwidth Balance Query \u00b6 First, call the node HTTP interface wallet/getaccountresource to obtain the current resource status of the account, and then calculate the bandwidth balance by the following formula: Free bandwidth balance = freeNetLimit - freeNetUsed Bandwidth balance obtained by staking TRX = NetLimit - NetUsed Note: If the result returned by the interface does not contain the parameters in the above formula, it means that the parameter value is 0. Energy \u00b6 Each command of smart contract consume system resource while running, we use 'Energy' as the unit of the consumption of the resource. 1. How to Get Energy \u00b6 Stake TRX to get energy. Example (Using wallet-cli): freezeBalanceV2 frozen_balance [ResourceCode:0 BANDWIDTH,1 ENERGY] stake TRX to get energy, energy obtained = user's TRX staked amount / total amount of staked TRX in TRON * 180,000,000,000. Example: If there are only two users, A stakes 2 TRX, B stakes 2 TRX the energy they can get is: A: 75,000,000,000 and energy_limit is 90,000,000,000 B: 75,000,000,000 and energy_limit is 90,000,000,000 when C stakes 1 TRX: the energy they can get is: A: 60,000,000,000 and energy_limit is 72,000,000,000 B: 60,000,000,000 and energy_limit is 72,000,000,000 C: 30,000,000,000 and energy_limit is 36,000,000,000 Energy Consumption \u00b6 When the contract is executed, Energy is calculated and deducted according to instruction one by one. The priority of account energy consumption is as follows: Energy obtained by staking TRX Burn TRX First, the energy obtained by staking TRX will be consumed. If this part of energy is not enough, the account's TRX will continue to be burned to pay for the energy resources required for the transaction, according to the unit price of 0.00021TRX per energy. If the contract exits due to throwing a revert exception while execution, only the energy consumed by instructions that have already been executed will be deducted. But for abnormal contracts, such as contract execution timeout, or abnormal exit due to bug, the maximum available energy of this transaction will be deducted. You can limit the maximum energy cost of this transaction by setting the fee_limit parameter of the transaction. Energy Recovery \u00b6 After the energy resource of the account is consumed, it will gradually recover within 24 hours. Account Energy Balance Query \u00b6 First call the node HTTP interface wallet/getaccountresource to obtain the current resource status of the account, and then calculate the energy balance by the following formula: Energy Balance = EnergyLimit - EnergyUsed Note: If the result returned by the interface does not contain the parameters in the above formula, it means that the parameter value is 0. 2. How to Set Fee Limit (Caller Must Read) \u00b6 Within the scope of this section, the smart contract developer will be called \"developer\", the users or other contracts which call the smart contract will be called \"caller\" The amount of energy consumed while call the contract can be converted to TRX or SUN, so within the scope of this section, when refer to the consumption of the resource, there's no strict difference between Energy, TRX and SUN, unless they are used as a number unit. Set a rational fee limit can guarantee the smart contract execution. And if the execution of the contract cost great energy, it will not consume too much energy from the caller. Before you set fee limit, you need to know several conception: The legal fee limit is a integer between 0 - 15*10^9, unit is SUN. Different smart contracts consume different amount of energy due to their complexity. The same trigger in the same contract almost consumes the same amount of energy[^1], however, due to the dynamic energy model mechanism, for popular contracts, different energy may be required for execution at different times. For details, please refer to the Dynamic Energy Model Chapter. When the contract is triggered, the commands will be executed one by one and consume energy. If it reaches the fee limit, commands will fail to be executed, and energy is not refundable. Currently fee limit only refers to the energy converted to SUN that will be consumed from the caller[^2]. The energy consumed by triggering contract also includes developer's share. For a vicious contract, if it encounters execution timeout or bug crash, all it's energy will be consumed. Developer may undertake a proportion of energy consumption(like 90%). But if the developer's energy is not enough for consumption, the rest of the energy consumption will be undertaken by caller completely. Within the fee limit range, if the caller does not have enough energy, then it will burn equivalent amount of TRX [^2]. To encourage caller to trigger the contract, usually developer has enough energy. Example \u00b6 How to estimate the fee limit: Assume contract C's last execution consumes 18000 Energy, so estimate the energy consumption limit to be 20000 Energy. When to burn TRX, since the unit price of energy is currently 210sun, 21 trx can be exchanged for 100,000 Energy. Assume developer undertake 90% energy consumption, and developer has enough energy. Then the way to estimate the fee limit is: A = 20000 energy * 210sun = 4,200,000 sun = 4.2 trx Developer undertakes 90% energy consumption, caller undertakes 10% energy consumption, So, the caller is suggested to set fee limit to 4,200,000 sun * 10% = 420,000 sun. 3. Energy Calculation (Developer Must Read) \u00b6 In order to punish the vicious developer, for the abnormal contract, if the execution times out (more than 80ms) or quits due to bug (revert not included), the maximum available energy will be deducted. If the contract runs normally or revert, only the energy needed for the execution of the commands will be deducted. Developer can set the proportion of the energy consumption it undertakes during the execution, this proportion can be changed later. If the developer's energy is not enough, it will consume the caller's energy. Currently, the total energy available when trigger a contract is composed of caller fee limit and developer's share Note If the developer is not sure about whether the contract is normal, do not set caller's energy consumption proportion to 0%, in case all developer's energy will be deducted due to vicious execution[^1]. We recommend to set caller's energy consumption proportion to 10% ~ 100%[^2]. ** Example 1 ** A has an account with a balance of 90 TRX(90000000 SUN) and 10 TRX staked for 100000 energy. Smart contract C set the caller energy consumption proportion to 100% which means the caller will pay for the energy consumption completely. A triggers C, the fee limit set is 30000000 (unit SUN, 30 TRX) So during this trigger the energy A can use is from two parts: A's energy by staking TRX; The energy converted from the amount of TRX burning according to a fixed rate; If fee limit is greater than the energy obtained from staking TRX, then it will burn TRX to get energy. The fixed rate is: 1 Energy = 210 SUN, fee limit still has (30 - 10) TRX = 20 TRX available, so the energy it can keep consuming is 20 TRX / 210 SUN = 95238 energy. Finally, in this call, the energy A can use is (100000 + 95238) = 195238 energy. If contract executes successfully without any exception, the energy needed for the execution will be deducted. Generally, it is far more less than the amount of energy this trigger can use. If Assert-style error come out, it will consume the whole number of energy set for fee limit. ** Example 2 ** A has an account with a balance of 90 TRX(90000000 SUN) and 10 TRX staked for 100000 energy. Smart contract C set the caller energy consumption proportion to 40% which means the developer will pay for the rest 60% energy consumption. Developer D stakes 50 TRX to get 500000 energy. A triggers C, the fee limit set is 200000000 (unit SUN, 200 TRX). So during this trigger the energy A can use is from three parts: A's energy by staking TRX -- X; The energy converted from the amount of TRX burning according to a fixed rate -- Y; If fee limit is greater than the energy obtained from staking TRX, then it will burn TRX to get energy. The fixed rate is: 1 Energy = 210 sun, fee limit still has (200 - 10) TRX = 190 TRX available, but A only has 90 TRX left, so the energy it can keep consuming is 90 TRX / 210 sun = 428571 energy; D's energy by staking TRX -- Z; There are two situation: if (X + Y) / 40% >= Z / 60%, the energy A can use is X + Y + Z if (X + Y) / 40% < Z / 60%, the energy A can use is (X + Y) / 40% If contract executes successfully without any exception, the energy needed for the execution will be deducted. Generally, it is far more less than the amount of energy this trigger can use. If Assert-style error comes out, it will consume the whole number of energy set for fee limit. Note: when developer create a contract, do not set consume_user_resource_percent to 0, which means developer will undertake all the energy consumption. If Assert-style error comes out, it will consume all energy from the developer itself. To avoid unnecessary lost, 10 - 100 is recommended for consume_user_resource_percent. Dynamic Energy Model \u00b6 The dynamic energy model is a resource balancing mechanism of the TRON network, which can dynamically adjust the energy consumption of each contract according to the resource occupancy of the contract, so as to make the allocation of energy resources on the chain more reasonable and prevent excessive concentration of network resources on a few popular contracts. For more details, please refer to Introduction to Dynamic Energy Model . Principle \u00b6 If a contract uses too many resources in one maintenance cycle , then in the next maintenance cycle, a certain percentage of punitive consumption will be added, and users who send the same transaction to this contract will cost more energy than before. When the contract uses resources reasonably, the energy consumption generated by the user calling the contract will gradually return to normal. Each contract has an energy_factor field, which indicates the increase ratio of the energy consumption of the smart contract transaction relative to the base energy consumption and the initial value is 0. When the energy_factor of the contract is 0, it means that the contract is using resources reasonably, and there will be no additional energy consumption for calling the contract. When the energy_factor is greater than 0, it means that the contract is already a popular contract, and additional energy will be consumed when calling the contract. The energy_factor of a contract can be queried through the getcontractinfo API. The calculation formula for the final energy consumed by the contract invocation transaction is as follows: energy consumption by a contract invocation transaction = the basic energy consumption generated by the transaction * \uff081 + energy_factor\uff09 The dynamic energy model introduces the following three parameters of the TRON network , which jointly control the energy_factor field of the contract: threshold : The threshold of contract basic energy consumption. In a maintenance cycle, if the basic energy consumption of the contract exceeds this threshold, the energy consumption of the contract will increase at the next maintenance cycle. increase_factor : If the basic energy consumption of the contract exceeds the threshold during a certain maintenance cycle, the energy_factor will increase by a certain percentage according to the increase_factor in the next maintenance cycle. max_factor : the maximum value of energy_factor. There is also a variable decrease_factor used to reduce the energy_factor of the contract: decrease_factor : 1/4 of increase_factor . After the basic energy consumption of the contract falls below the threshold, energy_factor will be reduced by a certain percentage according to decrease_factor . When the basic energy consumption of the contract exceeds threshold during a maintenance cycle, its energy_factor will increase in the next maintenance cycle, but the maximum will not be Exceeding max_factor , the calculation formula is: energy_factor = min((1 + energy_factor) * (1 + increaese_factor)-1, max_factor) When the basic energy consumption of the contract drops below the threshold in a maintenance cycle, the energy_factor will decrease in the next maintenance cycle, but the minimum value will not be lower than 0. The calculation formula is as follows: energy_factor = max((1 + energy_factor) * (1 - decrease_factor)- 1, 0) The dynamic energy model has been enabled on the main network, and the relevant parameters are set as follows: threshold \uff1a5,000,000,000 increase_factor \uff1a0.2 max_factor \uff1a3.4 Since the energy consumption of popular contracts is different in different maintenance cycles, it is necessary to set the appropriate feelimit parameter for the transaction when calling the contract. Staking on TRON network \u00b6 How to stake to obtain system resources \u00b6 Energy and bandwidth resources are obtained by the account owner through staking, please use wallet/freezebalancev2 to complete the stake operation through HTTP API, use Stake2.0 Solidity API to complete the stake operation through the contract. TRON allocates resources through the staking mechanism. In addition to obtaining bandwidth or energy resources, staking TRX will also obtain voting rights (TRON Power, TP for short) equal to the amount staked. Staking 1 TRX, you will get 1TP. The energy or bandwidth resources obtained by staking are used to pay transaction fees, and the obtained voting rights are used to vote for super representatives to obtain voting rewards. The unstaking operation will release the corresponding resources. How to delegate resources \u00b6 After the account obtains energy or bandwidth resources through staking, it can delegate resources to other addresses through delegateresource , and can also take back allocated resources through undelegateresource . Please pay attention to the following situations when delegating resource: Only energy and bandwidth can be delegated to other addresses, voting rights cannot be delegated Only unused resources obtained by staking through Stake2.0 can be delegated to other addresses Energy/Bandwidth can only be delegated to an activated external account address, not to a contract address You can use the wallet/getcandelegatedmaxsize interface to query the available delegation share of a certain resource type in the account. Time lock can be used when delegating resources. If time lock is used, after the resource delegating is completed, the resource delegation for the address only can be canceled after 3 days. During the locking period, if the user performs resource delegating for the same address again, it will Reset the 3-days waiting period. If the time lock is not used, the delegation can be canceled immediately after the resource is delegated. How to unstake TRX \u00b6 After completing the TRX staking, you can unstake at any time. After unstaking, you need to wait for 14 days before you can withdraw the unstaked TRX into your account. 14 days is the No.70 parameter of TRON network which can be voted on by network governance proposals. Please use unfreezebalancev2 to complete unfreeze balance through HTTP API. The staked TRX can be partially unstaked multiple times, but only a maximum of 32 unstaking operations are allowed at the same time. That is to say, when a user initiates the first unstake operation, before the TRX of the first unstaking arrives and is ready to be withdrawn to his or her account, he or she can only initiate another 31 unstake operations. The remaining counts of unfreeze can be queried through the getavailableunfreezecount interface. The TRX that have been delegated cannot be unstaked. In addition to losing the same amount of resource shares, the unstaking will also lose the same amount of TP resources. When unstaking, if there are unclaimed voting rewards, the voting rewards will be automatically withdrawn to the account. If there is a previously unstaked principal that has passed the lock-up period, then this unstake operation will also withdraw the unstaked principal that has passed the lock-up period to the account at the same time. You can use the gettransactioninfobyid API to query the voting reward extracted in this transaction in withdraw_amount field and the withdrawn amount of unstaked TRX that has expired the lock-up period in withdraw_expire_amount field. TRON Power Reclaim \u00b6 After unstaking the TRX staked in the Stake2.0 stage, the same amount of voting rights will be lost. The system will first reclaim the idle voting rights in the account. If the idle TP is insufficient, it will continue to reclaim the used TP. If the user has voted for multiple super representatives, a certain number of votes will be withdrawn in proportion from each super representative, and the corresponding voting rights will be recovered. The calculation formula for withdrawing votes for each SR is, The number of votes withdrawn from the current super representative = total number of votes to be withdrawn * (number of votes for the current super representative / total number of votes of this account) For example, Suppose A staked 2,000TRX and obtained 2,000 TRON Power, of which 1,000 TRON Power voted for 2 super representatives, 600 votes and 400 votes respectively, and 1,000 TRON Power remained in the account. At this time, A unstakes 1,500TRX, which means that 1,500 TRON Power needs to be reclaimed from A\u2019 account. In this case, the idle 1,000 TP in A\u2019s account will be withdrawn first, and the spared 500 TP will be withdrawn from the voted TP, which is 300 TP and 200 TP respectively from the two super representatives. Here's how the votes are calculated: Number of votes withdrawn by Super Representative 1 = 500 * (600 / 1,000) = 300 Number of votes withdrawn by Super Representative 2 = 500 * (400 / 1,000) = 200 At present, the TRON network uses the Stake2.0 stake mechanism, but the resources and votes obtained by Stake1.0 are still valid. The TRX staked at Stake1.0 can still be withdrawal through Stake1.0 API unfreezebalance , but it should be noted that if the TRX staked in Stake 1.0 is unstaked, all votes in the account will be revoked. How to cancel unstaking \u00b6 Stake2.0 supports canceling all unstakes after the user unstakes TRX, which will make the assets be used for stake again to obtain corresponding resources, without having to wait for the unstaked funds to pass the lock-up period before withdrawing the funds to the account , and then stake them again. Please use cancelallunfreezev2 to cancel all unstaking operations. When canceling unstakings, all unstaked funds still in the waiting period will be re-staked, and the resource obtained through the re-staking remains the same as before. Unstakings that exceeded the 14-day waiting period cannot be canceled, and this part of the unstaked funds will be automatically withdrawn to the owner\u2019s account. Users can query the canceled unstaked principal amount cancel_unfreezeV2_amount , and the withdrawn principal amount that has expired the lock-up period withdraw_expire_amount through the gettransactioninfobyid interface. API \u00b6 The following table shows the relevant interfaces of the stake model and their descriptions: API Description freezebalancev2 Stake TRX unfreezebalancev2 Unstake TRX delegateresource Delegate resources undelegateresource Undelegate resources withdrawexpireunfreeze Withdraw unfrozen balance getavailableunfreezecount Query the remaining times of executing unstake operation getcanwithdrawunfreezeamount Query the withdrawable balance getcandelegatedmaxsize Query the amount of delegatable resources share of the specified resource Type getdelegatedresourcev2 Query the amount of resource delegated by fromAddress to toAddress getdelegatedresourceaccountindexv2 Query the resource delegation index by an account getaccount Query the account stake status, resource share, unstake status, and voting status getaccountresource Query the total amount of resources, the amount of used, and the amount of available cancelallunfreezev2 Cancel unstaking","title":"Resource Model"},{"location":"mechanism-algorithm/resource/#resource-model","text":"","title":"Resource Model"},{"location":"mechanism-algorithm/resource/#introduction","text":"Voting Right, bandwidth and energy are important system resources of the TRON network. Among them, voting rights are used to vote for super representatives; Bandwidth is the unit that measures the size of the transaction bytes stored in the blockchain database. The larger the transaction, the more bandwidth resources will be consumed. Energy is the unit that measures the amount of computation required by the TRON virtual machine to perform specific operations on the TRON network. Since smart contract transactions require computing resources to execute, each smart contract transaction requires to pay for the energy fee. Note Ordinary transaction only consumes Bandwidth points Smart contract related transaction not only consumes Bandwidth points, but also Energy","title":"Introduction"},{"location":"mechanism-algorithm/resource/#voting-right","text":"Before any account can vote for super representatives, it needs to obtain voting rights, that is, TRON Power (TP). Voting rights can be obtained by staking TRX. In addition to obtaining bandwidth or energy, staking TRX will also obtain voting rights at the same time. Voters who stake 1TRX will receive 1TP. For how to stake, please refer to the Staking on TRON Network chapter. Voters can stake multiple times, and the voting rights obtained by multiple stake will be added to the voter's account. Voters can query the total number of voting rights owned by the account and the number of used voting rights through the wallet/getaccountresource interface.","title":"Voting Right"},{"location":"mechanism-algorithm/resource/#bandwidth-points","text":"The transaction information is stored and transmitted in the form of byte array, Bandwidth Points consumed = the number of bytes of the transaction * Bandwidth Points rate. Currently Bandwidth Points rate = 1. Such as if the number of bytes of a transaction is 200, so this transaction consumes 200 Bandwidth Points. Note Due to the change of the total amount of the staked TRX in the network and the self-staked TRX amount, the Bandwidth Points an account possesses is not fixed.","title":"Bandwidth Points"},{"location":"mechanism-algorithm/resource/#1-how-to-get-bandwidth-points","text":"By staking TRX to get Bandwidth Points, Bandwidth Points = the amount of TRX self-staked / the total amount of TRX staked for Bandwidth Points in the network * 43,200,000,000 Every account has a fixed amount of free Bandwidth Points(600) every day","title":"1. How to Get Bandwidth Points"},{"location":"mechanism-algorithm/resource/#2-bandwidth-points-consumption","text":"Except for query operation, any transaction consumes Bandwidth points. Bandwidth points consumption sequence for TRC-10 transfer: Free Bandwidth points. TRC-10 issuer's Bandwidth points(if possible.) Bandwidth points TRX staking. Bandwidth points obtained by TRX burning, the rate = the number of bytes of the transaction * 1,000 SUN; Bandwidth points consumption sequence for other transactions: Free Bandwidth points. Bandwidth points TRX staking. Bandwidth points obtained by TRX burning, the rate = the number of bytes of the transaction * 1,000 SUN;","title":"2. Bandwidth Points Consumption"},{"location":"mechanism-algorithm/resource/#3-bandwidth-points-recovery","text":"After the account's free bandwidth and the bandwidth obtained by staking TRX are consumed, they will gradually recover within 24 hours.","title":"3. Bandwidth Points Recovery"},{"location":"mechanism-algorithm/resource/#4-account-bandwidth-balance-query","text":"First, call the node HTTP interface wallet/getaccountresource to obtain the current resource status of the account, and then calculate the bandwidth balance by the following formula: Free bandwidth balance = freeNetLimit - freeNetUsed Bandwidth balance obtained by staking TRX = NetLimit - NetUsed Note: If the result returned by the interface does not contain the parameters in the above formula, it means that the parameter value is 0.","title":"4. Account Bandwidth Balance Query"},{"location":"mechanism-algorithm/resource/#energy","text":"Each command of smart contract consume system resource while running, we use 'Energy' as the unit of the consumption of the resource.","title":"Energy"},{"location":"mechanism-algorithm/resource/#1-how-to-get-energy","text":"Stake TRX to get energy. Example (Using wallet-cli): freezeBalanceV2 frozen_balance [ResourceCode:0 BANDWIDTH,1 ENERGY] stake TRX to get energy, energy obtained = user's TRX staked amount / total amount of staked TRX in TRON * 180,000,000,000. Example: If there are only two users, A stakes 2 TRX, B stakes 2 TRX the energy they can get is: A: 75,000,000,000 and energy_limit is 90,000,000,000 B: 75,000,000,000 and energy_limit is 90,000,000,000 when C stakes 1 TRX: the energy they can get is: A: 60,000,000,000 and energy_limit is 72,000,000,000 B: 60,000,000,000 and energy_limit is 72,000,000,000 C: 30,000,000,000 and energy_limit is 36,000,000,000","title":"1. How to Get Energy"},{"location":"mechanism-algorithm/resource/#energy-consumption","text":"When the contract is executed, Energy is calculated and deducted according to instruction one by one. The priority of account energy consumption is as follows: Energy obtained by staking TRX Burn TRX First, the energy obtained by staking TRX will be consumed. If this part of energy is not enough, the account's TRX will continue to be burned to pay for the energy resources required for the transaction, according to the unit price of 0.00021TRX per energy. If the contract exits due to throwing a revert exception while execution, only the energy consumed by instructions that have already been executed will be deducted. But for abnormal contracts, such as contract execution timeout, or abnormal exit due to bug, the maximum available energy of this transaction will be deducted. You can limit the maximum energy cost of this transaction by setting the fee_limit parameter of the transaction.","title":"Energy Consumption"},{"location":"mechanism-algorithm/resource/#energy-recovery","text":"After the energy resource of the account is consumed, it will gradually recover within 24 hours.","title":"Energy Recovery"},{"location":"mechanism-algorithm/resource/#account-energy-balance-query","text":"First call the node HTTP interface wallet/getaccountresource to obtain the current resource status of the account, and then calculate the energy balance by the following formula: Energy Balance = EnergyLimit - EnergyUsed Note: If the result returned by the interface does not contain the parameters in the above formula, it means that the parameter value is 0.","title":"Account Energy Balance Query"},{"location":"mechanism-algorithm/resource/#2-how-to-set-fee-limit-caller-must-read","text":"Within the scope of this section, the smart contract developer will be called \"developer\", the users or other contracts which call the smart contract will be called \"caller\" The amount of energy consumed while call the contract can be converted to TRX or SUN, so within the scope of this section, when refer to the consumption of the resource, there's no strict difference between Energy, TRX and SUN, unless they are used as a number unit. Set a rational fee limit can guarantee the smart contract execution. And if the execution of the contract cost great energy, it will not consume too much energy from the caller. Before you set fee limit, you need to know several conception: The legal fee limit is a integer between 0 - 15*10^9, unit is SUN. Different smart contracts consume different amount of energy due to their complexity. The same trigger in the same contract almost consumes the same amount of energy[^1], however, due to the dynamic energy model mechanism, for popular contracts, different energy may be required for execution at different times. For details, please refer to the Dynamic Energy Model Chapter. When the contract is triggered, the commands will be executed one by one and consume energy. If it reaches the fee limit, commands will fail to be executed, and energy is not refundable. Currently fee limit only refers to the energy converted to SUN that will be consumed from the caller[^2]. The energy consumed by triggering contract also includes developer's share. For a vicious contract, if it encounters execution timeout or bug crash, all it's energy will be consumed. Developer may undertake a proportion of energy consumption(like 90%). But if the developer's energy is not enough for consumption, the rest of the energy consumption will be undertaken by caller completely. Within the fee limit range, if the caller does not have enough energy, then it will burn equivalent amount of TRX [^2]. To encourage caller to trigger the contract, usually developer has enough energy.","title":"2. How to Set Fee Limit (Caller Must Read)"},{"location":"mechanism-algorithm/resource/#example","text":"How to estimate the fee limit: Assume contract C's last execution consumes 18000 Energy, so estimate the energy consumption limit to be 20000 Energy. When to burn TRX, since the unit price of energy is currently 210sun, 21 trx can be exchanged for 100,000 Energy. Assume developer undertake 90% energy consumption, and developer has enough energy. Then the way to estimate the fee limit is: A = 20000 energy * 210sun = 4,200,000 sun = 4.2 trx Developer undertakes 90% energy consumption, caller undertakes 10% energy consumption, So, the caller is suggested to set fee limit to 4,200,000 sun * 10% = 420,000 sun.","title":"Example"},{"location":"mechanism-algorithm/resource/#3-energy-calculation-developer-must-read","text":"In order to punish the vicious developer, for the abnormal contract, if the execution times out (more than 80ms) or quits due to bug (revert not included), the maximum available energy will be deducted. If the contract runs normally or revert, only the energy needed for the execution of the commands will be deducted. Developer can set the proportion of the energy consumption it undertakes during the execution, this proportion can be changed later. If the developer's energy is not enough, it will consume the caller's energy. Currently, the total energy available when trigger a contract is composed of caller fee limit and developer's share Note If the developer is not sure about whether the contract is normal, do not set caller's energy consumption proportion to 0%, in case all developer's energy will be deducted due to vicious execution[^1]. We recommend to set caller's energy consumption proportion to 10% ~ 100%[^2]. ** Example 1 ** A has an account with a balance of 90 TRX(90000000 SUN) and 10 TRX staked for 100000 energy. Smart contract C set the caller energy consumption proportion to 100% which means the caller will pay for the energy consumption completely. A triggers C, the fee limit set is 30000000 (unit SUN, 30 TRX) So during this trigger the energy A can use is from two parts: A's energy by staking TRX; The energy converted from the amount of TRX burning according to a fixed rate; If fee limit is greater than the energy obtained from staking TRX, then it will burn TRX to get energy. The fixed rate is: 1 Energy = 210 SUN, fee limit still has (30 - 10) TRX = 20 TRX available, so the energy it can keep consuming is 20 TRX / 210 SUN = 95238 energy. Finally, in this call, the energy A can use is (100000 + 95238) = 195238 energy. If contract executes successfully without any exception, the energy needed for the execution will be deducted. Generally, it is far more less than the amount of energy this trigger can use. If Assert-style error come out, it will consume the whole number of energy set for fee limit. ** Example 2 ** A has an account with a balance of 90 TRX(90000000 SUN) and 10 TRX staked for 100000 energy. Smart contract C set the caller energy consumption proportion to 40% which means the developer will pay for the rest 60% energy consumption. Developer D stakes 50 TRX to get 500000 energy. A triggers C, the fee limit set is 200000000 (unit SUN, 200 TRX). So during this trigger the energy A can use is from three parts: A's energy by staking TRX -- X; The energy converted from the amount of TRX burning according to a fixed rate -- Y; If fee limit is greater than the energy obtained from staking TRX, then it will burn TRX to get energy. The fixed rate is: 1 Energy = 210 sun, fee limit still has (200 - 10) TRX = 190 TRX available, but A only has 90 TRX left, so the energy it can keep consuming is 90 TRX / 210 sun = 428571 energy; D's energy by staking TRX -- Z; There are two situation: if (X + Y) / 40% >= Z / 60%, the energy A can use is X + Y + Z if (X + Y) / 40% < Z / 60%, the energy A can use is (X + Y) / 40% If contract executes successfully without any exception, the energy needed for the execution will be deducted. Generally, it is far more less than the amount of energy this trigger can use. If Assert-style error comes out, it will consume the whole number of energy set for fee limit. Note: when developer create a contract, do not set consume_user_resource_percent to 0, which means developer will undertake all the energy consumption. If Assert-style error comes out, it will consume all energy from the developer itself. To avoid unnecessary lost, 10 - 100 is recommended for consume_user_resource_percent.","title":"3. Energy Calculation (Developer Must Read)"},{"location":"mechanism-algorithm/resource/#dynamic-energy-model","text":"The dynamic energy model is a resource balancing mechanism of the TRON network, which can dynamically adjust the energy consumption of each contract according to the resource occupancy of the contract, so as to make the allocation of energy resources on the chain more reasonable and prevent excessive concentration of network resources on a few popular contracts. For more details, please refer to Introduction to Dynamic Energy Model .","title":"Dynamic Energy Model"},{"location":"mechanism-algorithm/resource/#principle","text":"If a contract uses too many resources in one maintenance cycle , then in the next maintenance cycle, a certain percentage of punitive consumption will be added, and users who send the same transaction to this contract will cost more energy than before. When the contract uses resources reasonably, the energy consumption generated by the user calling the contract will gradually return to normal. Each contract has an energy_factor field, which indicates the increase ratio of the energy consumption of the smart contract transaction relative to the base energy consumption and the initial value is 0. When the energy_factor of the contract is 0, it means that the contract is using resources reasonably, and there will be no additional energy consumption for calling the contract. When the energy_factor is greater than 0, it means that the contract is already a popular contract, and additional energy will be consumed when calling the contract. The energy_factor of a contract can be queried through the getcontractinfo API. The calculation formula for the final energy consumed by the contract invocation transaction is as follows: energy consumption by a contract invocation transaction = the basic energy consumption generated by the transaction * \uff081 + energy_factor\uff09 The dynamic energy model introduces the following three parameters of the TRON network , which jointly control the energy_factor field of the contract: threshold : The threshold of contract basic energy consumption. In a maintenance cycle, if the basic energy consumption of the contract exceeds this threshold, the energy consumption of the contract will increase at the next maintenance cycle. increase_factor : If the basic energy consumption of the contract exceeds the threshold during a certain maintenance cycle, the energy_factor will increase by a certain percentage according to the increase_factor in the next maintenance cycle. max_factor : the maximum value of energy_factor. There is also a variable decrease_factor used to reduce the energy_factor of the contract: decrease_factor : 1/4 of increase_factor . After the basic energy consumption of the contract falls below the threshold, energy_factor will be reduced by a certain percentage according to decrease_factor . When the basic energy consumption of the contract exceeds threshold during a maintenance cycle, its energy_factor will increase in the next maintenance cycle, but the maximum will not be Exceeding max_factor , the calculation formula is: energy_factor = min((1 + energy_factor) * (1 + increaese_factor)-1, max_factor) When the basic energy consumption of the contract drops below the threshold in a maintenance cycle, the energy_factor will decrease in the next maintenance cycle, but the minimum value will not be lower than 0. The calculation formula is as follows: energy_factor = max((1 + energy_factor) * (1 - decrease_factor)- 1, 0) The dynamic energy model has been enabled on the main network, and the relevant parameters are set as follows: threshold \uff1a5,000,000,000 increase_factor \uff1a0.2 max_factor \uff1a3.4 Since the energy consumption of popular contracts is different in different maintenance cycles, it is necessary to set the appropriate feelimit parameter for the transaction when calling the contract.","title":"Principle"},{"location":"mechanism-algorithm/resource/#staking-on-tron-network","text":"","title":"Staking on TRON network"},{"location":"mechanism-algorithm/resource/#how-to-stake-to-obtain-system-resources","text":"Energy and bandwidth resources are obtained by the account owner through staking, please use wallet/freezebalancev2 to complete the stake operation through HTTP API, use Stake2.0 Solidity API to complete the stake operation through the contract. TRON allocates resources through the staking mechanism. In addition to obtaining bandwidth or energy resources, staking TRX will also obtain voting rights (TRON Power, TP for short) equal to the amount staked. Staking 1 TRX, you will get 1TP. The energy or bandwidth resources obtained by staking are used to pay transaction fees, and the obtained voting rights are used to vote for super representatives to obtain voting rewards. The unstaking operation will release the corresponding resources.","title":"How to stake to obtain system resources"},{"location":"mechanism-algorithm/resource/#how-to-delegate-resources","text":"After the account obtains energy or bandwidth resources through staking, it can delegate resources to other addresses through delegateresource , and can also take back allocated resources through undelegateresource . Please pay attention to the following situations when delegating resource: Only energy and bandwidth can be delegated to other addresses, voting rights cannot be delegated Only unused resources obtained by staking through Stake2.0 can be delegated to other addresses Energy/Bandwidth can only be delegated to an activated external account address, not to a contract address You can use the wallet/getcandelegatedmaxsize interface to query the available delegation share of a certain resource type in the account. Time lock can be used when delegating resources. If time lock is used, after the resource delegating is completed, the resource delegation for the address only can be canceled after 3 days. During the locking period, if the user performs resource delegating for the same address again, it will Reset the 3-days waiting period. If the time lock is not used, the delegation can be canceled immediately after the resource is delegated.","title":"How to delegate resources"},{"location":"mechanism-algorithm/resource/#how-to-unstake-trx","text":"After completing the TRX staking, you can unstake at any time. After unstaking, you need to wait for 14 days before you can withdraw the unstaked TRX into your account. 14 days is the No.70 parameter of TRON network which can be voted on by network governance proposals. Please use unfreezebalancev2 to complete unfreeze balance through HTTP API. The staked TRX can be partially unstaked multiple times, but only a maximum of 32 unstaking operations are allowed at the same time. That is to say, when a user initiates the first unstake operation, before the TRX of the first unstaking arrives and is ready to be withdrawn to his or her account, he or she can only initiate another 31 unstake operations. The remaining counts of unfreeze can be queried through the getavailableunfreezecount interface. The TRX that have been delegated cannot be unstaked. In addition to losing the same amount of resource shares, the unstaking will also lose the same amount of TP resources. When unstaking, if there are unclaimed voting rewards, the voting rewards will be automatically withdrawn to the account. If there is a previously unstaked principal that has passed the lock-up period, then this unstake operation will also withdraw the unstaked principal that has passed the lock-up period to the account at the same time. You can use the gettransactioninfobyid API to query the voting reward extracted in this transaction in withdraw_amount field and the withdrawn amount of unstaked TRX that has expired the lock-up period in withdraw_expire_amount field.","title":"How to unstake TRX"},{"location":"mechanism-algorithm/resource/#tron-power-reclaim","text":"After unstaking the TRX staked in the Stake2.0 stage, the same amount of voting rights will be lost. The system will first reclaim the idle voting rights in the account. If the idle TP is insufficient, it will continue to reclaim the used TP. If the user has voted for multiple super representatives, a certain number of votes will be withdrawn in proportion from each super representative, and the corresponding voting rights will be recovered. The calculation formula for withdrawing votes for each SR is, The number of votes withdrawn from the current super representative = total number of votes to be withdrawn * (number of votes for the current super representative / total number of votes of this account) For example, Suppose A staked 2,000TRX and obtained 2,000 TRON Power, of which 1,000 TRON Power voted for 2 super representatives, 600 votes and 400 votes respectively, and 1,000 TRON Power remained in the account. At this time, A unstakes 1,500TRX, which means that 1,500 TRON Power needs to be reclaimed from A\u2019 account. In this case, the idle 1,000 TP in A\u2019s account will be withdrawn first, and the spared 500 TP will be withdrawn from the voted TP, which is 300 TP and 200 TP respectively from the two super representatives. Here's how the votes are calculated: Number of votes withdrawn by Super Representative 1 = 500 * (600 / 1,000) = 300 Number of votes withdrawn by Super Representative 2 = 500 * (400 / 1,000) = 200 At present, the TRON network uses the Stake2.0 stake mechanism, but the resources and votes obtained by Stake1.0 are still valid. The TRX staked at Stake1.0 can still be withdrawal through Stake1.0 API unfreezebalance , but it should be noted that if the TRX staked in Stake 1.0 is unstaked, all votes in the account will be revoked.","title":"TRON Power Reclaim"},{"location":"mechanism-algorithm/resource/#how-to-cancel-unstaking","text":"Stake2.0 supports canceling all unstakes after the user unstakes TRX, which will make the assets be used for stake again to obtain corresponding resources, without having to wait for the unstaked funds to pass the lock-up period before withdrawing the funds to the account , and then stake them again. Please use cancelallunfreezev2 to cancel all unstaking operations. When canceling unstakings, all unstaked funds still in the waiting period will be re-staked, and the resource obtained through the re-staking remains the same as before. Unstakings that exceeded the 14-day waiting period cannot be canceled, and this part of the unstaked funds will be automatically withdrawn to the owner\u2019s account. Users can query the canceled unstaked principal amount cancel_unfreezeV2_amount , and the withdrawn principal amount that has expired the lock-up period withdraw_expire_amount through the gettransactioninfobyid interface.","title":"How to cancel unstaking"},{"location":"mechanism-algorithm/resource/#api","text":"The following table shows the relevant interfaces of the stake model and their descriptions: API Description freezebalancev2 Stake TRX unfreezebalancev2 Unstake TRX delegateresource Delegate resources undelegateresource Undelegate resources withdrawexpireunfreeze Withdraw unfrozen balance getavailableunfreezecount Query the remaining times of executing unstake operation getcanwithdrawunfreezeamount Query the withdrawable balance getcandelegatedmaxsize Query the amount of delegatable resources share of the specified resource Type getdelegatedresourcev2 Query the amount of resource delegated by fromAddress to toAddress getdelegatedresourceaccountindexv2 Query the resource delegation index by an account getaccount Query the account stake status, resource share, unstake status, and voting status getaccountresource Query the total amount of resources, the amount of used, and the amount of available cancelallunfreezev2 Cancel unstaking","title":"API"},{"location":"mechanism-algorithm/shielded-TRC20-contract/","text":"Shielded TRC-20 Contract \u00b6 Introduction \u00b6 TRC-20 token contract allows users to issue and transfer tokens, but it can not guarantee the privacy since it leaks the token ownership. When transferring the token, the source address, destination address, and the token amount are public. The shielded TRC-20 contract ( TIP-135 ) aims to solve this problem and provides users better privacy of token ownership and transactions. The shielded TRC-20 contract has three core functions: mint , transfer and burn . mint is used to transform the public TRC-20 token to shielded token, which makes token ownership invisible. mint has only one transparent input and one shielded output. transfer is used for shielded token transactions, which can hide the source address, the destination address, and the transaction amount. transfer has at most two shielded input and two shielded output. burn is used to transform the shielded token to the public TRC-20 token. burn has only one shielded input, one transparent output and zero or one shielded output. The technical implementation is based on zk-SNARK(Zero-Knowledge Succinct Non-Interactive Argument of Knowledge) proof system, which is secure and efficient. Contract Deployment \u00b6 Use deployContract method in the wallet-cli to deploy the TRC-20 contract. Note: the deployed TRC-20 contract address of TokenTRC20 on Nile Testnet is: TFUD8x3iAZ9dF7NDCGBtSjznemEomE5rP9 . Use the deployContract method to deploy the shielded TRC-20 contract. The shielded TRC-20 contract will bind the TRC-20 contract. The scalingFactor is also specified when deploying the the shielded TRC-20 contract. For more details about scalingFactor , please refer TIP-135 . Note: the deployed shielded TRC-20 contract address of ShieldedTRC20 on Nile Testnet is: TPcKtz5TRfP4xUZSos81RmXB9K2DBqj2iu and the corresponding scalingFactor is set 10. Usage Guide \u00b6 1. The sender needs to create an ordianry account by api. The account is used to trigger the shielded TRC-20 contract, so it should has some trx to pay the transaction fee. 2. The sender should create the shielded address, which is used to send and receive the shielded TRC-20 notes. 3. The sender calls the api to create shielded TRC-20 contract parameters for mint , transfer and burn . 4. The sender triggers the shielded TRC-20 contract by using the generated parameters and generates the shielded TRC-20 transaction. 5. The sender broadcasts the shielded TRC-20 transaction. 6. The receiver scans to get the received shielded notes. The document below describes how to use TRON Shielded TRC-20 contract with http api. Create the account \u00b6 1. Call api: wallet/createaccount to generate the account Method: Post Parameters: { \"owner_address\" : \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\" , \"account_address\" : \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\" } Return: { \"visible\":false, \"txID\":\"c43651d448e82e00de3c31d7d34a826af4a6538bc3f5e9abcde11ef25f57d70e\", \"raw_data\":{ \"contract\":[ { \"parameter\":{ \"value\":{ \"owner_address\":\"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"account_address\":\"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\" }, \"type_url\":\"type.googleapis.com/protocol.AccountCreateContract\" }, \"type\":\"AccountCreateContract\" }], \"ref_block_bytes\":\"2bb0\", \"ref_block_hash\":\"e678f7b7e4da198d\", \"expiration\":1591780749000, \"timestamp\":1591780690724 }, \"raw_data_hex\":\"0a022bb02208e678f7b7e4da198d40c8dd9aeca92e5a6612640a32747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e4163636f756e74437265617465436f6e7472616374122e0a1541d1e7a6bc354106cb410e65ff8b181c600ff14292121541e552f6487585c2b58bc2c9bb4492bc1f17132cd070a49697eca92e\" } Create the shielded address \u00b6 1. Call api: wallet/getspendingkey to generate the spending key Method: Post Parameters: null Return: { \"value\": \"09124de6a534661ef1cfad0335832445a3b83c08e885881a68a52cf4dc735e68\" } 2. Call api: wallet/getexpandedspendingkey to generate the expanded spending key Method: Post Parameters: { \"value\" : \"09124de6a534661ef1cfad0335832445a3b83c08e885881a68a52cf4dc735e68\" } Return: { \"ask\": \"23d11537676610c287ffcd1bc33d650df37fc90d13bb65356fbc9045cfb91705\", \"nsk\": \"da6542f57f6f730cb31b401b9ca8660589d8a765405c6d6f48fd392ac5360b0a\", \"ovk\": \"e73f5383fdeacbb282db951afba01e607916c8106b316c55544fac84b2efbdc4\" } 3. Call api: wallet/getakfromask to generate the ak from ask Method: Post Parameters: { \"value\" : \"23d11537676610c287ffcd1bc33d650df37fc90d13bb65356fbc9045cfb91705\" } Return: { \"value\": \"72b041a8006a02a995c24f5b8531a62008c8c54a1979622dc4ea6f54a506732d\" } 4. Call api: wallet/getnkfromnsk to generate the nk from nsk Method: Post Parameters: { \"value\" : \"da6542f57f6f730cb31b401b9ca8660589d8a765405c6d6f48fd392ac5360b0a\" } Return: { \"value\": \"2d817ea2e005e174d9291d0bd0605e11cb79e3f5855780521bc300d0636a58df\" } 5. Call api: wallet/getincomingviewingkey to generate the incoming viewing key Method: Post Parameters: { \"ak\" : \"72b041a8006a02a995c24f5b8531a62008c8c54a1979622dc4ea6f54a506732d\" , \"nk\" : \"da6542f57f6f730cb31b401b9ca8660589d8a765405c6d6f48fd392ac5360b0a\" } Return: { \"ivk\": \"6896b46a8355ae75896900ac617293d98e1b48fd885ed484a7cbddd566762705\" } 6. Call api: wallet/getdiversifier to generate the diversifier Method: Post Parameters: null Return: {\"d\": \"dd6b441bd5dcb9c25ec41f\"} 7. Call api: wallet/getzenpaymentaddress to generate shielded payment address Method: Post Parameters: { \"ivk\" : \"6896b46a8355ae75896900ac617293d98e1b48fd885ed484a7cbddd566762705\" , \"d\" : \"dd6b441bd5dcb9c25ec41f\" } Return: { \"d\": { \"d\": \"dd6b441bd5dcb9c25ec41f\" }, \"pkD\": \"297198e7d4a024a3b5ef9b68ed15e7463fbf03e6aa590aa551d7bd0c1cfa828d\", \"payment_address\": \"ztron1m445gx74mjuuyhkyru5hrx886jszfga4a7dk3mg4uarrl0cru649jz4928tm6rqul2pg645hqv5\" } 8. Call api: wallet/getnewshieldedaddress to generate all the related keys Method: Post Parameters: null Return: { \"sk\": \"0bfc211444fa877ba546ffb3a64e8b7aa58dd7bdd23a7b22166e9da923add0e6\", \"ask\": \"264c351e5a154555b1ec7822f9bfc0faa5ced9d75b17ed1552699a20b18f7c07\", \"nsk\": \"ebd5bf67f68de464c8a109b389ff4d07912ebe11e8b3d034cf505b35c8d5a907\", \"ovk\": \"a8fa18b039e2cd8aeb04c8cf299b2bbc43cb5ab4dd67eec8884e3563223e5908\", \"ak\": \"0648c0b20fa5eab112d466f75b174d1c142bf35318d2f50d63c6b3b343c8c397\", \"nk\": \"a45852bb5b9e933266d5fab6062baa456b149329f8081817ef868923f87b2f9d\", \"ivk\": \"9c3eacfe786e67c6f3b567cfcf129dcfdc21347ce6f192cc3ca1e994df570c05\", \"d\": \"987adf3b4d8da446327d17\", \"pkD\": \"09f3c4576c4f836b3472a6a5738606866607a6ffcd1c7299e31ec40455b1cd35\", \"payment_address\": \"ztron1npad7w6d3kjyvvnazuyl83zhd38cx6e5w2n22uuxq6rxvpaxllx3cu5euv0vgpz4k8xn2rsga28\" } Create shielded TRC-20 contract parameters for mint \u00b6 1. Call api: wallet/createshieldedcontractparameters to build the parameters Method: Post Parameters: { \"ovk\" : \"1797de3b7f33cafffe3fe18c6b43ec6760add2ad81b10978d1fca5290497ede9\" , \"from_amount\" : \"5000\" , \"shielded_receives\" : { \"note\" : { \"value\" : 50 , \"payment_address\" : \"ztron15js0jkuxczt8caq5hp59rnh6rgf34sek7vqn9u6ljelxv4nuzz2x9qe3ffm2wzz6ck53yxyhxs6\" , \"rcm\" : \"74baec30dfac8ed59968955ff245ae002009005194e5b824c35ab88c52e5170e\" } }, \"shielded_TRC20_contract_address\" : \"41f3392eaa7d38749176e0671dbc6912f8ef956943\" } Note: 1. the shielded TRC-20 contract should be deployed before calling the api; 2. the from_amount is the real value, the value in note is the scaled value by scalingFactor set in the shielded TRC-20 contract, namely from_amount = value * scalingFactor . In this example, the value of scalingFactor is 100; 3. the rcm is a random field element with the length of 32 bytes, which should be generated by GetRcm api. Return: { \"receive_description\" : [ { \"value_commitment\" : \"7e979cc6662a133dabf6cea0b64ef27670a4c30c2fb9dc0ac37444cb80a1f7a8\" , \"note_commitment\" : \"3e950099a8c9b5ec04e9b68218872edac4c030b37bdb39fe806d7ce124ed1808\" , \"epk\" : \"e394dab255529e854dcb33fd9602b3be083ece00f98205155c6b26284effc552\" , \"c_enc\" : \"635b837f9f4908c75bb5f855758ac22ba890f841bc10350820bae483296e9f86d04b92306d2bb0962dc27130325dcf59226232768398bbadda2ac0f8cf2ea7cd96a2c84e69ccd31b373d1d71d87ffc1e8a5fb659a4700e817af75d00eebb6279e5e0681ee32a1baf1a760735f00e5f7641a915876520c7b3b00f257d11c06826b70137dd23a9401eff12af084743cbfbd8ddb203c7493967eee98ddaf32571c1449804bd474a4a9c3a605187537f9244b84a08aae2c49f4e5c514788a8de9292f94b1ce92f8bbb1f6f55eef6afe9116f626977aa15a9b3365edb92db2db3cfd7c350f16f7e3cc650c05e126a73da137a6e0a5982a22545c5c4a7aa4b9e35419db6f3746513d14784eb64a02c0b799ed165fbd6706b6a29d1a7a4148019bb0057a170c9f5d102048b6bd666e8973e6b6443bc220a5b89bcefc24b1d4576214ad5be3d9c75b0edc9e1e6706a967e24e4e64d22909b8fdb7bbcf1068cf2c935b3c6015f31b809ee8d61c9dfe3d79e86c7a705be4d1830534f62ecb719ce69121a9af0c7c34c39cdd5132f4c495e9bd2cc96435c5ee9a975b1a18856a0ec819ca10b3fdbbaf7fc98c063f42d0269433e8627939a9b22878531a6cdc2efcf654041a5a7d16e254f86b9e8b30f089c09e3f4834908338203690a028deee97d4983142b66e9f4e2c7790cc32c06ce43095431798967fa4412734aeaed2ca8d5aeafa6223911b0b07c0421f80fc7da5f2952b2a4354e62f43623598107a5480273d81c518ccd3accc1f435ee8aab875e7ccca59b7d6af9a9046dc75907ab99af0f08e063f771b4e6\" , \"c_out\" : \"4d073fcfc631e5efe83ad17f74aea9a66993c20ea8b5e9f9d8891fa840d92b18a0b54a5e1fa9af4d8e8ed6449c2c84741c3bc22083aa11576086deca3f9e69b7f17b24abc43cd2d73ae9ff6d9fafea94\" , \"zkproof\" : \"b2d9af13e41750291b3dedcedca2ce79f369f472e9022b8d88bf77d6a7c799bcc6c90e2dc37b246595f160c06ee78bc185c77e031233b27f0056bd7b9f44487f1008b6e3805734479ee9deae1093f18afcbe2e28fd62b13ebce897790be3567207f3e92b783e07ea7a5d6a3e2c96990c1b36abe0d36869ca826532927f3562d1c2347efe3fd3d77b8c34cfc4b7d2d364a90c4ec4d09d3ce56e75412effa885717e90347705277e65a3075e60c2ccad90c46d0e31e114231b8ca922143258caae\" }] , \"binding_signature\" : \"3561b47bd2c2ffde7122db43611ae89af2ae8dc104bc563c6587d6df428b7aa86b52d67a19d8b43b5a668634df494acb4c2eb7d8aea1e074812dd6a5b9cf800d\" , \"message_hash\" : \"3da3e050660849f7395d10a66fede6fef8a6aa8768957dd92b3993d856d98635\" , \"trigger_contract_input\" : \"00000000000000000000000000000000000000000000000000000000000013883e950099a8c9b5ec04e9b68218872edac4c030b37bdb39fe806d7ce124ed18087e979cc6662a133dabf6cea0b64ef27670a4c30c2fb9dc0ac37444cb80a1f7a8e394dab255529e854dcb33fd9602b3be083ece00f98205155c6b26284effc552b2d9af13e41750291b3dedcedca2ce79f369f472e9022b8d88bf77d6a7c799bcc6c90e2dc37b246595f160c06ee78bc185c77e031233b27f0056bd7b9f44487f1008b6e3805734479ee9deae1093f18afcbe2e28fd62b13ebce897790be3567207f3e92b783e07ea7a5d6a3e2c96990c1b36abe0d36869ca826532927f3562d1c2347efe3fd3d77b8c34cfc4b7d2d364a90c4ec4d09d3ce56e75412effa885717e90347705277e65a3075e60c2ccad90c46d0e31e114231b8ca922143258caae3561b47bd2c2ffde7122db43611ae89af2ae8dc104bc563c6587d6df428b7aa86b52d67a19d8b43b5a668634df494acb4c2eb7d8aea1e074812dd6a5b9cf800d635b837f9f4908c75bb5f855758ac22ba890f841bc10350820bae483296e9f86d04b92306d2bb0962dc27130325dcf59226232768398bbadda2ac0f8cf2ea7cd96a2c84e69ccd31b373d1d71d87ffc1e8a5fb659a4700e817af75d00eebb6279e5e0681ee32a1baf1a760735f00e5f7641a915876520c7b3b00f257d11c06826b70137dd23a9401eff12af084743cbfbd8ddb203c7493967eee98ddaf32571c1449804bd474a4a9c3a605187537f9244b84a08aae2c49f4e5c514788a8de9292f94b1ce92f8bbb1f6f55eef6afe9116f626977aa15a9b3365edb92db2db3cfd7c350f16f7e3cc650c05e126a73da137a6e0a5982a22545c5c4a7aa4b9e35419db6f3746513d14784eb64a02c0b799ed165fbd6706b6a29d1a7a4148019bb0057a170c9f5d102048b6bd666e8973e6b6443bc220a5b89bcefc24b1d4576214ad5be3d9c75b0edc9e1e6706a967e24e4e64d22909b8fdb7bbcf1068cf2c935b3c6015f31b809ee8d61c9dfe3d79e86c7a705be4d1830534f62ecb719ce69121a9af0c7c34c39cdd5132f4c495e9bd2cc96435c5ee9a975b1a18856a0ec819ca10b3fdbbaf7fc98c063f42d0269433e8627939a9b22878531a6cdc2efcf654041a5a7d16e254f86b9e8b30f089c09e3f4834908338203690a028deee97d4983142b66e9f4e2c7790cc32c06ce43095431798967fa4412734aeaed2ca8d5aeafa6223911b0b07c0421f80fc7da5f2952b2a4354e62f43623598107a5480273d81c518ccd3accc1f435ee8aab875e7ccca59b7d6af9a9046dc75907ab99af0f08e063f771b4e64d073fcfc631e5efe83ad17f74aea9a66993c20ea8b5e9f9d8891fa840d92b18a0b54a5e1fa9af4d8e8ed6449c2c84741c3bc22083aa11576086deca3f9e69b7f17b24abc43cd2d73ae9ff6d9fafea94000000000000000000000000\" , \"parameter_type\" : \"mint\" } The trigger_contract_input can be used as the input data to trigger the mint function of the shielded token contract. Before triggering the shielded TRC-20 contract, the user should trigger the approve method of TRC-20 contract, to authorize the shielded TRC-20 contract to transfer the token from TRC-20 contract to shielded TRC-20 contract. Note: when the shielded TRC-20 contract is deployed, it will bind the corresponding TRC-20 contract. 2. Call api: wallet/createshieldedcontractparameterswithoutask to build the parameters Method: Post Parameters: { \"ovk\" : \"cd361834b3adc06f130de24f7d0c18f92a093cc885d9ce492cc6c02071f7a4f0\" , \"from_amount\" : \"5000\" , \"shielded_receives\" : { \"note\" : { \"value\" : 50 , \"payment_address\" : \"ztron13lvfnt4rau4ad9mmgztd3aftw49e3amz8gm2kvyzrsaw0ugz2grxwkvcfys5e2gkchj7cnnetjz\" , \"rcm\" : \"499e73f2f8aaf05fac41a35b8343bde27f6629cbe66d35da5364a99b94a55a06\" } }, \"shielded_TRC20_contract_address\" : \"41f3392eaa7d38749176e0671dbc6912f8ef956943\" } Note: the from_amount is the real value, the value in note is the scaled value by scalingFactor set in the shielded TRC-20 contract, namely from_amount = value * scalingFactor . In this example, the value of scalingFactor is 100. Return: { \"receive_description\" : [ { \"value_commitment\" : \"7e979cc6662a133dabf6cea0b64ef27670a4c30c2fb9dc0ac37444cb80a1f7a8\" , \"note_commitment\" : \"3e950099a8c9b5ec04e9b68218872edac4c030b37bdb39fe806d7ce124ed1808\" , \"epk\" : \"e394dab255529e854dcb33fd9602b3be083ece00f98205155c6b26284effc552\" , \"c_enc\" : \"635b837f9f4908c75bb5f855758ac22ba890f841bc10350820bae483296e9f86d04b92306d2bb0962dc27130325dcf59226232768398bbadda2ac0f8cf2ea7cd96a2c84e69ccd31b373d1d71d87ffc1e8a5fb659a4700e817af75d00eebb6279e5e0681ee32a1baf1a760735f00e5f7641a915876520c7b3b00f257d11c06826b70137dd23a9401eff12af084743cbfbd8ddb203c7493967eee98ddaf32571c1449804bd474a4a9c3a605187537f9244b84a08aae2c49f4e5c514788a8de9292f94b1ce92f8bbb1f6f55eef6afe9116f626977aa15a9b3365edb92db2db3cfd7c350f16f7e3cc650c05e126a73da137a6e0a5982a22545c5c4a7aa4b9e35419db6f3746513d14784eb64a02c0b799ed165fbd6706b6a29d1a7a4148019bb0057a170c9f5d102048b6bd666e8973e6b6443bc220a5b89bcefc24b1d4576214ad5be3d9c75b0edc9e1e6706a967e24e4e64d22909b8fdb7bbcf1068cf2c935b3c6015f31b809ee8d61c9dfe3d79e86c7a705be4d1830534f62ecb719ce69121a9af0c7c34c39cdd5132f4c495e9bd2cc96435c5ee9a975b1a18856a0ec819ca10b3fdbbaf7fc98c063f42d0269433e8627939a9b22878531a6cdc2efcf654041a5a7d16e254f86b9e8b30f089c09e3f4834908338203690a028deee97d4983142b66e9f4e2c7790cc32c06ce43095431798967fa4412734aeaed2ca8d5aeafa6223911b0b07c0421f80fc7da5f2952b2a4354e62f43623598107a5480273d81c518ccd3accc1f435ee8aab875e7ccca59b7d6af9a9046dc75907ab99af0f08e063f771b4e6\" , \"c_out\" : \"4d073fcfc631e5efe83ad17f74aea9a66993c20ea8b5e9f9d8891fa840d92b18a0b54a5e1fa9af4d8e8ed6449c2c84741c3bc22083aa11576086deca3f9e69b7f17b24abc43cd2d73ae9ff6d9fafea94\" , \"zkproof\" : \"b2d9af13e41750291b3dedcedca2ce79f369f472e9022b8d88bf77d6a7c799bcc6c90e2dc37b246595f160c06ee78bc185c77e031233b27f0056bd7b9f44487f1008b6e3805734479ee9deae1093f18afcbe2e28fd62b13ebce897790be3567207f3e92b783e07ea7a5d6a3e2c96990c1b36abe0d36869ca826532927f3562d1c2347efe3fd3d77b8c34cfc4b7d2d364a90c4ec4d09d3ce56e75412effa885717e90347705277e65a3075e60c2ccad90c46d0e31e114231b8ca922143258caae\" }] , \"binding_signature\" : \"3561b47bd2c2ffde7122db43611ae89af2ae8dc104bc563c6587d6df428b7aa86b52d67a19d8b43b5a668634df494acb4c2eb7d8aea1e074812dd6a5b9cf800d\" , \"message_hash\" : \"3da3e050660849f7395d10a66fede6fef8a6aa8768957dd92b3993d856d98635\" , \"trigger_contract_input\" : \"00000000000000000000000000000000000000000000000000000000000013883e950099a8c9b5ec04e9b68218872edac4c030b37bdb39fe806d7ce124ed18087e979cc6662a133dabf6cea0b64ef27670a4c30c2fb9dc0ac37444cb80a1f7a8e394dab255529e854dcb33fd9602b3be083ece00f98205155c6b26284effc552b2d9af13e41750291b3dedcedca2ce79f369f472e9022b8d88bf77d6a7c799bcc6c90e2dc37b246595f160c06ee78bc185c77e031233b27f0056bd7b9f44487f1008b6e3805734479ee9deae1093f18afcbe2e28fd62b13ebce897790be3567207f3e92b783e07ea7a5d6a3e2c96990c1b36abe0d36869ca826532927f3562d1c2347efe3fd3d77b8c34cfc4b7d2d364a90c4ec4d09d3ce56e75412effa885717e90347705277e65a3075e60c2ccad90c46d0e31e114231b8ca922143258caae3561b47bd2c2ffde7122db43611ae89af2ae8dc104bc563c6587d6df428b7aa86b52d67a19d8b43b5a668634df494acb4c2eb7d8aea1e074812dd6a5b9cf800d635b837f9f4908c75bb5f855758ac22ba890f841bc10350820bae483296e9f86d04b92306d2bb0962dc27130325dcf59226232768398bbadda2ac0f8cf2ea7cd96a2c84e69ccd31b373d1d71d87ffc1e8a5fb659a4700e817af75d00eebb6279e5e0681ee32a1baf1a760735f00e5f7641a915876520c7b3b00f257d11c06826b70137dd23a9401eff12af084743cbfbd8ddb203c7493967eee98ddaf32571c1449804bd474a4a9c3a605187537f9244b84a08aae2c49f4e5c514788a8de9292f94b1ce92f8bbb1f6f55eef6afe9116f626977aa15a9b3365edb92db2db3cfd7c350f16f7e3cc650c05e126a73da137a6e0a5982a22545c5c4a7aa4b9e35419db6f3746513d14784eb64a02c0b799ed165fbd6706b6a29d1a7a4148019bb0057a170c9f5d102048b6bd666e8973e6b6443bc220a5b89bcefc24b1d4576214ad5be3d9c75b0edc9e1e6706a967e24e4e64d22909b8fdb7bbcf1068cf2c935b3c6015f31b809ee8d61c9dfe3d79e86c7a705be4d1830534f62ecb719ce69121a9af0c7c34c39cdd5132f4c495e9bd2cc96435c5ee9a975b1a18856a0ec819ca10b3fdbbaf7fc98c063f42d0269433e8627939a9b22878531a6cdc2efcf654041a5a7d16e254f86b9e8b30f089c09e3f4834908338203690a028deee97d4983142b66e9f4e2c7790cc32c06ce43095431798967fa4412734aeaed2ca8d5aeafa6223911b0b07c0421f80fc7da5f2952b2a4354e62f43623598107a5480273d81c518ccd3accc1f435ee8aab875e7ccca59b7d6af9a9046dc75907ab99af0f08e063f771b4e64d073fcfc631e5efe83ad17f74aea9a66993c20ea8b5e9f9d8891fa840d92b18a0b54a5e1fa9af4d8e8ed6449c2c84741c3bc22083aa11576086deca3f9e69b7f17b24abc43cd2d73ae9ff6d9fafea94000000000000000000000000\" , \"parameter_type\" : \"mint\" } The trigger_contract_input can be used as the input data to trigger the mint function of the shielded TRC-20 contract. Create shielded contract parameters for transfer \u00b6 1. Call api: wallet/createshieldedcontractparameters to build the parameters Method: Post Parameters: { \"ask\" : \"0f63eabdfe2bbfe08012f6bb2db024e6809c16e8ed055aa41a6095424f192005\" , \"nsk\" : \"cd43d722fd4b6b01f19449ea826c3e935609648520fcc2a95c0026f0fa9ee404\" , \"ovk\" : \"0ff58efd75e083fe4fd759c8701e1c8cb6961c4297a12b2c800bdb7b2bcab889\" , shielded_spe n ds : [ { \"note\" : { \"value\" : 60 , \"payment_address\" : \"ztron1n2xqnggktc8tfhskevgfvnjjkd4tj6n98e28vdwjyu9p4dz5t55nwazay5y3qnv8cp0xs3fgzgv\" , \"rcm\" : \"6760c1f7681752bf9ec18316dfbc2d66ddaae690d77302bdc6d127ff3084af00\" }, \"alpha\" : \"9a22f748597f7dc83edb3b05b3a3def34f47c4cb13d216be7ce03d2ea9da7e0a\" , \"root\" : \"4d46e59b39d39430208317a101bc94ef1ee8276181cce24180612d500593315a\" , \"path\" : \"b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c5381412935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62de1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef7228e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2aa5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6ad2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb5816d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4afee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd7124c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee08500769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c4908eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf30238d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e8415276736aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b159216cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf006edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c1ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be2451d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642fbd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c1b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab651ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de985794730484777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23cba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce7243ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b7b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b680444d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa528138ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce7389613912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a5761cd9b3396e9cedf9afeecac3edbcd192c5f65a4b108cc595dd7f668df0a1fd8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6ca0568ea9736f053947db35d23177d291ebc45d45ed0519d69e12dad90ec25100817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca1557d62777dfad1d910d526787f2ea857575dad337270a07dd99127a6b320a39a72\" , \"pos\" : 20 }, { \"note\" : { \"value\" : 40 , \"payment_address\" : \"ztron135rhyme9sqgfdzszmvj0pzhvnthzdl59fqag362lsyrme3xrcjat9am35a390uk0yudskaqppf5\" , \"rcm\" : \"9ff13d57e9c5a92405da71d6187bb0c11d6260914788a54f38ad62e4a04ffa04\" }, \"alpha\" : \"6865f8058e33b3d3dccb8f0b5c39993760d305a711165724d90998fb68c64b00\" , \"root\" : \"4d46e59b39d39430208317a101bc94ef1ee8276181cce24180612d500593315a\" , \"path\" : \"b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c5381412935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62de1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef7228e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2aa5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6ad2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb5816d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4afee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd7124c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee08500769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c4908eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf30238d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e8415276736aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b159216cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf006edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c1ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be2451d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642fbd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c1b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab651ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de985794730484777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23cba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce7243ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b7b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b680444d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa528138ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce7389613912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a5761cd9b3396e9cedf9afeecac3edbcd192c5f65a4b108cc595dd7f668df0a1fd8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6ca0568ea9736f053947db35d23177d291ebc45d45ed0519d69e12dad90ec25100817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca15542bfe0aed87e6bb53dce44c20046a43418f9c43bc9f5695e55aa7580729cd74e\" , \"pos\" : 21 }, ], shielded_receives : [ { \"note\" : { \"value\" : 30 , \"payment_address\" : \"ztron16455ldgqwz3sfamz0nymymwcvg0v6qsvn8prqtnznu6dmuuud965ar6rqw3yas48dn9w7ejne59\" , \"rcm\" : \"75ba6b5949879ae11229f53728cd6f1eadbb999898e0927d7e9dc4045d806602\" } }, { \"note\" : { \"value\" : 70 , \"payment_address\" : \"ztron1fkcy3738mx4h448cpx76yz5fjsa8c4ra8r4ff8x6s5n4ak5303a5hrgcw66c5syf0y87wqwcrnh\" , \"rcm\" : \"43e419fb8abef141f7b9d5d5a30ac743edebf9eb80cd24a344efe3ca091b6008\" } } ], \"shielded_TRC20_contract_address\" : \"41e6e90fbc958ba09483550882b1f0327e0193250a\" } Return: { \"spend_description\" : [ { \"value_commitment\" : \"2a80edbcc55e7364c689dfb637a5f8a3ef89950061026de070b792a5a9f58f31\" , \"anchor\" : \"4d46e59b39d39430208317a101bc94ef1ee8276181cce24180612d500593315a\" , \"nullifier\" : \"5f5905b2424229d63775792bec06ea8b4897805992547901080e09a9b5146d3c\" , \"rk\" : \"4cc74a640e0040f16144e326892950ee95ab8afccba344e7b6fbca3169cbe4d7\" , \"zkproof\" : \"b69c7b252b36bbb654a26bcf6879afd3d7d4a6fe1e36d48e8c6508f4fea6a864717bd0d2d31d4a728277ff0d8e1bcfcb873d02c7a14a70899888f7eaed769d33f94fb836194dcc5ac16078d235e5b95b34472a782ec29ebe8ad14a222812b41b03e0f8edcd42774ceb8f5cddf312a3815a98c2909126646774017d67fcd0e114365e156614838ef87c222b729fa827ae801ae0a1ac4a48bc5f80fc3df2798c7d3f963ece395b1ff9c12e10ec7059d5855a8b101b266449b6eb3e326d7bf2acd6\" , \"spend_authority_signature\" : \"8538e941dbe6ddb8b2c70a2b5b6fb7729a84eecbfa386451f21adca4ecfb975a46534fa8e9a1d28a573c05f2c2a210d2555ecf51de781bf149bb27c1a3bfeb00\" } , { \"value_commitment\" : \"0ee5abca3e433892f2b62ec352089017482f15b457fdc71ffdd9c731d42f92d3\" , \"anchor\" : \"4d46e59b39d39430208317a101bc94ef1ee8276181cce24180612d500593315a\" , \"nullifier\" : \"29df43aae9e177e6fe15b76a23f0972f3709dc38e6033e35974926b2dad6302d\" , \"rk\" : \"2917aadf5107ac11e6ebbad2a0ac3502a168e0b8c0307827b1ad69029faacd9b\" , \"zkproof\" : \"b98b0e6f6004ffdbed4069f63772a494bdadbe0a7e3f88dc5688821424bbc0f27f906ce0492c9a8c2233aa691c1767cfb0c3bcf21aba659f9290ba5dc04455a4a913192276154052be66bb743a7c842a149d473638020562501d3a752152381e135439839d9b9a4c65f15b256117322c7d202b3af0c03473602399272560bb3b3e9be33a75103aadc858901eab4176a4a4450293fb77366b7a34563d1120b27e7f4a6c2daf762aa43654685d235629729209d6bb402196517ff7f51dfecb995b\" , \"spend_authority_signature\" : \"e11781f5601d3947b6e4c1b43000410449330695b7506a9691db7cbd18da686d492c22abf971187377f4a69ee9453b5bff30f7472e7ec267a0f9612c1dfaaa04\" }] , \"receive_description\" : [ { \"value_commitment\" : \"8e6eb8efb8e7d1a4069daba59f95043d599ac7d0a3fe8ea3a0f415f73e347f6f\" , \"note_commitment\" : \"57ab4c569b2cd69358ecaf26c9487cecc99a1b7607c8bfc7d2a58ed039277332\" , \"epk\" : \"fe72066db13a8e6acc820fdad950efa8f900b8544b645b93160ddc7811aec7e2\" , \"c_enc\" : \"7457fce75f5df5d979c15d8cebaf2c814fd884cc268187f8b52a3a0db5453d0608c2a8d00b095021fc0af1d039bfddc4fddf56e39ca5233b0ec0559099590cc4902b74c4a7508472c793b6ead0ee433d644a6e4f63d1a02dd402e1a74574163bd179d3045bdc3190dddb8e91f475f503d003cc0c26598a6494252540d53d7ef8793a3293f3f98a702cede14eb4f4f78cc958e83c4cb7579f3aefd6ee1ccd6269d61c9e8b3bf46101bf8b02fd4b6b3f3ea479d977da40ba532fa0100e3372e326315934bb21c16fa654969c1432ffdf710cc91c8eb4485c8885f49e2dceb0f14447f530a3a07bcf0a2914399458486766661c458f2beda0c75eac752ebc38f6e490f22640ef2231b2622fc647e5888f81d0c133ac1e76d99de89953d15708dc8a525563aad587a164e00f7d96d79bc02ad28478d8af930c0e08be219d8d0eda099571680801c3fb3f7195be590635279435a7052d70489653bd634566a930d17cef04d50c5c08fa3b4697ba1b6fd81c18431077f6acc6ca27cfe0e519cf3500c53d0f508b14ab1825dd2c3baf408eaa4df9725be2ac2c9b9b171c41597fed62a114ba8898f16e1d213f9668018725493398e9fa60fe58c650482d93bbef83b152956e4242bf7da10cf6b6a034e59e640c873e67c84980327025bbd239a19a02fea1439681af8ce81eb12efdc66bc2dc08b3143f9033fb7332a05523d1d38f765db7938faf9c2ac6089cef77e12622651683f0ea2815e9786977deb4bd2010d3c3be7f0484d1420387fd4fe56ced3b26d073f60940b52048fa939ba4f3e803d148121560ec\" , \"c_out\" : \"cbbdc18a1dbf3a572649437c765c86e521c43a2f0a74a503c489912396ef16d263e957bcfdb2aa0853b046fad0e66fcb7b3d01c766964fe223d4473a4a7fa99c934db7e1c1f3dedefe6804e91ab73f2a\" , \"zkproof\" : \"a2803d68ac307aa85ee726de8b25d933eb4158bdd479785ec1bffe9ac65de848669690d869819b549b384a00021d68ffaa0db8c35a226c32b3c5cfced3fda54be23caf7a2bde2422375f572f913532ea3cd3c1f78ff6e915d26569e33e8c729f0258fdf276e73865a74c9c5b9e1261c23486f9f5d07500f5f343314ecb7d757c28c77e511542329d19b2a4532b58111b84b421e548009a85907c2ff3c27174c6391cf4fefcf33d32e228106ca117b89d72bbbd64b7c3674c8de978d6c3a7f27a\" } , { \"value_commitment\" : \"fff3d45d73a5d80c4a97c8910f0d48dc7f60c685bb1ec6673631e253553f2c42\" , \"note_commitment\" : \"2cf0adee47f49552c47eeef546a040197f4a67250f8ada2c4152d08ff2acba71\" , \"epk\" : \"c12358c0825670e90f65424046e898b7b12ec9d2d26dc6728425204cf00528ca\" , \"c_enc\" : \"013ffaf4d17394aecbe9d117f673188a782467849207eaa22f702361af4977afc1a0379db1b2867df55136efe8279e851657de46bbf3c0436a143780805e48d5c5ed86122b9cc943775dcfa294bbc01b7edffe2da5253655192e2d42326cc89ee863a99ecc13a7355d0fc78fb78ea2d6311fcaf8715b2a3bfa52789f09c58a0afea45c6e6f38a1bbf4f044fea4f211370122363f10bb5d1d82fbc5c20ce394490266ac4825d3a04194367902ddc504959a189749a1e0019e627d34f3cb831d481ef7c31f6a7d9289f1b2df981cf2600f1576d3e853a96a94bba8373bcb2fb07918007022133dd659f6775e34e0f5e9860b1d82e27161ea55dcaf7ea8b13d2f0994d604cb053f83d9655aef4412a6ca597f164b8a8386979787b7408bbddaf2991a705448426c0210f3eb7ddcd99fcd4be97eae9313e15e972912e2fc971b999609ba4dec92b99e1b157ee550cd6bfe44f8e7f03a7198ed826212f7813df58f12dcd906551b78ff7bdb27cf028e81585df14a064ae59857cc3632a27db2f239477d8d2c9a821b9dca1fc7d743f8f86239d4fd966bb2263001e84499f103300a3c168d67006b1baf0e6c13800b9edd713f9336891330ac0479e832648bb6fe3082c26172632f4e35515d3b0e26a0a9a933e138ee056495ed5f7cf6f73a870ac749bb00d141aa09e36382519ec073dfbdb24f8e37ebb1f3a67ac918ce1b899b4b851f2ca06115e9dc723e150fe9df064518fde22bcc5b69d6d22f2369bdf3256f4040569e41b638c9ecfbc553e4cc0bdf640dde9b41b465edf3c127e7c8842afbad657d791a\" , \"c_out\" : \"e8af71a1baa54332692b499bc18848aa8a25daccf21d7b8199eb74570c263a1e99922bb97cb239bf34821d76136141c1fe684b35d7cad4f13fa67397c11acfb2519fd4d2e49c0bf621c047872dfa0e42\" , \"zkproof\" : \"96633ab689349f9a0fad87c5e0d20b0924774fee0648637963ec5dc819a80f4c3468ebbbd34557304f68f67a0630805b8754817bd194d8885c229ccf005bf5724b8210997826aab2afbf741efd8c761fb6762ab52220f3a7a78d674d6eec612611b094cbae26e623bfb0b3aaf1aaf9f35eb66793899c3cbbdee03970072c59093734a4401ced14ecf8bb94d23deb5e71b7dee2fcbab2336769d406f07eb45fc346e3760466a9e30a27412b66fa3328e880091367f4e9804f93b7cda51befe2ee\" }] , \"binding_signature\" : \"5e71d8934832ea4a6aabf26a5db6d547dd322d83e8f66b2a1cce3993eaf18d68750eb4da2f456ccf2bf3773843e94fa2e1663f925e676b131eddbf46cabe0d01\" , \"message_hash\" : \"ef27433c3b85438389429d27d4f2c7255c9e385d2401d74417fde0a072448942\" , \"trigger_contract_input\" : \"00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000004005e71d8934832ea4a6aabf26a5db6d547dd322d83e8f66b2a1cce3993eaf18d68750eb4da2f456ccf2bf3773843e94fa2e1663f925e676b131eddbf46cabe0d01000000000000000000000000000000000000000000000000000000000000066000000000000000000000000000000000000000000000000000000000000000025f5905b2424229d63775792bec06ea8b4897805992547901080e09a9b5146d3c4d46e59b39d39430208317a101bc94ef1ee8276181cce24180612d500593315a2a80edbcc55e7364c689dfb637a5f8a3ef89950061026de070b792a5a9f58f314cc74a640e0040f16144e326892950ee95ab8afccba344e7b6fbca3169cbe4d7b69c7b252b36bbb654a26bcf6879afd3d7d4a6fe1e36d48e8c6508f4fea6a864717bd0d2d31d4a728277ff0d8e1bcfcb873d02c7a14a70899888f7eaed769d33f94fb836194dcc5ac16078d235e5b95b34472a782ec29ebe8ad14a222812b41b03e0f8edcd42774ceb8f5cddf312a3815a98c2909126646774017d67fcd0e114365e156614838ef87c222b729fa827ae801ae0a1ac4a48bc5f80fc3df2798c7d3f963ece395b1ff9c12e10ec7059d5855a8b101b266449b6eb3e326d7bf2acd629df43aae9e177e6fe15b76a23f0972f3709dc38e6033e35974926b2dad6302d4d46e59b39d39430208317a101bc94ef1ee8276181cce24180612d500593315a0ee5abca3e433892f2b62ec352089017482f15b457fdc71ffdd9c731d42f92d32917aadf5107ac11e6ebbad2a0ac3502a168e0b8c0307827b1ad69029faacd9bb98b0e6f6004ffdbed4069f63772a494bdadbe0a7e3f88dc5688821424bbc0f27f906ce0492c9a8c2233aa691c1767cfb0c3bcf21aba659f9290ba5dc04455a4a913192276154052be66bb743a7c842a149d473638020562501d3a752152381e135439839d9b9a4c65f15b256117322c7d202b3af0c03473602399272560bb3b3e9be33a75103aadc858901eab4176a4a4450293fb77366b7a34563d1120b27e7f4a6c2daf762aa43654685d235629729209d6bb402196517ff7f51dfecb995b00000000000000000000000000000000000000000000000000000000000000028538e941dbe6ddb8b2c70a2b5b6fb7729a84eecbfa386451f21adca4ecfb975a46534fa8e9a1d28a573c05f2c2a210d2555ecf51de781bf149bb27c1a3bfeb00e11781f5601d3947b6e4c1b43000410449330695b7506a9691db7cbd18da686d492c22abf971187377f4a69ee9453b5bff30f7472e7ec267a0f9612c1dfaaa04000000000000000000000000000000000000000000000000000000000000000257ab4c569b2cd69358ecaf26c9487cecc99a1b7607c8bfc7d2a58ed0392773328e6eb8efb8e7d1a4069daba59f95043d599ac7d0a3fe8ea3a0f415f73e347f6ffe72066db13a8e6acc820fdad950efa8f900b8544b645b93160ddc7811aec7e2a2803d68ac307aa85ee726de8b25d933eb4158bdd479785ec1bffe9ac65de848669690d869819b549b384a00021d68ffaa0db8c35a226c32b3c5cfced3fda54be23caf7a2bde2422375f572f913532ea3cd3c1f78ff6e915d26569e33e8c729f0258fdf276e73865a74c9c5b9e1261c23486f9f5d07500f5f343314ecb7d757c28c77e511542329d19b2a4532b58111b84b421e548009a85907c2ff3c27174c6391cf4fefcf33d32e228106ca117b89d72bbbd64b7c3674c8de978d6c3a7f27a2cf0adee47f49552c47eeef546a040197f4a67250f8ada2c4152d08ff2acba71fff3d45d73a5d80c4a97c8910f0d48dc7f60c685bb1ec6673631e253553f2c42c12358c0825670e90f65424046e898b7b12ec9d2d26dc6728425204cf00528ca96633ab689349f9a0fad87c5e0d20b0924774fee0648637963ec5dc819a80f4c3468ebbbd34557304f68f67a0630805b8754817bd194d8885c229ccf005bf5724b8210997826aab2afbf741efd8c761fb6762ab52220f3a7a78d674d6eec612611b094cbae26e623bfb0b3aaf1aaf9f35eb66793899c3cbbdee03970072c59093734a4401ced14ecf8bb94d23deb5e71b7dee2fcbab2336769d406f07eb45fc346e3760466a9e30a27412b66fa3328e880091367f4e9804f93b7cda51befe2ee00000000000000000000000000000000000000000000000000000000000000027457fce75f5df5d979c15d8cebaf2c814fd884cc268187f8b52a3a0db5453d0608c2a8d00b095021fc0af1d039bfddc4fddf56e39ca5233b0ec0559099590cc4902b74c4a7508472c793b6ead0ee433d644a6e4f63d1a02dd402e1a74574163bd179d3045bdc3190dddb8e91f475f503d003cc0c26598a6494252540d53d7ef8793a3293f3f98a702cede14eb4f4f78cc958e83c4cb7579f3aefd6ee1ccd6269d61c9e8b3bf46101bf8b02fd4b6b3f3ea479d977da40ba532fa0100e3372e326315934bb21c16fa654969c1432ffdf710cc91c8eb4485c8885f49e2dceb0f14447f530a3a07bcf0a2914399458486766661c458f2beda0c75eac752ebc38f6e490f22640ef2231b2622fc647e5888f81d0c133ac1e76d99de89953d15708dc8a525563aad587a164e00f7d96d79bc02ad28478d8af930c0e08be219d8d0eda099571680801c3fb3f7195be590635279435a7052d70489653bd634566a930d17cef04d50c5c08fa3b4697ba1b6fd81c18431077f6acc6ca27cfe0e519cf3500c53d0f508b14ab1825dd2c3baf408eaa4df9725be2ac2c9b9b171c41597fed62a114ba8898f16e1d213f9668018725493398e9fa60fe58c650482d93bbef83b152956e4242bf7da10cf6b6a034e59e640c873e67c84980327025bbd239a19a02fea1439681af8ce81eb12efdc66bc2dc08b3143f9033fb7332a05523d1d38f765db7938faf9c2ac6089cef77e12622651683f0ea2815e9786977deb4bd2010d3c3be7f0484d1420387fd4fe56ced3b26d073f60940b52048fa939ba4f3e803d148121560eccbbdc18a1dbf3a572649437c765c86e521c43a2f0a74a503c489912396ef16d263e957bcfdb2aa0853b046fad0e66fcb7b3d01c766964fe223d4473a4a7fa99c934db7e1c1f3dedefe6804e91ab73f2a000000000000000000000000013ffaf4d17394aecbe9d117f673188a782467849207eaa22f702361af4977afc1a0379db1b2867df55136efe8279e851657de46bbf3c0436a143780805e48d5c5ed86122b9cc943775dcfa294bbc01b7edffe2da5253655192e2d42326cc89ee863a99ecc13a7355d0fc78fb78ea2d6311fcaf8715b2a3bfa52789f09c58a0afea45c6e6f38a1bbf4f044fea4f211370122363f10bb5d1d82fbc5c20ce394490266ac4825d3a04194367902ddc504959a189749a1e0019e627d34f3cb831d481ef7c31f6a7d9289f1b2df981cf2600f1576d3e853a96a94bba8373bcb2fb07918007022133dd659f6775e34e0f5e9860b1d82e27161ea55dcaf7ea8b13d2f0994d604cb053f83d9655aef4412a6ca597f164b8a8386979787b7408bbddaf2991a705448426c0210f3eb7ddcd99fcd4be97eae9313e15e972912e2fc971b999609ba4dec92b99e1b157ee550cd6bfe44f8e7f03a7198ed826212f7813df58f12dcd906551b78ff7bdb27cf028e81585df14a064ae59857cc3632a27db2f239477d8d2c9a821b9dca1fc7d743f8f86239d4fd966bb2263001e84499f103300a3c168d67006b1baf0e6c13800b9edd713f9336891330ac0479e832648bb6fe3082c26172632f4e35515d3b0e26a0a9a933e138ee056495ed5f7cf6f73a870ac749bb00d141aa09e36382519ec073dfbdb24f8e37ebb1f3a67ac918ce1b899b4b851f2ca06115e9dc723e150fe9df064518fde22bcc5b69d6d22f2369bdf3256f4040569e41b638c9ecfbc553e4cc0bdf640dde9b41b465edf3c127e7c8842afbad657d791ae8af71a1baa54332692b499bc18848aa8a25daccf21d7b8199eb74570c263a1e99922bb97cb239bf34821d76136141c1fe684b35d7cad4f13fa67397c11acfb2519fd4d2e49c0bf621c047872dfa0e42000000000000000000000000\" , \"parameter_type\" : \"transfer\" } The trigger_contract_input can be used as the input data to trigger the transfer function of the shielded TRC-20 contract. Note: 1. the notes in shielded_spends is obtained by scanshieldedtrc20notesbyivk api; 2. the root and path is obtained by triggering the getPath function of the shielded TRC-20 contract. 2. Call api: wallet/createshieldedcontractparameterswithoutask to build the parameters Method: Post Parameters: { \"ak\" : \"8072d9110c9de9d9ade33d5d0f5890a7aa65b0cde42af7816d187297caf2fd64\" , \"nsk\" : \"cd43d722fd4b6b01f19449ea826c3e935609648520fcc2a95c0026f0fa9ee404\" , \"ovk\" : \"0ff58efd75e083fe4fd759c8701e1c8cb6961c4297a12b2c800bdb7b2bcab889\" , shielded_spe n ds : [ { \"note\" : { \"value\" : 60 , \"payment_address\" : \"ztron1nx3cnncmlcl72ppcrz23krpurxphz9g5yj85zvpgm94g46zs8pq8gd7qrcv8xezp9rryzlar4az\" , \"rcm\" : \"4636333870ccc91fb8bfe53ed559f8cf64505672a58d82875694dd38eb3d6404\" }, \"alpha\" : \"d0f0768664f5c807f9e70d05993f029c71da529afaa5c037b44c63d6e13bc907\" , \"root\" : \"c1dda86b7af8ce842e349347b364936baf24ad36be65046e2fd7349640bba873\" , \"path\" : \"b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c5381412935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62de1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef7228e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2aa5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6ad2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb5816d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4afee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd7124c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee08500769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c4908eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf30238d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e8415276736aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b159216cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf006edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c1ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be2451d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642fbd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c1b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab651ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de985794730484777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23cba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce7243ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b7b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b680444d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa528138ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce7389613213099b1bdbe886f3bca27080fe45467bb6a83e77e68348a8e863b0c676a30475761cd9b3396e9cedf9afeecac3edbcd192c5f65a4b108cc595dd7f668df0a1fec35ec8008050551a48d62ca8b2085276d589a8d02ab9cad8b0d6b30b8622d279acf822005ced7f6caaea51d378f0084bea34d1f98f759186ea5a2e67756b6656258501e6cf76599d3a854584c3438a34bb4754f9a84bfe98ad55cfc4bc25d4ed185719284bf14140befea7d9ec174b9dae461f4832db5f7d2e96aa4c0c52a6a\" , \"pos\" : 31 }, { \"note\" : { \"value\" : 40 , \"payment_address\" : \"ztron1x54s8nrzf2g85grp729s4pxx7ta3s38lj0jw57qwnuqx0e2wy8sfdcyldyfs9hazhqrs6jjzxhw\" , \"rcm\" : \"74908b43975847d5df6c0b40c4d5b1dbe732cb720e6b5bd5a55e7cd10e2a3a05\" }, \"alpha\" : \"ff3bd6babd3e28da098c67c67f26f2e613a5d1cec966b2f25ca4a943218ee805\" , \"root\" : \"c1dda86b7af8ce842e349347b364936baf24ad36be65046e2fd7349640bba873\" , \"path\" : \"b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c5381412935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62de1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef7228e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2aa5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6ad2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb5816d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4afee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd7124c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee08500769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c4908eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf30238d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e8415276736aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b159216cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf006edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c1ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be2451d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642fbd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c1b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab651ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de985794730484777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23cba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce7243ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b7b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b680444d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa528138ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce7389613cccdc97df3913f95c42665c3db7e806af0f5e84d5b6caac5754f6100df1a0c18e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b49d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6cffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e34817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca1550100000000000000000000000000000000000000000000000000000000000000\" , \"pos\" : 32 }, ], shielded_receives : [ { \"note\" : { \"value\" : 30 , \"payment_address\" : \"ztron127acwjxf499f43t8mk42ch5jyru68fsw7jun9hfu7pv87we3dnfrwtml8np80gsegksnjfz87vd\" , \"rcm\" : \"4172682e3f0398abb7f204220279948b3dd930bc901b1c9223a5cac51b1a7703\" } }, { \"note\" : { \"value\" : 70 , \"payment_address\" : \"ztron1f6dfsq8mxj8pd2f2dvnle4x6ahfrqr4ll2ezp2ez90jmcjtksr2r6s8095ljf7a3mfpn2uklc9r\" , \"rcm\" : \"7b4d06b6e0b5ea0172063f7f7e495bb840ff279787bd49adffdcfde65d68700e\" } } ], \"shielded_TRC20_contract_address\" : \"41e6e90fbc958ba09483550882b1f0327e0193250a\" } Return: { \"spend_description\" : [ { \"value_commitment\" : \"68b6f57d972dfeef1784017d0a669b45a367091671c098ea99fc9654d7bdc0e7\" , \"anchor\" : \"c1dda86b7af8ce842e349347b364936baf24ad36be65046e2fd7349640bba873\" , \"nullifier\" : \"882842cb630c1a0c77b1af4e0c23c2584b83875d928673d1d57d7322ea3ad825\" , \"rk\" : \"8574c873fbf582b4c491f901127c7922f6819fb20a38bac5f3d44bef01bdc5d2\" , \"zkproof\" : \"a0bfa6e0c26cbd0d23dadaa1125df75cd6f0987e5e876e704193417cf9870a9f1f34be6a91a06694ca6709a0ad6e7976b8893a9df057b43fac950c5fb7331a14303e3841c542e5455b3dd794ac7f97347928427d4b02405a9ae3d55ae560b7fe0aa20b51dbbc720479a50c38f4dae5ce2d2c1a1c68d32fae0c6ac23bae1069d5789c2c519614f85d75196286930b55148812d6c23936ddd40e1b771452664d2d067deb4f58600a7079025ffeb9bf409a38500e93c72ae1d09130f85e2dffc353\" } , { \"value_commitment\" : \"219ed48bc4bfe14cc2953ab5027528353e177e2263479122ea97c609ce187986\" , \"anchor\" : \"c1dda86b7af8ce842e349347b364936baf24ad36be65046e2fd7349640bba873\" , \"nullifier\" : \"79e938e0951d4d6cf6acd679fc6bb59147a6abc2f9e2828185328e93a83ab2f1\" , \"rk\" : \"99c0c1fbe3ad8a6e27d712632064fdeeb10952624c60a0ddcba0eb233bbf4e8b\" , \"zkproof\" : \"b536d0f442f6e0517930a9ccdb551c9e551a148c41fcf1e4748d1330d6c3e6f952012a5c3c6b06cfb51a92da5ebec4bcb11ed37cf36b60c9997baa026733ab6711894b5d17ca1f96667d68ed97f4cf75e5a9d96484d9f2453f869400e14dc54f0bf54f9abec8baf45baec320a06cc09780f4c5a2058f870993ff8a31f6d19b03f772a7d4d29ae837c7c2c3d6b300c4d485390d2e7bf09f971ed82e3676daf6fb655b2e47e040de762fe26317815e30b1f9638af979803e37abc3a95742c6faaa\" }] , \"receive_description\" : [ { \"value_commitment\" : \"00d705dd92237759b4b339d1c9b4da7d2a8baa132daf6feb3091ef746afff0b0\" , \"note_commitment\" : \"bcf2634c9ab870604831ae151b7959fe72c588488271640cf7772ee040f78820\" , \"epk\" : \"e6129572f05703a81cd55a7bc3e86d6b2c76f8f4bd60b02162d0b76d8dce21c8\" , \"c_enc\" : \"4d80bb52b7a1518bef81bbdb7584cefbd3cef9f9bc98fa75194f2b08d0b6c18253ca2e9ddea6330d96562db0bf9cebb6a8d1198599d420eba2ed5868956719ea835d1d5e58433fbbb7b72ae51f99f90440c67c03dc89101416a331b436f8ac560ddb772b9a7a8c16a0300cff97364d59046192b744592bc5f45c584385b24bfd4bdf159230893983516d82ee2a20d3da62f3ff979baf2ba010a6e7766ae30b7c56e4c78a746630d579833e56a07653716737fbaf19346d527f38938b75e0208355289185343364b0867f48ddca45e121b64bae64b32f002037c94050e07f96e86a4765ddf589b5e360b24ccf23b398275c575759cd3e1dd784c654dd8948efefafb1f9ae1c4d41efe803588bccb1b4bfbab6bf1a526f935e7123190ae8031f5c37ecf2820b812250ebe7b79f085abd2af5c2d59caf79355a6143b70f2ea0a66ae99e7392e2f64b9a2d7d3f79f278cbaeb897de832db2e2ea23cfe7906b0c61d5c99a75e076fdb000b57a78989edfa9730c6f485dc44c6d52fca1c884428514abf1cc4cde54c2d456b44c563b815969c7c8d4eb28cce53715d20bfe92fabcbcc30bd5ed8dac1f2b6acc98621311b21d3d7c979498f97ef318dbb335d87b5d0db43ee15323e90df8a59d6675495ed928d62db31e41cc4426e110f9994c21d2fb549bc94eb6d55ed4877b9f56ad624d80f81254dc3f90e14769f4e0bbada33dbfa7d33fd8675f7d9c30cd4f40fad2ef1e24c083889de3a71629f24601ead906a93b5a9dd2296d0577f8db42b8395134212f26fc84902693098c214704db5608c7509c8b23b4\" , \"c_out\" : \"f3755f2d22d0881b0021adf5621708025e296c8591e0e076dba416a1437a9fc0a3312c09a35a8912a8c2115165bb67fe0565064140960ab44d836d307a93013ae28e390483fe5d59baca900c7bc606cf\" , \"zkproof\" : \"8e4072af7180ab0cb95350026623a1e89850039ab8de7342a9661d41a7103f645292521cec3c199a5e3c3a4dedee33d5b37c4bd18d9f2c3ec1b28297e80ad640b77140685dd36243b89f1d6a23d115f6f52804685cd445a64661c8c2d0c11aaf11a8cf790c47ff796d27231597a981cff8fa58a33d0a1d163754ebd7814765f779920867295fee03d5882e7da940c60eb9688c22640a079bad4f33fe5a02d459e60844bb77d67c0c74e9c6f8b0be2023953cee099ce175e4fb64ef5de947a5e4\" } , { \"value_commitment\" : \"19ac352ba8d7f5167ef43a5b9c225056db2c44fb19f7fe8c63e0d2b956771656\" , \"note_commitment\" : \"e40b9da38887963c8cd1e163b4b7d4b999502c32e1204b791242633aebcdbb6d\" , \"epk\" : \"b1675f0b5331371466ff30d621991f0a30c9bc4d34c322be44619a0acf932905\" , \"c_enc\" : \"b69f20ae969de55319d2b7617bf7351a4683098af1e7b16fa64d44ff758471f33b0fb4f8896b2c32c68c410672fa81356e535f8d04338bdb69d69655eeee11e10727f319e1df6702ba7c90b2c5e4f38f809eddd2084fd30fd5684d9c004c679f4e574e17334d731550a76a842960bcdd811c67362bed7cdf698284a549e240da1727814af5137a7a384b5f24bd61a4b9cc1c4f6abe84524184a3ee257e002f7a9f6ccd3f6f0d490c5f77e3c26896f7bce84bf224429a45e156a4c62de64f739f9555147ed3fb7704206e7e45faf0f385229c7ed4e57253f8b5c4e518a26b90c069708c356e490abe97c1f78d361e7166fed9c67bad5aa820cadbefea2095b2a1adddb13b0249dae1c5c48ff0aad8eec23493786dead33d68e107bc13c3448129a58556ef5a21873ee151035117871652b1e151308d358f0df9c1c3188af4f15431b6fd262f4e0cbe5401c20b4633617fcf92a54d94991bd98e21f9cdcbcb6899341a9924d6eb11168daa6b19c2424993d4308bf40158564000aa79d106d09ebac3ad0a0e1729d20cff6226f3e632d9fd1c4f541b2f2ebaf5110ea5170498ce690e9115bca423ba2f5498b365db9dab936d1896ad5bc5b0d8c86b37f36debd5aca0e1194c48d51cff2253e32f069e8b969d7ba3c9391715c6b3118e2e31621321302b93edfdba0639542f3144eb6d90cdd86d354959df6398cf5fa497cf0fcbb19395d9bc1243da98afbc9087ec2997df1e84e97b4e18b1691e2d942a67214202e3d3880ce4eace0903cdd07f53b6f1ea23e277d867e73fbb10560a7d1df10402bd50d42c\" , \"c_out\" : \"1e5333e35985d343697dcce92703c2536a861eb49722e1c83a112cf004006e9cdb63f96132393c7616e5f947d9d07cd6a22a664643c117f52791724efde660605f134aa86d3374b4804f9bb9ce64fc99\" , \"zkproof\" : \"a6b41694f8fa378886ef77d5bd07de56de55b9ad7c8438d05380dd5fa1ce2e7d0ae0528f82c23a6d92e6150e426ef3958556757ee973c5e79ae7ce074b1b25c74ccdde0b2b2dfd1b42215401f700c06b84785572eb4e585971cc4b451420bfbc17db489dbc996e9c5533b7da9e4a88d53388b411dd4a4e8801707aa01508054faa91a2c422a4cbad61ababfc3b1893c38e2ec19d19a1e5b47d2257ca9e347283afd5e53a2f8989d8db6a76b7942a737601ed3082e2e56290a9cd694a399f8551\" }] , \"binding_signature\" : \"c7f303709c57e49264fd5ae5922bf977ef2a57ccc84d746effc5c6937eecf36e05b09faf95e5f869aeaf1aa87b24570eb723a4d8c77edea32c31b2909c84eb04\" , \"message_hash\" : \"7fb99e66df052f430d50e80a3f197c319a4e35184ed48a433d6219e025741337\" , \"parameter_type\" : \"transfer\" } Because of lacking the ask , the api can not generate the spend_authority_signature and trigger_contract_input . To generate the trigger_contract_input , the user first needs to generate the spend spend_authority_signature by itself or by calling the api: wallet/createspendauthsig Method: Post Parameters: { \"ask\": \"0f63eabdfe2bbfe08012f6bb2db024e6809c16e8ed055aa41a6095424f192005\", \"tx_hash\": \"7fb99e66df052f430d50e80a3f197c319a4e35184ed48a433d6219e025741337\", \"alpha\": \"d0f0768664f5c807f9e70d05993f029c71da529afaa5c037b44c63d6e13bc907\" } Note: alpha is a random field element with the length of 32 bytes, which should be generated by GetRcm api. Return: { \"value\": \"9e889cea041002ed7a9a80d093f2e9b5bdec24da1dda11cc7c5d1bfb6c7046b3c4ed0a2cb6cbbead42336d1235d1ec671a832c2ada9ee1ad3048129b7c99e309\" } The returned value is the spend_authority_signature . If the transfer has two inputs, the users needs to generate the two corresponding spend_authority_signatures . Note: in order to guarantee the security, the user should be better to generate the spend_authority_signature by itself instead of calling the api. Then the user need to call the api to generate the triggering contract input: wallet/gettriggerinputforshieldedtrc20contract Method: Post Parameters: { \"shielded_TRC20_Parameters\": { \"spend_description\": [ { \"value_commitment\": \"68b6f57d972dfeef1784017d0a669b45a367091671c098ea99fc9654d7bdc0e7\", \"anchor\": \"c1dda86b7af8ce842e349347b364936baf24ad36be65046e2fd7349640bba873\", \"nullifier\": \"882842cb630c1a0c77b1af4e0c23c2584b83875d928673d1d57d7322ea3ad825\", \"rk\": \"8574c873fbf582b4c491f901127c7922f6819fb20a38bac5f3d44bef01bdc5d2\", \"zkproof\": \"a0bfa6e0c26cbd0d23dadaa1125df75cd6f0987e5e876e704193417cf9870a9f1f34be6a91a06694ca6709a0ad6e7976b8893a9df057b43fac950c5fb7331a14303e3841c542e5455b3dd794ac7f97347928427d4b02405a9ae3d55ae560b7fe0aa20b51dbbc720479a50c38f4dae5ce2d2c1a1c68d32fae0c6ac23bae1069d5789c2c519614f85d75196286930b55148812d6c23936ddd40e1b771452664d2d067deb4f58600a7079025ffeb9bf409a38500e93c72ae1d09130f85e2dffc353\" }, { \"value_commitment\": \"219ed48bc4bfe14cc2953ab5027528353e177e2263479122ea97c609ce187986\", \"anchor\": \"c1dda86b7af8ce842e349347b364936baf24ad36be65046e2fd7349640bba873\", \"nullifier\": \"79e938e0951d4d6cf6acd679fc6bb59147a6abc2f9e2828185328e93a83ab2f1\", \"rk\": \"99c0c1fbe3ad8a6e27d712632064fdeeb10952624c60a0ddcba0eb233bbf4e8b\", \"zkproof\": \"b536d0f442f6e0517930a9ccdb551c9e551a148c41fcf1e4748d1330d6c3e6f952012a5c3c6b06cfb51a92da5ebec4bcb11ed37cf36b60c9997baa026733ab6711894b5d17ca1f96667d68ed97f4cf75e5a9d96484d9f2453f869400e14dc54f0bf54f9abec8baf45baec320a06cc09780f4c5a2058f870993ff8a31f6d19b03f772a7d4d29ae837c7c2c3d6b300c4d485390d2e7bf09f971ed82e3676daf6fb655b2e47e040de762fe26317815e30b1f9638af979803e37abc3a95742c6faaa\" }], \"receive_description\": [ { \"value_commitment\": \"00d705dd92237759b4b339d1c9b4da7d2a8baa132daf6feb3091ef746afff0b0\", \"note_commitment\": \"bcf2634c9ab870604831ae151b7959fe72c588488271640cf7772ee040f78820\", \"epk\": \"e6129572f05703a81cd55a7bc3e86d6b2c76f8f4bd60b02162d0b76d8dce21c8\", \"c_enc\": \"4d80bb52b7a1518bef81bbdb7584cefbd3cef9f9bc98fa75194f2b08d0b6c18253ca2e9ddea6330d96562db0bf9cebb6a8d1198599d420eba2ed5868956719ea835d1d5e58433fbbb7b72ae51f99f90440c67c03dc89101416a331b436f8ac560ddb772b9a7a8c16a0300cff97364d59046192b744592bc5f45c584385b24bfd4bdf159230893983516d82ee2a20d3da62f3ff979baf2ba010a6e7766ae30b7c56e4c78a746630d579833e56a07653716737fbaf19346d527f38938b75e0208355289185343364b0867f48ddca45e121b64bae64b32f002037c94050e07f96e86a4765ddf589b5e360b24ccf23b398275c575759cd3e1dd784c654dd8948efefafb1f9ae1c4d41efe803588bccb1b4bfbab6bf1a526f935e7123190ae8031f5c37ecf2820b812250ebe7b79f085abd2af5c2d59caf79355a6143b70f2ea0a66ae99e7392e2f64b9a2d7d3f79f278cbaeb897de832db2e2ea23cfe7906b0c61d5c99a75e076fdb000b57a78989edfa9730c6f485dc44c6d52fca1c884428514abf1cc4cde54c2d456b44c563b815969c7c8d4eb28cce53715d20bfe92fabcbcc30bd5ed8dac1f2b6acc98621311b21d3d7c979498f97ef318dbb335d87b5d0db43ee15323e90df8a59d6675495ed928d62db31e41cc4426e110f9994c21d2fb549bc94eb6d55ed4877b9f56ad624d80f81254dc3f90e14769f4e0bbada33dbfa7d33fd8675f7d9c30cd4f40fad2ef1e24c083889de3a71629f24601ead906a93b5a9dd2296d0577f8db42b8395134212f26fc84902693098c214704db5608c7509c8b23b4\", \"c_out\": \"f3755f2d22d0881b0021adf5621708025e296c8591e0e076dba416a1437a9fc0a3312c09a35a8912a8c2115165bb67fe0565064140960ab44d836d307a93013ae28e390483fe5d59baca900c7bc606cf\", \"zkproof\": \"8e4072af7180ab0cb95350026623a1e89850039ab8de7342a9661d41a7103f645292521cec3c199a5e3c3a4dedee33d5b37c4bd18d9f2c3ec1b28297e80ad640b77140685dd36243b89f1d6a23d115f6f52804685cd445a64661c8c2d0c11aaf11a8cf790c47ff796d27231597a981cff8fa58a33d0a1d163754ebd7814765f779920867295fee03d5882e7da940c60eb9688c22640a079bad4f33fe5a02d459e60844bb77d67c0c74e9c6f8b0be2023953cee099ce175e4fb64ef5de947a5e4\" }, { \"value_commitment\": \"19ac352ba8d7f5167ef43a5b9c225056db2c44fb19f7fe8c63e0d2b956771656\", \"note_commitment\": \"e40b9da38887963c8cd1e163b4b7d4b999502c32e1204b791242633aebcdbb6d\", \"epk\": \"b1675f0b5331371466ff30d621991f0a30c9bc4d34c322be44619a0acf932905\", \"c_enc\": \"b69f20ae969de55319d2b7617bf7351a4683098af1e7b16fa64d44ff758471f33b0fb4f8896b2c32c68c410672fa81356e535f8d04338bdb69d69655eeee11e10727f319e1df6702ba7c90b2c5e4f38f809eddd2084fd30fd5684d9c004c679f4e574e17334d731550a76a842960bcdd811c67362bed7cdf698284a549e240da1727814af5137a7a384b5f24bd61a4b9cc1c4f6abe84524184a3ee257e002f7a9f6ccd3f6f0d490c5f77e3c26896f7bce84bf224429a45e156a4c62de64f739f9555147ed3fb7704206e7e45faf0f385229c7ed4e57253f8b5c4e518a26b90c069708c356e490abe97c1f78d361e7166fed9c67bad5aa820cadbefea2095b2a1adddb13b0249dae1c5c48ff0aad8eec23493786dead33d68e107bc13c3448129a58556ef5a21873ee151035117871652b1e151308d358f0df9c1c3188af4f15431b6fd262f4e0cbe5401c20b4633617fcf92a54d94991bd98e21f9cdcbcb6899341a9924d6eb11168daa6b19c2424993d4308bf40158564000aa79d106d09ebac3ad0a0e1729d20cff6226f3e632d9fd1c4f541b2f2ebaf5110ea5170498ce690e9115bca423ba2f5498b365db9dab936d1896ad5bc5b0d8c86b37f36debd5aca0e1194c48d51cff2253e32f069e8b969d7ba3c9391715c6b3118e2e31621321302b93edfdba0639542f3144eb6d90cdd86d354959df6398cf5fa497cf0fcbb19395d9bc1243da98afbc9087ec2997df1e84e97b4e18b1691e2d942a67214202e3d3880ce4eace0903cdd07f53b6f1ea23e277d867e73fbb10560a7d1df10402bd50d42c\", \"c_out\": \"1e5333e35985d343697dcce92703c2536a861eb49722e1c83a112cf004006e9cdb63f96132393c7616e5f947d9d07cd6a22a664643c117f52791724efde660605f134aa86d3374b4804f9bb9ce64fc99\", \"zkproof\": \"a6b41694f8fa378886ef77d5bd07de56de55b9ad7c8438d05380dd5fa1ce2e7d0ae0528f82c23a6d92e6150e426ef3958556757ee973c5e79ae7ce074b1b25c74ccdde0b2b2dfd1b42215401f700c06b84785572eb4e585971cc4b451420bfbc17db489dbc996e9c5533b7da9e4a88d53388b411dd4a4e8801707aa01508054faa91a2c422a4cbad61ababfc3b1893c38e2ec19d19a1e5b47d2257ca9e347283afd5e53a2f8989d8db6a76b7942a737601ed3082e2e56290a9cd694a399f8551\" }], \"binding_signature\": \"c7f303709c57e49264fd5ae5922bf977ef2a57ccc84d746effc5c6937eecf36e05b09faf95e5f869aeaf1aa87b24570eb723a4d8c77edea32c31b2909c84eb04\", \"message_hash\": \"7fb99e66df052f430d50e80a3f197c319a4e35184ed48a433d6219e025741337\", \"parameter_type\": \"transfer\" }, \"spend_authority_signature\": [ { \"value\": \"9e889cea041002ed7a9a80d093f2e9b5bdec24da1dda11cc7c5d1bfb6c7046b3c4ed0a2cb6cbbead42336d1235d1ec671a832c2ada9ee1ad3048129b7c99e309\" }, { \"value\": \"24409c69b9d03a7c714f7c8bac39a3310054eef9e99dcbf256c8e39ef267e31884f2f2465ca7cd7aaba006e7f0a8635787de61eef1b96ce559764d300f637a08\" } ] } Return: { \"value\": \"00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000003600000000000000000000000000000000000000000000000000000000000000400c7f303709c57e49264fd5ae5922bf977ef2a57ccc84d746effc5c6937eecf36e05b09faf95e5f869aeaf1aa87b24570eb723a4d8c77edea32c31b2909c84eb0400000000000000000000000000000000000000000000000000000000000006600000000000000000000000000000000000000000000000000000000000000002882842cb630c1a0c77b1af4e0c23c2584b83875d928673d1d57d7322ea3ad825c1dda86b7af8ce842e349347b364936baf24ad36be65046e2fd7349640bba87368b6f57d972dfeef1784017d0a669b45a367091671c098ea99fc9654d7bdc0e78574c873fbf582b4c491f901127c7922f6819fb20a38bac5f3d44bef01bdc5d2a0bfa6e0c26cbd0d23dadaa1125df75cd6f0987e5e876e704193417cf9870a9f1f34be6a91a06694ca6709a0ad6e7976b8893a9df057b43fac950c5fb7331a14303e3841c542e5455b3dd794ac7f97347928427d4b02405a9ae3d55ae560b7fe0aa20b51dbbc720479a50c38f4dae5ce2d2c1a1c68d32fae0c6ac23bae1069d5789c2c519614f85d75196286930b55148812d6c23936ddd40e1b771452664d2d067deb4f58600a7079025ffeb9bf409a38500e93c72ae1d09130f85e2dffc35379e938e0951d4d6cf6acd679fc6bb59147a6abc2f9e2828185328e93a83ab2f1c1dda86b7af8ce842e349347b364936baf24ad36be65046e2fd7349640bba873219ed48bc4bfe14cc2953ab5027528353e177e2263479122ea97c609ce18798699c0c1fbe3ad8a6e27d712632064fdeeb10952624c60a0ddcba0eb233bbf4e8bb536d0f442f6e0517930a9ccdb551c9e551a148c41fcf1e4748d1330d6c3e6f952012a5c3c6b06cfb51a92da5ebec4bcb11ed37cf36b60c9997baa026733ab6711894b5d17ca1f96667d68ed97f4cf75e5a9d96484d9f2453f869400e14dc54f0bf54f9abec8baf45baec320a06cc09780f4c5a2058f870993ff8a31f6d19b03f772a7d4d29ae837c7c2c3d6b300c4d485390d2e7bf09f971ed82e3676daf6fb655b2e47e040de762fe26317815e30b1f9638af979803e37abc3a95742c6faaa00000000000000000000000000000000000000000000000000000000000000029e889cea041002ed7a9a80d093f2e9b5bdec24da1dda11cc7c5d1bfb6c7046b3c4ed0a2cb6cbbead42336d1235d1ec671a832c2ada9ee1ad3048129b7c99e30924409c69b9d03a7c714f7c8bac39a3310054eef9e99dcbf256c8e39ef267e31884f2f2465ca7cd7aaba006e7f0a8635787de61eef1b96ce559764d300f637a080000000000000000000000000000000000000000000000000000000000000002bcf2634c9ab870604831ae151b7959fe72c588488271640cf7772ee040f7882000d705dd92237759b4b339d1c9b4da7d2a8baa132daf6feb3091ef746afff0b0e6129572f05703a81cd55a7bc3e86d6b2c76f8f4bd60b02162d0b76d8dce21c88e4072af7180ab0cb95350026623a1e89850039ab8de7342a9661d41a7103f645292521cec3c199a5e3c3a4dedee33d5b37c4bd18d9f2c3ec1b28297e80ad640b77140685dd36243b89f1d6a23d115f6f52804685cd445a64661c8c2d0c11aaf11a8cf790c47ff796d27231597a981cff8fa58a33d0a1d163754ebd7814765f779920867295fee03d5882e7da940c60eb9688c22640a079bad4f33fe5a02d459e60844bb77d67c0c74e9c6f8b0be2023953cee099ce175e4fb64ef5de947a5e4e40b9da38887963c8cd1e163b4b7d4b999502c32e1204b791242633aebcdbb6d19ac352ba8d7f5167ef43a5b9c225056db2c44fb19f7fe8c63e0d2b956771656b1675f0b5331371466ff30d621991f0a30c9bc4d34c322be44619a0acf932905a6b41694f8fa378886ef77d5bd07de56de55b9ad7c8438d05380dd5fa1ce2e7d0ae0528f82c23a6d92e6150e426ef3958556757ee973c5e79ae7ce074b1b25c74ccdde0b2b2dfd1b42215401f700c06b84785572eb4e585971cc4b451420bfbc17db489dbc996e9c5533b7da9e4a88d53388b411dd4a4e8801707aa01508054faa91a2c422a4cbad61ababfc3b1893c38e2ec19d19a1e5b47d2257ca9e347283afd5e53a2f8989d8db6a76b7942a737601ed3082e2e56290a9cd694a399f855100000000000000000000000000000000000000000000000000000000000000024d80bb52b7a1518bef81bbdb7584cefbd3cef9f9bc98fa75194f2b08d0b6c18253ca2e9ddea6330d96562db0bf9cebb6a8d1198599d420eba2ed5868956719ea835d1d5e58433fbbb7b72ae51f99f90440c67c03dc89101416a331b436f8ac560ddb772b9a7a8c16a0300cff97364d59046192b744592bc5f45c584385b24bfd4bdf159230893983516d82ee2a20d3da62f3ff979baf2ba010a6e7766ae30b7c56e4c78a746630d579833e56a07653716737fbaf19346d527f38938b75e0208355289185343364b0867f48ddca45e121b64bae64b32f002037c94050e07f96e86a4765ddf589b5e360b24ccf23b398275c575759cd3e1dd784c654dd8948efefafb1f9ae1c4d41efe803588bccb1b4bfbab6bf1a526f935e7123190ae8031f5c37ecf2820b812250ebe7b79f085abd2af5c2d59caf79355a6143b70f2ea0a66ae99e7392e2f64b9a2d7d3f79f278cbaeb897de832db2e2ea23cfe7906b0c61d5c99a75e076fdb000b57a78989edfa9730c6f485dc44c6d52fca1c884428514abf1cc4cde54c2d456b44c563b815969c7c8d4eb28cce53715d20bfe92fabcbcc30bd5ed8dac1f2b6acc98621311b21d3d7c979498f97ef318dbb335d87b5d0db43ee15323e90df8a59d6675495ed928d62db31e41cc4426e110f9994c21d2fb549bc94eb6d55ed4877b9f56ad624d80f81254dc3f90e14769f4e0bbada33dbfa7d33fd8675f7d9c30cd4f40fad2ef1e24c083889de3a71629f24601ead906a93b5a9dd2296d0577f8db42b8395134212f26fc84902693098c214704db5608c7509c8b23b4f3755f2d22d0881b0021adf5621708025e296c8591e0e076dba416a1437a9fc0a3312c09a35a8912a8c2115165bb67fe0565064140960ab44d836d307a93013ae28e390483fe5d59baca900c7bc606cf000000000000000000000000b69f20ae969de55319d2b7617bf7351a4683098af1e7b16fa64d44ff758471f33b0fb4f8896b2c32c68c410672fa81356e535f8d04338bdb69d69655eeee11e10727f319e1df6702ba7c90b2c5e4f38f809eddd2084fd30fd5684d9c004c679f4e574e17334d731550a76a842960bcdd811c67362bed7cdf698284a549e240da1727814af5137a7a384b5f24bd61a4b9cc1c4f6abe84524184a3ee257e002f7a9f6ccd3f6f0d490c5f77e3c26896f7bce84bf224429a45e156a4c62de64f739f9555147ed3fb7704206e7e45faf0f385229c7ed4e57253f8b5c4e518a26b90c069708c356e490abe97c1f78d361e7166fed9c67bad5aa820cadbefea2095b2a1adddb13b0249dae1c5c48ff0aad8eec23493786dead33d68e107bc13c3448129a58556ef5a21873ee151035117871652b1e151308d358f0df9c1c3188af4f15431b6fd262f4e0cbe5401c20b4633617fcf92a54d94991bd98e21f9cdcbcb6899341a9924d6eb11168daa6b19c2424993d4308bf40158564000aa79d106d09ebac3ad0a0e1729d20cff6226f3e632d9fd1c4f541b2f2ebaf5110ea5170498ce690e9115bca423ba2f5498b365db9dab936d1896ad5bc5b0d8c86b37f36debd5aca0e1194c48d51cff2253e32f069e8b969d7ba3c9391715c6b3118e2e31621321302b93edfdba0639542f3144eb6d90cdd86d354959df6398cf5fa497cf0fcbb19395d9bc1243da98afbc9087ec2997df1e84e97b4e18b1691e2d942a67214202e3d3880ce4eace0903cdd07f53b6f1ea23e277d867e73fbb10560a7d1df10402bd50d42c1e5333e35985d343697dcce92703c2536a861eb49722e1c83a112cf004006e9cdb63f96132393c7616e5f947d9d07cd6a22a664643c117f52791724efde660605f134aa86d3374b4804f9bb9ce64fc99000000000000000000000000\" } The value can be used as the input data to trigger the transfer function of the shielded TRC-20 contract. Create shielded TRC-20 contract parameters for burn \u00b6 1. Call api: wallet/createshieldedcontractparameters to build the parameters Method: Post Parameters: { \"ask\" : \"0f04d283f9a26718676a29d5fc9af0199874c5c2f6fd103f2342b24c9820a604\" , \"nsk\" : \"572d8147283d90a938bd2867926fef485290c5fce37fad72eb733f9cd8a07e09\" , \"ovk\" : \"1797de3b7f33cafffe3fe18c6b43ec6760add2ad81b10978d1fca5290497ede9\" , \"shielded_spends\" : [ { \"note\" : { \"value\" : 60 , \"payment_address\" : \"ztron1mpwx0380fvw7gacf5hm4vl625ltmdezt0dwp3ssyd84y8jxzp3guqz9utzn35u7038jx6a6ucly\" , \"rcm\" : \"b67b18fee3133440bfc4509912b96482fdcacbc0b5679af1785247c94224200c\" }, \"alpha\" : \"b6de1a3a40764bd7a24147f155011624805bfcd6d21283c69a3f21aea9401201\" , \"root\" : \"b0b6f5be533b99be38bc9a3c2f3c75a9be263c42500a9e13ffb00df15cda126f\" , \"path\" : \"b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c5381412935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62de1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef7228e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2aa5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6ad2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb5816d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4afee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd7124c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee08500769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c4908eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf30238d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e8415276736aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b159216cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf006edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c1ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be2451d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642fbd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c1b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab651ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de985794730484777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23cba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce7243ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b7b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b680444d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa528138ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce7389613912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a93a022931b1f10886401d5fc249cbc9d0158945f4ecc0509041abc868077545d091e115b68c44341eec6fd6862140898e7399401f2ec319e3daefd931dcf1a3fffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e34adfa6682c546a5f87ac883fa09f6954b50fb7330f8e6b080a9a417548ab062674fc4565e1c6027648d10d91b1708cb4456f2e09220ab8f155c41ef790ea9b562\" , \"pos\" : 27 } ], \"shielded_receives\" : [ { \"note\" : { \"value\" : 40 , \"payment_address\" : \"ztron1nupklnacqyjc7ge998f6v2wutm7urdcdupl6j4ypq7qwws5yqfqrlxwvnylucwre8yewx5s0keu\" , \"rcm\" : \"f2aa138d0d04b685b236d797458d0cf53749b96bbb6d5f1e6c5f2db31b0b2d09\" } } ], \"transparent_to_address\" : \"TBaBXpRAeBhs75TZT751LwyhrcR25XeUot\" , \"to_amount\" : \"2000\" , \"shielded_TRC20_contract_address\" : \"TDxka3zetrpWsWoeWWjSAQDwM186UmzwQn\" , \"visible\" : true } Note: the to_amount is the real value, the value in note is the scaled value by scalingFactor set in the shielded TRC-20 contract. In this example, the value of scalingFactor is 100. , namely 60 * 100 = 40 * 100 + 2000. Return: { \"spend_description\" : [ { \"value_commitment\" : \"83ceceff3cc1ac470308b63798eaa9125d1076cb9f844cfaa8485021c3310951\" , \"anchor\" : \"b0b6f5be533b99be38bc9a3c2f3c75a9be263c42500a9e13ffb00df15cda126f\" , \"nullifier\" : \"dbd34894ce33fee5836283233df7121c6d85443e047fd1c009c4cecbad1d650b\" , \"rk\" : \"2e722d314646bcec8d4c546224bb9fa7396e0fc49a4c0e41a4c181ad7b0f2436\" , \"zkproof\" : \"8897a1542eb85e396d5426b45db0d3b6874c1d404b01ce956b8bad1b4c4b321fa5104a6c156b6ddad4e0da70c9561984ad60534f3d4c3c65559cacff27f6b97da5e8d61a050340cc8e504f3bbfba3f7ef56f2732e9e0d96cacf49856c01858dd0337fcf26fedbc5a74abc2548551e0c1d2ee578823cf4ccf1e17df3be6e07883f84ecf86427de5f4d67f2d70f123227f9336f26dca69ea96c8c2fef6ecde8f08f0280444841d146b750e55035d46c4cc6fc60d8a0871b73822a6918e870d7046\" , \"spend_authority_signature\" : \"1badc235792c4a56e476bb884b9d1f1aeff7cd9f0dc2cd67e24a601c4b633064c92f964546aa0d82ae89a952a796cead3d9222a5895263651f58f311492db000\" }] , \"receive_description\" : [ { \"value_commitment\" : \"2216fe18613655c6f31c72981261fc9caa1b283e4a5b45d022aec131c14def2a\" , \"note_commitment\" : \"75d9624ffdf9c1bcfe88104710403d8916183a8aa97635ac5573fd4d8d981158\" , \"epk\" : \"a5b6ceb3232b6141fee1bfe8c989beb6100449b279f3be8271f829a343f256d4\" , \"c_enc\" : \"7dc1b0c503e4f76c7063259d336fd06cbd1939439f24cca9560d8d0a7033423aebd6e6d6ec2dc6959e4b5ba8797562b7769d83f847200723cc934bd6f17544470ff043ba5e8bfb698320545663138fa710d381c2dd908716efb8a870ea787c0a74a1809315501186f424ec8cacaf04b6bf85489ebf0285149d7f0a4f100f15765da2df45576a7d2e9692e273178d5d7817bd49b367a66aa8b383fc597ac3090716ae3cdc42e6ef11dead9865fa92f317e1409bbacf58bfae30753d9b7adb37b04da6941fc6bca6650241ca2d550ab56e8a22ac974fc7d040c4266b33bda721b6a58e27260cedbb7a150cfec19f986081dfa7ff1b6fc218659c36b688ca63e98870f9beb1a51db115a1969b6167d0b0674f6dd614f12a7c64036b0601a7a605d1398b07abe089ee5a35947b3c36309c2ec7851e876f377d4d2eb4004f580ed86e85645fe3dbc97ff9754a36ef3e386621cf6d98257966f8eff7dd0495442a742dcfb533140f486ef52761056f070f3dc3f42cfae0cd9ac8155eb6c5c559406830a29a79f27784342cb48478d76fd3ff59d0ebdb33955c925b2b91bf94c20d8e414b32dd661020228ba37483e7690517ae02104624ab88d0d3e3030d0a5433228fac9f1ee7f3145f0b51fea5595a1cc515fedcabc5836055bb67367eda2243ac1419863d703502a2b6346d33f3e81a7c977dffdeb1d4474be7ea776cbb5ce90dd2b1a2a5f24cc6179f3f84593d39ab56cbb672e233f6b1dd516dcaf84da1667c73d3ca48db67248617ebf6fc89e392bf6520be7d0050b77ef3930f960a4b31f0f60a9a8a02\" , \"c_out\" : \"beddff9adec9c46a05e12caf6fc675b06ff401c63d17ba251278f0dceba750cafaca2f0fed8c288d31722575f293936901eb084ba4ffd994e207c23fa9813814355a06932d8ce831eafd79008419b9e7\" , \"zkproof\" : \"b26462d9cc1f010e5a5e581d2a8ff19a34262cf37c5724939c3f5c9ca9390a4aa4a55f92f1f922664b7648b7a0d5cf71821eca2cc57f3036d81caf7be0980329c76c3d5ceeea2d05809aaaa028f1856b2fe850772fdbd43b8b7405e3360e602201f26fcae68b9edd0ad17a337bdcb6caa8dea31059ebf7baac4a4b4bd0aab654f853307db82c9e42096fee17ec1235c1ac49e047ca3a4b801ce78d1e3c72fbc207ce827de9537b0faabe48d3f998d2acaa7acf48859af09cdfc3e433522bc1b4\" }] , \"binding_signature\" : \"fef9afbf88ca52c424421d5dfc212c16e187a5012351f3bba48c30b2878f2bc827bdcef18eb9fd5174f288d01300af7359f4be1fa1723e0a17bbbcb48ad42d09\" , \"message_hash\" : \"c650bdaeacf86486ed9f100f010a89ee810ec2fec7e69a7b4f86c4100aacf390\" , \"trigger_contract_input\" : \"dbd34894ce33fee5836283233df7121c6d85443e047fd1c009c4cecbad1d650bb0b6f5be533b99be38bc9a3c2f3c75a9be263c42500a9e13ffb00df15cda126f83ceceff3cc1ac470308b63798eaa9125d1076cb9f844cfaa8485021c33109512e722d314646bcec8d4c546224bb9fa7396e0fc49a4c0e41a4c181ad7b0f24368897a1542eb85e396d5426b45db0d3b6874c1d404b01ce956b8bad1b4c4b321fa5104a6c156b6ddad4e0da70c9561984ad60534f3d4c3c65559cacff27f6b97da5e8d61a050340cc8e504f3bbfba3f7ef56f2732e9e0d96cacf49856c01858dd0337fcf26fedbc5a74abc2548551e0c1d2ee578823cf4ccf1e17df3be6e07883f84ecf86427de5f4d67f2d70f123227f9336f26dca69ea96c8c2fef6ecde8f08f0280444841d146b750e55035d46c4cc6fc60d8a0871b73822a6918e870d70461badc235792c4a56e476bb884b9d1f1aeff7cd9f0dc2cd67e24a601c4b633064c92f964546aa0d82ae89a952a796cead3d9222a5895263651f58f311492db00000000000000000000000000000000000000000000000000000000000000007d0fef9afbf88ca52c424421d5dfc212c16e187a5012351f3bba48c30b2878f2bc827bdcef18eb9fd5174f288d01300af7359f4be1fa1723e0a17bbbcb48ad42d090000000000000000000000411195752747f24146fd1fcd12c31600a81f7c5423c4c231ecb68f670bcd7892da38b297edefd91960bea3326c9b825abe726bea0dbac4c2d3c24a7dbfb82aec128876481f9740751dcd581d713ed33dfd9a1017b87d7b0af8be5361c23cd1e9575ed32ef30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000000000000000000000000000000000000000000175d9624ffdf9c1bcfe88104710403d8916183a8aa97635ac5573fd4d8d9811582216fe18613655c6f31c72981261fc9caa1b283e4a5b45d022aec131c14def2aa5b6ceb3232b6141fee1bfe8c989beb6100449b279f3be8271f829a343f256d4b26462d9cc1f010e5a5e581d2a8ff19a34262cf37c5724939c3f5c9ca9390a4aa4a55f92f1f922664b7648b7a0d5cf71821eca2cc57f3036d81caf7be0980329c76c3d5ceeea2d05809aaaa028f1856b2fe850772fdbd43b8b7405e3360e602201f26fcae68b9edd0ad17a337bdcb6caa8dea31059ebf7baac4a4b4bd0aab654f853307db82c9e42096fee17ec1235c1ac49e047ca3a4b801ce78d1e3c72fbc207ce827de9537b0faabe48d3f998d2acaa7acf48859af09cdfc3e433522bc1b400000000000000000000000000000000000000000000000000000000000000017dc1b0c503e4f76c7063259d336fd06cbd1939439f24cca9560d8d0a7033423aebd6e6d6ec2dc6959e4b5ba8797562b7769d83f847200723cc934bd6f17544470ff043ba5e8bfb698320545663138fa710d381c2dd908716efb8a870ea787c0a74a1809315501186f424ec8cacaf04b6bf85489ebf0285149d7f0a4f100f15765da2df45576a7d2e9692e273178d5d7817bd49b367a66aa8b383fc597ac3090716ae3cdc42e6ef11dead9865fa92f317e1409bbacf58bfae30753d9b7adb37b04da6941fc6bca6650241ca2d550ab56e8a22ac974fc7d040c4266b33bda721b6a58e27260cedbb7a150cfec19f986081dfa7ff1b6fc218659c36b688ca63e98870f9beb1a51db115a1969b6167d0b0674f6dd614f12a7c64036b0601a7a605d1398b07abe089ee5a35947b3c36309c2ec7851e876f377d4d2eb4004f580ed86e85645fe3dbc97ff9754a36ef3e386621cf6d98257966f8eff7dd0495442a742dcfb533140f486ef52761056f070f3dc3f42cfae0cd9ac8155eb6c5c559406830a29a79f27784342cb48478d76fd3ff59d0ebdb33955c925b2b91bf94c20d8e414b32dd661020228ba37483e7690517ae02104624ab88d0d3e3030d0a5433228fac9f1ee7f3145f0b51fea5595a1cc515fedcabc5836055bb67367eda2243ac1419863d703502a2b6346d33f3e81a7c977dffdeb1d4474be7ea776cbb5ce90dd2b1a2a5f24cc6179f3f84593d39ab56cbb672e233f6b1dd516dcaf84da1667c73d3ca48db67248617ebf6fc89e392bf6520be7d0050b77ef3930f960a4b31f0f60a9a8a02beddff9adec9c46a05e12caf6fc675b06ff401c63d17ba251278f0dceba750cafaca2f0fed8c288d31722575f293936901eb084ba4ffd994e207c23fa9813814355a06932d8ce831eafd79008419b9e7000000000000000000000000\" , \"parameter_type\" : \"burn\" } The trigger_contract_input can be used as the input data to trigger the burn function of the shielded TRC-20 contract. 2. Call api: wallet/createshieldedcontractparameterswithoutask to build the parameters Method: Post Parameters: { \"ak\" : \"66fda71a704eb463a13b6f43be7e296dd7ff3e6075e64badf462eca042f0b269\" , \"nsk\" : \"572d8147283d90a938bd2867926fef485290c5fce37fad72eb733f9cd8a07e09\" , \"ovk\" : \"1797de3b7f33cafffe3fe18c6b43ec6760add2ad81b10978d1fca5290497ede9\" , \"shielded_spends\" : [ { \"note\" : { \"value\" : 60 , \"payment_address\" : \"ztron1mpwx0380fvw7gacf5hm4vl625ltmdezt0dwp3ssyd84y8jxzp3guqz9utzn35u7038jx6a6ucly\" , \"rcm\" : \"b67b18fee3133440bfc4509912b96482fdcacbc0b5679af1785247c94224200c\" }, \"alpha\" : \"b6de1a3a40764bd7a24147f155011624805bfcd6d21283c69a3f21aea9401201\" , \"root\" : \"b0b6f5be533b99be38bc9a3c2f3c75a9be263c42500a9e13ffb00df15cda126f\" , \"path\" : \"b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c5381412935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62de1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef7228e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2aa5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6ad2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb5816d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4afee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd7124c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee08500769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c4908eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf30238d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e8415276736aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b159216cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf006edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c1ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be2451d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642fbd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c1b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab651ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de985794730484777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23cba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce7243ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b7b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b680444d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa528138ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce7389613912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a93a022931b1f10886401d5fc249cbc9d0158945f4ecc0509041abc868077545d091e115b68c44341eec6fd6862140898e7399401f2ec319e3daefd931dcf1a3fffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e34adfa6682c546a5f87ac883fa09f6954b50fb7330f8e6b080a9a417548ab062674fc4565e1c6027648d10d91b1708cb4456f2e09220ab8f155c41ef790ea9b562\" , \"pos\" : 27 } ], \"shielded_receives\" : [ { \"note\" : { \"value\" : 40 , \"payment_address\" : \"ztron1nupklnacqyjc7ge998f6v2wutm7urdcdupl6j4ypq7qwws5yqfqrlxwvnylucwre8yewx5s0keu\" , \"rcm\" : \"f2aa138d0d04b685b236d797458d0cf53749b96bbb6d5f1e6c5f2db31b0b2d09\" } } ], \"transparent_to_address\" : \"TBaBXpRAeBhs75TZT751LwyhrcR25XeUot\" , \"to_amount\" : \"2000\" , \"shielded_TRC20_contract_address\" : \"TDxka3zetrpWsWoeWWjSAQDwM186UmzwQn\" , \"visible\" : true } Note: the to_amount is the real value, the value in note is the scaled value by scalingFactor set in the shielded TRC-20 contract. In this example, the value of scalingFactor is 100, namely 60 * 100 = 40 * 100 + 2000. Return: { \"spend_description\" : [ { \"value_commitment\" : \"c8565a546d8922f7b5fdba99504961ccf827fc3ffa23905e50ac2f4eef819766\" , \"anchor\" : \"b0b6f5be533b99be38bc9a3c2f3c75a9be263c42500a9e13ffb00df15cda126f\" , \"nullifier\" : \"dbd34894ce33fee5836283233df7121c6d85443e047fd1c009c4cecbad1d650b\" , \"rk\" : \"2e722d314646bcec8d4c546224bb9fa7396e0fc49a4c0e41a4c181ad7b0f2436\" , \"zkproof\" : \"8f5c35655e812a02ee308c75c8d4fbda3c756319327e656d971b5b0e1507918beda848f44fdf10ca7bd9ff911608d2c8a8fb5378ff1c18e604302fe808c6ba3368d0cfeb0e0d976a81a419f9c7f33045a134d476e23de9e9c56e233beee76573016814d2424afebcd7a061054613e4db8c9d85d5258c5abb1c38576daa704018d5d15daa21c13bb6c8c400452d0c163d8eece84dea1d28fa1dcce6a91191d66b9a43d7c76f3535a9ff43f84e5243313e8381d75bf3bb02ef2196eb7b9f76351d\" }] , \"receive_description\" : [ { \"value_commitment\" : \"0534ca13075b567ea6c2ebb487fb54b97ee0148e451ede224d1833f4b5394b8e\" , \"note_commitment\" : \"75d9624ffdf9c1bcfe88104710403d8916183a8aa97635ac5573fd4d8d981158\" , \"epk\" : \"96fd1aa79db655677d6a31c277e08ddb87527fa7b1848ed817ccc55a741c9210\" , \"c_enc\" : \"14c3a0d8d62ded3ff49ec3f940b5b0458af28227e4419a63ee2b377146e1bd2d3e963eabcd22cd3cf76d54baa53de0099f785eed4d8ac994153371a04cbf9028ce9e4b1a0f2a0a56281a360508d8428b270960a720c0ff3659acd9445f0e8f6975ece1ce93b67daee879c17006a31bbea3c78ae494a54d7ef9ef3462d143f725cdc76b486ce92f32c25a93859e7c298287440338e984d7bb7191feb87af7cc9eb0e9d670222d7d309360463c1c0b863225d631bb1997fee37fcad3d8c18acea6377087df8b45256310c634120d4e974aecf1f24a0083a6671277ec452329652bd5a3b2cd5c2b7e03f4e70703624e9be1a30c543028a592da533dfa18305098d370207d473859051afa14062d8fc062eb946f0326c16aa8680efaa0e29a55547957a967122ac6ea8f3139c1d8392e5914c98fdf115f8f959c0cd11f466e9d8c9168ca592ed4f7cb7e900a8bf94cec047e86b1c6c606eeb9db7655498b0590680aacf91e1958d5c05d5f3cda5ae87d8ae92f285a4ae258c2c216857a4118052dad44673b3f60e2866f9c73d5696c3ddf4967aa1df3438b6a1a5e937f2af23e698c02021fdb1e1e80258313687a49100bb2965627c2369ef559c2b987bdfce8057c66091c0cf39d14eca98989856687248885b4006770f9121530da170963f16c4145d1777d060f7a406b09b23e139c576719d2f99f296f61ac8b9ee65dff7dfa307e2c4835aba2a4c5659aa2878d37f4250d01d4ea69be5911a417e5716e72c1a3bd505f64041ee28003508edb2a55c7e9475281fde204d31e541059e16fe4311a27075e87\" , \"c_out\" : \"1e2057789a029d029792c60db3bb91218ce613d73e4fc486dbe90398e1475861d0b60eb5ed93bb16306cb1f0cff85b9c311cadd6a0902b906c887a5550b6c2ca99c50b72c3cb23faa0a22091122fcb0d\" , \"zkproof\" : \"b08bbd60ea3784da8aec576e2e2edc068d8b4d21899ee3413ad4f7cbb9fd703bfa7f188a9c4424a5254445b97564ed0a8ca4c62a1176006f1b9852f4b7f0381f50a1e5d06820ffb4c8c2aeddd38435138e5ebb1f8324b6634d75582ae9823829062975d2d5a940e1de72cd6b5cb123737011e9c25f6df866d4ee5fcceacc60d347886af6241d4a8d074826a8698cc04096ee4fef38ec061a07a6a04c4e2c4bed4124e78bf1a030b233a01eca189827d59329cd18ea5e6481e76b2261a3cf678d\" }] , \"binding_signature\" : \"4cd9c8855bb27548e83c5aed968dd91f9e2d1aab1b5b4e9343774970c460f518f834f894760f03368da8d8e781c51e785e1a1a82c3f3efcf67e7b650b1585b00\" , \"message_hash\" : \"f9f665aa712ee948c5a0fb5b3994d1ef0110060cd02725cf69d904112fa3f106\" , \"trigger_contract_input\" : \"c4c231ecb68f670bcd7892da38b297edefd91960bea3326c9b825abe726bea0dbac4c2d3c24a7dbfb82aec128876481f9740751dcd581d713ed33dfd9a1017b87d7b0af8be5361c23cd1e9575ed32ef3\" , \"parameter_type\" : \"burn\" } Because of lacking the ask , the api can not generate the spend_authority_signature . Here, the trigger_contract_input is some ciphertext used to generate the trigger shielded TRC-20 contract input for burn . To generate the trigger_contract_input , the user first needs to generate the spend spend_authority_signature by calling the api: wallet/createspendauthsig Method: Post Parameters: { \"ask\": \"0f63eabdfe2bbfe08012f6bb2db024e6809c16e8ed055aa41a6095424f192005\", \"tx_hash\": \"f9f665aa712ee948c5a0fb5b3994d1ef0110060cd02725cf69d904112fa3f106\", \"alpha\": \"0dfea932d1dc513b2bdebb1fd1f8124c4a2c93bb393fbba2d7dba8e045585207\" } Return: { \"value\": \"1947036add76206b9f9b03ffd9d9526c5547db955387798f15c5e7c911f41eadc23eee214e64be792a404b77c64335a675c3489ca63d0d471de484c3a606d002\" } The returned value is the spend_authority_signature . Then the user need to call the api: wallet/gettriggerinputforshieldedtrc20contract Method: Post Parameters: { \"shielded_TRC20_Parameters\": { \"spend_description\": [ { \"value_commitment\": \"c8565a546d8922f7b5fdba99504961ccf827fc3ffa23905e50ac2f4eef819766\", \"anchor\": \"b0b6f5be533b99be38bc9a3c2f3c75a9be263c42500a9e13ffb00df15cda126f\", \"nullifier\": \"dbd34894ce33fee5836283233df7121c6d85443e047fd1c009c4cecbad1d650b\", \"rk\": \"2e722d314646bcec8d4c546224bb9fa7396e0fc49a4c0e41a4c181ad7b0f2436\", \"zkproof\": \"8f5c35655e812a02ee308c75c8d4fbda3c756319327e656d971b5b0e1507918beda848f44fdf10ca7bd9ff911608d2c8a8fb5378ff1c18e604302fe808c6ba3368d0cfeb0e0d976a81a419f9c7f33045a134d476e23de9e9c56e233beee76573016814d2424afebcd7a061054613e4db8c9d85d5258c5abb1c38576daa704018d5d15daa21c13bb6c8c400452d0c163d8eece84dea1d28fa1dcce6a91191d66b9a43d7c76f3535a9ff43f84e5243313e8381d75bf3bb02ef2196eb7b9f76351d\" }], \"receive_description\": [ { \"value_commitment\": \"0534ca13075b567ea6c2ebb487fb54b97ee0148e451ede224d1833f4b5394b8e\", \"note_commitment\": \"75d9624ffdf9c1bcfe88104710403d8916183a8aa97635ac5573fd4d8d981158\", \"epk\": \"96fd1aa79db655677d6a31c277e08ddb87527fa7b1848ed817ccc55a741c9210\", \"c_enc\": \"14c3a0d8d62ded3ff49ec3f940b5b0458af28227e4419a63ee2b377146e1bd2d3e963eabcd22cd3cf76d54baa53de0099f785eed4d8ac994153371a04cbf9028ce9e4b1a0f2a0a56281a360508d8428b270960a720c0ff3659acd9445f0e8f6975ece1ce93b67daee879c17006a31bbea3c78ae494a54d7ef9ef3462d143f725cdc76b486ce92f32c25a93859e7c298287440338e984d7bb7191feb87af7cc9eb0e9d670222d7d309360463c1c0b863225d631bb1997fee37fcad3d8c18acea6377087df8b45256310c634120d4e974aecf1f24a0083a6671277ec452329652bd5a3b2cd5c2b7e03f4e70703624e9be1a30c543028a592da533dfa18305098d370207d473859051afa14062d8fc062eb946f0326c16aa8680efaa0e29a55547957a967122ac6ea8f3139c1d8392e5914c98fdf115f8f959c0cd11f466e9d8c9168ca592ed4f7cb7e900a8bf94cec047e86b1c6c606eeb9db7655498b0590680aacf91e1958d5c05d5f3cda5ae87d8ae92f285a4ae258c2c216857a4118052dad44673b3f60e2866f9c73d5696c3ddf4967aa1df3438b6a1a5e937f2af23e698c02021fdb1e1e80258313687a49100bb2965627c2369ef559c2b987bdfce8057c66091c0cf39d14eca98989856687248885b4006770f9121530da170963f16c4145d1777d060f7a406b09b23e139c576719d2f99f296f61ac8b9ee65dff7dfa307e2c4835aba2a4c5659aa2878d37f4250d01d4ea69be5911a417e5716e72c1a3bd505f64041ee28003508edb2a55c7e9475281fde204d31e541059e16fe4311a27075e87\", \"c_out\": \"1e2057789a029d029792c60db3bb91218ce613d73e4fc486dbe90398e1475861d0b60eb5ed93bb16306cb1f0cff85b9c311cadd6a0902b906c887a5550b6c2ca99c50b72c3cb23faa0a22091122fcb0d\", \"zkproof\": \"b08bbd60ea3784da8aec576e2e2edc068d8b4d21899ee3413ad4f7cbb9fd703bfa7f188a9c4424a5254445b97564ed0a8ca4c62a1176006f1b9852f4b7f0381f50a1e5d06820ffb4c8c2aeddd38435138e5ebb1f8324b6634d75582ae9823829062975d2d5a940e1de72cd6b5cb123737011e9c25f6df866d4ee5fcceacc60d347886af6241d4a8d074826a8698cc04096ee4fef38ec061a07a6a04c4e2c4bed4124e78bf1a030b233a01eca189827d59329cd18ea5e6481e76b2261a3cf678d\" }], \"binding_signature\": \"4cd9c8855bb27548e83c5aed968dd91f9e2d1aab1b5b4e9343774970c460f518f834f894760f03368da8d8e781c51e785e1a1a82c3f3efcf67e7b650b1585b00\", \"message_hash\": \"f9f665aa712ee948c5a0fb5b3994d1ef0110060cd02725cf69d904112fa3f106\", \"trigger_contract_input\": \"c4c231ecb68f670bcd7892da38b297edefd91960bea3326c9b825abe726bea0dbac4c2d3c24a7dbfb82aec128876481f9740751dcd581d713ed33dfd9a1017b87d7b0af8be5361c23cd1e9575ed32ef3\", \"parameter_type\": \"burn\" }, \"spend_authority_signature\": [ { \"value\": \"1947036add76206b9f9b03ffd9d9526c5547db955387798f15c5e7c911f41eadc23eee214e64be792a404b77c64335a675c3489ca63d0d471de484c3a606d002\" } ], \"amount\": \"2000\", \"transparent_to_address\": \"TV7ceN4tHDNPB47DMStcUFC3Y8QQ7KzN32\", \"visible\": true } Return: { \"value\": \"dbd34894ce33fee5836283233df7121c6d85443e047fd1c009c4cecbad1d650bb0b6f5be533b99be38bc9a3c2f3c75a9be263c42500a9e13ffb00df15cda126fc8565a546d8922f7b5fdba99504961ccf827fc3ffa23905e50ac2f4eef8197662e722d314646bcec8d4c546224bb9fa7396e0fc49a4c0e41a4c181ad7b0f24368f5c35655e812a02ee308c75c8d4fbda3c756319327e656d971b5b0e1507918beda848f44fdf10ca7bd9ff911608d2c8a8fb5378ff1c18e604302fe808c6ba3368d0cfeb0e0d976a81a419f9c7f33045a134d476e23de9e9c56e233beee76573016814d2424afebcd7a061054613e4db8c9d85d5258c5abb1c38576daa704018d5d15daa21c13bb6c8c400452d0c163d8eece84dea1d28fa1dcce6a91191d66b9a43d7c76f3535a9ff43f84e5243313e8381d75bf3bb02ef2196eb7b9f76351d1947036add76206b9f9b03ffd9d9526c5547db955387798f15c5e7c911f41eadc23eee214e64be792a404b77c64335a675c3489ca63d0d471de484c3a606d00200000000000000000000000000000000000000000000000000000000000007d04cd9c8855bb27548e83c5aed968dd91f9e2d1aab1b5b4e9343774970c460f518f834f894760f03368da8d8e781c51e785e1a1a82c3f3efcf67e7b650b1585b00000000000000000000000041d2017434977a0125039bfdc111922e9eb77f055bc4c231ecb68f670bcd7892da38b297edefd91960bea3326c9b825abe726bea0dbac4c2d3c24a7dbfb82aec128876481f9740751dcd581d713ed33dfd9a1017b87d7b0af8be5361c23cd1e9575ed32ef30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000000000000000000000000000000000000000000175d9624ffdf9c1bcfe88104710403d8916183a8aa97635ac5573fd4d8d9811580534ca13075b567ea6c2ebb487fb54b97ee0148e451ede224d1833f4b5394b8e96fd1aa79db655677d6a31c277e08ddb87527fa7b1848ed817ccc55a741c9210b08bbd60ea3784da8aec576e2e2edc068d8b4d21899ee3413ad4f7cbb9fd703bfa7f188a9c4424a5254445b97564ed0a8ca4c62a1176006f1b9852f4b7f0381f50a1e5d06820ffb4c8c2aeddd38435138e5ebb1f8324b6634d75582ae9823829062975d2d5a940e1de72cd6b5cb123737011e9c25f6df866d4ee5fcceacc60d347886af6241d4a8d074826a8698cc04096ee4fef38ec061a07a6a04c4e2c4bed4124e78bf1a030b233a01eca189827d59329cd18ea5e6481e76b2261a3cf678d000000000000000000000000000000000000000000000000000000000000000114c3a0d8d62ded3ff49ec3f940b5b0458af28227e4419a63ee2b377146e1bd2d3e963eabcd22cd3cf76d54baa53de0099f785eed4d8ac994153371a04cbf9028ce9e4b1a0f2a0a56281a360508d8428b270960a720c0ff3659acd9445f0e8f6975ece1ce93b67daee879c17006a31bbea3c78ae494a54d7ef9ef3462d143f725cdc76b486ce92f32c25a93859e7c298287440338e984d7bb7191feb87af7cc9eb0e9d670222d7d309360463c1c0b863225d631bb1997fee37fcad3d8c18acea6377087df8b45256310c634120d4e974aecf1f24a0083a6671277ec452329652bd5a3b2cd5c2b7e03f4e70703624e9be1a30c543028a592da533dfa18305098d370207d473859051afa14062d8fc062eb946f0326c16aa8680efaa0e29a55547957a967122ac6ea8f3139c1d8392e5914c98fdf115f8f959c0cd11f466e9d8c9168ca592ed4f7cb7e900a8bf94cec047e86b1c6c606eeb9db7655498b0590680aacf91e1958d5c05d5f3cda5ae87d8ae92f285a4ae258c2c216857a4118052dad44673b3f60e2866f9c73d5696c3ddf4967aa1df3438b6a1a5e937f2af23e698c02021fdb1e1e80258313687a49100bb2965627c2369ef559c2b987bdfce8057c66091c0cf39d14eca98989856687248885b4006770f9121530da170963f16c4145d1777d060f7a406b09b23e139c576719d2f99f296f61ac8b9ee65dff7dfa307e2c4835aba2a4c5659aa2878d37f4250d01d4ea69be5911a417e5716e72c1a3bd505f64041ee28003508edb2a55c7e9475281fde204d31e541059e16fe4311a27075e871e2057789a029d029792c60db3bb91218ce613d73e4fc486dbe90398e1475861d0b60eb5ed93bb16306cb1f0cff85b9c311cadd6a0902b906c887a5550b6c2ca99c50b72c3cb23faa0a22091122fcb0d000000000000000000000000\" } The value can be used as the input data to trigger the burn function of the shielded TRC-20 contract. Trigger the shielded TRC-20 contract \u00b6 Call api: wallet/triggersmartcontract to trigger the shielded TRC-20 contract and generate the shielded TRC-20 transaction Method: Post Parameters: { \"owner_address\" : \"411195752747f24146fd1fcd12c31600a81f7c5423\" , \"contract_address\" : \"41959ec81ae3c002192fd25dff7f8d20b4bb6b76ee\" , \"function_selector\" : \"mint(uint256,bytes32[9],bytes32[2],bytes32[21])\" , \"parameter\" : \"00000000000000000000000000000000000000000000000000000000000013889fb4acd771c24fdd47aabb109b7596566509421cdc11d1f8babb5d5af22a614ef10f73d04837be9158010626423130663ad09d6436b97b694acb2b92d940201efa4a7ef3e2406c2c897894ea73cad3ded8dbcfb90521ec8488163b2baeef6a88aa9af11367a3cd1cd797937bb7f521162d5264e1f2dc39ca7c6b0eadf8520a1b5c2bd3bbe50835a9f3419b82909cbf60989f83496480008cceb6a3783bbc25d2921f86d79b0bad5d493766b8cf1f6bec74f6b67480e770c3a7f5b27a30ae3d4a13df273ab73e9107a5287883317bb5417b7f6841e197df99f5321807995c80fd3810f791845681560ccd3a4bfd8c56e298bc09b989e5279ca190ac3b29cdb7941315c027facc97bf1c0a02fa437dd68b335f8cbf0d9a3ba4a30302523609f40a177cc31961ca63a9c375b714831bc007ddbc5cfbafca368200b6c33b4b0aeadf537b47c16788bdc00981713b79f23fc0b4065ab9369072589728ed0cc3ac25076a2f8141a2637e589983210ce6d09e67c36167cb9fa5b4a9bf8daafc795b9c3978ffeade3698dfd4c86f3c7b2dd92c36e6303101b49fdd4f1e4357223c02f19329f6bb18f1f6d2e297e9fefa2d9f92f81ce07a8980effa10b8b8bf39aa19e80d96ef1c915cc55d1d26ea07b1c0da2ecf66b7f8b64657f6ac95466a983553f29a8bea3d78c178b2129745d432ddc95532e56f8e93625c674f20375a48990ca287591fcf0c476c3d1392d4e1355caf8d7352f895dc62da55d83e478ab00b78d5a68a0f50a69d9c595bcf494361517c703db9dba728e8c79a833d753f1977f526e9afd4b6daaff37fa0f1d52a63199fb3f8e97b7061a200aed5d2865de16b83b762638e6c8f9269967299a97618c1bd984f5afa25d170cf9eef601bdd1c1d33bd91813c19f70e102b16327e4cd3d4851bfa76b7caf45026c70d4f2b4872d7255133b07dc41b626228051537eee53083e9a11daf5fcc5cf7ca1cef99579362b1506a90fc1ed5d4fe8b7133c7179a2d3aee27dc802a90403ba445adb6eef8b35fd798fb0d374ce3c8b4a6870bcf32651c9c32cfeafbb0672f50561d76826b938b9b2c44029bc5d11838d453a48565c70e0d3c8f2a915ba932a02271c73046b2c53aaf6e27bb72a567a26e2a4164974fc52d0ad7fa5dddfe9390007e2fc3ad46d644be55519e01a2cce76744f165c6705d3b007d2f649df84e3783622f5e077fe37fdd192896eae9b1245322db6e3242714a0552253b472103553f09b6b1d32804742375d3b140d2ebff2155b6248d07992f40e5537a0587315c451ac53cee490ce49c3b321a967558c39f789bf5d35859d4136bcf4178bf6b1814d617e139aa35710edcd325dd03957462070393b7066182fc56be713bba49a2359db71604e97e9350af687a7f185d7905d8900f7e2431386c00e55e32000000000000000000000000\" , \"call_value\" : 0 , \"call_token_value\" : 0 , \"token_id\" : 0 , \"fee_limit\" : 1000000000 } Return: { \"result\" : { \"result\" :true } , \"transaction\" : { \"visible\" :false, \"txID\" : \"d8ae793212147ed7d64f96a1a6c1477aeeecdedf6f5cb2e7cd897f70c7c2603e\" , \"raw_data\" : { \"contract\" : [ { \"parameter\" : { \"value\" : { \"data\" : \"855d175e00000000000000000000000000000000000000000000000000000000000013889fb4acd771c24fdd47aabb109b7596566509421cdc11d1f8babb5d5af22a614ef10f73d04837be9158010626423130663ad09d6436b97b694acb2b92d940201efa4a7ef3e2406c2c897894ea73cad3ded8dbcfb90521ec8488163b2baeef6a88aa9af11367a3cd1cd797937bb7f521162d5264e1f2dc39ca7c6b0eadf8520a1b5c2bd3bbe50835a9f3419b82909cbf60989f83496480008cceb6a3783bbc25d2921f86d79b0bad5d493766b8cf1f6bec74f6b67480e770c3a7f5b27a30ae3d4a13df273ab73e9107a5287883317bb5417b7f6841e197df99f5321807995c80fd3810f791845681560ccd3a4bfd8c56e298bc09b989e5279ca190ac3b29cdb7941315c027facc97bf1c0a02fa437dd68b335f8cbf0d9a3ba4a30302523609f40a177cc31961ca63a9c375b714831bc007ddbc5cfbafca368200b6c33b4b0aeadf537b47c16788bdc00981713b79f23fc0b4065ab9369072589728ed0cc3ac25076a2f8141a2637e589983210ce6d09e67c36167cb9fa5b4a9bf8daafc795b9c3978ffeade3698dfd4c86f3c7b2dd92c36e6303101b49fdd4f1e4357223c02f19329f6bb18f1f6d2e297e9fefa2d9f92f81ce07a8980effa10b8b8bf39aa19e80d96ef1c915cc55d1d26ea07b1c0da2ecf66b7f8b64657f6ac95466a983553f29a8bea3d78c178b2129745d432ddc95532e56f8e93625c674f20375a48990ca287591fcf0c476c3d1392d4e1355caf8d7352f895dc62da55d83e478ab00b78d5a68a0f50a69d9c595bcf494361517c703db9dba728e8c79a833d753f1977f526e9afd4b6daaff37fa0f1d52a63199fb3f8e97b7061a200aed5d2865de16b83b762638e6c8f9269967299a97618c1bd984f5afa25d170cf9eef601bdd1c1d33bd91813c19f70e102b16327e4cd3d4851bfa76b7caf45026c70d4f2b4872d7255133b07dc41b626228051537eee53083e9a11daf5fcc5cf7ca1cef99579362b1506a90fc1ed5d4fe8b7133c7179a2d3aee27dc802a90403ba445adb6eef8b35fd798fb0d374ce3c8b4a6870bcf32651c9c32cfeafbb0672f50561d76826b938b9b2c44029bc5d11838d453a48565c70e0d3c8f2a915ba932a02271c73046b2c53aaf6e27bb72a567a26e2a4164974fc52d0ad7fa5dddfe9390007e2fc3ad46d644be55519e01a2cce76744f165c6705d3b007d2f649df84e3783622f5e077fe37fdd192896eae9b1245322db6e3242714a0552253b472103553f09b6b1d32804742375d3b140d2ebff2155b6248d07992f40e5537a0587315c451ac53cee490ce49c3b321a967558c39f789bf5d35859d4136bcf4178bf6b1814d617e139aa35710edcd325dd03957462070393b7066182fc56be713bba49a2359db71604e97e9350af687a7f185d7905d8900f7e2431386c00e55e32000000000000000000000000\" , \"owner_address\" : \"411195752747f24146fd1fcd12c31600a81f7c5423\" , \"contract_address\" : \"41959ec81ae3c002192fd25dff7f8d20b4bb6b76ee\" } , \"type_url\" : \"type.googleapis.com/protocol.TriggerSmartContract\" } , \"type\" : \"TriggerSmartContract\" }] , \"ref_block_bytes\" : \"f1a0\" , \"ref_block_hash\" : \"6525d0bb0966c224\" , \"expiration\" :1593795795000, \"fee_limit\" :1000000000, \"timestamp\" :1593795737687 } , \"raw_data_hex\" : \"0a02f1a022086525d0bb0966c22440b8b087adb12e5a9009081f128b090a31747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e54726967676572536d617274436f6e747261637412d5080a15411195752747f24146fd1fcd12c31600a81f7c5423121541959ec81ae3c002192fd25dff7f8d20b4bb6b76ee22a408855d175e00000000000000000000000000000000000000000000000000000000000013889fb4acd771c24fdd47aabb109b7596566509421cdc11d1f8babb5d5af22a614ef10f73d04837be9158010626423130663ad09d6436b97b694acb2b92d940201efa4a7ef3e2406c2c897894ea73cad3ded8dbcfb90521ec8488163b2baeef6a88aa9af11367a3cd1cd797937bb7f521162d5264e1f2dc39ca7c6b0eadf8520a1b5c2bd3bbe50835a9f3419b82909cbf60989f83496480008cceb6a3783bbc25d2921f86d79b0bad5d493766b8cf1f6bec74f6b67480e770c3a7f5b27a30ae3d4a13df273ab73e9107a5287883317bb5417b7f6841e197df99f5321807995c80fd3810f791845681560ccd3a4bfd8c56e298bc09b989e5279ca190ac3b29cdb7941315c027facc97bf1c0a02fa437dd68b335f8cbf0d9a3ba4a30302523609f40a177cc31961ca63a9c375b714831bc007ddbc5cfbafca368200b6c33b4b0aeadf537b47c16788bdc00981713b79f23fc0b4065ab9369072589728ed0cc3ac25076a2f8141a2637e589983210ce6d09e67c36167cb9fa5b4a9bf8daafc795b9c3978ffeade3698dfd4c86f3c7b2dd92c36e6303101b49fdd4f1e4357223c02f19329f6bb18f1f6d2e297e9fefa2d9f92f81ce07a8980effa10b8b8bf39aa19e80d96ef1c915cc55d1d26ea07b1c0da2ecf66b7f8b64657f6ac95466a983553f29a8bea3d78c178b2129745d432ddc95532e56f8e93625c674f20375a48990ca287591fcf0c476c3d1392d4e1355caf8d7352f895dc62da55d83e478ab00b78d5a68a0f50a69d9c595bcf494361517c703db9dba728e8c79a833d753f1977f526e9afd4b6daaff37fa0f1d52a63199fb3f8e97b7061a200aed5d2865de16b83b762638e6c8f9269967299a97618c1bd984f5afa25d170cf9eef601bdd1c1d33bd91813c19f70e102b16327e4cd3d4851bfa76b7caf45026c70d4f2b4872d7255133b07dc41b626228051537eee53083e9a11daf5fcc5cf7ca1cef99579362b1506a90fc1ed5d4fe8b7133c7179a2d3aee27dc802a90403ba445adb6eef8b35fd798fb0d374ce3c8b4a6870bcf32651c9c32cfeafbb0672f50561d76826b938b9b2c44029bc5d11838d453a48565c70e0d3c8f2a915ba932a02271c73046b2c53aaf6e27bb72a567a26e2a4164974fc52d0ad7fa5dddfe9390007e2fc3ad46d644be55519e01a2cce76744f165c6705d3b007d2f649df84e3783622f5e077fe37fdd192896eae9b1245322db6e3242714a0552253b472103553f09b6b1d32804742375d3b140d2ebff2155b6248d07992f40e5537a0587315c451ac53cee490ce49c3b321a967558c39f789bf5d35859d4136bcf4178bf6b1814d617e139aa35710edcd325dd03957462070393b7066182fc56be713bba49a2359db71604e97e9350af687a7f185d7905d8900f7e2431386c00e55e3200000000000000000000000070d7f083adb12e90018094ebdc03\" } } Note: the above is an example for triggering the mint function. For transfer and burn , it's similar. Broadcast the shielded TRC-20 transaction \u00b6 Call api: wallet/broadcasttransaction to broadcast this transaction Method: Post Parameters: { \"txID\" : \"d8ae793212147ed7d64f96a1a6c1477aeeecdedf6f5cb2e7cd897f70c7c2603e\" , \"raw_data\" :{ \"contract\" :[ { \"parameter\" :{ \"value\" :{ \"data\" : \"855d175e00000000000000000000000000000000000000000000000000000000000013889fb4acd771c24fdd47aabb109b7596566509421cdc11d1f8babb5d5af22a614ef10f73d04837be9158010626423130663ad09d6436b97b694acb2b92d940201efa4a7ef3e2406c2c897894ea73cad3ded8dbcfb90521ec8488163b2baeef6a88aa9af11367a3cd1cd797937bb7f521162d5264e1f2dc39ca7c6b0eadf8520a1b5c2bd3bbe50835a9f3419b82909cbf60989f83496480008cceb6a3783bbc25d2921f86d79b0bad5d493766b8cf1f6bec74f6b67480e770c3a7f5b27a30ae3d4a13df273ab73e9107a5287883317bb5417b7f6841e197df99f5321807995c80fd3810f791845681560ccd3a4bfd8c56e298bc09b989e5279ca190ac3b29cdb7941315c027facc97bf1c0a02fa437dd68b335f8cbf0d9a3ba4a30302523609f40a177cc31961ca63a9c375b714831bc007ddbc5cfbafca368200b6c33b4b0aeadf537b47c16788bdc00981713b79f23fc0b4065ab9369072589728ed0cc3ac25076a2f8141a2637e589983210ce6d09e67c36167cb9fa5b4a9bf8daafc795b9c3978ffeade3698dfd4c86f3c7b2dd92c36e6303101b49fdd4f1e4357223c02f19329f6bb18f1f6d2e297e9fefa2d9f92f81ce07a8980effa10b8b8bf39aa19e80d96ef1c915cc55d1d26ea07b1c0da2ecf66b7f8b64657f6ac95466a983553f29a8bea3d78c178b2129745d432ddc95532e56f8e93625c674f20375a48990ca287591fcf0c476c3d1392d4e1355caf8d7352f895dc62da55d83e478ab00b78d5a68a0f50a69d9c595bcf494361517c703db9dba728e8c79a833d753f1977f526e9afd4b6daaff37fa0f1d52a63199fb3f8e97b7061a200aed5d2865de16b83b762638e6c8f9269967299a97618c1bd984f5afa25d170cf9eef601bdd1c1d33bd91813c19f70e102b16327e4cd3d4851bfa76b7caf45026c70d4f2b4872d7255133b07dc41b626228051537eee53083e9a11daf5fcc5cf7ca1cef99579362b1506a90fc1ed5d4fe8b7133c7179a2d3aee27dc802a90403ba445adb6eef8b35fd798fb0d374ce3c8b4a6870bcf32651c9c32cfeafbb0672f50561d76826b938b9b2c44029bc5d11838d453a48565c70e0d3c8f2a915ba932a02271c73046b2c53aaf6e27bb72a567a26e2a4164974fc52d0ad7fa5dddfe9390007e2fc3ad46d644be55519e01a2cce76744f165c6705d3b007d2f649df84e3783622f5e077fe37fdd192896eae9b1245322db6e3242714a0552253b472103553f09b6b1d32804742375d3b140d2ebff2155b6248d07992f40e5537a0587315c451ac53cee490ce49c3b321a967558c39f789bf5d35859d4136bcf4178bf6b1814d617e139aa35710edcd325dd03957462070393b7066182fc56be713bba49a2359db71604e97e9350af687a7f185d7905d8900f7e2431386c00e55e32000000000000000000000000\" , \"owner_address\" : \"411195752747f24146fd1fcd12c31600a81f7c5423\" , \"contract_address\" : \"41959ec81ae3c002192fd25dff7f8d20b4bb6b76ee\" }, \"type_url\" : \"type.googleapis.com/protocol.TriggerSmartContract\" }, \"type\" : \"TriggerSmartContract\" }], \"ref_block_bytes\" : \"f1a0\" , \"ref_block_hash\" : \"6525d0bb0966c224\" , \"expiration\" : 1593795795000 , \"fee_limit\" : 1000000000 , \"timestamp\" : 1593795737687 }, \"signature\" : \"2c1593a78911b9183bd513fcaeeec1440a9a5bd2896adde30411872bfc2d551a1b8211455d3ff686e08d02d230ea4d50e8d4875a88bc13e368e2e4aab80dcb4901\" , \"raw_data_hex\" : \"0a02f1a022086525d0bb0966c22440b8b087adb12e5a9009081f128b090a31747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e54726967676572536d617274436f6e747261637412d5080a15411195752747f24146fd1fcd12c31600a81f7c5423121541959ec81ae3c002192fd25dff7f8d20b4bb6b76ee22a408855d175e00000000000000000000000000000000000000000000000000000000000013889fb4acd771c24fdd47aabb109b7596566509421cdc11d1f8babb5d5af22a614ef10f73d04837be9158010626423130663ad09d6436b97b694acb2b92d940201efa4a7ef3e2406c2c897894ea73cad3ded8dbcfb90521ec8488163b2baeef6a88aa9af11367a3cd1cd797937bb7f521162d5264e1f2dc39ca7c6b0eadf8520a1b5c2bd3bbe50835a9f3419b82909cbf60989f83496480008cceb6a3783bbc25d2921f86d79b0bad5d493766b8cf1f6bec74f6b67480e770c3a7f5b27a30ae3d4a13df273ab73e9107a5287883317bb5417b7f6841e197df99f5321807995c80fd3810f791845681560ccd3a4bfd8c56e298bc09b989e5279ca190ac3b29cdb7941315c027facc97bf1c0a02fa437dd68b335f8cbf0d9a3ba4a30302523609f40a177cc31961ca63a9c375b714831bc007ddbc5cfbafca368200b6c33b4b0aeadf537b47c16788bdc00981713b79f23fc0b4065ab9369072589728ed0cc3ac25076a2f8141a2637e589983210ce6d09e67c36167cb9fa5b4a9bf8daafc795b9c3978ffeade3698dfd4c86f3c7b2dd92c36e6303101b49fdd4f1e4357223c02f19329f6bb18f1f6d2e297e9fefa2d9f92f81ce07a8980effa10b8b8bf39aa19e80d96ef1c915cc55d1d26ea07b1c0da2ecf66b7f8b64657f6ac95466a983553f29a8bea3d78c178b2129745d432ddc95532e56f8e93625c674f20375a48990ca287591fcf0c476c3d1392d4e1355caf8d7352f895dc62da55d83e478ab00b78d5a68a0f50a69d9c595bcf494361517c703db9dba728e8c79a833d753f1977f526e9afd4b6daaff37fa0f1d52a63199fb3f8e97b7061a200aed5d2865de16b83b762638e6c8f9269967299a97618c1bd984f5afa25d170cf9eef601bdd1c1d33bd91813c19f70e102b16327e4cd3d4851bfa76b7caf45026c70d4f2b4872d7255133b07dc41b626228051537eee53083e9a11daf5fcc5cf7ca1cef99579362b1506a90fc1ed5d4fe8b7133c7179a2d3aee27dc802a90403ba445adb6eef8b35fd798fb0d374ce3c8b4a6870bcf32651c9c32cfeafbb0672f50561d76826b938b9b2c44029bc5d11838d453a48565c70e0d3c8f2a915ba932a02271c73046b2c53aaf6e27bb72a567a26e2a4164974fc52d0ad7fa5dddfe9390007e2fc3ad46d644be55519e01a2cce76744f165c6705d3b007d2f649df84e3783622f5e077fe37fdd192896eae9b1245322db6e3242714a0552253b472103553f09b6b1d32804742375d3b140d2ebff2155b6248d07992f40e5537a0587315c451ac53cee490ce49c3b321a967558c39f789bf5d35859d4136bcf4178bf6b1814d617e139aa35710edcd325dd03957462070393b7066182fc56be713bba49a2359db71604e97e9350af687a7f185d7905d8900f7e2431386c00e55e3200000000000000000000000070d7f083adb12e90018094ebdc03\" } Return: { \"result\" : true } Note: before broadcasting the transaction, the sender should sign the transaction by its private key to generate the signature and add it to the transaction. Scan shielded TRC-20 notes by ivk \u00b6 Call api: wallet/scanshieldedtrc20notesbyivk to scan the shielded TRC-20 notes Method: Post and Get Parameters: { \"start_block_index\" : 46079 , \"end_block_index\" : 46091 , \"shielded_TRC20_contract_address\" : \"TDxka3zetrpWsWoeWWjSAQDwM186UmzwQn\" , \"ivk\" : \"c1898b84ced7e5c8840632ad1203d56b4a8ebbaa8425dd8b5a5b3d43578e1006\" , \"ak\" : \"66fda71a704eb463a13b6f43be7e296dd7ff3e6075e64badf462eca042f0b269\" , \"nk\" : \"b5f558a783c968b624f7cfc9a4f2c909332c0c514a8a419e552337e82e073f66\" , \"visible\" : true } Return: { \"noteTxs\" : [ { \"note\" : { \"payment_address\" : \"ztron1e453jrrxwsvj6s480a2rduz28jfedrsjwu0xsfk8psd85hajeyc6jx56nh0x7ngclh6tytr28wn\" , \"value\" :60, \"rcm\" : \"e51c6ef6c51ab1bb289056db13d44c0af35e70e18d76d8e9f270176663d8f50d\" } , \"is_spent\" :true, \"txid\" : \"59b64426f6bffead22739eb7aee626e11258cb899bc035c7e9d86bb495414dd8\" , \"index\" :0, \"position\" :9 }] } Scan shielded TRC-20 notes by ovk \u00b6 Call api: wallet/scanshieldedtrc20notesbyovk to scan the shileded TRC-20 notes Method: Post and Get Parameters: { \"start_block_index\" : 46079 , \"end_block_index\" : 46091 , \"shielded_TRC20_contract_address\" : \"TDxka3zetrpWsWoeWWjSAQDwM186UmzwQn\" , \"ovk\" : \"4364c875deeb663781a2f1530f9e4f87ea81cc3c757ca2a30fa4768940de2f98\" , \"visible\" : true } Return: { \"noteTxs\" : [ { \"note\" : { \"payment_address\" : \"ztron1e453jrrxwsvj6s480a2rduz28jfedrsjwu0xsfk8psd85hajeyc6jx56nh0x7ngclh6tytr28wn\" , \"value\" :60, \"rcm\" : \"e51c6ef6c51ab1bb289056db13d44c0af35e70e18d76d8e9f270176663d8f50d\" } , \"txid\" : \"59b64426f6bffead22739eb7aee626e11258cb899bc035c7e9d86bb495414dd8\" , \"index\" :0 } , { \"note\" : { \"payment_address\" : \"ztron129rzep2kymh87rwpp6eqk65l7a395y4w2t4zdma7chca4f8thncedlhkynta8655v3swqwna6qc\" , \"value\" :20, \"rcm\" : \"05f8adce01aa4aa61058b77924d46554edbecb3138f7704d7dc98180c3d88c07\" } , \"txid\" : \"ae633c43530ba54b6684e795720dd1c74834744988a65b0af2baea41099f2f66\" , \"index\" :0 } , { \"to_amount\" : \"4000\" , \"txid\" : \"ae633c43530ba54b6684e795720dd1c74834744988a65b0af2baea41099f2f66\" , \"index\" :1, \"transparent_to_address\" : \"TBaBXpRAeBhs75TZT751LwyhrcR25XeUot\" }] } Check the shielded TRC-20 note status \u00b6 Call api: wallet/isshieldedtrc20contractNoteSpent to check the shielded TRC-20 note status whether it is spent Method: Post Parameters: { \"note\" : { \"value\" : 40 , \"payment_address\" : \"ztron1nzfh9270dvpn0gysedl9gx6wfmh2hve3rtf0m57vla04pfjm3ermmrh9yasa2xnuy2zycsvwawe\" , \"rcm\" : \"b269a741bde1de2df79ffccf96d6eb646aa996e6567c208d774e851aef3e1909\" }, \"ak\" : \"8072d9110c9de9d9ade33d5d0f5890a7aa65b0cde42af7816d187297caf2fd64\" , \"nk\" : \"590bf33f93f792be659fd404df91e75c3b08d38d4e08ee226c3f5219cf598f14\" , \"position\" : 1 , \"shielded_TRC20_contract_address\" : \"41e6e90fbc958ba09483550882b1f0327e0193250a\" } Return: { \"is_spent\" : true }","title":"Shielded TRC-20 Contract"},{"location":"mechanism-algorithm/shielded-TRC20-contract/#shielded-trc-20-contract","text":"","title":"Shielded TRC-20 Contract"},{"location":"mechanism-algorithm/shielded-TRC20-contract/#introduction","text":"TRC-20 token contract allows users to issue and transfer tokens, but it can not guarantee the privacy since it leaks the token ownership. When transferring the token, the source address, destination address, and the token amount are public. The shielded TRC-20 contract ( TIP-135 ) aims to solve this problem and provides users better privacy of token ownership and transactions. The shielded TRC-20 contract has three core functions: mint , transfer and burn . mint is used to transform the public TRC-20 token to shielded token, which makes token ownership invisible. mint has only one transparent input and one shielded output. transfer is used for shielded token transactions, which can hide the source address, the destination address, and the transaction amount. transfer has at most two shielded input and two shielded output. burn is used to transform the shielded token to the public TRC-20 token. burn has only one shielded input, one transparent output and zero or one shielded output. The technical implementation is based on zk-SNARK(Zero-Knowledge Succinct Non-Interactive Argument of Knowledge) proof system, which is secure and efficient.","title":"Introduction"},{"location":"mechanism-algorithm/shielded-TRC20-contract/#contract-deployment","text":"Use deployContract method in the wallet-cli to deploy the TRC-20 contract. Note: the deployed TRC-20 contract address of TokenTRC20 on Nile Testnet is: TFUD8x3iAZ9dF7NDCGBtSjznemEomE5rP9 . Use the deployContract method to deploy the shielded TRC-20 contract. The shielded TRC-20 contract will bind the TRC-20 contract. The scalingFactor is also specified when deploying the the shielded TRC-20 contract. For more details about scalingFactor , please refer TIP-135 . Note: the deployed shielded TRC-20 contract address of ShieldedTRC20 on Nile Testnet is: TPcKtz5TRfP4xUZSos81RmXB9K2DBqj2iu and the corresponding scalingFactor is set 10.","title":"Contract Deployment"},{"location":"mechanism-algorithm/shielded-TRC20-contract/#usage-guide","text":"1. The sender needs to create an ordianry account by api. The account is used to trigger the shielded TRC-20 contract, so it should has some trx to pay the transaction fee. 2. The sender should create the shielded address, which is used to send and receive the shielded TRC-20 notes. 3. The sender calls the api to create shielded TRC-20 contract parameters for mint , transfer and burn . 4. The sender triggers the shielded TRC-20 contract by using the generated parameters and generates the shielded TRC-20 transaction. 5. The sender broadcasts the shielded TRC-20 transaction. 6. The receiver scans to get the received shielded notes. The document below describes how to use TRON Shielded TRC-20 contract with http api.","title":"Usage Guide"},{"location":"mechanism-algorithm/shielded-TRC20-contract/#create-the-account","text":"1. Call api: wallet/createaccount to generate the account Method: Post Parameters: { \"owner_address\" : \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\" , \"account_address\" : \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\" } Return: { \"visible\":false, \"txID\":\"c43651d448e82e00de3c31d7d34a826af4a6538bc3f5e9abcde11ef25f57d70e\", \"raw_data\":{ \"contract\":[ { \"parameter\":{ \"value\":{ \"owner_address\":\"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"account_address\":\"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\" }, \"type_url\":\"type.googleapis.com/protocol.AccountCreateContract\" }, \"type\":\"AccountCreateContract\" }], \"ref_block_bytes\":\"2bb0\", \"ref_block_hash\":\"e678f7b7e4da198d\", \"expiration\":1591780749000, \"timestamp\":1591780690724 }, \"raw_data_hex\":\"0a022bb02208e678f7b7e4da198d40c8dd9aeca92e5a6612640a32747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e4163636f756e74437265617465436f6e7472616374122e0a1541d1e7a6bc354106cb410e65ff8b181c600ff14292121541e552f6487585c2b58bc2c9bb4492bc1f17132cd070a49697eca92e\" }","title":"Create the account"},{"location":"mechanism-algorithm/shielded-TRC20-contract/#create-the-shielded-address","text":"1. Call api: wallet/getspendingkey to generate the spending key Method: Post Parameters: null Return: { \"value\": \"09124de6a534661ef1cfad0335832445a3b83c08e885881a68a52cf4dc735e68\" } 2. Call api: wallet/getexpandedspendingkey to generate the expanded spending key Method: Post Parameters: { \"value\" : \"09124de6a534661ef1cfad0335832445a3b83c08e885881a68a52cf4dc735e68\" } Return: { \"ask\": \"23d11537676610c287ffcd1bc33d650df37fc90d13bb65356fbc9045cfb91705\", \"nsk\": \"da6542f57f6f730cb31b401b9ca8660589d8a765405c6d6f48fd392ac5360b0a\", \"ovk\": \"e73f5383fdeacbb282db951afba01e607916c8106b316c55544fac84b2efbdc4\" } 3. Call api: wallet/getakfromask to generate the ak from ask Method: Post Parameters: { \"value\" : \"23d11537676610c287ffcd1bc33d650df37fc90d13bb65356fbc9045cfb91705\" } Return: { \"value\": \"72b041a8006a02a995c24f5b8531a62008c8c54a1979622dc4ea6f54a506732d\" } 4. Call api: wallet/getnkfromnsk to generate the nk from nsk Method: Post Parameters: { \"value\" : \"da6542f57f6f730cb31b401b9ca8660589d8a765405c6d6f48fd392ac5360b0a\" } Return: { \"value\": \"2d817ea2e005e174d9291d0bd0605e11cb79e3f5855780521bc300d0636a58df\" } 5. Call api: wallet/getincomingviewingkey to generate the incoming viewing key Method: Post Parameters: { \"ak\" : \"72b041a8006a02a995c24f5b8531a62008c8c54a1979622dc4ea6f54a506732d\" , \"nk\" : \"da6542f57f6f730cb31b401b9ca8660589d8a765405c6d6f48fd392ac5360b0a\" } Return: { \"ivk\": \"6896b46a8355ae75896900ac617293d98e1b48fd885ed484a7cbddd566762705\" } 6. Call api: wallet/getdiversifier to generate the diversifier Method: Post Parameters: null Return: {\"d\": \"dd6b441bd5dcb9c25ec41f\"} 7. Call api: wallet/getzenpaymentaddress to generate shielded payment address Method: Post Parameters: { \"ivk\" : \"6896b46a8355ae75896900ac617293d98e1b48fd885ed484a7cbddd566762705\" , \"d\" : \"dd6b441bd5dcb9c25ec41f\" } Return: { \"d\": { \"d\": \"dd6b441bd5dcb9c25ec41f\" }, \"pkD\": \"297198e7d4a024a3b5ef9b68ed15e7463fbf03e6aa590aa551d7bd0c1cfa828d\", \"payment_address\": \"ztron1m445gx74mjuuyhkyru5hrx886jszfga4a7dk3mg4uarrl0cru649jz4928tm6rqul2pg645hqv5\" } 8. Call api: wallet/getnewshieldedaddress to generate all the related keys Method: Post Parameters: null Return: { \"sk\": \"0bfc211444fa877ba546ffb3a64e8b7aa58dd7bdd23a7b22166e9da923add0e6\", \"ask\": \"264c351e5a154555b1ec7822f9bfc0faa5ced9d75b17ed1552699a20b18f7c07\", \"nsk\": \"ebd5bf67f68de464c8a109b389ff4d07912ebe11e8b3d034cf505b35c8d5a907\", \"ovk\": \"a8fa18b039e2cd8aeb04c8cf299b2bbc43cb5ab4dd67eec8884e3563223e5908\", \"ak\": \"0648c0b20fa5eab112d466f75b174d1c142bf35318d2f50d63c6b3b343c8c397\", \"nk\": \"a45852bb5b9e933266d5fab6062baa456b149329f8081817ef868923f87b2f9d\", \"ivk\": \"9c3eacfe786e67c6f3b567cfcf129dcfdc21347ce6f192cc3ca1e994df570c05\", \"d\": \"987adf3b4d8da446327d17\", \"pkD\": \"09f3c4576c4f836b3472a6a5738606866607a6ffcd1c7299e31ec40455b1cd35\", \"payment_address\": \"ztron1npad7w6d3kjyvvnazuyl83zhd38cx6e5w2n22uuxq6rxvpaxllx3cu5euv0vgpz4k8xn2rsga28\" }","title":"Create the shielded address"},{"location":"mechanism-algorithm/shielded-TRC20-contract/#create-shielded-trc-20-contract-parameters-for-mint","text":"1. Call api: wallet/createshieldedcontractparameters to build the parameters Method: Post Parameters: { \"ovk\" : \"1797de3b7f33cafffe3fe18c6b43ec6760add2ad81b10978d1fca5290497ede9\" , \"from_amount\" : \"5000\" , \"shielded_receives\" : { \"note\" : { \"value\" : 50 , \"payment_address\" : \"ztron15js0jkuxczt8caq5hp59rnh6rgf34sek7vqn9u6ljelxv4nuzz2x9qe3ffm2wzz6ck53yxyhxs6\" , \"rcm\" : \"74baec30dfac8ed59968955ff245ae002009005194e5b824c35ab88c52e5170e\" } }, \"shielded_TRC20_contract_address\" : \"41f3392eaa7d38749176e0671dbc6912f8ef956943\" } Note: 1. the shielded TRC-20 contract should be deployed before calling the api; 2. the from_amount is the real value, the value in note is the scaled value by scalingFactor set in the shielded TRC-20 contract, namely from_amount = value * scalingFactor . In this example, the value of scalingFactor is 100; 3. the rcm is a random field element with the length of 32 bytes, which should be generated by GetRcm api. Return: { \"receive_description\" : [ { \"value_commitment\" : \"7e979cc6662a133dabf6cea0b64ef27670a4c30c2fb9dc0ac37444cb80a1f7a8\" , \"note_commitment\" : \"3e950099a8c9b5ec04e9b68218872edac4c030b37bdb39fe806d7ce124ed1808\" , \"epk\" : \"e394dab255529e854dcb33fd9602b3be083ece00f98205155c6b26284effc552\" , \"c_enc\" : \"635b837f9f4908c75bb5f855758ac22ba890f841bc10350820bae483296e9f86d04b92306d2bb0962dc27130325dcf59226232768398bbadda2ac0f8cf2ea7cd96a2c84e69ccd31b373d1d71d87ffc1e8a5fb659a4700e817af75d00eebb6279e5e0681ee32a1baf1a760735f00e5f7641a915876520c7b3b00f257d11c06826b70137dd23a9401eff12af084743cbfbd8ddb203c7493967eee98ddaf32571c1449804bd474a4a9c3a605187537f9244b84a08aae2c49f4e5c514788a8de9292f94b1ce92f8bbb1f6f55eef6afe9116f626977aa15a9b3365edb92db2db3cfd7c350f16f7e3cc650c05e126a73da137a6e0a5982a22545c5c4a7aa4b9e35419db6f3746513d14784eb64a02c0b799ed165fbd6706b6a29d1a7a4148019bb0057a170c9f5d102048b6bd666e8973e6b6443bc220a5b89bcefc24b1d4576214ad5be3d9c75b0edc9e1e6706a967e24e4e64d22909b8fdb7bbcf1068cf2c935b3c6015f31b809ee8d61c9dfe3d79e86c7a705be4d1830534f62ecb719ce69121a9af0c7c34c39cdd5132f4c495e9bd2cc96435c5ee9a975b1a18856a0ec819ca10b3fdbbaf7fc98c063f42d0269433e8627939a9b22878531a6cdc2efcf654041a5a7d16e254f86b9e8b30f089c09e3f4834908338203690a028deee97d4983142b66e9f4e2c7790cc32c06ce43095431798967fa4412734aeaed2ca8d5aeafa6223911b0b07c0421f80fc7da5f2952b2a4354e62f43623598107a5480273d81c518ccd3accc1f435ee8aab875e7ccca59b7d6af9a9046dc75907ab99af0f08e063f771b4e6\" , \"c_out\" : \"4d073fcfc631e5efe83ad17f74aea9a66993c20ea8b5e9f9d8891fa840d92b18a0b54a5e1fa9af4d8e8ed6449c2c84741c3bc22083aa11576086deca3f9e69b7f17b24abc43cd2d73ae9ff6d9fafea94\" , \"zkproof\" : \"b2d9af13e41750291b3dedcedca2ce79f369f472e9022b8d88bf77d6a7c799bcc6c90e2dc37b246595f160c06ee78bc185c77e031233b27f0056bd7b9f44487f1008b6e3805734479ee9deae1093f18afcbe2e28fd62b13ebce897790be3567207f3e92b783e07ea7a5d6a3e2c96990c1b36abe0d36869ca826532927f3562d1c2347efe3fd3d77b8c34cfc4b7d2d364a90c4ec4d09d3ce56e75412effa885717e90347705277e65a3075e60c2ccad90c46d0e31e114231b8ca922143258caae\" }] , \"binding_signature\" : \"3561b47bd2c2ffde7122db43611ae89af2ae8dc104bc563c6587d6df428b7aa86b52d67a19d8b43b5a668634df494acb4c2eb7d8aea1e074812dd6a5b9cf800d\" , \"message_hash\" : \"3da3e050660849f7395d10a66fede6fef8a6aa8768957dd92b3993d856d98635\" , \"trigger_contract_input\" : \"00000000000000000000000000000000000000000000000000000000000013883e950099a8c9b5ec04e9b68218872edac4c030b37bdb39fe806d7ce124ed18087e979cc6662a133dabf6cea0b64ef27670a4c30c2fb9dc0ac37444cb80a1f7a8e394dab255529e854dcb33fd9602b3be083ece00f98205155c6b26284effc552b2d9af13e41750291b3dedcedca2ce79f369f472e9022b8d88bf77d6a7c799bcc6c90e2dc37b246595f160c06ee78bc185c77e031233b27f0056bd7b9f44487f1008b6e3805734479ee9deae1093f18afcbe2e28fd62b13ebce897790be3567207f3e92b783e07ea7a5d6a3e2c96990c1b36abe0d36869ca826532927f3562d1c2347efe3fd3d77b8c34cfc4b7d2d364a90c4ec4d09d3ce56e75412effa885717e90347705277e65a3075e60c2ccad90c46d0e31e114231b8ca922143258caae3561b47bd2c2ffde7122db43611ae89af2ae8dc104bc563c6587d6df428b7aa86b52d67a19d8b43b5a668634df494acb4c2eb7d8aea1e074812dd6a5b9cf800d635b837f9f4908c75bb5f855758ac22ba890f841bc10350820bae483296e9f86d04b92306d2bb0962dc27130325dcf59226232768398bbadda2ac0f8cf2ea7cd96a2c84e69ccd31b373d1d71d87ffc1e8a5fb659a4700e817af75d00eebb6279e5e0681ee32a1baf1a760735f00e5f7641a915876520c7b3b00f257d11c06826b70137dd23a9401eff12af084743cbfbd8ddb203c7493967eee98ddaf32571c1449804bd474a4a9c3a605187537f9244b84a08aae2c49f4e5c514788a8de9292f94b1ce92f8bbb1f6f55eef6afe9116f626977aa15a9b3365edb92db2db3cfd7c350f16f7e3cc650c05e126a73da137a6e0a5982a22545c5c4a7aa4b9e35419db6f3746513d14784eb64a02c0b799ed165fbd6706b6a29d1a7a4148019bb0057a170c9f5d102048b6bd666e8973e6b6443bc220a5b89bcefc24b1d4576214ad5be3d9c75b0edc9e1e6706a967e24e4e64d22909b8fdb7bbcf1068cf2c935b3c6015f31b809ee8d61c9dfe3d79e86c7a705be4d1830534f62ecb719ce69121a9af0c7c34c39cdd5132f4c495e9bd2cc96435c5ee9a975b1a18856a0ec819ca10b3fdbbaf7fc98c063f42d0269433e8627939a9b22878531a6cdc2efcf654041a5a7d16e254f86b9e8b30f089c09e3f4834908338203690a028deee97d4983142b66e9f4e2c7790cc32c06ce43095431798967fa4412734aeaed2ca8d5aeafa6223911b0b07c0421f80fc7da5f2952b2a4354e62f43623598107a5480273d81c518ccd3accc1f435ee8aab875e7ccca59b7d6af9a9046dc75907ab99af0f08e063f771b4e64d073fcfc631e5efe83ad17f74aea9a66993c20ea8b5e9f9d8891fa840d92b18a0b54a5e1fa9af4d8e8ed6449c2c84741c3bc22083aa11576086deca3f9e69b7f17b24abc43cd2d73ae9ff6d9fafea94000000000000000000000000\" , \"parameter_type\" : \"mint\" } The trigger_contract_input can be used as the input data to trigger the mint function of the shielded token contract. Before triggering the shielded TRC-20 contract, the user should trigger the approve method of TRC-20 contract, to authorize the shielded TRC-20 contract to transfer the token from TRC-20 contract to shielded TRC-20 contract. Note: when the shielded TRC-20 contract is deployed, it will bind the corresponding TRC-20 contract. 2. Call api: wallet/createshieldedcontractparameterswithoutask to build the parameters Method: Post Parameters: { \"ovk\" : \"cd361834b3adc06f130de24f7d0c18f92a093cc885d9ce492cc6c02071f7a4f0\" , \"from_amount\" : \"5000\" , \"shielded_receives\" : { \"note\" : { \"value\" : 50 , \"payment_address\" : \"ztron13lvfnt4rau4ad9mmgztd3aftw49e3amz8gm2kvyzrsaw0ugz2grxwkvcfys5e2gkchj7cnnetjz\" , \"rcm\" : \"499e73f2f8aaf05fac41a35b8343bde27f6629cbe66d35da5364a99b94a55a06\" } }, \"shielded_TRC20_contract_address\" : \"41f3392eaa7d38749176e0671dbc6912f8ef956943\" } Note: the from_amount is the real value, the value in note is the scaled value by scalingFactor set in the shielded TRC-20 contract, namely from_amount = value * scalingFactor . In this example, the value of scalingFactor is 100. Return: { \"receive_description\" : [ { \"value_commitment\" : \"7e979cc6662a133dabf6cea0b64ef27670a4c30c2fb9dc0ac37444cb80a1f7a8\" , \"note_commitment\" : \"3e950099a8c9b5ec04e9b68218872edac4c030b37bdb39fe806d7ce124ed1808\" , \"epk\" : \"e394dab255529e854dcb33fd9602b3be083ece00f98205155c6b26284effc552\" , \"c_enc\" : \"635b837f9f4908c75bb5f855758ac22ba890f841bc10350820bae483296e9f86d04b92306d2bb0962dc27130325dcf59226232768398bbadda2ac0f8cf2ea7cd96a2c84e69ccd31b373d1d71d87ffc1e8a5fb659a4700e817af75d00eebb6279e5e0681ee32a1baf1a760735f00e5f7641a915876520c7b3b00f257d11c06826b70137dd23a9401eff12af084743cbfbd8ddb203c7493967eee98ddaf32571c1449804bd474a4a9c3a605187537f9244b84a08aae2c49f4e5c514788a8de9292f94b1ce92f8bbb1f6f55eef6afe9116f626977aa15a9b3365edb92db2db3cfd7c350f16f7e3cc650c05e126a73da137a6e0a5982a22545c5c4a7aa4b9e35419db6f3746513d14784eb64a02c0b799ed165fbd6706b6a29d1a7a4148019bb0057a170c9f5d102048b6bd666e8973e6b6443bc220a5b89bcefc24b1d4576214ad5be3d9c75b0edc9e1e6706a967e24e4e64d22909b8fdb7bbcf1068cf2c935b3c6015f31b809ee8d61c9dfe3d79e86c7a705be4d1830534f62ecb719ce69121a9af0c7c34c39cdd5132f4c495e9bd2cc96435c5ee9a975b1a18856a0ec819ca10b3fdbbaf7fc98c063f42d0269433e8627939a9b22878531a6cdc2efcf654041a5a7d16e254f86b9e8b30f089c09e3f4834908338203690a028deee97d4983142b66e9f4e2c7790cc32c06ce43095431798967fa4412734aeaed2ca8d5aeafa6223911b0b07c0421f80fc7da5f2952b2a4354e62f43623598107a5480273d81c518ccd3accc1f435ee8aab875e7ccca59b7d6af9a9046dc75907ab99af0f08e063f771b4e6\" , \"c_out\" : \"4d073fcfc631e5efe83ad17f74aea9a66993c20ea8b5e9f9d8891fa840d92b18a0b54a5e1fa9af4d8e8ed6449c2c84741c3bc22083aa11576086deca3f9e69b7f17b24abc43cd2d73ae9ff6d9fafea94\" , \"zkproof\" : \"b2d9af13e41750291b3dedcedca2ce79f369f472e9022b8d88bf77d6a7c799bcc6c90e2dc37b246595f160c06ee78bc185c77e031233b27f0056bd7b9f44487f1008b6e3805734479ee9deae1093f18afcbe2e28fd62b13ebce897790be3567207f3e92b783e07ea7a5d6a3e2c96990c1b36abe0d36869ca826532927f3562d1c2347efe3fd3d77b8c34cfc4b7d2d364a90c4ec4d09d3ce56e75412effa885717e90347705277e65a3075e60c2ccad90c46d0e31e114231b8ca922143258caae\" }] , \"binding_signature\" : \"3561b47bd2c2ffde7122db43611ae89af2ae8dc104bc563c6587d6df428b7aa86b52d67a19d8b43b5a668634df494acb4c2eb7d8aea1e074812dd6a5b9cf800d\" , \"message_hash\" : \"3da3e050660849f7395d10a66fede6fef8a6aa8768957dd92b3993d856d98635\" , \"trigger_contract_input\" : \"00000000000000000000000000000000000000000000000000000000000013883e950099a8c9b5ec04e9b68218872edac4c030b37bdb39fe806d7ce124ed18087e979cc6662a133dabf6cea0b64ef27670a4c30c2fb9dc0ac37444cb80a1f7a8e394dab255529e854dcb33fd9602b3be083ece00f98205155c6b26284effc552b2d9af13e41750291b3dedcedca2ce79f369f472e9022b8d88bf77d6a7c799bcc6c90e2dc37b246595f160c06ee78bc185c77e031233b27f0056bd7b9f44487f1008b6e3805734479ee9deae1093f18afcbe2e28fd62b13ebce897790be3567207f3e92b783e07ea7a5d6a3e2c96990c1b36abe0d36869ca826532927f3562d1c2347efe3fd3d77b8c34cfc4b7d2d364a90c4ec4d09d3ce56e75412effa885717e90347705277e65a3075e60c2ccad90c46d0e31e114231b8ca922143258caae3561b47bd2c2ffde7122db43611ae89af2ae8dc104bc563c6587d6df428b7aa86b52d67a19d8b43b5a668634df494acb4c2eb7d8aea1e074812dd6a5b9cf800d635b837f9f4908c75bb5f855758ac22ba890f841bc10350820bae483296e9f86d04b92306d2bb0962dc27130325dcf59226232768398bbadda2ac0f8cf2ea7cd96a2c84e69ccd31b373d1d71d87ffc1e8a5fb659a4700e817af75d00eebb6279e5e0681ee32a1baf1a760735f00e5f7641a915876520c7b3b00f257d11c06826b70137dd23a9401eff12af084743cbfbd8ddb203c7493967eee98ddaf32571c1449804bd474a4a9c3a605187537f9244b84a08aae2c49f4e5c514788a8de9292f94b1ce92f8bbb1f6f55eef6afe9116f626977aa15a9b3365edb92db2db3cfd7c350f16f7e3cc650c05e126a73da137a6e0a5982a22545c5c4a7aa4b9e35419db6f3746513d14784eb64a02c0b799ed165fbd6706b6a29d1a7a4148019bb0057a170c9f5d102048b6bd666e8973e6b6443bc220a5b89bcefc24b1d4576214ad5be3d9c75b0edc9e1e6706a967e24e4e64d22909b8fdb7bbcf1068cf2c935b3c6015f31b809ee8d61c9dfe3d79e86c7a705be4d1830534f62ecb719ce69121a9af0c7c34c39cdd5132f4c495e9bd2cc96435c5ee9a975b1a18856a0ec819ca10b3fdbbaf7fc98c063f42d0269433e8627939a9b22878531a6cdc2efcf654041a5a7d16e254f86b9e8b30f089c09e3f4834908338203690a028deee97d4983142b66e9f4e2c7790cc32c06ce43095431798967fa4412734aeaed2ca8d5aeafa6223911b0b07c0421f80fc7da5f2952b2a4354e62f43623598107a5480273d81c518ccd3accc1f435ee8aab875e7ccca59b7d6af9a9046dc75907ab99af0f08e063f771b4e64d073fcfc631e5efe83ad17f74aea9a66993c20ea8b5e9f9d8891fa840d92b18a0b54a5e1fa9af4d8e8ed6449c2c84741c3bc22083aa11576086deca3f9e69b7f17b24abc43cd2d73ae9ff6d9fafea94000000000000000000000000\" , \"parameter_type\" : \"mint\" } The trigger_contract_input can be used as the input data to trigger the mint function of the shielded TRC-20 contract.","title":"Create shielded TRC-20 contract parameters for mint"},{"location":"mechanism-algorithm/shielded-TRC20-contract/#create-shielded-contract-parameters-for-transfer","text":"1. Call api: wallet/createshieldedcontractparameters to build the parameters Method: Post Parameters: { \"ask\" : \"0f63eabdfe2bbfe08012f6bb2db024e6809c16e8ed055aa41a6095424f192005\" , \"nsk\" : \"cd43d722fd4b6b01f19449ea826c3e935609648520fcc2a95c0026f0fa9ee404\" , \"ovk\" : \"0ff58efd75e083fe4fd759c8701e1c8cb6961c4297a12b2c800bdb7b2bcab889\" , shielded_spe n ds : [ { \"note\" : { \"value\" : 60 , \"payment_address\" : \"ztron1n2xqnggktc8tfhskevgfvnjjkd4tj6n98e28vdwjyu9p4dz5t55nwazay5y3qnv8cp0xs3fgzgv\" , \"rcm\" : \"6760c1f7681752bf9ec18316dfbc2d66ddaae690d77302bdc6d127ff3084af00\" }, \"alpha\" : \"9a22f748597f7dc83edb3b05b3a3def34f47c4cb13d216be7ce03d2ea9da7e0a\" , \"root\" : \"4d46e59b39d39430208317a101bc94ef1ee8276181cce24180612d500593315a\" , \"path\" : \"b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c5381412935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62de1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef7228e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2aa5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6ad2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb5816d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4afee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd7124c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee08500769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c4908eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf30238d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e8415276736aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b159216cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf006edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c1ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be2451d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642fbd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c1b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab651ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de985794730484777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23cba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce7243ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b7b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b680444d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa528138ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce7389613912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a5761cd9b3396e9cedf9afeecac3edbcd192c5f65a4b108cc595dd7f668df0a1fd8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6ca0568ea9736f053947db35d23177d291ebc45d45ed0519d69e12dad90ec25100817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca1557d62777dfad1d910d526787f2ea857575dad337270a07dd99127a6b320a39a72\" , \"pos\" : 20 }, { \"note\" : { \"value\" : 40 , \"payment_address\" : \"ztron135rhyme9sqgfdzszmvj0pzhvnthzdl59fqag362lsyrme3xrcjat9am35a390uk0yudskaqppf5\" , \"rcm\" : \"9ff13d57e9c5a92405da71d6187bb0c11d6260914788a54f38ad62e4a04ffa04\" }, \"alpha\" : \"6865f8058e33b3d3dccb8f0b5c39993760d305a711165724d90998fb68c64b00\" , \"root\" : \"4d46e59b39d39430208317a101bc94ef1ee8276181cce24180612d500593315a\" , \"path\" : \"b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c5381412935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62de1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef7228e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2aa5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6ad2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb5816d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4afee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd7124c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee08500769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c4908eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf30238d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e8415276736aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b159216cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf006edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c1ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be2451d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642fbd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c1b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab651ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de985794730484777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23cba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce7243ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b7b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b680444d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa528138ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce7389613912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a5761cd9b3396e9cedf9afeecac3edbcd192c5f65a4b108cc595dd7f668df0a1fd8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6ca0568ea9736f053947db35d23177d291ebc45d45ed0519d69e12dad90ec25100817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca15542bfe0aed87e6bb53dce44c20046a43418f9c43bc9f5695e55aa7580729cd74e\" , \"pos\" : 21 }, ], shielded_receives : [ { \"note\" : { \"value\" : 30 , \"payment_address\" : \"ztron16455ldgqwz3sfamz0nymymwcvg0v6qsvn8prqtnznu6dmuuud965ar6rqw3yas48dn9w7ejne59\" , \"rcm\" : \"75ba6b5949879ae11229f53728cd6f1eadbb999898e0927d7e9dc4045d806602\" } }, { \"note\" : { \"value\" : 70 , \"payment_address\" : \"ztron1fkcy3738mx4h448cpx76yz5fjsa8c4ra8r4ff8x6s5n4ak5303a5hrgcw66c5syf0y87wqwcrnh\" , \"rcm\" : \"43e419fb8abef141f7b9d5d5a30ac743edebf9eb80cd24a344efe3ca091b6008\" } } ], \"shielded_TRC20_contract_address\" : \"41e6e90fbc958ba09483550882b1f0327e0193250a\" } Return: { \"spend_description\" : [ { \"value_commitment\" : \"2a80edbcc55e7364c689dfb637a5f8a3ef89950061026de070b792a5a9f58f31\" , \"anchor\" : \"4d46e59b39d39430208317a101bc94ef1ee8276181cce24180612d500593315a\" , \"nullifier\" : \"5f5905b2424229d63775792bec06ea8b4897805992547901080e09a9b5146d3c\" , \"rk\" : \"4cc74a640e0040f16144e326892950ee95ab8afccba344e7b6fbca3169cbe4d7\" , \"zkproof\" : \"b69c7b252b36bbb654a26bcf6879afd3d7d4a6fe1e36d48e8c6508f4fea6a864717bd0d2d31d4a728277ff0d8e1bcfcb873d02c7a14a70899888f7eaed769d33f94fb836194dcc5ac16078d235e5b95b34472a782ec29ebe8ad14a222812b41b03e0f8edcd42774ceb8f5cddf312a3815a98c2909126646774017d67fcd0e114365e156614838ef87c222b729fa827ae801ae0a1ac4a48bc5f80fc3df2798c7d3f963ece395b1ff9c12e10ec7059d5855a8b101b266449b6eb3e326d7bf2acd6\" , \"spend_authority_signature\" : \"8538e941dbe6ddb8b2c70a2b5b6fb7729a84eecbfa386451f21adca4ecfb975a46534fa8e9a1d28a573c05f2c2a210d2555ecf51de781bf149bb27c1a3bfeb00\" } , { \"value_commitment\" : \"0ee5abca3e433892f2b62ec352089017482f15b457fdc71ffdd9c731d42f92d3\" , \"anchor\" : \"4d46e59b39d39430208317a101bc94ef1ee8276181cce24180612d500593315a\" , \"nullifier\" : \"29df43aae9e177e6fe15b76a23f0972f3709dc38e6033e35974926b2dad6302d\" , \"rk\" : \"2917aadf5107ac11e6ebbad2a0ac3502a168e0b8c0307827b1ad69029faacd9b\" , \"zkproof\" : \"b98b0e6f6004ffdbed4069f63772a494bdadbe0a7e3f88dc5688821424bbc0f27f906ce0492c9a8c2233aa691c1767cfb0c3bcf21aba659f9290ba5dc04455a4a913192276154052be66bb743a7c842a149d473638020562501d3a752152381e135439839d9b9a4c65f15b256117322c7d202b3af0c03473602399272560bb3b3e9be33a75103aadc858901eab4176a4a4450293fb77366b7a34563d1120b27e7f4a6c2daf762aa43654685d235629729209d6bb402196517ff7f51dfecb995b\" , \"spend_authority_signature\" : \"e11781f5601d3947b6e4c1b43000410449330695b7506a9691db7cbd18da686d492c22abf971187377f4a69ee9453b5bff30f7472e7ec267a0f9612c1dfaaa04\" }] , \"receive_description\" : [ { \"value_commitment\" : \"8e6eb8efb8e7d1a4069daba59f95043d599ac7d0a3fe8ea3a0f415f73e347f6f\" , \"note_commitment\" : \"57ab4c569b2cd69358ecaf26c9487cecc99a1b7607c8bfc7d2a58ed039277332\" , \"epk\" : \"fe72066db13a8e6acc820fdad950efa8f900b8544b645b93160ddc7811aec7e2\" , \"c_enc\" : \"7457fce75f5df5d979c15d8cebaf2c814fd884cc268187f8b52a3a0db5453d0608c2a8d00b095021fc0af1d039bfddc4fddf56e39ca5233b0ec0559099590cc4902b74c4a7508472c793b6ead0ee433d644a6e4f63d1a02dd402e1a74574163bd179d3045bdc3190dddb8e91f475f503d003cc0c26598a6494252540d53d7ef8793a3293f3f98a702cede14eb4f4f78cc958e83c4cb7579f3aefd6ee1ccd6269d61c9e8b3bf46101bf8b02fd4b6b3f3ea479d977da40ba532fa0100e3372e326315934bb21c16fa654969c1432ffdf710cc91c8eb4485c8885f49e2dceb0f14447f530a3a07bcf0a2914399458486766661c458f2beda0c75eac752ebc38f6e490f22640ef2231b2622fc647e5888f81d0c133ac1e76d99de89953d15708dc8a525563aad587a164e00f7d96d79bc02ad28478d8af930c0e08be219d8d0eda099571680801c3fb3f7195be590635279435a7052d70489653bd634566a930d17cef04d50c5c08fa3b4697ba1b6fd81c18431077f6acc6ca27cfe0e519cf3500c53d0f508b14ab1825dd2c3baf408eaa4df9725be2ac2c9b9b171c41597fed62a114ba8898f16e1d213f9668018725493398e9fa60fe58c650482d93bbef83b152956e4242bf7da10cf6b6a034e59e640c873e67c84980327025bbd239a19a02fea1439681af8ce81eb12efdc66bc2dc08b3143f9033fb7332a05523d1d38f765db7938faf9c2ac6089cef77e12622651683f0ea2815e9786977deb4bd2010d3c3be7f0484d1420387fd4fe56ced3b26d073f60940b52048fa939ba4f3e803d148121560ec\" , \"c_out\" : \"cbbdc18a1dbf3a572649437c765c86e521c43a2f0a74a503c489912396ef16d263e957bcfdb2aa0853b046fad0e66fcb7b3d01c766964fe223d4473a4a7fa99c934db7e1c1f3dedefe6804e91ab73f2a\" , \"zkproof\" : \"a2803d68ac307aa85ee726de8b25d933eb4158bdd479785ec1bffe9ac65de848669690d869819b549b384a00021d68ffaa0db8c35a226c32b3c5cfced3fda54be23caf7a2bde2422375f572f913532ea3cd3c1f78ff6e915d26569e33e8c729f0258fdf276e73865a74c9c5b9e1261c23486f9f5d07500f5f343314ecb7d757c28c77e511542329d19b2a4532b58111b84b421e548009a85907c2ff3c27174c6391cf4fefcf33d32e228106ca117b89d72bbbd64b7c3674c8de978d6c3a7f27a\" } , { \"value_commitment\" : \"fff3d45d73a5d80c4a97c8910f0d48dc7f60c685bb1ec6673631e253553f2c42\" , \"note_commitment\" : \"2cf0adee47f49552c47eeef546a040197f4a67250f8ada2c4152d08ff2acba71\" , \"epk\" : \"c12358c0825670e90f65424046e898b7b12ec9d2d26dc6728425204cf00528ca\" , \"c_enc\" : \"013ffaf4d17394aecbe9d117f673188a782467849207eaa22f702361af4977afc1a0379db1b2867df55136efe8279e851657de46bbf3c0436a143780805e48d5c5ed86122b9cc943775dcfa294bbc01b7edffe2da5253655192e2d42326cc89ee863a99ecc13a7355d0fc78fb78ea2d6311fcaf8715b2a3bfa52789f09c58a0afea45c6e6f38a1bbf4f044fea4f211370122363f10bb5d1d82fbc5c20ce394490266ac4825d3a04194367902ddc504959a189749a1e0019e627d34f3cb831d481ef7c31f6a7d9289f1b2df981cf2600f1576d3e853a96a94bba8373bcb2fb07918007022133dd659f6775e34e0f5e9860b1d82e27161ea55dcaf7ea8b13d2f0994d604cb053f83d9655aef4412a6ca597f164b8a8386979787b7408bbddaf2991a705448426c0210f3eb7ddcd99fcd4be97eae9313e15e972912e2fc971b999609ba4dec92b99e1b157ee550cd6bfe44f8e7f03a7198ed826212f7813df58f12dcd906551b78ff7bdb27cf028e81585df14a064ae59857cc3632a27db2f239477d8d2c9a821b9dca1fc7d743f8f86239d4fd966bb2263001e84499f103300a3c168d67006b1baf0e6c13800b9edd713f9336891330ac0479e832648bb6fe3082c26172632f4e35515d3b0e26a0a9a933e138ee056495ed5f7cf6f73a870ac749bb00d141aa09e36382519ec073dfbdb24f8e37ebb1f3a67ac918ce1b899b4b851f2ca06115e9dc723e150fe9df064518fde22bcc5b69d6d22f2369bdf3256f4040569e41b638c9ecfbc553e4cc0bdf640dde9b41b465edf3c127e7c8842afbad657d791a\" , \"c_out\" : \"e8af71a1baa54332692b499bc18848aa8a25daccf21d7b8199eb74570c263a1e99922bb97cb239bf34821d76136141c1fe684b35d7cad4f13fa67397c11acfb2519fd4d2e49c0bf621c047872dfa0e42\" , \"zkproof\" : \"96633ab689349f9a0fad87c5e0d20b0924774fee0648637963ec5dc819a80f4c3468ebbbd34557304f68f67a0630805b8754817bd194d8885c229ccf005bf5724b8210997826aab2afbf741efd8c761fb6762ab52220f3a7a78d674d6eec612611b094cbae26e623bfb0b3aaf1aaf9f35eb66793899c3cbbdee03970072c59093734a4401ced14ecf8bb94d23deb5e71b7dee2fcbab2336769d406f07eb45fc346e3760466a9e30a27412b66fa3328e880091367f4e9804f93b7cda51befe2ee\" }] , \"binding_signature\" : \"5e71d8934832ea4a6aabf26a5db6d547dd322d83e8f66b2a1cce3993eaf18d68750eb4da2f456ccf2bf3773843e94fa2e1663f925e676b131eddbf46cabe0d01\" , \"message_hash\" : \"ef27433c3b85438389429d27d4f2c7255c9e385d2401d74417fde0a072448942\" , \"trigger_contract_input\" : \"00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000004005e71d8934832ea4a6aabf26a5db6d547dd322d83e8f66b2a1cce3993eaf18d68750eb4da2f456ccf2bf3773843e94fa2e1663f925e676b131eddbf46cabe0d01000000000000000000000000000000000000000000000000000000000000066000000000000000000000000000000000000000000000000000000000000000025f5905b2424229d63775792bec06ea8b4897805992547901080e09a9b5146d3c4d46e59b39d39430208317a101bc94ef1ee8276181cce24180612d500593315a2a80edbcc55e7364c689dfb637a5f8a3ef89950061026de070b792a5a9f58f314cc74a640e0040f16144e326892950ee95ab8afccba344e7b6fbca3169cbe4d7b69c7b252b36bbb654a26bcf6879afd3d7d4a6fe1e36d48e8c6508f4fea6a864717bd0d2d31d4a728277ff0d8e1bcfcb873d02c7a14a70899888f7eaed769d33f94fb836194dcc5ac16078d235e5b95b34472a782ec29ebe8ad14a222812b41b03e0f8edcd42774ceb8f5cddf312a3815a98c2909126646774017d67fcd0e114365e156614838ef87c222b729fa827ae801ae0a1ac4a48bc5f80fc3df2798c7d3f963ece395b1ff9c12e10ec7059d5855a8b101b266449b6eb3e326d7bf2acd629df43aae9e177e6fe15b76a23f0972f3709dc38e6033e35974926b2dad6302d4d46e59b39d39430208317a101bc94ef1ee8276181cce24180612d500593315a0ee5abca3e433892f2b62ec352089017482f15b457fdc71ffdd9c731d42f92d32917aadf5107ac11e6ebbad2a0ac3502a168e0b8c0307827b1ad69029faacd9bb98b0e6f6004ffdbed4069f63772a494bdadbe0a7e3f88dc5688821424bbc0f27f906ce0492c9a8c2233aa691c1767cfb0c3bcf21aba659f9290ba5dc04455a4a913192276154052be66bb743a7c842a149d473638020562501d3a752152381e135439839d9b9a4c65f15b256117322c7d202b3af0c03473602399272560bb3b3e9be33a75103aadc858901eab4176a4a4450293fb77366b7a34563d1120b27e7f4a6c2daf762aa43654685d235629729209d6bb402196517ff7f51dfecb995b00000000000000000000000000000000000000000000000000000000000000028538e941dbe6ddb8b2c70a2b5b6fb7729a84eecbfa386451f21adca4ecfb975a46534fa8e9a1d28a573c05f2c2a210d2555ecf51de781bf149bb27c1a3bfeb00e11781f5601d3947b6e4c1b43000410449330695b7506a9691db7cbd18da686d492c22abf971187377f4a69ee9453b5bff30f7472e7ec267a0f9612c1dfaaa04000000000000000000000000000000000000000000000000000000000000000257ab4c569b2cd69358ecaf26c9487cecc99a1b7607c8bfc7d2a58ed0392773328e6eb8efb8e7d1a4069daba59f95043d599ac7d0a3fe8ea3a0f415f73e347f6ffe72066db13a8e6acc820fdad950efa8f900b8544b645b93160ddc7811aec7e2a2803d68ac307aa85ee726de8b25d933eb4158bdd479785ec1bffe9ac65de848669690d869819b549b384a00021d68ffaa0db8c35a226c32b3c5cfced3fda54be23caf7a2bde2422375f572f913532ea3cd3c1f78ff6e915d26569e33e8c729f0258fdf276e73865a74c9c5b9e1261c23486f9f5d07500f5f343314ecb7d757c28c77e511542329d19b2a4532b58111b84b421e548009a85907c2ff3c27174c6391cf4fefcf33d32e228106ca117b89d72bbbd64b7c3674c8de978d6c3a7f27a2cf0adee47f49552c47eeef546a040197f4a67250f8ada2c4152d08ff2acba71fff3d45d73a5d80c4a97c8910f0d48dc7f60c685bb1ec6673631e253553f2c42c12358c0825670e90f65424046e898b7b12ec9d2d26dc6728425204cf00528ca96633ab689349f9a0fad87c5e0d20b0924774fee0648637963ec5dc819a80f4c3468ebbbd34557304f68f67a0630805b8754817bd194d8885c229ccf005bf5724b8210997826aab2afbf741efd8c761fb6762ab52220f3a7a78d674d6eec612611b094cbae26e623bfb0b3aaf1aaf9f35eb66793899c3cbbdee03970072c59093734a4401ced14ecf8bb94d23deb5e71b7dee2fcbab2336769d406f07eb45fc346e3760466a9e30a27412b66fa3328e880091367f4e9804f93b7cda51befe2ee00000000000000000000000000000000000000000000000000000000000000027457fce75f5df5d979c15d8cebaf2c814fd884cc268187f8b52a3a0db5453d0608c2a8d00b095021fc0af1d039bfddc4fddf56e39ca5233b0ec0559099590cc4902b74c4a7508472c793b6ead0ee433d644a6e4f63d1a02dd402e1a74574163bd179d3045bdc3190dddb8e91f475f503d003cc0c26598a6494252540d53d7ef8793a3293f3f98a702cede14eb4f4f78cc958e83c4cb7579f3aefd6ee1ccd6269d61c9e8b3bf46101bf8b02fd4b6b3f3ea479d977da40ba532fa0100e3372e326315934bb21c16fa654969c1432ffdf710cc91c8eb4485c8885f49e2dceb0f14447f530a3a07bcf0a2914399458486766661c458f2beda0c75eac752ebc38f6e490f22640ef2231b2622fc647e5888f81d0c133ac1e76d99de89953d15708dc8a525563aad587a164e00f7d96d79bc02ad28478d8af930c0e08be219d8d0eda099571680801c3fb3f7195be590635279435a7052d70489653bd634566a930d17cef04d50c5c08fa3b4697ba1b6fd81c18431077f6acc6ca27cfe0e519cf3500c53d0f508b14ab1825dd2c3baf408eaa4df9725be2ac2c9b9b171c41597fed62a114ba8898f16e1d213f9668018725493398e9fa60fe58c650482d93bbef83b152956e4242bf7da10cf6b6a034e59e640c873e67c84980327025bbd239a19a02fea1439681af8ce81eb12efdc66bc2dc08b3143f9033fb7332a05523d1d38f765db7938faf9c2ac6089cef77e12622651683f0ea2815e9786977deb4bd2010d3c3be7f0484d1420387fd4fe56ced3b26d073f60940b52048fa939ba4f3e803d148121560eccbbdc18a1dbf3a572649437c765c86e521c43a2f0a74a503c489912396ef16d263e957bcfdb2aa0853b046fad0e66fcb7b3d01c766964fe223d4473a4a7fa99c934db7e1c1f3dedefe6804e91ab73f2a000000000000000000000000013ffaf4d17394aecbe9d117f673188a782467849207eaa22f702361af4977afc1a0379db1b2867df55136efe8279e851657de46bbf3c0436a143780805e48d5c5ed86122b9cc943775dcfa294bbc01b7edffe2da5253655192e2d42326cc89ee863a99ecc13a7355d0fc78fb78ea2d6311fcaf8715b2a3bfa52789f09c58a0afea45c6e6f38a1bbf4f044fea4f211370122363f10bb5d1d82fbc5c20ce394490266ac4825d3a04194367902ddc504959a189749a1e0019e627d34f3cb831d481ef7c31f6a7d9289f1b2df981cf2600f1576d3e853a96a94bba8373bcb2fb07918007022133dd659f6775e34e0f5e9860b1d82e27161ea55dcaf7ea8b13d2f0994d604cb053f83d9655aef4412a6ca597f164b8a8386979787b7408bbddaf2991a705448426c0210f3eb7ddcd99fcd4be97eae9313e15e972912e2fc971b999609ba4dec92b99e1b157ee550cd6bfe44f8e7f03a7198ed826212f7813df58f12dcd906551b78ff7bdb27cf028e81585df14a064ae59857cc3632a27db2f239477d8d2c9a821b9dca1fc7d743f8f86239d4fd966bb2263001e84499f103300a3c168d67006b1baf0e6c13800b9edd713f9336891330ac0479e832648bb6fe3082c26172632f4e35515d3b0e26a0a9a933e138ee056495ed5f7cf6f73a870ac749bb00d141aa09e36382519ec073dfbdb24f8e37ebb1f3a67ac918ce1b899b4b851f2ca06115e9dc723e150fe9df064518fde22bcc5b69d6d22f2369bdf3256f4040569e41b638c9ecfbc553e4cc0bdf640dde9b41b465edf3c127e7c8842afbad657d791ae8af71a1baa54332692b499bc18848aa8a25daccf21d7b8199eb74570c263a1e99922bb97cb239bf34821d76136141c1fe684b35d7cad4f13fa67397c11acfb2519fd4d2e49c0bf621c047872dfa0e42000000000000000000000000\" , \"parameter_type\" : \"transfer\" } The trigger_contract_input can be used as the input data to trigger the transfer function of the shielded TRC-20 contract. Note: 1. the notes in shielded_spends is obtained by scanshieldedtrc20notesbyivk api; 2. the root and path is obtained by triggering the getPath function of the shielded TRC-20 contract. 2. Call api: wallet/createshieldedcontractparameterswithoutask to build the parameters Method: Post Parameters: { \"ak\" : \"8072d9110c9de9d9ade33d5d0f5890a7aa65b0cde42af7816d187297caf2fd64\" , \"nsk\" : \"cd43d722fd4b6b01f19449ea826c3e935609648520fcc2a95c0026f0fa9ee404\" , \"ovk\" : \"0ff58efd75e083fe4fd759c8701e1c8cb6961c4297a12b2c800bdb7b2bcab889\" , shielded_spe n ds : [ { \"note\" : { \"value\" : 60 , \"payment_address\" : \"ztron1nx3cnncmlcl72ppcrz23krpurxphz9g5yj85zvpgm94g46zs8pq8gd7qrcv8xezp9rryzlar4az\" , \"rcm\" : \"4636333870ccc91fb8bfe53ed559f8cf64505672a58d82875694dd38eb3d6404\" }, \"alpha\" : \"d0f0768664f5c807f9e70d05993f029c71da529afaa5c037b44c63d6e13bc907\" , \"root\" : \"c1dda86b7af8ce842e349347b364936baf24ad36be65046e2fd7349640bba873\" , \"path\" : \"b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c5381412935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62de1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef7228e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2aa5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6ad2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb5816d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4afee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd7124c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee08500769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c4908eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf30238d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e8415276736aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b159216cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf006edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c1ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be2451d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642fbd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c1b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab651ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de985794730484777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23cba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce7243ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b7b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b680444d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa528138ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce7389613213099b1bdbe886f3bca27080fe45467bb6a83e77e68348a8e863b0c676a30475761cd9b3396e9cedf9afeecac3edbcd192c5f65a4b108cc595dd7f668df0a1fec35ec8008050551a48d62ca8b2085276d589a8d02ab9cad8b0d6b30b8622d279acf822005ced7f6caaea51d378f0084bea34d1f98f759186ea5a2e67756b6656258501e6cf76599d3a854584c3438a34bb4754f9a84bfe98ad55cfc4bc25d4ed185719284bf14140befea7d9ec174b9dae461f4832db5f7d2e96aa4c0c52a6a\" , \"pos\" : 31 }, { \"note\" : { \"value\" : 40 , \"payment_address\" : \"ztron1x54s8nrzf2g85grp729s4pxx7ta3s38lj0jw57qwnuqx0e2wy8sfdcyldyfs9hazhqrs6jjzxhw\" , \"rcm\" : \"74908b43975847d5df6c0b40c4d5b1dbe732cb720e6b5bd5a55e7cd10e2a3a05\" }, \"alpha\" : \"ff3bd6babd3e28da098c67c67f26f2e613a5d1cec966b2f25ca4a943218ee805\" , \"root\" : \"c1dda86b7af8ce842e349347b364936baf24ad36be65046e2fd7349640bba873\" , \"path\" : \"b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c5381412935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62de1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef7228e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2aa5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6ad2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb5816d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4afee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd7124c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee08500769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c4908eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf30238d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e8415276736aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b159216cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf006edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c1ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be2451d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642fbd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c1b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab651ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de985794730484777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23cba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce7243ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b7b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b680444d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa528138ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce7389613cccdc97df3913f95c42665c3db7e806af0f5e84d5b6caac5754f6100df1a0c18e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b49d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6cffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e34817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca1550100000000000000000000000000000000000000000000000000000000000000\" , \"pos\" : 32 }, ], shielded_receives : [ { \"note\" : { \"value\" : 30 , \"payment_address\" : \"ztron127acwjxf499f43t8mk42ch5jyru68fsw7jun9hfu7pv87we3dnfrwtml8np80gsegksnjfz87vd\" , \"rcm\" : \"4172682e3f0398abb7f204220279948b3dd930bc901b1c9223a5cac51b1a7703\" } }, { \"note\" : { \"value\" : 70 , \"payment_address\" : \"ztron1f6dfsq8mxj8pd2f2dvnle4x6ahfrqr4ll2ezp2ez90jmcjtksr2r6s8095ljf7a3mfpn2uklc9r\" , \"rcm\" : \"7b4d06b6e0b5ea0172063f7f7e495bb840ff279787bd49adffdcfde65d68700e\" } } ], \"shielded_TRC20_contract_address\" : \"41e6e90fbc958ba09483550882b1f0327e0193250a\" } Return: { \"spend_description\" : [ { \"value_commitment\" : \"68b6f57d972dfeef1784017d0a669b45a367091671c098ea99fc9654d7bdc0e7\" , \"anchor\" : \"c1dda86b7af8ce842e349347b364936baf24ad36be65046e2fd7349640bba873\" , \"nullifier\" : \"882842cb630c1a0c77b1af4e0c23c2584b83875d928673d1d57d7322ea3ad825\" , \"rk\" : \"8574c873fbf582b4c491f901127c7922f6819fb20a38bac5f3d44bef01bdc5d2\" , \"zkproof\" : \"a0bfa6e0c26cbd0d23dadaa1125df75cd6f0987e5e876e704193417cf9870a9f1f34be6a91a06694ca6709a0ad6e7976b8893a9df057b43fac950c5fb7331a14303e3841c542e5455b3dd794ac7f97347928427d4b02405a9ae3d55ae560b7fe0aa20b51dbbc720479a50c38f4dae5ce2d2c1a1c68d32fae0c6ac23bae1069d5789c2c519614f85d75196286930b55148812d6c23936ddd40e1b771452664d2d067deb4f58600a7079025ffeb9bf409a38500e93c72ae1d09130f85e2dffc353\" } , { \"value_commitment\" : \"219ed48bc4bfe14cc2953ab5027528353e177e2263479122ea97c609ce187986\" , \"anchor\" : \"c1dda86b7af8ce842e349347b364936baf24ad36be65046e2fd7349640bba873\" , \"nullifier\" : \"79e938e0951d4d6cf6acd679fc6bb59147a6abc2f9e2828185328e93a83ab2f1\" , \"rk\" : \"99c0c1fbe3ad8a6e27d712632064fdeeb10952624c60a0ddcba0eb233bbf4e8b\" , \"zkproof\" : \"b536d0f442f6e0517930a9ccdb551c9e551a148c41fcf1e4748d1330d6c3e6f952012a5c3c6b06cfb51a92da5ebec4bcb11ed37cf36b60c9997baa026733ab6711894b5d17ca1f96667d68ed97f4cf75e5a9d96484d9f2453f869400e14dc54f0bf54f9abec8baf45baec320a06cc09780f4c5a2058f870993ff8a31f6d19b03f772a7d4d29ae837c7c2c3d6b300c4d485390d2e7bf09f971ed82e3676daf6fb655b2e47e040de762fe26317815e30b1f9638af979803e37abc3a95742c6faaa\" }] , \"receive_description\" : [ { \"value_commitment\" : \"00d705dd92237759b4b339d1c9b4da7d2a8baa132daf6feb3091ef746afff0b0\" , \"note_commitment\" : \"bcf2634c9ab870604831ae151b7959fe72c588488271640cf7772ee040f78820\" , \"epk\" : \"e6129572f05703a81cd55a7bc3e86d6b2c76f8f4bd60b02162d0b76d8dce21c8\" , \"c_enc\" : \"4d80bb52b7a1518bef81bbdb7584cefbd3cef9f9bc98fa75194f2b08d0b6c18253ca2e9ddea6330d96562db0bf9cebb6a8d1198599d420eba2ed5868956719ea835d1d5e58433fbbb7b72ae51f99f90440c67c03dc89101416a331b436f8ac560ddb772b9a7a8c16a0300cff97364d59046192b744592bc5f45c584385b24bfd4bdf159230893983516d82ee2a20d3da62f3ff979baf2ba010a6e7766ae30b7c56e4c78a746630d579833e56a07653716737fbaf19346d527f38938b75e0208355289185343364b0867f48ddca45e121b64bae64b32f002037c94050e07f96e86a4765ddf589b5e360b24ccf23b398275c575759cd3e1dd784c654dd8948efefafb1f9ae1c4d41efe803588bccb1b4bfbab6bf1a526f935e7123190ae8031f5c37ecf2820b812250ebe7b79f085abd2af5c2d59caf79355a6143b70f2ea0a66ae99e7392e2f64b9a2d7d3f79f278cbaeb897de832db2e2ea23cfe7906b0c61d5c99a75e076fdb000b57a78989edfa9730c6f485dc44c6d52fca1c884428514abf1cc4cde54c2d456b44c563b815969c7c8d4eb28cce53715d20bfe92fabcbcc30bd5ed8dac1f2b6acc98621311b21d3d7c979498f97ef318dbb335d87b5d0db43ee15323e90df8a59d6675495ed928d62db31e41cc4426e110f9994c21d2fb549bc94eb6d55ed4877b9f56ad624d80f81254dc3f90e14769f4e0bbada33dbfa7d33fd8675f7d9c30cd4f40fad2ef1e24c083889de3a71629f24601ead906a93b5a9dd2296d0577f8db42b8395134212f26fc84902693098c214704db5608c7509c8b23b4\" , \"c_out\" : \"f3755f2d22d0881b0021adf5621708025e296c8591e0e076dba416a1437a9fc0a3312c09a35a8912a8c2115165bb67fe0565064140960ab44d836d307a93013ae28e390483fe5d59baca900c7bc606cf\" , \"zkproof\" : \"8e4072af7180ab0cb95350026623a1e89850039ab8de7342a9661d41a7103f645292521cec3c199a5e3c3a4dedee33d5b37c4bd18d9f2c3ec1b28297e80ad640b77140685dd36243b89f1d6a23d115f6f52804685cd445a64661c8c2d0c11aaf11a8cf790c47ff796d27231597a981cff8fa58a33d0a1d163754ebd7814765f779920867295fee03d5882e7da940c60eb9688c22640a079bad4f33fe5a02d459e60844bb77d67c0c74e9c6f8b0be2023953cee099ce175e4fb64ef5de947a5e4\" } , { \"value_commitment\" : \"19ac352ba8d7f5167ef43a5b9c225056db2c44fb19f7fe8c63e0d2b956771656\" , \"note_commitment\" : \"e40b9da38887963c8cd1e163b4b7d4b999502c32e1204b791242633aebcdbb6d\" , \"epk\" : \"b1675f0b5331371466ff30d621991f0a30c9bc4d34c322be44619a0acf932905\" , \"c_enc\" : \"b69f20ae969de55319d2b7617bf7351a4683098af1e7b16fa64d44ff758471f33b0fb4f8896b2c32c68c410672fa81356e535f8d04338bdb69d69655eeee11e10727f319e1df6702ba7c90b2c5e4f38f809eddd2084fd30fd5684d9c004c679f4e574e17334d731550a76a842960bcdd811c67362bed7cdf698284a549e240da1727814af5137a7a384b5f24bd61a4b9cc1c4f6abe84524184a3ee257e002f7a9f6ccd3f6f0d490c5f77e3c26896f7bce84bf224429a45e156a4c62de64f739f9555147ed3fb7704206e7e45faf0f385229c7ed4e57253f8b5c4e518a26b90c069708c356e490abe97c1f78d361e7166fed9c67bad5aa820cadbefea2095b2a1adddb13b0249dae1c5c48ff0aad8eec23493786dead33d68e107bc13c3448129a58556ef5a21873ee151035117871652b1e151308d358f0df9c1c3188af4f15431b6fd262f4e0cbe5401c20b4633617fcf92a54d94991bd98e21f9cdcbcb6899341a9924d6eb11168daa6b19c2424993d4308bf40158564000aa79d106d09ebac3ad0a0e1729d20cff6226f3e632d9fd1c4f541b2f2ebaf5110ea5170498ce690e9115bca423ba2f5498b365db9dab936d1896ad5bc5b0d8c86b37f36debd5aca0e1194c48d51cff2253e32f069e8b969d7ba3c9391715c6b3118e2e31621321302b93edfdba0639542f3144eb6d90cdd86d354959df6398cf5fa497cf0fcbb19395d9bc1243da98afbc9087ec2997df1e84e97b4e18b1691e2d942a67214202e3d3880ce4eace0903cdd07f53b6f1ea23e277d867e73fbb10560a7d1df10402bd50d42c\" , \"c_out\" : \"1e5333e35985d343697dcce92703c2536a861eb49722e1c83a112cf004006e9cdb63f96132393c7616e5f947d9d07cd6a22a664643c117f52791724efde660605f134aa86d3374b4804f9bb9ce64fc99\" , \"zkproof\" : \"a6b41694f8fa378886ef77d5bd07de56de55b9ad7c8438d05380dd5fa1ce2e7d0ae0528f82c23a6d92e6150e426ef3958556757ee973c5e79ae7ce074b1b25c74ccdde0b2b2dfd1b42215401f700c06b84785572eb4e585971cc4b451420bfbc17db489dbc996e9c5533b7da9e4a88d53388b411dd4a4e8801707aa01508054faa91a2c422a4cbad61ababfc3b1893c38e2ec19d19a1e5b47d2257ca9e347283afd5e53a2f8989d8db6a76b7942a737601ed3082e2e56290a9cd694a399f8551\" }] , \"binding_signature\" : \"c7f303709c57e49264fd5ae5922bf977ef2a57ccc84d746effc5c6937eecf36e05b09faf95e5f869aeaf1aa87b24570eb723a4d8c77edea32c31b2909c84eb04\" , \"message_hash\" : \"7fb99e66df052f430d50e80a3f197c319a4e35184ed48a433d6219e025741337\" , \"parameter_type\" : \"transfer\" } Because of lacking the ask , the api can not generate the spend_authority_signature and trigger_contract_input . To generate the trigger_contract_input , the user first needs to generate the spend spend_authority_signature by itself or by calling the api: wallet/createspendauthsig Method: Post Parameters: { \"ask\": \"0f63eabdfe2bbfe08012f6bb2db024e6809c16e8ed055aa41a6095424f192005\", \"tx_hash\": \"7fb99e66df052f430d50e80a3f197c319a4e35184ed48a433d6219e025741337\", \"alpha\": \"d0f0768664f5c807f9e70d05993f029c71da529afaa5c037b44c63d6e13bc907\" } Note: alpha is a random field element with the length of 32 bytes, which should be generated by GetRcm api. Return: { \"value\": \"9e889cea041002ed7a9a80d093f2e9b5bdec24da1dda11cc7c5d1bfb6c7046b3c4ed0a2cb6cbbead42336d1235d1ec671a832c2ada9ee1ad3048129b7c99e309\" } The returned value is the spend_authority_signature . If the transfer has two inputs, the users needs to generate the two corresponding spend_authority_signatures . Note: in order to guarantee the security, the user should be better to generate the spend_authority_signature by itself instead of calling the api. Then the user need to call the api to generate the triggering contract input: wallet/gettriggerinputforshieldedtrc20contract Method: Post Parameters: { \"shielded_TRC20_Parameters\": { \"spend_description\": [ { \"value_commitment\": \"68b6f57d972dfeef1784017d0a669b45a367091671c098ea99fc9654d7bdc0e7\", \"anchor\": \"c1dda86b7af8ce842e349347b364936baf24ad36be65046e2fd7349640bba873\", \"nullifier\": \"882842cb630c1a0c77b1af4e0c23c2584b83875d928673d1d57d7322ea3ad825\", \"rk\": \"8574c873fbf582b4c491f901127c7922f6819fb20a38bac5f3d44bef01bdc5d2\", \"zkproof\": \"a0bfa6e0c26cbd0d23dadaa1125df75cd6f0987e5e876e704193417cf9870a9f1f34be6a91a06694ca6709a0ad6e7976b8893a9df057b43fac950c5fb7331a14303e3841c542e5455b3dd794ac7f97347928427d4b02405a9ae3d55ae560b7fe0aa20b51dbbc720479a50c38f4dae5ce2d2c1a1c68d32fae0c6ac23bae1069d5789c2c519614f85d75196286930b55148812d6c23936ddd40e1b771452664d2d067deb4f58600a7079025ffeb9bf409a38500e93c72ae1d09130f85e2dffc353\" }, { \"value_commitment\": \"219ed48bc4bfe14cc2953ab5027528353e177e2263479122ea97c609ce187986\", \"anchor\": \"c1dda86b7af8ce842e349347b364936baf24ad36be65046e2fd7349640bba873\", \"nullifier\": \"79e938e0951d4d6cf6acd679fc6bb59147a6abc2f9e2828185328e93a83ab2f1\", \"rk\": \"99c0c1fbe3ad8a6e27d712632064fdeeb10952624c60a0ddcba0eb233bbf4e8b\", \"zkproof\": \"b536d0f442f6e0517930a9ccdb551c9e551a148c41fcf1e4748d1330d6c3e6f952012a5c3c6b06cfb51a92da5ebec4bcb11ed37cf36b60c9997baa026733ab6711894b5d17ca1f96667d68ed97f4cf75e5a9d96484d9f2453f869400e14dc54f0bf54f9abec8baf45baec320a06cc09780f4c5a2058f870993ff8a31f6d19b03f772a7d4d29ae837c7c2c3d6b300c4d485390d2e7bf09f971ed82e3676daf6fb655b2e47e040de762fe26317815e30b1f9638af979803e37abc3a95742c6faaa\" }], \"receive_description\": [ { \"value_commitment\": \"00d705dd92237759b4b339d1c9b4da7d2a8baa132daf6feb3091ef746afff0b0\", \"note_commitment\": \"bcf2634c9ab870604831ae151b7959fe72c588488271640cf7772ee040f78820\", \"epk\": \"e6129572f05703a81cd55a7bc3e86d6b2c76f8f4bd60b02162d0b76d8dce21c8\", \"c_enc\": \"4d80bb52b7a1518bef81bbdb7584cefbd3cef9f9bc98fa75194f2b08d0b6c18253ca2e9ddea6330d96562db0bf9cebb6a8d1198599d420eba2ed5868956719ea835d1d5e58433fbbb7b72ae51f99f90440c67c03dc89101416a331b436f8ac560ddb772b9a7a8c16a0300cff97364d59046192b744592bc5f45c584385b24bfd4bdf159230893983516d82ee2a20d3da62f3ff979baf2ba010a6e7766ae30b7c56e4c78a746630d579833e56a07653716737fbaf19346d527f38938b75e0208355289185343364b0867f48ddca45e121b64bae64b32f002037c94050e07f96e86a4765ddf589b5e360b24ccf23b398275c575759cd3e1dd784c654dd8948efefafb1f9ae1c4d41efe803588bccb1b4bfbab6bf1a526f935e7123190ae8031f5c37ecf2820b812250ebe7b79f085abd2af5c2d59caf79355a6143b70f2ea0a66ae99e7392e2f64b9a2d7d3f79f278cbaeb897de832db2e2ea23cfe7906b0c61d5c99a75e076fdb000b57a78989edfa9730c6f485dc44c6d52fca1c884428514abf1cc4cde54c2d456b44c563b815969c7c8d4eb28cce53715d20bfe92fabcbcc30bd5ed8dac1f2b6acc98621311b21d3d7c979498f97ef318dbb335d87b5d0db43ee15323e90df8a59d6675495ed928d62db31e41cc4426e110f9994c21d2fb549bc94eb6d55ed4877b9f56ad624d80f81254dc3f90e14769f4e0bbada33dbfa7d33fd8675f7d9c30cd4f40fad2ef1e24c083889de3a71629f24601ead906a93b5a9dd2296d0577f8db42b8395134212f26fc84902693098c214704db5608c7509c8b23b4\", \"c_out\": \"f3755f2d22d0881b0021adf5621708025e296c8591e0e076dba416a1437a9fc0a3312c09a35a8912a8c2115165bb67fe0565064140960ab44d836d307a93013ae28e390483fe5d59baca900c7bc606cf\", \"zkproof\": \"8e4072af7180ab0cb95350026623a1e89850039ab8de7342a9661d41a7103f645292521cec3c199a5e3c3a4dedee33d5b37c4bd18d9f2c3ec1b28297e80ad640b77140685dd36243b89f1d6a23d115f6f52804685cd445a64661c8c2d0c11aaf11a8cf790c47ff796d27231597a981cff8fa58a33d0a1d163754ebd7814765f779920867295fee03d5882e7da940c60eb9688c22640a079bad4f33fe5a02d459e60844bb77d67c0c74e9c6f8b0be2023953cee099ce175e4fb64ef5de947a5e4\" }, { \"value_commitment\": \"19ac352ba8d7f5167ef43a5b9c225056db2c44fb19f7fe8c63e0d2b956771656\", \"note_commitment\": \"e40b9da38887963c8cd1e163b4b7d4b999502c32e1204b791242633aebcdbb6d\", \"epk\": \"b1675f0b5331371466ff30d621991f0a30c9bc4d34c322be44619a0acf932905\", \"c_enc\": \"b69f20ae969de55319d2b7617bf7351a4683098af1e7b16fa64d44ff758471f33b0fb4f8896b2c32c68c410672fa81356e535f8d04338bdb69d69655eeee11e10727f319e1df6702ba7c90b2c5e4f38f809eddd2084fd30fd5684d9c004c679f4e574e17334d731550a76a842960bcdd811c67362bed7cdf698284a549e240da1727814af5137a7a384b5f24bd61a4b9cc1c4f6abe84524184a3ee257e002f7a9f6ccd3f6f0d490c5f77e3c26896f7bce84bf224429a45e156a4c62de64f739f9555147ed3fb7704206e7e45faf0f385229c7ed4e57253f8b5c4e518a26b90c069708c356e490abe97c1f78d361e7166fed9c67bad5aa820cadbefea2095b2a1adddb13b0249dae1c5c48ff0aad8eec23493786dead33d68e107bc13c3448129a58556ef5a21873ee151035117871652b1e151308d358f0df9c1c3188af4f15431b6fd262f4e0cbe5401c20b4633617fcf92a54d94991bd98e21f9cdcbcb6899341a9924d6eb11168daa6b19c2424993d4308bf40158564000aa79d106d09ebac3ad0a0e1729d20cff6226f3e632d9fd1c4f541b2f2ebaf5110ea5170498ce690e9115bca423ba2f5498b365db9dab936d1896ad5bc5b0d8c86b37f36debd5aca0e1194c48d51cff2253e32f069e8b969d7ba3c9391715c6b3118e2e31621321302b93edfdba0639542f3144eb6d90cdd86d354959df6398cf5fa497cf0fcbb19395d9bc1243da98afbc9087ec2997df1e84e97b4e18b1691e2d942a67214202e3d3880ce4eace0903cdd07f53b6f1ea23e277d867e73fbb10560a7d1df10402bd50d42c\", \"c_out\": \"1e5333e35985d343697dcce92703c2536a861eb49722e1c83a112cf004006e9cdb63f96132393c7616e5f947d9d07cd6a22a664643c117f52791724efde660605f134aa86d3374b4804f9bb9ce64fc99\", \"zkproof\": \"a6b41694f8fa378886ef77d5bd07de56de55b9ad7c8438d05380dd5fa1ce2e7d0ae0528f82c23a6d92e6150e426ef3958556757ee973c5e79ae7ce074b1b25c74ccdde0b2b2dfd1b42215401f700c06b84785572eb4e585971cc4b451420bfbc17db489dbc996e9c5533b7da9e4a88d53388b411dd4a4e8801707aa01508054faa91a2c422a4cbad61ababfc3b1893c38e2ec19d19a1e5b47d2257ca9e347283afd5e53a2f8989d8db6a76b7942a737601ed3082e2e56290a9cd694a399f8551\" }], \"binding_signature\": \"c7f303709c57e49264fd5ae5922bf977ef2a57ccc84d746effc5c6937eecf36e05b09faf95e5f869aeaf1aa87b24570eb723a4d8c77edea32c31b2909c84eb04\", \"message_hash\": \"7fb99e66df052f430d50e80a3f197c319a4e35184ed48a433d6219e025741337\", \"parameter_type\": \"transfer\" }, \"spend_authority_signature\": [ { \"value\": \"9e889cea041002ed7a9a80d093f2e9b5bdec24da1dda11cc7c5d1bfb6c7046b3c4ed0a2cb6cbbead42336d1235d1ec671a832c2ada9ee1ad3048129b7c99e309\" }, { \"value\": \"24409c69b9d03a7c714f7c8bac39a3310054eef9e99dcbf256c8e39ef267e31884f2f2465ca7cd7aaba006e7f0a8635787de61eef1b96ce559764d300f637a08\" } ] } Return: { \"value\": \"00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000003600000000000000000000000000000000000000000000000000000000000000400c7f303709c57e49264fd5ae5922bf977ef2a57ccc84d746effc5c6937eecf36e05b09faf95e5f869aeaf1aa87b24570eb723a4d8c77edea32c31b2909c84eb0400000000000000000000000000000000000000000000000000000000000006600000000000000000000000000000000000000000000000000000000000000002882842cb630c1a0c77b1af4e0c23c2584b83875d928673d1d57d7322ea3ad825c1dda86b7af8ce842e349347b364936baf24ad36be65046e2fd7349640bba87368b6f57d972dfeef1784017d0a669b45a367091671c098ea99fc9654d7bdc0e78574c873fbf582b4c491f901127c7922f6819fb20a38bac5f3d44bef01bdc5d2a0bfa6e0c26cbd0d23dadaa1125df75cd6f0987e5e876e704193417cf9870a9f1f34be6a91a06694ca6709a0ad6e7976b8893a9df057b43fac950c5fb7331a14303e3841c542e5455b3dd794ac7f97347928427d4b02405a9ae3d55ae560b7fe0aa20b51dbbc720479a50c38f4dae5ce2d2c1a1c68d32fae0c6ac23bae1069d5789c2c519614f85d75196286930b55148812d6c23936ddd40e1b771452664d2d067deb4f58600a7079025ffeb9bf409a38500e93c72ae1d09130f85e2dffc35379e938e0951d4d6cf6acd679fc6bb59147a6abc2f9e2828185328e93a83ab2f1c1dda86b7af8ce842e349347b364936baf24ad36be65046e2fd7349640bba873219ed48bc4bfe14cc2953ab5027528353e177e2263479122ea97c609ce18798699c0c1fbe3ad8a6e27d712632064fdeeb10952624c60a0ddcba0eb233bbf4e8bb536d0f442f6e0517930a9ccdb551c9e551a148c41fcf1e4748d1330d6c3e6f952012a5c3c6b06cfb51a92da5ebec4bcb11ed37cf36b60c9997baa026733ab6711894b5d17ca1f96667d68ed97f4cf75e5a9d96484d9f2453f869400e14dc54f0bf54f9abec8baf45baec320a06cc09780f4c5a2058f870993ff8a31f6d19b03f772a7d4d29ae837c7c2c3d6b300c4d485390d2e7bf09f971ed82e3676daf6fb655b2e47e040de762fe26317815e30b1f9638af979803e37abc3a95742c6faaa00000000000000000000000000000000000000000000000000000000000000029e889cea041002ed7a9a80d093f2e9b5bdec24da1dda11cc7c5d1bfb6c7046b3c4ed0a2cb6cbbead42336d1235d1ec671a832c2ada9ee1ad3048129b7c99e30924409c69b9d03a7c714f7c8bac39a3310054eef9e99dcbf256c8e39ef267e31884f2f2465ca7cd7aaba006e7f0a8635787de61eef1b96ce559764d300f637a080000000000000000000000000000000000000000000000000000000000000002bcf2634c9ab870604831ae151b7959fe72c588488271640cf7772ee040f7882000d705dd92237759b4b339d1c9b4da7d2a8baa132daf6feb3091ef746afff0b0e6129572f05703a81cd55a7bc3e86d6b2c76f8f4bd60b02162d0b76d8dce21c88e4072af7180ab0cb95350026623a1e89850039ab8de7342a9661d41a7103f645292521cec3c199a5e3c3a4dedee33d5b37c4bd18d9f2c3ec1b28297e80ad640b77140685dd36243b89f1d6a23d115f6f52804685cd445a64661c8c2d0c11aaf11a8cf790c47ff796d27231597a981cff8fa58a33d0a1d163754ebd7814765f779920867295fee03d5882e7da940c60eb9688c22640a079bad4f33fe5a02d459e60844bb77d67c0c74e9c6f8b0be2023953cee099ce175e4fb64ef5de947a5e4e40b9da38887963c8cd1e163b4b7d4b999502c32e1204b791242633aebcdbb6d19ac352ba8d7f5167ef43a5b9c225056db2c44fb19f7fe8c63e0d2b956771656b1675f0b5331371466ff30d621991f0a30c9bc4d34c322be44619a0acf932905a6b41694f8fa378886ef77d5bd07de56de55b9ad7c8438d05380dd5fa1ce2e7d0ae0528f82c23a6d92e6150e426ef3958556757ee973c5e79ae7ce074b1b25c74ccdde0b2b2dfd1b42215401f700c06b84785572eb4e585971cc4b451420bfbc17db489dbc996e9c5533b7da9e4a88d53388b411dd4a4e8801707aa01508054faa91a2c422a4cbad61ababfc3b1893c38e2ec19d19a1e5b47d2257ca9e347283afd5e53a2f8989d8db6a76b7942a737601ed3082e2e56290a9cd694a399f855100000000000000000000000000000000000000000000000000000000000000024d80bb52b7a1518bef81bbdb7584cefbd3cef9f9bc98fa75194f2b08d0b6c18253ca2e9ddea6330d96562db0bf9cebb6a8d1198599d420eba2ed5868956719ea835d1d5e58433fbbb7b72ae51f99f90440c67c03dc89101416a331b436f8ac560ddb772b9a7a8c16a0300cff97364d59046192b744592bc5f45c584385b24bfd4bdf159230893983516d82ee2a20d3da62f3ff979baf2ba010a6e7766ae30b7c56e4c78a746630d579833e56a07653716737fbaf19346d527f38938b75e0208355289185343364b0867f48ddca45e121b64bae64b32f002037c94050e07f96e86a4765ddf589b5e360b24ccf23b398275c575759cd3e1dd784c654dd8948efefafb1f9ae1c4d41efe803588bccb1b4bfbab6bf1a526f935e7123190ae8031f5c37ecf2820b812250ebe7b79f085abd2af5c2d59caf79355a6143b70f2ea0a66ae99e7392e2f64b9a2d7d3f79f278cbaeb897de832db2e2ea23cfe7906b0c61d5c99a75e076fdb000b57a78989edfa9730c6f485dc44c6d52fca1c884428514abf1cc4cde54c2d456b44c563b815969c7c8d4eb28cce53715d20bfe92fabcbcc30bd5ed8dac1f2b6acc98621311b21d3d7c979498f97ef318dbb335d87b5d0db43ee15323e90df8a59d6675495ed928d62db31e41cc4426e110f9994c21d2fb549bc94eb6d55ed4877b9f56ad624d80f81254dc3f90e14769f4e0bbada33dbfa7d33fd8675f7d9c30cd4f40fad2ef1e24c083889de3a71629f24601ead906a93b5a9dd2296d0577f8db42b8395134212f26fc84902693098c214704db5608c7509c8b23b4f3755f2d22d0881b0021adf5621708025e296c8591e0e076dba416a1437a9fc0a3312c09a35a8912a8c2115165bb67fe0565064140960ab44d836d307a93013ae28e390483fe5d59baca900c7bc606cf000000000000000000000000b69f20ae969de55319d2b7617bf7351a4683098af1e7b16fa64d44ff758471f33b0fb4f8896b2c32c68c410672fa81356e535f8d04338bdb69d69655eeee11e10727f319e1df6702ba7c90b2c5e4f38f809eddd2084fd30fd5684d9c004c679f4e574e17334d731550a76a842960bcdd811c67362bed7cdf698284a549e240da1727814af5137a7a384b5f24bd61a4b9cc1c4f6abe84524184a3ee257e002f7a9f6ccd3f6f0d490c5f77e3c26896f7bce84bf224429a45e156a4c62de64f739f9555147ed3fb7704206e7e45faf0f385229c7ed4e57253f8b5c4e518a26b90c069708c356e490abe97c1f78d361e7166fed9c67bad5aa820cadbefea2095b2a1adddb13b0249dae1c5c48ff0aad8eec23493786dead33d68e107bc13c3448129a58556ef5a21873ee151035117871652b1e151308d358f0df9c1c3188af4f15431b6fd262f4e0cbe5401c20b4633617fcf92a54d94991bd98e21f9cdcbcb6899341a9924d6eb11168daa6b19c2424993d4308bf40158564000aa79d106d09ebac3ad0a0e1729d20cff6226f3e632d9fd1c4f541b2f2ebaf5110ea5170498ce690e9115bca423ba2f5498b365db9dab936d1896ad5bc5b0d8c86b37f36debd5aca0e1194c48d51cff2253e32f069e8b969d7ba3c9391715c6b3118e2e31621321302b93edfdba0639542f3144eb6d90cdd86d354959df6398cf5fa497cf0fcbb19395d9bc1243da98afbc9087ec2997df1e84e97b4e18b1691e2d942a67214202e3d3880ce4eace0903cdd07f53b6f1ea23e277d867e73fbb10560a7d1df10402bd50d42c1e5333e35985d343697dcce92703c2536a861eb49722e1c83a112cf004006e9cdb63f96132393c7616e5f947d9d07cd6a22a664643c117f52791724efde660605f134aa86d3374b4804f9bb9ce64fc99000000000000000000000000\" } The value can be used as the input data to trigger the transfer function of the shielded TRC-20 contract.","title":"Create shielded contract parameters for transfer"},{"location":"mechanism-algorithm/shielded-TRC20-contract/#create-shielded-trc-20-contract-parameters-for-burn","text":"1. Call api: wallet/createshieldedcontractparameters to build the parameters Method: Post Parameters: { \"ask\" : \"0f04d283f9a26718676a29d5fc9af0199874c5c2f6fd103f2342b24c9820a604\" , \"nsk\" : \"572d8147283d90a938bd2867926fef485290c5fce37fad72eb733f9cd8a07e09\" , \"ovk\" : \"1797de3b7f33cafffe3fe18c6b43ec6760add2ad81b10978d1fca5290497ede9\" , \"shielded_spends\" : [ { \"note\" : { \"value\" : 60 , \"payment_address\" : \"ztron1mpwx0380fvw7gacf5hm4vl625ltmdezt0dwp3ssyd84y8jxzp3guqz9utzn35u7038jx6a6ucly\" , \"rcm\" : \"b67b18fee3133440bfc4509912b96482fdcacbc0b5679af1785247c94224200c\" }, \"alpha\" : \"b6de1a3a40764bd7a24147f155011624805bfcd6d21283c69a3f21aea9401201\" , \"root\" : \"b0b6f5be533b99be38bc9a3c2f3c75a9be263c42500a9e13ffb00df15cda126f\" , \"path\" : \"b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c5381412935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62de1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef7228e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2aa5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6ad2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb5816d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4afee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd7124c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee08500769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c4908eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf30238d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e8415276736aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b159216cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf006edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c1ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be2451d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642fbd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c1b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab651ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de985794730484777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23cba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce7243ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b7b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b680444d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa528138ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce7389613912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a93a022931b1f10886401d5fc249cbc9d0158945f4ecc0509041abc868077545d091e115b68c44341eec6fd6862140898e7399401f2ec319e3daefd931dcf1a3fffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e34adfa6682c546a5f87ac883fa09f6954b50fb7330f8e6b080a9a417548ab062674fc4565e1c6027648d10d91b1708cb4456f2e09220ab8f155c41ef790ea9b562\" , \"pos\" : 27 } ], \"shielded_receives\" : [ { \"note\" : { \"value\" : 40 , \"payment_address\" : \"ztron1nupklnacqyjc7ge998f6v2wutm7urdcdupl6j4ypq7qwws5yqfqrlxwvnylucwre8yewx5s0keu\" , \"rcm\" : \"f2aa138d0d04b685b236d797458d0cf53749b96bbb6d5f1e6c5f2db31b0b2d09\" } } ], \"transparent_to_address\" : \"TBaBXpRAeBhs75TZT751LwyhrcR25XeUot\" , \"to_amount\" : \"2000\" , \"shielded_TRC20_contract_address\" : \"TDxka3zetrpWsWoeWWjSAQDwM186UmzwQn\" , \"visible\" : true } Note: the to_amount is the real value, the value in note is the scaled value by scalingFactor set in the shielded TRC-20 contract. In this example, the value of scalingFactor is 100. , namely 60 * 100 = 40 * 100 + 2000. Return: { \"spend_description\" : [ { \"value_commitment\" : \"83ceceff3cc1ac470308b63798eaa9125d1076cb9f844cfaa8485021c3310951\" , \"anchor\" : \"b0b6f5be533b99be38bc9a3c2f3c75a9be263c42500a9e13ffb00df15cda126f\" , \"nullifier\" : \"dbd34894ce33fee5836283233df7121c6d85443e047fd1c009c4cecbad1d650b\" , \"rk\" : \"2e722d314646bcec8d4c546224bb9fa7396e0fc49a4c0e41a4c181ad7b0f2436\" , \"zkproof\" : \"8897a1542eb85e396d5426b45db0d3b6874c1d404b01ce956b8bad1b4c4b321fa5104a6c156b6ddad4e0da70c9561984ad60534f3d4c3c65559cacff27f6b97da5e8d61a050340cc8e504f3bbfba3f7ef56f2732e9e0d96cacf49856c01858dd0337fcf26fedbc5a74abc2548551e0c1d2ee578823cf4ccf1e17df3be6e07883f84ecf86427de5f4d67f2d70f123227f9336f26dca69ea96c8c2fef6ecde8f08f0280444841d146b750e55035d46c4cc6fc60d8a0871b73822a6918e870d7046\" , \"spend_authority_signature\" : \"1badc235792c4a56e476bb884b9d1f1aeff7cd9f0dc2cd67e24a601c4b633064c92f964546aa0d82ae89a952a796cead3d9222a5895263651f58f311492db000\" }] , \"receive_description\" : [ { \"value_commitment\" : \"2216fe18613655c6f31c72981261fc9caa1b283e4a5b45d022aec131c14def2a\" , \"note_commitment\" : \"75d9624ffdf9c1bcfe88104710403d8916183a8aa97635ac5573fd4d8d981158\" , \"epk\" : \"a5b6ceb3232b6141fee1bfe8c989beb6100449b279f3be8271f829a343f256d4\" , \"c_enc\" : \"7dc1b0c503e4f76c7063259d336fd06cbd1939439f24cca9560d8d0a7033423aebd6e6d6ec2dc6959e4b5ba8797562b7769d83f847200723cc934bd6f17544470ff043ba5e8bfb698320545663138fa710d381c2dd908716efb8a870ea787c0a74a1809315501186f424ec8cacaf04b6bf85489ebf0285149d7f0a4f100f15765da2df45576a7d2e9692e273178d5d7817bd49b367a66aa8b383fc597ac3090716ae3cdc42e6ef11dead9865fa92f317e1409bbacf58bfae30753d9b7adb37b04da6941fc6bca6650241ca2d550ab56e8a22ac974fc7d040c4266b33bda721b6a58e27260cedbb7a150cfec19f986081dfa7ff1b6fc218659c36b688ca63e98870f9beb1a51db115a1969b6167d0b0674f6dd614f12a7c64036b0601a7a605d1398b07abe089ee5a35947b3c36309c2ec7851e876f377d4d2eb4004f580ed86e85645fe3dbc97ff9754a36ef3e386621cf6d98257966f8eff7dd0495442a742dcfb533140f486ef52761056f070f3dc3f42cfae0cd9ac8155eb6c5c559406830a29a79f27784342cb48478d76fd3ff59d0ebdb33955c925b2b91bf94c20d8e414b32dd661020228ba37483e7690517ae02104624ab88d0d3e3030d0a5433228fac9f1ee7f3145f0b51fea5595a1cc515fedcabc5836055bb67367eda2243ac1419863d703502a2b6346d33f3e81a7c977dffdeb1d4474be7ea776cbb5ce90dd2b1a2a5f24cc6179f3f84593d39ab56cbb672e233f6b1dd516dcaf84da1667c73d3ca48db67248617ebf6fc89e392bf6520be7d0050b77ef3930f960a4b31f0f60a9a8a02\" , \"c_out\" : \"beddff9adec9c46a05e12caf6fc675b06ff401c63d17ba251278f0dceba750cafaca2f0fed8c288d31722575f293936901eb084ba4ffd994e207c23fa9813814355a06932d8ce831eafd79008419b9e7\" , \"zkproof\" : \"b26462d9cc1f010e5a5e581d2a8ff19a34262cf37c5724939c3f5c9ca9390a4aa4a55f92f1f922664b7648b7a0d5cf71821eca2cc57f3036d81caf7be0980329c76c3d5ceeea2d05809aaaa028f1856b2fe850772fdbd43b8b7405e3360e602201f26fcae68b9edd0ad17a337bdcb6caa8dea31059ebf7baac4a4b4bd0aab654f853307db82c9e42096fee17ec1235c1ac49e047ca3a4b801ce78d1e3c72fbc207ce827de9537b0faabe48d3f998d2acaa7acf48859af09cdfc3e433522bc1b4\" }] , \"binding_signature\" : \"fef9afbf88ca52c424421d5dfc212c16e187a5012351f3bba48c30b2878f2bc827bdcef18eb9fd5174f288d01300af7359f4be1fa1723e0a17bbbcb48ad42d09\" , \"message_hash\" : \"c650bdaeacf86486ed9f100f010a89ee810ec2fec7e69a7b4f86c4100aacf390\" , \"trigger_contract_input\" : \"dbd34894ce33fee5836283233df7121c6d85443e047fd1c009c4cecbad1d650bb0b6f5be533b99be38bc9a3c2f3c75a9be263c42500a9e13ffb00df15cda126f83ceceff3cc1ac470308b63798eaa9125d1076cb9f844cfaa8485021c33109512e722d314646bcec8d4c546224bb9fa7396e0fc49a4c0e41a4c181ad7b0f24368897a1542eb85e396d5426b45db0d3b6874c1d404b01ce956b8bad1b4c4b321fa5104a6c156b6ddad4e0da70c9561984ad60534f3d4c3c65559cacff27f6b97da5e8d61a050340cc8e504f3bbfba3f7ef56f2732e9e0d96cacf49856c01858dd0337fcf26fedbc5a74abc2548551e0c1d2ee578823cf4ccf1e17df3be6e07883f84ecf86427de5f4d67f2d70f123227f9336f26dca69ea96c8c2fef6ecde8f08f0280444841d146b750e55035d46c4cc6fc60d8a0871b73822a6918e870d70461badc235792c4a56e476bb884b9d1f1aeff7cd9f0dc2cd67e24a601c4b633064c92f964546aa0d82ae89a952a796cead3d9222a5895263651f58f311492db00000000000000000000000000000000000000000000000000000000000000007d0fef9afbf88ca52c424421d5dfc212c16e187a5012351f3bba48c30b2878f2bc827bdcef18eb9fd5174f288d01300af7359f4be1fa1723e0a17bbbcb48ad42d090000000000000000000000411195752747f24146fd1fcd12c31600a81f7c5423c4c231ecb68f670bcd7892da38b297edefd91960bea3326c9b825abe726bea0dbac4c2d3c24a7dbfb82aec128876481f9740751dcd581d713ed33dfd9a1017b87d7b0af8be5361c23cd1e9575ed32ef30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000000000000000000000000000000000000000000175d9624ffdf9c1bcfe88104710403d8916183a8aa97635ac5573fd4d8d9811582216fe18613655c6f31c72981261fc9caa1b283e4a5b45d022aec131c14def2aa5b6ceb3232b6141fee1bfe8c989beb6100449b279f3be8271f829a343f256d4b26462d9cc1f010e5a5e581d2a8ff19a34262cf37c5724939c3f5c9ca9390a4aa4a55f92f1f922664b7648b7a0d5cf71821eca2cc57f3036d81caf7be0980329c76c3d5ceeea2d05809aaaa028f1856b2fe850772fdbd43b8b7405e3360e602201f26fcae68b9edd0ad17a337bdcb6caa8dea31059ebf7baac4a4b4bd0aab654f853307db82c9e42096fee17ec1235c1ac49e047ca3a4b801ce78d1e3c72fbc207ce827de9537b0faabe48d3f998d2acaa7acf48859af09cdfc3e433522bc1b400000000000000000000000000000000000000000000000000000000000000017dc1b0c503e4f76c7063259d336fd06cbd1939439f24cca9560d8d0a7033423aebd6e6d6ec2dc6959e4b5ba8797562b7769d83f847200723cc934bd6f17544470ff043ba5e8bfb698320545663138fa710d381c2dd908716efb8a870ea787c0a74a1809315501186f424ec8cacaf04b6bf85489ebf0285149d7f0a4f100f15765da2df45576a7d2e9692e273178d5d7817bd49b367a66aa8b383fc597ac3090716ae3cdc42e6ef11dead9865fa92f317e1409bbacf58bfae30753d9b7adb37b04da6941fc6bca6650241ca2d550ab56e8a22ac974fc7d040c4266b33bda721b6a58e27260cedbb7a150cfec19f986081dfa7ff1b6fc218659c36b688ca63e98870f9beb1a51db115a1969b6167d0b0674f6dd614f12a7c64036b0601a7a605d1398b07abe089ee5a35947b3c36309c2ec7851e876f377d4d2eb4004f580ed86e85645fe3dbc97ff9754a36ef3e386621cf6d98257966f8eff7dd0495442a742dcfb533140f486ef52761056f070f3dc3f42cfae0cd9ac8155eb6c5c559406830a29a79f27784342cb48478d76fd3ff59d0ebdb33955c925b2b91bf94c20d8e414b32dd661020228ba37483e7690517ae02104624ab88d0d3e3030d0a5433228fac9f1ee7f3145f0b51fea5595a1cc515fedcabc5836055bb67367eda2243ac1419863d703502a2b6346d33f3e81a7c977dffdeb1d4474be7ea776cbb5ce90dd2b1a2a5f24cc6179f3f84593d39ab56cbb672e233f6b1dd516dcaf84da1667c73d3ca48db67248617ebf6fc89e392bf6520be7d0050b77ef3930f960a4b31f0f60a9a8a02beddff9adec9c46a05e12caf6fc675b06ff401c63d17ba251278f0dceba750cafaca2f0fed8c288d31722575f293936901eb084ba4ffd994e207c23fa9813814355a06932d8ce831eafd79008419b9e7000000000000000000000000\" , \"parameter_type\" : \"burn\" } The trigger_contract_input can be used as the input data to trigger the burn function of the shielded TRC-20 contract. 2. Call api: wallet/createshieldedcontractparameterswithoutask to build the parameters Method: Post Parameters: { \"ak\" : \"66fda71a704eb463a13b6f43be7e296dd7ff3e6075e64badf462eca042f0b269\" , \"nsk\" : \"572d8147283d90a938bd2867926fef485290c5fce37fad72eb733f9cd8a07e09\" , \"ovk\" : \"1797de3b7f33cafffe3fe18c6b43ec6760add2ad81b10978d1fca5290497ede9\" , \"shielded_spends\" : [ { \"note\" : { \"value\" : 60 , \"payment_address\" : \"ztron1mpwx0380fvw7gacf5hm4vl625ltmdezt0dwp3ssyd84y8jxzp3guqz9utzn35u7038jx6a6ucly\" , \"rcm\" : \"b67b18fee3133440bfc4509912b96482fdcacbc0b5679af1785247c94224200c\" }, \"alpha\" : \"b6de1a3a40764bd7a24147f155011624805bfcd6d21283c69a3f21aea9401201\" , \"root\" : \"b0b6f5be533b99be38bc9a3c2f3c75a9be263c42500a9e13ffb00df15cda126f\" , \"path\" : \"b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c5381412935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62de1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef7228e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2aa5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6ad2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb5816d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4afee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd7124c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee08500769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c4908eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf30238d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e8415276736aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b159216cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf006edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c1ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be2451d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642fbd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c1b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab651ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de985794730484777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23cba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce7243ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b7b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b680444d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa528138ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce7389613912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a93a022931b1f10886401d5fc249cbc9d0158945f4ecc0509041abc868077545d091e115b68c44341eec6fd6862140898e7399401f2ec319e3daefd931dcf1a3fffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e34adfa6682c546a5f87ac883fa09f6954b50fb7330f8e6b080a9a417548ab062674fc4565e1c6027648d10d91b1708cb4456f2e09220ab8f155c41ef790ea9b562\" , \"pos\" : 27 } ], \"shielded_receives\" : [ { \"note\" : { \"value\" : 40 , \"payment_address\" : \"ztron1nupklnacqyjc7ge998f6v2wutm7urdcdupl6j4ypq7qwws5yqfqrlxwvnylucwre8yewx5s0keu\" , \"rcm\" : \"f2aa138d0d04b685b236d797458d0cf53749b96bbb6d5f1e6c5f2db31b0b2d09\" } } ], \"transparent_to_address\" : \"TBaBXpRAeBhs75TZT751LwyhrcR25XeUot\" , \"to_amount\" : \"2000\" , \"shielded_TRC20_contract_address\" : \"TDxka3zetrpWsWoeWWjSAQDwM186UmzwQn\" , \"visible\" : true } Note: the to_amount is the real value, the value in note is the scaled value by scalingFactor set in the shielded TRC-20 contract. In this example, the value of scalingFactor is 100, namely 60 * 100 = 40 * 100 + 2000. Return: { \"spend_description\" : [ { \"value_commitment\" : \"c8565a546d8922f7b5fdba99504961ccf827fc3ffa23905e50ac2f4eef819766\" , \"anchor\" : \"b0b6f5be533b99be38bc9a3c2f3c75a9be263c42500a9e13ffb00df15cda126f\" , \"nullifier\" : \"dbd34894ce33fee5836283233df7121c6d85443e047fd1c009c4cecbad1d650b\" , \"rk\" : \"2e722d314646bcec8d4c546224bb9fa7396e0fc49a4c0e41a4c181ad7b0f2436\" , \"zkproof\" : \"8f5c35655e812a02ee308c75c8d4fbda3c756319327e656d971b5b0e1507918beda848f44fdf10ca7bd9ff911608d2c8a8fb5378ff1c18e604302fe808c6ba3368d0cfeb0e0d976a81a419f9c7f33045a134d476e23de9e9c56e233beee76573016814d2424afebcd7a061054613e4db8c9d85d5258c5abb1c38576daa704018d5d15daa21c13bb6c8c400452d0c163d8eece84dea1d28fa1dcce6a91191d66b9a43d7c76f3535a9ff43f84e5243313e8381d75bf3bb02ef2196eb7b9f76351d\" }] , \"receive_description\" : [ { \"value_commitment\" : \"0534ca13075b567ea6c2ebb487fb54b97ee0148e451ede224d1833f4b5394b8e\" , \"note_commitment\" : \"75d9624ffdf9c1bcfe88104710403d8916183a8aa97635ac5573fd4d8d981158\" , \"epk\" : \"96fd1aa79db655677d6a31c277e08ddb87527fa7b1848ed817ccc55a741c9210\" , \"c_enc\" : \"14c3a0d8d62ded3ff49ec3f940b5b0458af28227e4419a63ee2b377146e1bd2d3e963eabcd22cd3cf76d54baa53de0099f785eed4d8ac994153371a04cbf9028ce9e4b1a0f2a0a56281a360508d8428b270960a720c0ff3659acd9445f0e8f6975ece1ce93b67daee879c17006a31bbea3c78ae494a54d7ef9ef3462d143f725cdc76b486ce92f32c25a93859e7c298287440338e984d7bb7191feb87af7cc9eb0e9d670222d7d309360463c1c0b863225d631bb1997fee37fcad3d8c18acea6377087df8b45256310c634120d4e974aecf1f24a0083a6671277ec452329652bd5a3b2cd5c2b7e03f4e70703624e9be1a30c543028a592da533dfa18305098d370207d473859051afa14062d8fc062eb946f0326c16aa8680efaa0e29a55547957a967122ac6ea8f3139c1d8392e5914c98fdf115f8f959c0cd11f466e9d8c9168ca592ed4f7cb7e900a8bf94cec047e86b1c6c606eeb9db7655498b0590680aacf91e1958d5c05d5f3cda5ae87d8ae92f285a4ae258c2c216857a4118052dad44673b3f60e2866f9c73d5696c3ddf4967aa1df3438b6a1a5e937f2af23e698c02021fdb1e1e80258313687a49100bb2965627c2369ef559c2b987bdfce8057c66091c0cf39d14eca98989856687248885b4006770f9121530da170963f16c4145d1777d060f7a406b09b23e139c576719d2f99f296f61ac8b9ee65dff7dfa307e2c4835aba2a4c5659aa2878d37f4250d01d4ea69be5911a417e5716e72c1a3bd505f64041ee28003508edb2a55c7e9475281fde204d31e541059e16fe4311a27075e87\" , \"c_out\" : \"1e2057789a029d029792c60db3bb91218ce613d73e4fc486dbe90398e1475861d0b60eb5ed93bb16306cb1f0cff85b9c311cadd6a0902b906c887a5550b6c2ca99c50b72c3cb23faa0a22091122fcb0d\" , \"zkproof\" : \"b08bbd60ea3784da8aec576e2e2edc068d8b4d21899ee3413ad4f7cbb9fd703bfa7f188a9c4424a5254445b97564ed0a8ca4c62a1176006f1b9852f4b7f0381f50a1e5d06820ffb4c8c2aeddd38435138e5ebb1f8324b6634d75582ae9823829062975d2d5a940e1de72cd6b5cb123737011e9c25f6df866d4ee5fcceacc60d347886af6241d4a8d074826a8698cc04096ee4fef38ec061a07a6a04c4e2c4bed4124e78bf1a030b233a01eca189827d59329cd18ea5e6481e76b2261a3cf678d\" }] , \"binding_signature\" : \"4cd9c8855bb27548e83c5aed968dd91f9e2d1aab1b5b4e9343774970c460f518f834f894760f03368da8d8e781c51e785e1a1a82c3f3efcf67e7b650b1585b00\" , \"message_hash\" : \"f9f665aa712ee948c5a0fb5b3994d1ef0110060cd02725cf69d904112fa3f106\" , \"trigger_contract_input\" : \"c4c231ecb68f670bcd7892da38b297edefd91960bea3326c9b825abe726bea0dbac4c2d3c24a7dbfb82aec128876481f9740751dcd581d713ed33dfd9a1017b87d7b0af8be5361c23cd1e9575ed32ef3\" , \"parameter_type\" : \"burn\" } Because of lacking the ask , the api can not generate the spend_authority_signature . Here, the trigger_contract_input is some ciphertext used to generate the trigger shielded TRC-20 contract input for burn . To generate the trigger_contract_input , the user first needs to generate the spend spend_authority_signature by calling the api: wallet/createspendauthsig Method: Post Parameters: { \"ask\": \"0f63eabdfe2bbfe08012f6bb2db024e6809c16e8ed055aa41a6095424f192005\", \"tx_hash\": \"f9f665aa712ee948c5a0fb5b3994d1ef0110060cd02725cf69d904112fa3f106\", \"alpha\": \"0dfea932d1dc513b2bdebb1fd1f8124c4a2c93bb393fbba2d7dba8e045585207\" } Return: { \"value\": \"1947036add76206b9f9b03ffd9d9526c5547db955387798f15c5e7c911f41eadc23eee214e64be792a404b77c64335a675c3489ca63d0d471de484c3a606d002\" } The returned value is the spend_authority_signature . Then the user need to call the api: wallet/gettriggerinputforshieldedtrc20contract Method: Post Parameters: { \"shielded_TRC20_Parameters\": { \"spend_description\": [ { \"value_commitment\": \"c8565a546d8922f7b5fdba99504961ccf827fc3ffa23905e50ac2f4eef819766\", \"anchor\": \"b0b6f5be533b99be38bc9a3c2f3c75a9be263c42500a9e13ffb00df15cda126f\", \"nullifier\": \"dbd34894ce33fee5836283233df7121c6d85443e047fd1c009c4cecbad1d650b\", \"rk\": \"2e722d314646bcec8d4c546224bb9fa7396e0fc49a4c0e41a4c181ad7b0f2436\", \"zkproof\": \"8f5c35655e812a02ee308c75c8d4fbda3c756319327e656d971b5b0e1507918beda848f44fdf10ca7bd9ff911608d2c8a8fb5378ff1c18e604302fe808c6ba3368d0cfeb0e0d976a81a419f9c7f33045a134d476e23de9e9c56e233beee76573016814d2424afebcd7a061054613e4db8c9d85d5258c5abb1c38576daa704018d5d15daa21c13bb6c8c400452d0c163d8eece84dea1d28fa1dcce6a91191d66b9a43d7c76f3535a9ff43f84e5243313e8381d75bf3bb02ef2196eb7b9f76351d\" }], \"receive_description\": [ { \"value_commitment\": \"0534ca13075b567ea6c2ebb487fb54b97ee0148e451ede224d1833f4b5394b8e\", \"note_commitment\": \"75d9624ffdf9c1bcfe88104710403d8916183a8aa97635ac5573fd4d8d981158\", \"epk\": \"96fd1aa79db655677d6a31c277e08ddb87527fa7b1848ed817ccc55a741c9210\", \"c_enc\": \"14c3a0d8d62ded3ff49ec3f940b5b0458af28227e4419a63ee2b377146e1bd2d3e963eabcd22cd3cf76d54baa53de0099f785eed4d8ac994153371a04cbf9028ce9e4b1a0f2a0a56281a360508d8428b270960a720c0ff3659acd9445f0e8f6975ece1ce93b67daee879c17006a31bbea3c78ae494a54d7ef9ef3462d143f725cdc76b486ce92f32c25a93859e7c298287440338e984d7bb7191feb87af7cc9eb0e9d670222d7d309360463c1c0b863225d631bb1997fee37fcad3d8c18acea6377087df8b45256310c634120d4e974aecf1f24a0083a6671277ec452329652bd5a3b2cd5c2b7e03f4e70703624e9be1a30c543028a592da533dfa18305098d370207d473859051afa14062d8fc062eb946f0326c16aa8680efaa0e29a55547957a967122ac6ea8f3139c1d8392e5914c98fdf115f8f959c0cd11f466e9d8c9168ca592ed4f7cb7e900a8bf94cec047e86b1c6c606eeb9db7655498b0590680aacf91e1958d5c05d5f3cda5ae87d8ae92f285a4ae258c2c216857a4118052dad44673b3f60e2866f9c73d5696c3ddf4967aa1df3438b6a1a5e937f2af23e698c02021fdb1e1e80258313687a49100bb2965627c2369ef559c2b987bdfce8057c66091c0cf39d14eca98989856687248885b4006770f9121530da170963f16c4145d1777d060f7a406b09b23e139c576719d2f99f296f61ac8b9ee65dff7dfa307e2c4835aba2a4c5659aa2878d37f4250d01d4ea69be5911a417e5716e72c1a3bd505f64041ee28003508edb2a55c7e9475281fde204d31e541059e16fe4311a27075e87\", \"c_out\": \"1e2057789a029d029792c60db3bb91218ce613d73e4fc486dbe90398e1475861d0b60eb5ed93bb16306cb1f0cff85b9c311cadd6a0902b906c887a5550b6c2ca99c50b72c3cb23faa0a22091122fcb0d\", \"zkproof\": \"b08bbd60ea3784da8aec576e2e2edc068d8b4d21899ee3413ad4f7cbb9fd703bfa7f188a9c4424a5254445b97564ed0a8ca4c62a1176006f1b9852f4b7f0381f50a1e5d06820ffb4c8c2aeddd38435138e5ebb1f8324b6634d75582ae9823829062975d2d5a940e1de72cd6b5cb123737011e9c25f6df866d4ee5fcceacc60d347886af6241d4a8d074826a8698cc04096ee4fef38ec061a07a6a04c4e2c4bed4124e78bf1a030b233a01eca189827d59329cd18ea5e6481e76b2261a3cf678d\" }], \"binding_signature\": \"4cd9c8855bb27548e83c5aed968dd91f9e2d1aab1b5b4e9343774970c460f518f834f894760f03368da8d8e781c51e785e1a1a82c3f3efcf67e7b650b1585b00\", \"message_hash\": \"f9f665aa712ee948c5a0fb5b3994d1ef0110060cd02725cf69d904112fa3f106\", \"trigger_contract_input\": \"c4c231ecb68f670bcd7892da38b297edefd91960bea3326c9b825abe726bea0dbac4c2d3c24a7dbfb82aec128876481f9740751dcd581d713ed33dfd9a1017b87d7b0af8be5361c23cd1e9575ed32ef3\", \"parameter_type\": \"burn\" }, \"spend_authority_signature\": [ { \"value\": \"1947036add76206b9f9b03ffd9d9526c5547db955387798f15c5e7c911f41eadc23eee214e64be792a404b77c64335a675c3489ca63d0d471de484c3a606d002\" } ], \"amount\": \"2000\", \"transparent_to_address\": \"TV7ceN4tHDNPB47DMStcUFC3Y8QQ7KzN32\", \"visible\": true } Return: { \"value\": \"dbd34894ce33fee5836283233df7121c6d85443e047fd1c009c4cecbad1d650bb0b6f5be533b99be38bc9a3c2f3c75a9be263c42500a9e13ffb00df15cda126fc8565a546d8922f7b5fdba99504961ccf827fc3ffa23905e50ac2f4eef8197662e722d314646bcec8d4c546224bb9fa7396e0fc49a4c0e41a4c181ad7b0f24368f5c35655e812a02ee308c75c8d4fbda3c756319327e656d971b5b0e1507918beda848f44fdf10ca7bd9ff911608d2c8a8fb5378ff1c18e604302fe808c6ba3368d0cfeb0e0d976a81a419f9c7f33045a134d476e23de9e9c56e233beee76573016814d2424afebcd7a061054613e4db8c9d85d5258c5abb1c38576daa704018d5d15daa21c13bb6c8c400452d0c163d8eece84dea1d28fa1dcce6a91191d66b9a43d7c76f3535a9ff43f84e5243313e8381d75bf3bb02ef2196eb7b9f76351d1947036add76206b9f9b03ffd9d9526c5547db955387798f15c5e7c911f41eadc23eee214e64be792a404b77c64335a675c3489ca63d0d471de484c3a606d00200000000000000000000000000000000000000000000000000000000000007d04cd9c8855bb27548e83c5aed968dd91f9e2d1aab1b5b4e9343774970c460f518f834f894760f03368da8d8e781c51e785e1a1a82c3f3efcf67e7b650b1585b00000000000000000000000041d2017434977a0125039bfdc111922e9eb77f055bc4c231ecb68f670bcd7892da38b297edefd91960bea3326c9b825abe726bea0dbac4c2d3c24a7dbfb82aec128876481f9740751dcd581d713ed33dfd9a1017b87d7b0af8be5361c23cd1e9575ed32ef30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000000000000000000000000000000000000000000175d9624ffdf9c1bcfe88104710403d8916183a8aa97635ac5573fd4d8d9811580534ca13075b567ea6c2ebb487fb54b97ee0148e451ede224d1833f4b5394b8e96fd1aa79db655677d6a31c277e08ddb87527fa7b1848ed817ccc55a741c9210b08bbd60ea3784da8aec576e2e2edc068d8b4d21899ee3413ad4f7cbb9fd703bfa7f188a9c4424a5254445b97564ed0a8ca4c62a1176006f1b9852f4b7f0381f50a1e5d06820ffb4c8c2aeddd38435138e5ebb1f8324b6634d75582ae9823829062975d2d5a940e1de72cd6b5cb123737011e9c25f6df866d4ee5fcceacc60d347886af6241d4a8d074826a8698cc04096ee4fef38ec061a07a6a04c4e2c4bed4124e78bf1a030b233a01eca189827d59329cd18ea5e6481e76b2261a3cf678d000000000000000000000000000000000000000000000000000000000000000114c3a0d8d62ded3ff49ec3f940b5b0458af28227e4419a63ee2b377146e1bd2d3e963eabcd22cd3cf76d54baa53de0099f785eed4d8ac994153371a04cbf9028ce9e4b1a0f2a0a56281a360508d8428b270960a720c0ff3659acd9445f0e8f6975ece1ce93b67daee879c17006a31bbea3c78ae494a54d7ef9ef3462d143f725cdc76b486ce92f32c25a93859e7c298287440338e984d7bb7191feb87af7cc9eb0e9d670222d7d309360463c1c0b863225d631bb1997fee37fcad3d8c18acea6377087df8b45256310c634120d4e974aecf1f24a0083a6671277ec452329652bd5a3b2cd5c2b7e03f4e70703624e9be1a30c543028a592da533dfa18305098d370207d473859051afa14062d8fc062eb946f0326c16aa8680efaa0e29a55547957a967122ac6ea8f3139c1d8392e5914c98fdf115f8f959c0cd11f466e9d8c9168ca592ed4f7cb7e900a8bf94cec047e86b1c6c606eeb9db7655498b0590680aacf91e1958d5c05d5f3cda5ae87d8ae92f285a4ae258c2c216857a4118052dad44673b3f60e2866f9c73d5696c3ddf4967aa1df3438b6a1a5e937f2af23e698c02021fdb1e1e80258313687a49100bb2965627c2369ef559c2b987bdfce8057c66091c0cf39d14eca98989856687248885b4006770f9121530da170963f16c4145d1777d060f7a406b09b23e139c576719d2f99f296f61ac8b9ee65dff7dfa307e2c4835aba2a4c5659aa2878d37f4250d01d4ea69be5911a417e5716e72c1a3bd505f64041ee28003508edb2a55c7e9475281fde204d31e541059e16fe4311a27075e871e2057789a029d029792c60db3bb91218ce613d73e4fc486dbe90398e1475861d0b60eb5ed93bb16306cb1f0cff85b9c311cadd6a0902b906c887a5550b6c2ca99c50b72c3cb23faa0a22091122fcb0d000000000000000000000000\" } The value can be used as the input data to trigger the burn function of the shielded TRC-20 contract.","title":"Create shielded TRC-20 contract parameters for burn"},{"location":"mechanism-algorithm/shielded-TRC20-contract/#trigger-the-shielded-trc-20-contract","text":"Call api: wallet/triggersmartcontract to trigger the shielded TRC-20 contract and generate the shielded TRC-20 transaction Method: Post Parameters: { \"owner_address\" : \"411195752747f24146fd1fcd12c31600a81f7c5423\" , \"contract_address\" : \"41959ec81ae3c002192fd25dff7f8d20b4bb6b76ee\" , \"function_selector\" : \"mint(uint256,bytes32[9],bytes32[2],bytes32[21])\" , \"parameter\" : \"00000000000000000000000000000000000000000000000000000000000013889fb4acd771c24fdd47aabb109b7596566509421cdc11d1f8babb5d5af22a614ef10f73d04837be9158010626423130663ad09d6436b97b694acb2b92d940201efa4a7ef3e2406c2c897894ea73cad3ded8dbcfb90521ec8488163b2baeef6a88aa9af11367a3cd1cd797937bb7f521162d5264e1f2dc39ca7c6b0eadf8520a1b5c2bd3bbe50835a9f3419b82909cbf60989f83496480008cceb6a3783bbc25d2921f86d79b0bad5d493766b8cf1f6bec74f6b67480e770c3a7f5b27a30ae3d4a13df273ab73e9107a5287883317bb5417b7f6841e197df99f5321807995c80fd3810f791845681560ccd3a4bfd8c56e298bc09b989e5279ca190ac3b29cdb7941315c027facc97bf1c0a02fa437dd68b335f8cbf0d9a3ba4a30302523609f40a177cc31961ca63a9c375b714831bc007ddbc5cfbafca368200b6c33b4b0aeadf537b47c16788bdc00981713b79f23fc0b4065ab9369072589728ed0cc3ac25076a2f8141a2637e589983210ce6d09e67c36167cb9fa5b4a9bf8daafc795b9c3978ffeade3698dfd4c86f3c7b2dd92c36e6303101b49fdd4f1e4357223c02f19329f6bb18f1f6d2e297e9fefa2d9f92f81ce07a8980effa10b8b8bf39aa19e80d96ef1c915cc55d1d26ea07b1c0da2ecf66b7f8b64657f6ac95466a983553f29a8bea3d78c178b2129745d432ddc95532e56f8e93625c674f20375a48990ca287591fcf0c476c3d1392d4e1355caf8d7352f895dc62da55d83e478ab00b78d5a68a0f50a69d9c595bcf494361517c703db9dba728e8c79a833d753f1977f526e9afd4b6daaff37fa0f1d52a63199fb3f8e97b7061a200aed5d2865de16b83b762638e6c8f9269967299a97618c1bd984f5afa25d170cf9eef601bdd1c1d33bd91813c19f70e102b16327e4cd3d4851bfa76b7caf45026c70d4f2b4872d7255133b07dc41b626228051537eee53083e9a11daf5fcc5cf7ca1cef99579362b1506a90fc1ed5d4fe8b7133c7179a2d3aee27dc802a90403ba445adb6eef8b35fd798fb0d374ce3c8b4a6870bcf32651c9c32cfeafbb0672f50561d76826b938b9b2c44029bc5d11838d453a48565c70e0d3c8f2a915ba932a02271c73046b2c53aaf6e27bb72a567a26e2a4164974fc52d0ad7fa5dddfe9390007e2fc3ad46d644be55519e01a2cce76744f165c6705d3b007d2f649df84e3783622f5e077fe37fdd192896eae9b1245322db6e3242714a0552253b472103553f09b6b1d32804742375d3b140d2ebff2155b6248d07992f40e5537a0587315c451ac53cee490ce49c3b321a967558c39f789bf5d35859d4136bcf4178bf6b1814d617e139aa35710edcd325dd03957462070393b7066182fc56be713bba49a2359db71604e97e9350af687a7f185d7905d8900f7e2431386c00e55e32000000000000000000000000\" , \"call_value\" : 0 , \"call_token_value\" : 0 , \"token_id\" : 0 , \"fee_limit\" : 1000000000 } Return: { \"result\" : { \"result\" :true } , \"transaction\" : { \"visible\" :false, \"txID\" : \"d8ae793212147ed7d64f96a1a6c1477aeeecdedf6f5cb2e7cd897f70c7c2603e\" , \"raw_data\" : { \"contract\" : [ { \"parameter\" : { \"value\" : { \"data\" : \"855d175e00000000000000000000000000000000000000000000000000000000000013889fb4acd771c24fdd47aabb109b7596566509421cdc11d1f8babb5d5af22a614ef10f73d04837be9158010626423130663ad09d6436b97b694acb2b92d940201efa4a7ef3e2406c2c897894ea73cad3ded8dbcfb90521ec8488163b2baeef6a88aa9af11367a3cd1cd797937bb7f521162d5264e1f2dc39ca7c6b0eadf8520a1b5c2bd3bbe50835a9f3419b82909cbf60989f83496480008cceb6a3783bbc25d2921f86d79b0bad5d493766b8cf1f6bec74f6b67480e770c3a7f5b27a30ae3d4a13df273ab73e9107a5287883317bb5417b7f6841e197df99f5321807995c80fd3810f791845681560ccd3a4bfd8c56e298bc09b989e5279ca190ac3b29cdb7941315c027facc97bf1c0a02fa437dd68b335f8cbf0d9a3ba4a30302523609f40a177cc31961ca63a9c375b714831bc007ddbc5cfbafca368200b6c33b4b0aeadf537b47c16788bdc00981713b79f23fc0b4065ab9369072589728ed0cc3ac25076a2f8141a2637e589983210ce6d09e67c36167cb9fa5b4a9bf8daafc795b9c3978ffeade3698dfd4c86f3c7b2dd92c36e6303101b49fdd4f1e4357223c02f19329f6bb18f1f6d2e297e9fefa2d9f92f81ce07a8980effa10b8b8bf39aa19e80d96ef1c915cc55d1d26ea07b1c0da2ecf66b7f8b64657f6ac95466a983553f29a8bea3d78c178b2129745d432ddc95532e56f8e93625c674f20375a48990ca287591fcf0c476c3d1392d4e1355caf8d7352f895dc62da55d83e478ab00b78d5a68a0f50a69d9c595bcf494361517c703db9dba728e8c79a833d753f1977f526e9afd4b6daaff37fa0f1d52a63199fb3f8e97b7061a200aed5d2865de16b83b762638e6c8f9269967299a97618c1bd984f5afa25d170cf9eef601bdd1c1d33bd91813c19f70e102b16327e4cd3d4851bfa76b7caf45026c70d4f2b4872d7255133b07dc41b626228051537eee53083e9a11daf5fcc5cf7ca1cef99579362b1506a90fc1ed5d4fe8b7133c7179a2d3aee27dc802a90403ba445adb6eef8b35fd798fb0d374ce3c8b4a6870bcf32651c9c32cfeafbb0672f50561d76826b938b9b2c44029bc5d11838d453a48565c70e0d3c8f2a915ba932a02271c73046b2c53aaf6e27bb72a567a26e2a4164974fc52d0ad7fa5dddfe9390007e2fc3ad46d644be55519e01a2cce76744f165c6705d3b007d2f649df84e3783622f5e077fe37fdd192896eae9b1245322db6e3242714a0552253b472103553f09b6b1d32804742375d3b140d2ebff2155b6248d07992f40e5537a0587315c451ac53cee490ce49c3b321a967558c39f789bf5d35859d4136bcf4178bf6b1814d617e139aa35710edcd325dd03957462070393b7066182fc56be713bba49a2359db71604e97e9350af687a7f185d7905d8900f7e2431386c00e55e32000000000000000000000000\" , \"owner_address\" : \"411195752747f24146fd1fcd12c31600a81f7c5423\" , \"contract_address\" : \"41959ec81ae3c002192fd25dff7f8d20b4bb6b76ee\" } , \"type_url\" : \"type.googleapis.com/protocol.TriggerSmartContract\" } , \"type\" : \"TriggerSmartContract\" }] , \"ref_block_bytes\" : \"f1a0\" , \"ref_block_hash\" : \"6525d0bb0966c224\" , \"expiration\" :1593795795000, \"fee_limit\" :1000000000, \"timestamp\" :1593795737687 } , \"raw_data_hex\" : \"0a02f1a022086525d0bb0966c22440b8b087adb12e5a9009081f128b090a31747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e54726967676572536d617274436f6e747261637412d5080a15411195752747f24146fd1fcd12c31600a81f7c5423121541959ec81ae3c002192fd25dff7f8d20b4bb6b76ee22a408855d175e00000000000000000000000000000000000000000000000000000000000013889fb4acd771c24fdd47aabb109b7596566509421cdc11d1f8babb5d5af22a614ef10f73d04837be9158010626423130663ad09d6436b97b694acb2b92d940201efa4a7ef3e2406c2c897894ea73cad3ded8dbcfb90521ec8488163b2baeef6a88aa9af11367a3cd1cd797937bb7f521162d5264e1f2dc39ca7c6b0eadf8520a1b5c2bd3bbe50835a9f3419b82909cbf60989f83496480008cceb6a3783bbc25d2921f86d79b0bad5d493766b8cf1f6bec74f6b67480e770c3a7f5b27a30ae3d4a13df273ab73e9107a5287883317bb5417b7f6841e197df99f5321807995c80fd3810f791845681560ccd3a4bfd8c56e298bc09b989e5279ca190ac3b29cdb7941315c027facc97bf1c0a02fa437dd68b335f8cbf0d9a3ba4a30302523609f40a177cc31961ca63a9c375b714831bc007ddbc5cfbafca368200b6c33b4b0aeadf537b47c16788bdc00981713b79f23fc0b4065ab9369072589728ed0cc3ac25076a2f8141a2637e589983210ce6d09e67c36167cb9fa5b4a9bf8daafc795b9c3978ffeade3698dfd4c86f3c7b2dd92c36e6303101b49fdd4f1e4357223c02f19329f6bb18f1f6d2e297e9fefa2d9f92f81ce07a8980effa10b8b8bf39aa19e80d96ef1c915cc55d1d26ea07b1c0da2ecf66b7f8b64657f6ac95466a983553f29a8bea3d78c178b2129745d432ddc95532e56f8e93625c674f20375a48990ca287591fcf0c476c3d1392d4e1355caf8d7352f895dc62da55d83e478ab00b78d5a68a0f50a69d9c595bcf494361517c703db9dba728e8c79a833d753f1977f526e9afd4b6daaff37fa0f1d52a63199fb3f8e97b7061a200aed5d2865de16b83b762638e6c8f9269967299a97618c1bd984f5afa25d170cf9eef601bdd1c1d33bd91813c19f70e102b16327e4cd3d4851bfa76b7caf45026c70d4f2b4872d7255133b07dc41b626228051537eee53083e9a11daf5fcc5cf7ca1cef99579362b1506a90fc1ed5d4fe8b7133c7179a2d3aee27dc802a90403ba445adb6eef8b35fd798fb0d374ce3c8b4a6870bcf32651c9c32cfeafbb0672f50561d76826b938b9b2c44029bc5d11838d453a48565c70e0d3c8f2a915ba932a02271c73046b2c53aaf6e27bb72a567a26e2a4164974fc52d0ad7fa5dddfe9390007e2fc3ad46d644be55519e01a2cce76744f165c6705d3b007d2f649df84e3783622f5e077fe37fdd192896eae9b1245322db6e3242714a0552253b472103553f09b6b1d32804742375d3b140d2ebff2155b6248d07992f40e5537a0587315c451ac53cee490ce49c3b321a967558c39f789bf5d35859d4136bcf4178bf6b1814d617e139aa35710edcd325dd03957462070393b7066182fc56be713bba49a2359db71604e97e9350af687a7f185d7905d8900f7e2431386c00e55e3200000000000000000000000070d7f083adb12e90018094ebdc03\" } } Note: the above is an example for triggering the mint function. For transfer and burn , it's similar.","title":"Trigger the shielded TRC-20 contract"},{"location":"mechanism-algorithm/shielded-TRC20-contract/#broadcast-the-shielded-trc-20-transaction","text":"Call api: wallet/broadcasttransaction to broadcast this transaction Method: Post Parameters: { \"txID\" : \"d8ae793212147ed7d64f96a1a6c1477aeeecdedf6f5cb2e7cd897f70c7c2603e\" , \"raw_data\" :{ \"contract\" :[ { \"parameter\" :{ \"value\" :{ \"data\" : \"855d175e00000000000000000000000000000000000000000000000000000000000013889fb4acd771c24fdd47aabb109b7596566509421cdc11d1f8babb5d5af22a614ef10f73d04837be9158010626423130663ad09d6436b97b694acb2b92d940201efa4a7ef3e2406c2c897894ea73cad3ded8dbcfb90521ec8488163b2baeef6a88aa9af11367a3cd1cd797937bb7f521162d5264e1f2dc39ca7c6b0eadf8520a1b5c2bd3bbe50835a9f3419b82909cbf60989f83496480008cceb6a3783bbc25d2921f86d79b0bad5d493766b8cf1f6bec74f6b67480e770c3a7f5b27a30ae3d4a13df273ab73e9107a5287883317bb5417b7f6841e197df99f5321807995c80fd3810f791845681560ccd3a4bfd8c56e298bc09b989e5279ca190ac3b29cdb7941315c027facc97bf1c0a02fa437dd68b335f8cbf0d9a3ba4a30302523609f40a177cc31961ca63a9c375b714831bc007ddbc5cfbafca368200b6c33b4b0aeadf537b47c16788bdc00981713b79f23fc0b4065ab9369072589728ed0cc3ac25076a2f8141a2637e589983210ce6d09e67c36167cb9fa5b4a9bf8daafc795b9c3978ffeade3698dfd4c86f3c7b2dd92c36e6303101b49fdd4f1e4357223c02f19329f6bb18f1f6d2e297e9fefa2d9f92f81ce07a8980effa10b8b8bf39aa19e80d96ef1c915cc55d1d26ea07b1c0da2ecf66b7f8b64657f6ac95466a983553f29a8bea3d78c178b2129745d432ddc95532e56f8e93625c674f20375a48990ca287591fcf0c476c3d1392d4e1355caf8d7352f895dc62da55d83e478ab00b78d5a68a0f50a69d9c595bcf494361517c703db9dba728e8c79a833d753f1977f526e9afd4b6daaff37fa0f1d52a63199fb3f8e97b7061a200aed5d2865de16b83b762638e6c8f9269967299a97618c1bd984f5afa25d170cf9eef601bdd1c1d33bd91813c19f70e102b16327e4cd3d4851bfa76b7caf45026c70d4f2b4872d7255133b07dc41b626228051537eee53083e9a11daf5fcc5cf7ca1cef99579362b1506a90fc1ed5d4fe8b7133c7179a2d3aee27dc802a90403ba445adb6eef8b35fd798fb0d374ce3c8b4a6870bcf32651c9c32cfeafbb0672f50561d76826b938b9b2c44029bc5d11838d453a48565c70e0d3c8f2a915ba932a02271c73046b2c53aaf6e27bb72a567a26e2a4164974fc52d0ad7fa5dddfe9390007e2fc3ad46d644be55519e01a2cce76744f165c6705d3b007d2f649df84e3783622f5e077fe37fdd192896eae9b1245322db6e3242714a0552253b472103553f09b6b1d32804742375d3b140d2ebff2155b6248d07992f40e5537a0587315c451ac53cee490ce49c3b321a967558c39f789bf5d35859d4136bcf4178bf6b1814d617e139aa35710edcd325dd03957462070393b7066182fc56be713bba49a2359db71604e97e9350af687a7f185d7905d8900f7e2431386c00e55e32000000000000000000000000\" , \"owner_address\" : \"411195752747f24146fd1fcd12c31600a81f7c5423\" , \"contract_address\" : \"41959ec81ae3c002192fd25dff7f8d20b4bb6b76ee\" }, \"type_url\" : \"type.googleapis.com/protocol.TriggerSmartContract\" }, \"type\" : \"TriggerSmartContract\" }], \"ref_block_bytes\" : \"f1a0\" , \"ref_block_hash\" : \"6525d0bb0966c224\" , \"expiration\" : 1593795795000 , \"fee_limit\" : 1000000000 , \"timestamp\" : 1593795737687 }, \"signature\" : \"2c1593a78911b9183bd513fcaeeec1440a9a5bd2896adde30411872bfc2d551a1b8211455d3ff686e08d02d230ea4d50e8d4875a88bc13e368e2e4aab80dcb4901\" , \"raw_data_hex\" : \"0a02f1a022086525d0bb0966c22440b8b087adb12e5a9009081f128b090a31747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e54726967676572536d617274436f6e747261637412d5080a15411195752747f24146fd1fcd12c31600a81f7c5423121541959ec81ae3c002192fd25dff7f8d20b4bb6b76ee22a408855d175e00000000000000000000000000000000000000000000000000000000000013889fb4acd771c24fdd47aabb109b7596566509421cdc11d1f8babb5d5af22a614ef10f73d04837be9158010626423130663ad09d6436b97b694acb2b92d940201efa4a7ef3e2406c2c897894ea73cad3ded8dbcfb90521ec8488163b2baeef6a88aa9af11367a3cd1cd797937bb7f521162d5264e1f2dc39ca7c6b0eadf8520a1b5c2bd3bbe50835a9f3419b82909cbf60989f83496480008cceb6a3783bbc25d2921f86d79b0bad5d493766b8cf1f6bec74f6b67480e770c3a7f5b27a30ae3d4a13df273ab73e9107a5287883317bb5417b7f6841e197df99f5321807995c80fd3810f791845681560ccd3a4bfd8c56e298bc09b989e5279ca190ac3b29cdb7941315c027facc97bf1c0a02fa437dd68b335f8cbf0d9a3ba4a30302523609f40a177cc31961ca63a9c375b714831bc007ddbc5cfbafca368200b6c33b4b0aeadf537b47c16788bdc00981713b79f23fc0b4065ab9369072589728ed0cc3ac25076a2f8141a2637e589983210ce6d09e67c36167cb9fa5b4a9bf8daafc795b9c3978ffeade3698dfd4c86f3c7b2dd92c36e6303101b49fdd4f1e4357223c02f19329f6bb18f1f6d2e297e9fefa2d9f92f81ce07a8980effa10b8b8bf39aa19e80d96ef1c915cc55d1d26ea07b1c0da2ecf66b7f8b64657f6ac95466a983553f29a8bea3d78c178b2129745d432ddc95532e56f8e93625c674f20375a48990ca287591fcf0c476c3d1392d4e1355caf8d7352f895dc62da55d83e478ab00b78d5a68a0f50a69d9c595bcf494361517c703db9dba728e8c79a833d753f1977f526e9afd4b6daaff37fa0f1d52a63199fb3f8e97b7061a200aed5d2865de16b83b762638e6c8f9269967299a97618c1bd984f5afa25d170cf9eef601bdd1c1d33bd91813c19f70e102b16327e4cd3d4851bfa76b7caf45026c70d4f2b4872d7255133b07dc41b626228051537eee53083e9a11daf5fcc5cf7ca1cef99579362b1506a90fc1ed5d4fe8b7133c7179a2d3aee27dc802a90403ba445adb6eef8b35fd798fb0d374ce3c8b4a6870bcf32651c9c32cfeafbb0672f50561d76826b938b9b2c44029bc5d11838d453a48565c70e0d3c8f2a915ba932a02271c73046b2c53aaf6e27bb72a567a26e2a4164974fc52d0ad7fa5dddfe9390007e2fc3ad46d644be55519e01a2cce76744f165c6705d3b007d2f649df84e3783622f5e077fe37fdd192896eae9b1245322db6e3242714a0552253b472103553f09b6b1d32804742375d3b140d2ebff2155b6248d07992f40e5537a0587315c451ac53cee490ce49c3b321a967558c39f789bf5d35859d4136bcf4178bf6b1814d617e139aa35710edcd325dd03957462070393b7066182fc56be713bba49a2359db71604e97e9350af687a7f185d7905d8900f7e2431386c00e55e3200000000000000000000000070d7f083adb12e90018094ebdc03\" } Return: { \"result\" : true } Note: before broadcasting the transaction, the sender should sign the transaction by its private key to generate the signature and add it to the transaction.","title":"Broadcast the shielded TRC-20 transaction"},{"location":"mechanism-algorithm/shielded-TRC20-contract/#scan-shielded-trc-20-notes-by-ivk","text":"Call api: wallet/scanshieldedtrc20notesbyivk to scan the shielded TRC-20 notes Method: Post and Get Parameters: { \"start_block_index\" : 46079 , \"end_block_index\" : 46091 , \"shielded_TRC20_contract_address\" : \"TDxka3zetrpWsWoeWWjSAQDwM186UmzwQn\" , \"ivk\" : \"c1898b84ced7e5c8840632ad1203d56b4a8ebbaa8425dd8b5a5b3d43578e1006\" , \"ak\" : \"66fda71a704eb463a13b6f43be7e296dd7ff3e6075e64badf462eca042f0b269\" , \"nk\" : \"b5f558a783c968b624f7cfc9a4f2c909332c0c514a8a419e552337e82e073f66\" , \"visible\" : true } Return: { \"noteTxs\" : [ { \"note\" : { \"payment_address\" : \"ztron1e453jrrxwsvj6s480a2rduz28jfedrsjwu0xsfk8psd85hajeyc6jx56nh0x7ngclh6tytr28wn\" , \"value\" :60, \"rcm\" : \"e51c6ef6c51ab1bb289056db13d44c0af35e70e18d76d8e9f270176663d8f50d\" } , \"is_spent\" :true, \"txid\" : \"59b64426f6bffead22739eb7aee626e11258cb899bc035c7e9d86bb495414dd8\" , \"index\" :0, \"position\" :9 }] }","title":"Scan shielded TRC-20 notes by ivk"},{"location":"mechanism-algorithm/shielded-TRC20-contract/#scan-shielded-trc-20-notes-by-ovk","text":"Call api: wallet/scanshieldedtrc20notesbyovk to scan the shileded TRC-20 notes Method: Post and Get Parameters: { \"start_block_index\" : 46079 , \"end_block_index\" : 46091 , \"shielded_TRC20_contract_address\" : \"TDxka3zetrpWsWoeWWjSAQDwM186UmzwQn\" , \"ovk\" : \"4364c875deeb663781a2f1530f9e4f87ea81cc3c757ca2a30fa4768940de2f98\" , \"visible\" : true } Return: { \"noteTxs\" : [ { \"note\" : { \"payment_address\" : \"ztron1e453jrrxwsvj6s480a2rduz28jfedrsjwu0xsfk8psd85hajeyc6jx56nh0x7ngclh6tytr28wn\" , \"value\" :60, \"rcm\" : \"e51c6ef6c51ab1bb289056db13d44c0af35e70e18d76d8e9f270176663d8f50d\" } , \"txid\" : \"59b64426f6bffead22739eb7aee626e11258cb899bc035c7e9d86bb495414dd8\" , \"index\" :0 } , { \"note\" : { \"payment_address\" : \"ztron129rzep2kymh87rwpp6eqk65l7a395y4w2t4zdma7chca4f8thncedlhkynta8655v3swqwna6qc\" , \"value\" :20, \"rcm\" : \"05f8adce01aa4aa61058b77924d46554edbecb3138f7704d7dc98180c3d88c07\" } , \"txid\" : \"ae633c43530ba54b6684e795720dd1c74834744988a65b0af2baea41099f2f66\" , \"index\" :0 } , { \"to_amount\" : \"4000\" , \"txid\" : \"ae633c43530ba54b6684e795720dd1c74834744988a65b0af2baea41099f2f66\" , \"index\" :1, \"transparent_to_address\" : \"TBaBXpRAeBhs75TZT751LwyhrcR25XeUot\" }] }","title":"Scan shielded TRC-20 notes by ovk"},{"location":"mechanism-algorithm/shielded-TRC20-contract/#check-the-shielded-trc-20-note-status","text":"Call api: wallet/isshieldedtrc20contractNoteSpent to check the shielded TRC-20 note status whether it is spent Method: Post Parameters: { \"note\" : { \"value\" : 40 , \"payment_address\" : \"ztron1nzfh9270dvpn0gysedl9gx6wfmh2hve3rtf0m57vla04pfjm3ermmrh9yasa2xnuy2zycsvwawe\" , \"rcm\" : \"b269a741bde1de2df79ffccf96d6eb646aa996e6567c208d774e851aef3e1909\" }, \"ak\" : \"8072d9110c9de9d9ade33d5d0f5890a7aa65b0cde42af7816d187297caf2fd64\" , \"nk\" : \"590bf33f93f792be659fd404df91e75c3b08d38d4e08ee226c3f5219cf598f14\" , \"position\" : 1 , \"shielded_TRC20_contract_address\" : \"41e6e90fbc958ba09483550882b1f0327e0193250a\" } Return: { \"is_spent\" : true }","title":"Check the shielded TRC-20 note status"},{"location":"mechanism-algorithm/shielded-transaction/","text":"Shielded Transaction \u00b6 Introduction \u00b6 TRON shielded transaction uses zk-SNARK(Zero-Knowledge Succinct Non-Interactive Argument of Knowledge) to implement a completely anonymous transaction. TronZ is the name of shielded trc10 token. In shielded transaction of transferring TronZ, the sender and the receiver's address and transfer amount can both be completely confidential. In shielded transaction of transferring TronZ, there are two types of address: \"t-addr\" (Transparent Address) \"z-addr\" (Shielded Address) \"t-addr\" address uses TRON account model. \"z-addr\" address uses Anonymous account model. In shielded transaction of transferring TronZ, there are three types of transfer transaction: - From \"t-addr\" to \"z-addr\": The transaction information of \"t-addr\" can be tracked, \"z-addr\" can not be tracked. From \"z-addr\" to \"z-addr\": The transaction information of both \"z-addr\" can not be tracked. From \"z-addr\" to \"t-addr\": The transaction information of both \"t-addr\" can be tracked, \"z-addr\" can not be tracked. From \"t-addr\" to \"t-addr\" are not supported. Usage Guide \u00b6 1. The sender can only spend one note in each transfer. The receiver can receive two notes in each transfer at most. 2. When you transfer from \"z-addr\" to \"t-addr\", if no note returns to \"z-addr\" as a change, it will generate a note of zero value automatically, and send it to a random black hole address. 3. The fee for each shielded transaction is xx. The doc below describes how to use TRON Shielded Transaction with http api. Transfer from transparent address to shielded address \u00b6 Step 1. Call api: wallet/createshieldedtransaction to build the transaction Method: Post Parameters: { \"transparent_from_address\" : \"41A7D8A35B260395C14AA456297662092BA3B76FC0\" , \"from_amount\" : 100000000 , \"ovk\" : \"798ba79bfec55e154fa69b4e6a96247288f727b5e4ecc5cd848aefc0afab02b6\" , \"shielded_receives\" :[{ \"note\" : { \"value\" : 500000000 , \"payment_address\" : \"ztron1jld8fmvujrz2vgkc867zuwklmewy4ypw0wtwgweqs2paee0uhc8f3azy90el770arksa2kunl02\" , \"rcm\" : \"723053bcbfecdf5da66c18ab0376476ef308c61b7abe891b2c01e903bcb87c0e\" } }] } Return: { \"txID\" : \"1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497\" , \"raw_data\" : { \"contract\" : [{ \"parameter\" : { \"value\" : { \"transparent_from_address\" : \"41a7d8a35b260395c14aa456297662092ba3b76fc0\" , \"binding_signature\" : \"5407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a\" , \"from_amount\" :100000000, \"fee\" :10000000, \"receive_description\" : [{ \"value_commitment\" : \"5a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd21\" , \"note_commitment\" : \"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\" , \"epk\" : \"e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b\" , \"c_enc\" : \"d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae\" , \"c_out\" : \"8e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a\" , \"zkproof\" : \"8b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c790607\" }]} , \"type_url\" : \"type.googleapis.com/protocol.ShieldedTransferContract\" } , \"type\" : \"ShieldedTransferContract\" }] , \"ref_block_bytes\" : \"0245\" , \"ref_block_hash\" : \"b1ea272768028540\" , \"expiration\" :1558691289000, \"timestamp\" :1558691230861 } , \"raw_data_hex\" : \"0a0202452208b1ea27276802854040a8aff6c9ae2d5ae708083312e2080a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412a8080a1541a7d8a35b260395c14aa456297662092ba3b76fc01080c2d72f22c2070a205a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd211220f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b621a20e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b22c404d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae2a508e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a32c0018b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c7906072a405407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a4080ade204708de9f2c9ae2d\" } Step 2. Sign the transaction using SDK Step 3. Call api: wallet/broadcasttransaction to broadcast the transaction Method: Post Parameters: { \"signature\" : [ \"5c1939e2e1177f44a6d168b5e473bd193ea099aa369ffe27727d560f1c72a3226dd4be61c19a09cabbe3f4a7433932df11cf3e54c4fc04cff0eea6906f04c32a00\" ] , \"txID\" : \"1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497\" , \"raw_data\" : { \"contract\" : [{ \"parameter\" : { \"value\" : { \"transparent_from_address\" : \"41a7d8a35b260395c14aa456297662092ba3b76fc0\" , \"binding_signature\" : \"5407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a\" , \"from_amount\" :100000000, \"fee\" :10000000, \"receive_description\" : [{ \"value_commitment\" : \"5a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd21\" , \"note_commitment\" : \"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\" , \"epk\" : \"e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b\" , \"c_enc\" : \"d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae\" , \"c_out\" : \"8e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a\" , \"zkproof\" : \"8b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c790607\" }]} , \"type_url\" : \"type.googleapis.com/protocol.ShieldedTransferContract\" } , \"type\" : \"ShieldedTransferContract\" }] , \"ref_block_bytes\" : \"0245\" , \"ref_block_hash\" : \"b1ea272768028540\" , \"expiration\" :1558691289000, \"timestamp\" :1558691230861 } , \"raw_data_hex\" : \"0a0202452208b1ea27276802854040a8aff6c9ae2d5ae708083312e2080a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412a8080a1541a7d8a35b260395c14aa456297662092ba3b76fc01080c2d72f22c2070a205a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd211220f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b621a20e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b22c404d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae2a508e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a32c0018b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c7906072a405407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a4080ade204708de9f2c9ae2d\" } Return: { \"result\" : true } Transfer from shielded address to shielded address \u00b6 Step 1. Call api: wallet/getmerkletreevoucherinfo to get the voucher of the shield address, this info will be used when create shielded transaction Method: Post Parameter: { \"out_points\" :[{ \"hash\" : \"1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497\" , \"index\" : 0 }], \"block_num\" : 1 } Return: { \"vouchers\" : [{ \"tree\" : { \"left\" : { \"content\" : \"7efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed35\" } , \"right\" : { \"content\" : \"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\" }} , \"rt\" : \"72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e\" }] , \"paths\" : [ \"2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca155207efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed350100000000000000\" ]} Step 2. Call api: wallet/createshieldedtransaction to create transaction Method: Post Parameter: { \"ask\" : \"f9302122162221f59a7668e0d740245dcabaeb51dd157ba995eecd02f4b60b06\" , \"nsk\" : \"050fc9a42909e60fefb9d548fe12718cb759e3ee28d1b92ceaeaffc23d200a0d\" , \"ovk\" : \"a0da0cc6294dc900e93887b9f08ac42a162234359fdaf523b98382602c92513c\" , \"shielded_spends\" : [ { \"note\" : { \"value\" : 90000000 , \"payment_address\" : \"ztron1jld8fmvujrz2vgkc867zuwklmewy4ypw0wtwgweqs2paee0uhc8f3azy90el770arksa2kunl02\" , \"rcm\" : \"e48836a3cfae0e1b27b5230460199b46ebd88ad650fa9db5ac1eafb20b516302\" }, \"alpha\" : \"2608999c3a97d005a879ecdaa16fd29ae434fb67b177c5e875b0c829e6a1db04\" , \"voucher\" : { \"tree\" : { \"left\" : { \"content\" : \"7efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed35\" }, \"right\" : { \"content\" : \"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\" }}, \"rt\" : \"72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e\" }, \"path\" : \"2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca155207efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed350100000000000000\" } ], \"shielded_receives\" : [ { \"note\" : { \"value\" : 80000000 , \"payment_address\" : \"ztron1wd46s6fwmz99gulqpxul6zffqtevzfpl93ng3s5834fhwf6e7w5l6zmjhmpvtwsc4wxa7dusmvr\" , \"rcm\" : \"ccced07d36641fc93cba33cddda7064cb82f6962a0bdf15a4240a4a742770e03\" } } ] } Return: { \"txID\" : \"5a057fde4a1add0da38eda9978f6c3d035f7ca4807adae4b8c57e34499dfedfb\" , \"raw_data\" : { \"contract\" : [{ \"parameter\" : { \"value\" : { \"binding_signature\" : \"b77c81fdb8af64075a7d95e8f04ef28660bb2f3f2bfb884baf17abd87ae7f212de091016ae6147edbff280b52515a1a52515bd1fa118de2964412f87b6a5790c\" , \"spend_description\" : [{ \"value_commitment\" : \"ddc8138f73323eff8d2f0367070c63f5e2659538fa431d6aa06d62696845e529\" , \"anchor\" : \"72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e\" , \"nullifier\" : \"29269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c\" , \"rk\" : \"c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf463\" , \"spend_authority_signature\" : \"518def6477325d78b77b00aac6142bfc7b9a5f3eaaff5b8b4b8f2c46114ed85d1cc15a314028f58ce0c42e9f030f465063bbc0c41d01c92edd639d02575f6b08\" , \"zkproof\" : \"82eda1b9baeaa5b08b3b33f157ae7a117e2561c702520e615a92e65098615eba1809a20e0b518fef286268d4c6f15a8eaa1b2a15630dd673fcfdde503a12daf80dfc157e6a0ea9333dedc2c365368847f2e7d8e3e648cc65cf5e805cd2343077051d70fcd140a8c665760f8cf066edb32036de7421e6755f3b64f44621aaa47d7e0f2012069ad374a7addb00b841b759b9e567c7b8b2642110eabd22358d22f4d3b4002a1ba4e9f6c018c58a5c1242acbc0169cf4aa0bf1423ed4a0b688928ad\" }] , \"fee\" :10000000, \"receive_description\" : [{ \"value_commitment\" : \"6b082c7b9d01338d60fc4f5d434a152f9d8bf5c05c22422e23d3c74d36c2b925\" , \"note_commitment\" : \"e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02\" , \"epk\" : \"36b1cb275228b3ab8275d6b04b3e2e93c04d5c0cc0ab1f41421093228b94f758\" , \"c_enc\" : \"1f91dd5cdf0731c99318a2a87b169b7159230c4dee4e47e8b0717fc51c604ccc7a2df9c873a91903e59528756e2c2f3bd07ec5aa9b994ae5d8492ad779d6a00d4a71e7cb742c1ae416e4d983554fade0e04b0213880da2e96be402a5351ca3a5d78e5a975d20cb5ec1475c7ed35dc09c0b04a3a2e8a65595d8d77652f2881a4b93ed99cff007b3923b36967be6819721ed3daea2190fca744423ffb77d1a579f569bfb30c77ad0dadc0ca484a7a89318e15d50e540744927e19c5f6f08be2e97e77cd9c6ce3e05bdbeeb6f6d7b53f83a2283f56786ea8544c98b648300dfb8554e7a2611204598ddc37c4e61ce5881e63ab171ec83c1aedf97166596d014b1fc8193ff30d4e1c7aff8a3c3638e3a41b2a4040828a8d9568ab0fe4aef08a97872ca84c6c247635a1774efde8b8ed16177393879c8626a8ea0075fa2db5af58754d712ccd5a94dcf87c019faffa2c8f3143a9a9d540de4a705c87fc16dc5efa0c387f1e6ed9dad12b84f2ca7bb09cd95a10a2e412fc410aa7ebf676f6a74f03a7334a0a1697067cc88ccd968bdf6d8c20ed7d7bd9687bda89fb28c2849e45734d30395fead9f955649a3e3f1deb15eb02f28dad608d6d0ef2943ae9fd9e14f2507e9b871a3bebe5d15ba41a8dafc7dd18cd594eb69ad89192e776fc35a3d6eb48c2446d78258fed12cbb61200ddf0c3d2dbbf73fc82a4a2e96f619fa1ad479e6da108ddab453c02fa2fa8e96721585b791f6478966e36d2d75a6677858a64672dde9bb72feb64b58b7723c13c75f70cf7333c3331d46951633a2686b108e48215eb5d56653\" , \"c_out\" : \"bbbf78f926fa2cae70ed68ef644487c32a82da230b5b8e2be26aa3102627ffc2db26f45f29c2379b20595ef26c60801f33508e17f03f66694cfdf15f606e5fabfe1d76593c1a8543593c10160f4ae4a0\" , \"zkproof\" : \"b5597534076320a98ef1a546253185011f17cc7d175a8937736bfe1daee1c33e25411346996e64d0bf1887c4553b49bb815cc8ef57b6811e7213b8c7f81c9853a4663703bf2b2989688a9ae5cabcc56c2316d411f6b910722169609d76890a2b0fc9b3fb536c3be378eb4100b925d9ae6a4a9e08eee591066f881c726a0416861ad41f69148619d187ee4d8f0f8b111da8f0d5bd4f781c2ddfdd7e4b3544b09ec2c9548cef85c28cd1129bf60f1f421c9ac7ed7f36b20984038fb33fcb409956\" }]} , \"type_url\" : \"type.googleapis.com/protocol.ShieldedTransferContract\" } , \"type\" : \"ShieldedTransferContract\" }] , \"ref_block_bytes\" : \"029b\" , \"ref_block_hash\" : \"027c45a7dc0875f7\" , \"expiration\" :1558691547000, \"timestamp\" :1558691489292 } , \"raw_data_hex\" : \"0a02029b2208027c45a7dc0875f740f88e86caae2d5adb0b083312d60b0a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e7472616374129c0b1a8d030a20ddc8138f73323eff8d2f0367070c63f5e2659538fa431d6aa06d62696845e529122072eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e1a2029269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c2220c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf4632ac00182eda1b9baeaa5b08b3b33f157ae7a117e2561c702520e615a92e65098615eba1809a20e0b518fef286268d4c6f15a8eaa1b2a15630dd673fcfdde503a12daf80dfc157e6a0ea9333dedc2c365368847f2e7d8e3e648cc65cf5e805cd2343077051d70fcd140a8c665760f8cf066edb32036de7421e6755f3b64f44621aaa47d7e0f2012069ad374a7addb00b841b759b9e567c7b8b2642110eabd22358d22f4d3b4002a1ba4e9f6c018c58a5c1242acbc0169cf4aa0bf1423ed4a0b688928ad3240518def6477325d78b77b00aac6142bfc7b9a5f3eaaff5b8b4b8f2c46114ed85d1cc15a314028f58ce0c42e9f030f465063bbc0c41d01c92edd639d02575f6b0822c2070a206b082c7b9d01338d60fc4f5d434a152f9d8bf5c05c22422e23d3c74d36c2b9251220e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f021a2036b1cb275228b3ab8275d6b04b3e2e93c04d5c0cc0ab1f41421093228b94f75822c4041f91dd5cdf0731c99318a2a87b169b7159230c4dee4e47e8b0717fc51c604ccc7a2df9c873a91903e59528756e2c2f3bd07ec5aa9b994ae5d8492ad779d6a00d4a71e7cb742c1ae416e4d983554fade0e04b0213880da2e96be402a5351ca3a5d78e5a975d20cb5ec1475c7ed35dc09c0b04a3a2e8a65595d8d77652f2881a4b93ed99cff007b3923b36967be6819721ed3daea2190fca744423ffb77d1a579f569bfb30c77ad0dadc0ca484a7a89318e15d50e540744927e19c5f6f08be2e97e77cd9c6ce3e05bdbeeb6f6d7b53f83a2283f56786ea8544c98b648300dfb8554e7a2611204598ddc37c4e61ce5881e63ab171ec83c1aedf97166596d014b1fc8193ff30d4e1c7aff8a3c3638e3a41b2a4040828a8d9568ab0fe4aef08a97872ca84c6c247635a1774efde8b8ed16177393879c8626a8ea0075fa2db5af58754d712ccd5a94dcf87c019faffa2c8f3143a9a9d540de4a705c87fc16dc5efa0c387f1e6ed9dad12b84f2ca7bb09cd95a10a2e412fc410aa7ebf676f6a74f03a7334a0a1697067cc88ccd968bdf6d8c20ed7d7bd9687bda89fb28c2849e45734d30395fead9f955649a3e3f1deb15eb02f28dad608d6d0ef2943ae9fd9e14f2507e9b871a3bebe5d15ba41a8dafc7dd18cd594eb69ad89192e776fc35a3d6eb48c2446d78258fed12cbb61200ddf0c3d2dbbf73fc82a4a2e96f619fa1ad479e6da108ddab453c02fa2fa8e96721585b791f6478966e36d2d75a6677858a64672dde9bb72feb64b58b7723c13c75f70cf7333c3331d46951633a2686b108e48215eb5d566532a50bbbf78f926fa2cae70ed68ef644487c32a82da230b5b8e2be26aa3102627ffc2db26f45f29c2379b20595ef26c60801f33508e17f03f66694cfdf15f606e5fabfe1d76593c1a8543593c10160f4ae4a032c001b5597534076320a98ef1a546253185011f17cc7d175a8937736bfe1daee1c33e25411346996e64d0bf1887c4553b49bb815cc8ef57b6811e7213b8c7f81c9853a4663703bf2b2989688a9ae5cabcc56c2316d411f6b910722169609d76890a2b0fc9b3fb536c3be378eb4100b925d9ae6a4a9e08eee591066f881c726a0416861ad41f69148619d187ee4d8f0f8b111da8f0d5bd4f781c2ddfdd7e4b3544b09ec2c9548cef85c28cd1129bf60f1f421c9ac7ed7f36b20984038fb33fcb4099562a40b77c81fdb8af64075a7d95e8f04ef28660bb2f3f2bfb884baf17abd87ae7f212de091016ae6147edbff280b52515a1a52515bd1fa118de2964412f87b6a5790c4080ade204708ccc82caae2d\" } Step 3. Call api: wallet/broadcasttransaction to broadcast this transaction(no need to sign this transaction) Method: Post Parameter: { \"txID\" : \"791d30b7123448a54c56407a11857d4f3885cb699a071ee5f265f7db408dec6c\" , \"raw_data\" :{ \"contract\" :[{ \"parameter\" :{ \"value\" :{ \"binding_signature\" : \"231cc2ddbf2715b51d07ed63e142ad874e7e173ec0c5d681b49e3060ca33bd65cf39921355dfaacc62dac7aa810c49daafbf8db8a1adc168da4a833eba0d7504\" , \"spend_description\" :[{ \"value_commitment\" : \"f4c543df8f0fe9b71b1bbd6aa2f06f87e07605dcd339b0eaa48afd9e2488b140\" , \"anchor\" : \"72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e\" , \"nullifier\" : \"29269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c\" , \"rk\" : \"c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf463\" , \"spend_authority_signature\" : \"2f50449f92e4bf541c9ba7d82b93f6dd416208449ea8996dc45614c1cb90a7911264fece30446da875d8a864224f1a3870e3654ec8a4005305faa329224f4c08\" , \"zkproof\" : \"984779ad18c87d71dd79b78564e49c1c18d6f871ef45f79bdb012f73439d6402593dd7cda308d9d5412e2b64b0be461192eb2a8d2ffdcc700475a1c8b8912220f628af41bf44a7c010a8dda2a65f98b4aaf8c375c4046afd1af3e6bbe4b33b9210c68298f46999322174b9ba76b0be4d6ef2c74ff5d16370a8c30fa17c5c3bbeab217610de5cc680b1d64d557c4d53a4a3f73294699ac6a00b37c3d8076a20362ab09c77c94f08bb00db2648ade72f224821ecc190627222cf58130b9bcf639b\" }], \"fee\" : 10000000 , \"receive_description\" :[{ \"value_commitment\" : \"3f4465801b357f9b8334eb3025bd8b3cd84247355c099133c08d53a8cffd3595\" , \"note_commitment\" : \"e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02\" , \"epk\" : \"3ece31615aec76e7711e25b05b05f5b7fb99d75f3812fe56702291633e5f474c\" , \"c_enc\" : \"4fc57e65bfdd91e2ae0284cfc2926d5df63d51b8f864e9191f368404db390e28ce15fefc9bd210aca4e7f42b30140bc4b1650d9a79bcbfb1670288c68d4678ba5c34266ce1bd4fd1f4e4040508b072cdca87d69e4921af8c8305f982aa7f37897a29c69cce06c311eafb2ef5928f07d5b8f207e5f46c32237f6e9b0eadc2597e0cd8d884cd3f4a35d86145e75565913b9d4a2e613523c9f377fe3bdf6f1d9e6789605e6bdaf9526412632e52a1994fec98dd086596c62ba028508d45933943f3446c83f463f56e860f29d2ea0eb3b87a55a0602974b7df6b58905872cb97a757f24515f05d2b12d932a0ac038e0c0b15b9c8b324c8e31d4ddf8bf39bfb65bd9d495eac1818b281822c9ad85adbe8a90f62adfbb6723fae7a7d91760a5b2d146f180d5ca4d85653449089f4788459752e899abd4abd395842e8b5315dd3738eee0b4e0f758698aabb92df587b703e85774048f290ea366696de3dde665eefb6fce6c2776e4e9ad18662b8d95af4203a10e9af54085ee498c77ad7e7b5824f91aaeb8f138d8c90d95f57e71dc15c177b602c45e38f12e402cc65c2c55b80c9a7d908332baa30b2871a0d6cf417bcaf0be6ae5c451c2468e945273151da500aaccd7235a29c7fcd0da4ac4d6ceefda59cf568f7a362b49654a5793c552bd970681a6489a1951ad75e22215b22d5cd511a030d751892b4b5746d66f048d6b6889c2ddcd5da908417b91ef52c0507b2ce8b1214567b71963c5d6ace1f6e858ce02b11fcf0f839cbe8183fa71b9a239f70c5e98642f6e9b9b6eb31f12a752829ebecf0f12df040\" , \"c_out\" : \"5fc1926bb6501f8ec4dc796d56786d7f019db9e43ccde07bbbddd95444df4f099310ef3f8d86a0a25ff72de0385563e44b9cb9e5e477299891959d24060a3b08b41aa36c29ce7297f0806a74f11aa99e\" , \"zkproof\" : \"b924ae84aba3af2c4d6529c22ebd6ba900ac63c629723e035ab843295d41aec1e9ebb2906fa7471473dbdae7e182fbd7a9f14a2f599a79456a3dbb949203d9923c3c3600225f12217e38b69b88a080b5b5751d78ac84375c9a03ad0bc61492850c49488a654c376c49701abdde20d5658bce851e9a6fd1bee5429b9b4d4b55ed1eb888a43f435740b8f063ea6e2e7e81b53f12e67e3eac60020aab5c3ff45d34ff2c3dde4eb76ed2893df22232993deb1b9397d1d4f9cc1eb8405f7cbef5a24b\" }]}, \"type_url\" : \"type.googleapis.com/protocol.ShieldedTransferContract\" }, \"type\" : \"ShieldedTransferContract\" }], \"ref_block_bytes\" : \"0328\" , \"ref_block_hash\" : \"833c24d9f1019cd0\" , \"expiration\" : 1558691970000 , \"timestamp\" : 1558691911355 }, \"raw_data_hex\" : \"0a0203282208833c24d9f1019cd040d0f79fcaae2d5adb0b083312d60b0a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e7472616374129c0b1a8d030a20f4c543df8f0fe9b71b1bbd6aa2f06f87e07605dcd339b0eaa48afd9e2488b140122072eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e1a2029269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c2220c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf4632ac001984779ad18c87d71dd79b78564e49c1c18d6f871ef45f79bdb012f73439d6402593dd7cda308d9d5412e2b64b0be461192eb2a8d2ffdcc700475a1c8b8912220f628af41bf44a7c010a8dda2a65f98b4aaf8c375c4046afd1af3e6bbe4b33b9210c68298f46999322174b9ba76b0be4d6ef2c74ff5d16370a8c30fa17c5c3bbeab217610de5cc680b1d64d557c4d53a4a3f73294699ac6a00b37c3d8076a20362ab09c77c94f08bb00db2648ade72f224821ecc190627222cf58130b9bcf639b32402f50449f92e4bf541c9ba7d82b93f6dd416208449ea8996dc45614c1cb90a7911264fece30446da875d8a864224f1a3870e3654ec8a4005305faa329224f4c0822c2070a203f4465801b357f9b8334eb3025bd8b3cd84247355c099133c08d53a8cffd35951220e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f021a203ece31615aec76e7711e25b05b05f5b7fb99d75f3812fe56702291633e5f474c22c4044fc57e65bfdd91e2ae0284cfc2926d5df63d51b8f864e9191f368404db390e28ce15fefc9bd210aca4e7f42b30140bc4b1650d9a79bcbfb1670288c68d4678ba5c34266ce1bd4fd1f4e4040508b072cdca87d69e4921af8c8305f982aa7f37897a29c69cce06c311eafb2ef5928f07d5b8f207e5f46c32237f6e9b0eadc2597e0cd8d884cd3f4a35d86145e75565913b9d4a2e613523c9f377fe3bdf6f1d9e6789605e6bdaf9526412632e52a1994fec98dd086596c62ba028508d45933943f3446c83f463f56e860f29d2ea0eb3b87a55a0602974b7df6b58905872cb97a757f24515f05d2b12d932a0ac038e0c0b15b9c8b324c8e31d4ddf8bf39bfb65bd9d495eac1818b281822c9ad85adbe8a90f62adfbb6723fae7a7d91760a5b2d146f180d5ca4d85653449089f4788459752e899abd4abd395842e8b5315dd3738eee0b4e0f758698aabb92df587b703e85774048f290ea366696de3dde665eefb6fce6c2776e4e9ad18662b8d95af4203a10e9af54085ee498c77ad7e7b5824f91aaeb8f138d8c90d95f57e71dc15c177b602c45e38f12e402cc65c2c55b80c9a7d908332baa30b2871a0d6cf417bcaf0be6ae5c451c2468e945273151da500aaccd7235a29c7fcd0da4ac4d6ceefda59cf568f7a362b49654a5793c552bd970681a6489a1951ad75e22215b22d5cd511a030d751892b4b5746d66f048d6b6889c2ddcd5da908417b91ef52c0507b2ce8b1214567b71963c5d6ace1f6e858ce02b11fcf0f839cbe8183fa71b9a239f70c5e98642f6e9b9b6eb31f12a752829ebecf0f12df0402a505fc1926bb6501f8ec4dc796d56786d7f019db9e43ccde07bbbddd95444df4f099310ef3f8d86a0a25ff72de0385563e44b9cb9e5e477299891959d24060a3b08b41aa36c29ce7297f0806a74f11aa99e32c001b924ae84aba3af2c4d6529c22ebd6ba900ac63c629723e035ab843295d41aec1e9ebb2906fa7471473dbdae7e182fbd7a9f14a2f599a79456a3dbb949203d9923c3c3600225f12217e38b69b88a080b5b5751d78ac84375c9a03ad0bc61492850c49488a654c376c49701abdde20d5658bce851e9a6fd1bee5429b9b4d4b55ed1eb888a43f435740b8f063ea6e2e7e81b53f12e67e3eac60020aab5c3ff45d34ff2c3dde4eb76ed2893df22232993deb1b9397d1d4f9cc1eb8405f7cbef5a24b2a40231cc2ddbf2715b51d07ed63e142ad874e7e173ec0c5d681b49e3060ca33bd65cf39921355dfaacc62dac7aa810c49daafbf8db8a1adc168da4a833eba0d75044080ade20470bbad9ccaae2d\" } Return: { \"result\" : true } Transfer from shielded address to transparent address \u00b6 Step 1. Call api: wallet/getmerkletreevoucherinfo to get the voucher of the shield address, this info will be used when create shielded transaction Method: Post Parameter: { \"out_points\" :[{ \"hash\" : \"791d30b7123448a54c56407a11857d4f3885cb699a071ee5f265f7db408dec6c\" , \"index\" : 0 }], \"block_num\" : 1 } Return: { \"vouchers\" : [{ \"tree\" : { \"left\" : { \"content\" : \"e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02\" } , \"parents\" : [{ \"content\" : \"c835053e32be73852e67a65f4cd40407a11f4a7a38bb84b8d3e8a1f57acdbf61\" }]} , \"rt\" : \"8bdf96ac1241f30d5cd54d4ece7f10867d9eef854121ef77d1015f0ab2a26b1b\" }] , \"paths\" : [ \"2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420c835053e32be73852e67a65f4cd40407a11f4a7a38bb84b8d3e8a1f57acdbf612001000000000000000000000000000000000000000000000000000000000000000200000000000000\" ]} Step 2. Call api: wallet/createshieldedtransaction to create transaction Method: Post Parameter: { \"ask\" : \"653b3a3fdd40b60d2f53ba121df8840f6590384993f8fa9a0ecb0dfb23496604\" , \"nsk\" : \"428ff3c9e101dc1fca08f7b0e3387b23b68016746ae565aefc19d112b696db01\" , \"ovk\" : \"1274dcc5c7307bf0fd0ead466e9dd5641fed4a51391f681862370e2f2654cc61\" , \"shielded_spends\" : [ { \"note\" : { \"value\" : 80000000 , \"payment_address\" : \"ztron1wd46s6fwmz99gulqpxul6zffqtevzfpl93ng3s5834fhwf6e7w5l6zmjhmpvtwsc4wxa7dusmvr\" , \"rcm\" : \"ccced07d36641fc93cba33cddda7064cb82f6962a0bdf15a4240a4a742770e03\" }, \"alpha\" : \"3ad5406efd6efcd81d27696d5f91efc07ba5c98ea6fb0f787b93e557b51df405\" , \"voucher\" : { \"tree\" : { \"left\" : { \"content\" : \"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\" }, \"right\" : { \"content\" : \"e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02\" } }, \"rt\" : \"774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a567\" }, \"path\" : \"2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca15520f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b620100000000000000\" } ], \"transparent_to_address\" : \"41A7D8A35B260395C14AA456297662092BA3B76FC0\" , \"to_amount\" : 70000000 } Return: { \"txID\" : \"4dbdc95574a155434baeaf5e690e2d0c77a2b883a048d8d0103ab5c7fed8d866\" , \"raw_data\" : { \"contract\" : [{ \"parameter\" : { \"value\" : { \"to_amount\" :70000000, \"binding_signature\" : \"780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203\" , \"spend_description\" : [{ \"value_commitment\" : \"086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd9\" , \"anchor\" : \"774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a567\" , \"nullifier\" : \"fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587\" , \"rk\" : \"41132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d4\" , \"spend_authority_signature\" : \"b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f30207\" , \"zkproof\" : \"b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee1\" }] , \"fee\" :10000000, \"transparent_to_address\" : \"41a7d8a35b260395c14aa456297662092ba3b76fc0\" } , \"type_url\" : \"type.googleapis.com/protocol.ShieldedTransferContract\" } , \"type\" : \"ShieldedTransferContract\" }] , \"ref_block_bytes\" : \"00dc\" , \"ref_block_hash\" : \"a45c748f93fa2854\" , \"expiration\" :1558928754000, \"timestamp\" :1558928695327 } , \"raw_data_hex\" : \"0a0200dc2208a45c748f93fa285440d08a94bbaf2d5ab204083312ad040a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412f3031a8d030a20086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd91220774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a5671a20fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587222041132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d42ac001b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee13240b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f302072a40780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203321541a7d8a35b260395c14aa456297662092ba3b76fc03880bbb0214080ade204709fc090bbaf2d\" } Step 3. Call api: wallet/broadcasttransaction to broadcast this transaction(no need to sign this transaction) Method: Post Parameter: { \"txID\" : \"4dbdc95574a155434baeaf5e690e2d0c77a2b883a048d8d0103ab5c7fed8d866\" , \"raw_data\" :{ \"contract\" :[{ \"parameter\" :{ \"value\" :{ \"to_amount\" : 70000000 , \"binding_signature\" : \"780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203\" , \"spend_description\" :[{ \"value_commitment\" : \"086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd9\" , \"anchor\" : \"774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a567\" , \"nullifier\" : \"fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587\" , \"rk\" : \"41132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d4\" , \"spend_authority_signature\" : \"b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f30207\" , \"zkproof\" : \"b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee1\" }], \"fee\" : 10000000 , \"transparent_to_address\" : \"41a7d8a35b260395c14aa456297662092ba3b76fc0\" }, \"type_url\" : \"type.googleapis.com/protocol.ShieldedTransferContract\" }, \"type\" : \"ShieldedTransferContract\" }], \"ref_block_bytes\" : \"00dc\" , \"ref_block_hash\" : \"a45c748f93fa2854\" , \"expiration\" : 1558928754000 , \"timestamp\" : 1558928695327 }, \"raw_data_hex\" : \"0a0200dc2208a45c748f93fa285440d08a94bbaf2d5ab204083312ad040a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412f3031a8d030a20086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd91220774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a5671a20fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587222041132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d42ac001b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee13240b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f302072a40780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203321541a7d8a35b260395c14aa456297662092ba3b76fc03880bbb0214080ade204709fc090bbaf2d\" } Return: { \"result\" : true }","title":"Shielded Transaction"},{"location":"mechanism-algorithm/shielded-transaction/#shielded-transaction","text":"","title":"Shielded Transaction"},{"location":"mechanism-algorithm/shielded-transaction/#introduction","text":"TRON shielded transaction uses zk-SNARK(Zero-Knowledge Succinct Non-Interactive Argument of Knowledge) to implement a completely anonymous transaction. TronZ is the name of shielded trc10 token. In shielded transaction of transferring TronZ, the sender and the receiver's address and transfer amount can both be completely confidential. In shielded transaction of transferring TronZ, there are two types of address: \"t-addr\" (Transparent Address) \"z-addr\" (Shielded Address) \"t-addr\" address uses TRON account model. \"z-addr\" address uses Anonymous account model. In shielded transaction of transferring TronZ, there are three types of transfer transaction: - From \"t-addr\" to \"z-addr\": The transaction information of \"t-addr\" can be tracked, \"z-addr\" can not be tracked. From \"z-addr\" to \"z-addr\": The transaction information of both \"z-addr\" can not be tracked. From \"z-addr\" to \"t-addr\": The transaction information of both \"t-addr\" can be tracked, \"z-addr\" can not be tracked. From \"t-addr\" to \"t-addr\" are not supported.","title":"Introduction"},{"location":"mechanism-algorithm/shielded-transaction/#usage-guide","text":"1. The sender can only spend one note in each transfer. The receiver can receive two notes in each transfer at most. 2. When you transfer from \"z-addr\" to \"t-addr\", if no note returns to \"z-addr\" as a change, it will generate a note of zero value automatically, and send it to a random black hole address. 3. The fee for each shielded transaction is xx. The doc below describes how to use TRON Shielded Transaction with http api.","title":"Usage Guide"},{"location":"mechanism-algorithm/shielded-transaction/#transfer-from-transparent-address-to-shielded-address","text":"Step 1. Call api: wallet/createshieldedtransaction to build the transaction Method: Post Parameters: { \"transparent_from_address\" : \"41A7D8A35B260395C14AA456297662092BA3B76FC0\" , \"from_amount\" : 100000000 , \"ovk\" : \"798ba79bfec55e154fa69b4e6a96247288f727b5e4ecc5cd848aefc0afab02b6\" , \"shielded_receives\" :[{ \"note\" : { \"value\" : 500000000 , \"payment_address\" : \"ztron1jld8fmvujrz2vgkc867zuwklmewy4ypw0wtwgweqs2paee0uhc8f3azy90el770arksa2kunl02\" , \"rcm\" : \"723053bcbfecdf5da66c18ab0376476ef308c61b7abe891b2c01e903bcb87c0e\" } }] } Return: { \"txID\" : \"1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497\" , \"raw_data\" : { \"contract\" : [{ \"parameter\" : { \"value\" : { \"transparent_from_address\" : \"41a7d8a35b260395c14aa456297662092ba3b76fc0\" , \"binding_signature\" : \"5407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a\" , \"from_amount\" :100000000, \"fee\" :10000000, \"receive_description\" : [{ \"value_commitment\" : \"5a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd21\" , \"note_commitment\" : \"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\" , \"epk\" : \"e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b\" , \"c_enc\" : \"d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae\" , \"c_out\" : \"8e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a\" , \"zkproof\" : \"8b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c790607\" }]} , \"type_url\" : \"type.googleapis.com/protocol.ShieldedTransferContract\" } , \"type\" : \"ShieldedTransferContract\" }] , \"ref_block_bytes\" : \"0245\" , \"ref_block_hash\" : \"b1ea272768028540\" , \"expiration\" :1558691289000, \"timestamp\" :1558691230861 } , \"raw_data_hex\" : \"0a0202452208b1ea27276802854040a8aff6c9ae2d5ae708083312e2080a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412a8080a1541a7d8a35b260395c14aa456297662092ba3b76fc01080c2d72f22c2070a205a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd211220f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b621a20e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b22c404d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae2a508e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a32c0018b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c7906072a405407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a4080ade204708de9f2c9ae2d\" } Step 2. Sign the transaction using SDK Step 3. Call api: wallet/broadcasttransaction to broadcast the transaction Method: Post Parameters: { \"signature\" : [ \"5c1939e2e1177f44a6d168b5e473bd193ea099aa369ffe27727d560f1c72a3226dd4be61c19a09cabbe3f4a7433932df11cf3e54c4fc04cff0eea6906f04c32a00\" ] , \"txID\" : \"1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497\" , \"raw_data\" : { \"contract\" : [{ \"parameter\" : { \"value\" : { \"transparent_from_address\" : \"41a7d8a35b260395c14aa456297662092ba3b76fc0\" , \"binding_signature\" : \"5407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a\" , \"from_amount\" :100000000, \"fee\" :10000000, \"receive_description\" : [{ \"value_commitment\" : \"5a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd21\" , \"note_commitment\" : \"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\" , \"epk\" : \"e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b\" , \"c_enc\" : \"d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae\" , \"c_out\" : \"8e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a\" , \"zkproof\" : \"8b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c790607\" }]} , \"type_url\" : \"type.googleapis.com/protocol.ShieldedTransferContract\" } , \"type\" : \"ShieldedTransferContract\" }] , \"ref_block_bytes\" : \"0245\" , \"ref_block_hash\" : \"b1ea272768028540\" , \"expiration\" :1558691289000, \"timestamp\" :1558691230861 } , \"raw_data_hex\" : \"0a0202452208b1ea27276802854040a8aff6c9ae2d5ae708083312e2080a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412a8080a1541a7d8a35b260395c14aa456297662092ba3b76fc01080c2d72f22c2070a205a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd211220f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b621a20e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b22c404d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae2a508e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a32c0018b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c7906072a405407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a4080ade204708de9f2c9ae2d\" } Return: { \"result\" : true }","title":"Transfer from transparent address to shielded address"},{"location":"mechanism-algorithm/shielded-transaction/#transfer-from-shielded-address-to-shielded-address","text":"Step 1. Call api: wallet/getmerkletreevoucherinfo to get the voucher of the shield address, this info will be used when create shielded transaction Method: Post Parameter: { \"out_points\" :[{ \"hash\" : \"1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497\" , \"index\" : 0 }], \"block_num\" : 1 } Return: { \"vouchers\" : [{ \"tree\" : { \"left\" : { \"content\" : \"7efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed35\" } , \"right\" : { \"content\" : \"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\" }} , \"rt\" : \"72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e\" }] , \"paths\" : [ \"2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca155207efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed350100000000000000\" ]} Step 2. Call api: wallet/createshieldedtransaction to create transaction Method: Post Parameter: { \"ask\" : \"f9302122162221f59a7668e0d740245dcabaeb51dd157ba995eecd02f4b60b06\" , \"nsk\" : \"050fc9a42909e60fefb9d548fe12718cb759e3ee28d1b92ceaeaffc23d200a0d\" , \"ovk\" : \"a0da0cc6294dc900e93887b9f08ac42a162234359fdaf523b98382602c92513c\" , \"shielded_spends\" : [ { \"note\" : { \"value\" : 90000000 , \"payment_address\" : \"ztron1jld8fmvujrz2vgkc867zuwklmewy4ypw0wtwgweqs2paee0uhc8f3azy90el770arksa2kunl02\" , \"rcm\" : \"e48836a3cfae0e1b27b5230460199b46ebd88ad650fa9db5ac1eafb20b516302\" }, \"alpha\" : \"2608999c3a97d005a879ecdaa16fd29ae434fb67b177c5e875b0c829e6a1db04\" , \"voucher\" : { \"tree\" : { \"left\" : { \"content\" : \"7efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed35\" }, \"right\" : { \"content\" : \"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\" }}, \"rt\" : \"72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e\" }, \"path\" : \"2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca155207efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed350100000000000000\" } ], \"shielded_receives\" : [ { \"note\" : { \"value\" : 80000000 , \"payment_address\" : \"ztron1wd46s6fwmz99gulqpxul6zffqtevzfpl93ng3s5834fhwf6e7w5l6zmjhmpvtwsc4wxa7dusmvr\" , \"rcm\" : \"ccced07d36641fc93cba33cddda7064cb82f6962a0bdf15a4240a4a742770e03\" } } ] } Return: { \"txID\" : \"5a057fde4a1add0da38eda9978f6c3d035f7ca4807adae4b8c57e34499dfedfb\" , \"raw_data\" : { \"contract\" : [{ \"parameter\" : { \"value\" : { \"binding_signature\" : \"b77c81fdb8af64075a7d95e8f04ef28660bb2f3f2bfb884baf17abd87ae7f212de091016ae6147edbff280b52515a1a52515bd1fa118de2964412f87b6a5790c\" , \"spend_description\" : [{ \"value_commitment\" : \"ddc8138f73323eff8d2f0367070c63f5e2659538fa431d6aa06d62696845e529\" , \"anchor\" : \"72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e\" , \"nullifier\" : \"29269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c\" , \"rk\" : \"c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf463\" , \"spend_authority_signature\" : \"518def6477325d78b77b00aac6142bfc7b9a5f3eaaff5b8b4b8f2c46114ed85d1cc15a314028f58ce0c42e9f030f465063bbc0c41d01c92edd639d02575f6b08\" , \"zkproof\" : \"82eda1b9baeaa5b08b3b33f157ae7a117e2561c702520e615a92e65098615eba1809a20e0b518fef286268d4c6f15a8eaa1b2a15630dd673fcfdde503a12daf80dfc157e6a0ea9333dedc2c365368847f2e7d8e3e648cc65cf5e805cd2343077051d70fcd140a8c665760f8cf066edb32036de7421e6755f3b64f44621aaa47d7e0f2012069ad374a7addb00b841b759b9e567c7b8b2642110eabd22358d22f4d3b4002a1ba4e9f6c018c58a5c1242acbc0169cf4aa0bf1423ed4a0b688928ad\" }] , \"fee\" :10000000, \"receive_description\" : [{ \"value_commitment\" : \"6b082c7b9d01338d60fc4f5d434a152f9d8bf5c05c22422e23d3c74d36c2b925\" , \"note_commitment\" : \"e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02\" , \"epk\" : \"36b1cb275228b3ab8275d6b04b3e2e93c04d5c0cc0ab1f41421093228b94f758\" , \"c_enc\" : \"1f91dd5cdf0731c99318a2a87b169b7159230c4dee4e47e8b0717fc51c604ccc7a2df9c873a91903e59528756e2c2f3bd07ec5aa9b994ae5d8492ad779d6a00d4a71e7cb742c1ae416e4d983554fade0e04b0213880da2e96be402a5351ca3a5d78e5a975d20cb5ec1475c7ed35dc09c0b04a3a2e8a65595d8d77652f2881a4b93ed99cff007b3923b36967be6819721ed3daea2190fca744423ffb77d1a579f569bfb30c77ad0dadc0ca484a7a89318e15d50e540744927e19c5f6f08be2e97e77cd9c6ce3e05bdbeeb6f6d7b53f83a2283f56786ea8544c98b648300dfb8554e7a2611204598ddc37c4e61ce5881e63ab171ec83c1aedf97166596d014b1fc8193ff30d4e1c7aff8a3c3638e3a41b2a4040828a8d9568ab0fe4aef08a97872ca84c6c247635a1774efde8b8ed16177393879c8626a8ea0075fa2db5af58754d712ccd5a94dcf87c019faffa2c8f3143a9a9d540de4a705c87fc16dc5efa0c387f1e6ed9dad12b84f2ca7bb09cd95a10a2e412fc410aa7ebf676f6a74f03a7334a0a1697067cc88ccd968bdf6d8c20ed7d7bd9687bda89fb28c2849e45734d30395fead9f955649a3e3f1deb15eb02f28dad608d6d0ef2943ae9fd9e14f2507e9b871a3bebe5d15ba41a8dafc7dd18cd594eb69ad89192e776fc35a3d6eb48c2446d78258fed12cbb61200ddf0c3d2dbbf73fc82a4a2e96f619fa1ad479e6da108ddab453c02fa2fa8e96721585b791f6478966e36d2d75a6677858a64672dde9bb72feb64b58b7723c13c75f70cf7333c3331d46951633a2686b108e48215eb5d56653\" , \"c_out\" : \"bbbf78f926fa2cae70ed68ef644487c32a82da230b5b8e2be26aa3102627ffc2db26f45f29c2379b20595ef26c60801f33508e17f03f66694cfdf15f606e5fabfe1d76593c1a8543593c10160f4ae4a0\" , \"zkproof\" : \"b5597534076320a98ef1a546253185011f17cc7d175a8937736bfe1daee1c33e25411346996e64d0bf1887c4553b49bb815cc8ef57b6811e7213b8c7f81c9853a4663703bf2b2989688a9ae5cabcc56c2316d411f6b910722169609d76890a2b0fc9b3fb536c3be378eb4100b925d9ae6a4a9e08eee591066f881c726a0416861ad41f69148619d187ee4d8f0f8b111da8f0d5bd4f781c2ddfdd7e4b3544b09ec2c9548cef85c28cd1129bf60f1f421c9ac7ed7f36b20984038fb33fcb409956\" }]} , \"type_url\" : \"type.googleapis.com/protocol.ShieldedTransferContract\" } , \"type\" : \"ShieldedTransferContract\" }] , \"ref_block_bytes\" : \"029b\" , \"ref_block_hash\" : \"027c45a7dc0875f7\" , \"expiration\" :1558691547000, \"timestamp\" :1558691489292 } , \"raw_data_hex\" : \"0a02029b2208027c45a7dc0875f740f88e86caae2d5adb0b083312d60b0a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e7472616374129c0b1a8d030a20ddc8138f73323eff8d2f0367070c63f5e2659538fa431d6aa06d62696845e529122072eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e1a2029269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c2220c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf4632ac00182eda1b9baeaa5b08b3b33f157ae7a117e2561c702520e615a92e65098615eba1809a20e0b518fef286268d4c6f15a8eaa1b2a15630dd673fcfdde503a12daf80dfc157e6a0ea9333dedc2c365368847f2e7d8e3e648cc65cf5e805cd2343077051d70fcd140a8c665760f8cf066edb32036de7421e6755f3b64f44621aaa47d7e0f2012069ad374a7addb00b841b759b9e567c7b8b2642110eabd22358d22f4d3b4002a1ba4e9f6c018c58a5c1242acbc0169cf4aa0bf1423ed4a0b688928ad3240518def6477325d78b77b00aac6142bfc7b9a5f3eaaff5b8b4b8f2c46114ed85d1cc15a314028f58ce0c42e9f030f465063bbc0c41d01c92edd639d02575f6b0822c2070a206b082c7b9d01338d60fc4f5d434a152f9d8bf5c05c22422e23d3c74d36c2b9251220e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f021a2036b1cb275228b3ab8275d6b04b3e2e93c04d5c0cc0ab1f41421093228b94f75822c4041f91dd5cdf0731c99318a2a87b169b7159230c4dee4e47e8b0717fc51c604ccc7a2df9c873a91903e59528756e2c2f3bd07ec5aa9b994ae5d8492ad779d6a00d4a71e7cb742c1ae416e4d983554fade0e04b0213880da2e96be402a5351ca3a5d78e5a975d20cb5ec1475c7ed35dc09c0b04a3a2e8a65595d8d77652f2881a4b93ed99cff007b3923b36967be6819721ed3daea2190fca744423ffb77d1a579f569bfb30c77ad0dadc0ca484a7a89318e15d50e540744927e19c5f6f08be2e97e77cd9c6ce3e05bdbeeb6f6d7b53f83a2283f56786ea8544c98b648300dfb8554e7a2611204598ddc37c4e61ce5881e63ab171ec83c1aedf97166596d014b1fc8193ff30d4e1c7aff8a3c3638e3a41b2a4040828a8d9568ab0fe4aef08a97872ca84c6c247635a1774efde8b8ed16177393879c8626a8ea0075fa2db5af58754d712ccd5a94dcf87c019faffa2c8f3143a9a9d540de4a705c87fc16dc5efa0c387f1e6ed9dad12b84f2ca7bb09cd95a10a2e412fc410aa7ebf676f6a74f03a7334a0a1697067cc88ccd968bdf6d8c20ed7d7bd9687bda89fb28c2849e45734d30395fead9f955649a3e3f1deb15eb02f28dad608d6d0ef2943ae9fd9e14f2507e9b871a3bebe5d15ba41a8dafc7dd18cd594eb69ad89192e776fc35a3d6eb48c2446d78258fed12cbb61200ddf0c3d2dbbf73fc82a4a2e96f619fa1ad479e6da108ddab453c02fa2fa8e96721585b791f6478966e36d2d75a6677858a64672dde9bb72feb64b58b7723c13c75f70cf7333c3331d46951633a2686b108e48215eb5d566532a50bbbf78f926fa2cae70ed68ef644487c32a82da230b5b8e2be26aa3102627ffc2db26f45f29c2379b20595ef26c60801f33508e17f03f66694cfdf15f606e5fabfe1d76593c1a8543593c10160f4ae4a032c001b5597534076320a98ef1a546253185011f17cc7d175a8937736bfe1daee1c33e25411346996e64d0bf1887c4553b49bb815cc8ef57b6811e7213b8c7f81c9853a4663703bf2b2989688a9ae5cabcc56c2316d411f6b910722169609d76890a2b0fc9b3fb536c3be378eb4100b925d9ae6a4a9e08eee591066f881c726a0416861ad41f69148619d187ee4d8f0f8b111da8f0d5bd4f781c2ddfdd7e4b3544b09ec2c9548cef85c28cd1129bf60f1f421c9ac7ed7f36b20984038fb33fcb4099562a40b77c81fdb8af64075a7d95e8f04ef28660bb2f3f2bfb884baf17abd87ae7f212de091016ae6147edbff280b52515a1a52515bd1fa118de2964412f87b6a5790c4080ade204708ccc82caae2d\" } Step 3. Call api: wallet/broadcasttransaction to broadcast this transaction(no need to sign this transaction) Method: Post Parameter: { \"txID\" : \"791d30b7123448a54c56407a11857d4f3885cb699a071ee5f265f7db408dec6c\" , \"raw_data\" :{ \"contract\" :[{ \"parameter\" :{ \"value\" :{ \"binding_signature\" : \"231cc2ddbf2715b51d07ed63e142ad874e7e173ec0c5d681b49e3060ca33bd65cf39921355dfaacc62dac7aa810c49daafbf8db8a1adc168da4a833eba0d7504\" , \"spend_description\" :[{ \"value_commitment\" : \"f4c543df8f0fe9b71b1bbd6aa2f06f87e07605dcd339b0eaa48afd9e2488b140\" , \"anchor\" : \"72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e\" , \"nullifier\" : \"29269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c\" , \"rk\" : \"c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf463\" , \"spend_authority_signature\" : \"2f50449f92e4bf541c9ba7d82b93f6dd416208449ea8996dc45614c1cb90a7911264fece30446da875d8a864224f1a3870e3654ec8a4005305faa329224f4c08\" , \"zkproof\" : \"984779ad18c87d71dd79b78564e49c1c18d6f871ef45f79bdb012f73439d6402593dd7cda308d9d5412e2b64b0be461192eb2a8d2ffdcc700475a1c8b8912220f628af41bf44a7c010a8dda2a65f98b4aaf8c375c4046afd1af3e6bbe4b33b9210c68298f46999322174b9ba76b0be4d6ef2c74ff5d16370a8c30fa17c5c3bbeab217610de5cc680b1d64d557c4d53a4a3f73294699ac6a00b37c3d8076a20362ab09c77c94f08bb00db2648ade72f224821ecc190627222cf58130b9bcf639b\" }], \"fee\" : 10000000 , \"receive_description\" :[{ \"value_commitment\" : \"3f4465801b357f9b8334eb3025bd8b3cd84247355c099133c08d53a8cffd3595\" , \"note_commitment\" : \"e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02\" , \"epk\" : \"3ece31615aec76e7711e25b05b05f5b7fb99d75f3812fe56702291633e5f474c\" , \"c_enc\" : \"4fc57e65bfdd91e2ae0284cfc2926d5df63d51b8f864e9191f368404db390e28ce15fefc9bd210aca4e7f42b30140bc4b1650d9a79bcbfb1670288c68d4678ba5c34266ce1bd4fd1f4e4040508b072cdca87d69e4921af8c8305f982aa7f37897a29c69cce06c311eafb2ef5928f07d5b8f207e5f46c32237f6e9b0eadc2597e0cd8d884cd3f4a35d86145e75565913b9d4a2e613523c9f377fe3bdf6f1d9e6789605e6bdaf9526412632e52a1994fec98dd086596c62ba028508d45933943f3446c83f463f56e860f29d2ea0eb3b87a55a0602974b7df6b58905872cb97a757f24515f05d2b12d932a0ac038e0c0b15b9c8b324c8e31d4ddf8bf39bfb65bd9d495eac1818b281822c9ad85adbe8a90f62adfbb6723fae7a7d91760a5b2d146f180d5ca4d85653449089f4788459752e899abd4abd395842e8b5315dd3738eee0b4e0f758698aabb92df587b703e85774048f290ea366696de3dde665eefb6fce6c2776e4e9ad18662b8d95af4203a10e9af54085ee498c77ad7e7b5824f91aaeb8f138d8c90d95f57e71dc15c177b602c45e38f12e402cc65c2c55b80c9a7d908332baa30b2871a0d6cf417bcaf0be6ae5c451c2468e945273151da500aaccd7235a29c7fcd0da4ac4d6ceefda59cf568f7a362b49654a5793c552bd970681a6489a1951ad75e22215b22d5cd511a030d751892b4b5746d66f048d6b6889c2ddcd5da908417b91ef52c0507b2ce8b1214567b71963c5d6ace1f6e858ce02b11fcf0f839cbe8183fa71b9a239f70c5e98642f6e9b9b6eb31f12a752829ebecf0f12df040\" , \"c_out\" : \"5fc1926bb6501f8ec4dc796d56786d7f019db9e43ccde07bbbddd95444df4f099310ef3f8d86a0a25ff72de0385563e44b9cb9e5e477299891959d24060a3b08b41aa36c29ce7297f0806a74f11aa99e\" , \"zkproof\" : \"b924ae84aba3af2c4d6529c22ebd6ba900ac63c629723e035ab843295d41aec1e9ebb2906fa7471473dbdae7e182fbd7a9f14a2f599a79456a3dbb949203d9923c3c3600225f12217e38b69b88a080b5b5751d78ac84375c9a03ad0bc61492850c49488a654c376c49701abdde20d5658bce851e9a6fd1bee5429b9b4d4b55ed1eb888a43f435740b8f063ea6e2e7e81b53f12e67e3eac60020aab5c3ff45d34ff2c3dde4eb76ed2893df22232993deb1b9397d1d4f9cc1eb8405f7cbef5a24b\" }]}, \"type_url\" : \"type.googleapis.com/protocol.ShieldedTransferContract\" }, \"type\" : \"ShieldedTransferContract\" }], \"ref_block_bytes\" : \"0328\" , \"ref_block_hash\" : \"833c24d9f1019cd0\" , \"expiration\" : 1558691970000 , \"timestamp\" : 1558691911355 }, \"raw_data_hex\" : \"0a0203282208833c24d9f1019cd040d0f79fcaae2d5adb0b083312d60b0a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e7472616374129c0b1a8d030a20f4c543df8f0fe9b71b1bbd6aa2f06f87e07605dcd339b0eaa48afd9e2488b140122072eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e1a2029269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c2220c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf4632ac001984779ad18c87d71dd79b78564e49c1c18d6f871ef45f79bdb012f73439d6402593dd7cda308d9d5412e2b64b0be461192eb2a8d2ffdcc700475a1c8b8912220f628af41bf44a7c010a8dda2a65f98b4aaf8c375c4046afd1af3e6bbe4b33b9210c68298f46999322174b9ba76b0be4d6ef2c74ff5d16370a8c30fa17c5c3bbeab217610de5cc680b1d64d557c4d53a4a3f73294699ac6a00b37c3d8076a20362ab09c77c94f08bb00db2648ade72f224821ecc190627222cf58130b9bcf639b32402f50449f92e4bf541c9ba7d82b93f6dd416208449ea8996dc45614c1cb90a7911264fece30446da875d8a864224f1a3870e3654ec8a4005305faa329224f4c0822c2070a203f4465801b357f9b8334eb3025bd8b3cd84247355c099133c08d53a8cffd35951220e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f021a203ece31615aec76e7711e25b05b05f5b7fb99d75f3812fe56702291633e5f474c22c4044fc57e65bfdd91e2ae0284cfc2926d5df63d51b8f864e9191f368404db390e28ce15fefc9bd210aca4e7f42b30140bc4b1650d9a79bcbfb1670288c68d4678ba5c34266ce1bd4fd1f4e4040508b072cdca87d69e4921af8c8305f982aa7f37897a29c69cce06c311eafb2ef5928f07d5b8f207e5f46c32237f6e9b0eadc2597e0cd8d884cd3f4a35d86145e75565913b9d4a2e613523c9f377fe3bdf6f1d9e6789605e6bdaf9526412632e52a1994fec98dd086596c62ba028508d45933943f3446c83f463f56e860f29d2ea0eb3b87a55a0602974b7df6b58905872cb97a757f24515f05d2b12d932a0ac038e0c0b15b9c8b324c8e31d4ddf8bf39bfb65bd9d495eac1818b281822c9ad85adbe8a90f62adfbb6723fae7a7d91760a5b2d146f180d5ca4d85653449089f4788459752e899abd4abd395842e8b5315dd3738eee0b4e0f758698aabb92df587b703e85774048f290ea366696de3dde665eefb6fce6c2776e4e9ad18662b8d95af4203a10e9af54085ee498c77ad7e7b5824f91aaeb8f138d8c90d95f57e71dc15c177b602c45e38f12e402cc65c2c55b80c9a7d908332baa30b2871a0d6cf417bcaf0be6ae5c451c2468e945273151da500aaccd7235a29c7fcd0da4ac4d6ceefda59cf568f7a362b49654a5793c552bd970681a6489a1951ad75e22215b22d5cd511a030d751892b4b5746d66f048d6b6889c2ddcd5da908417b91ef52c0507b2ce8b1214567b71963c5d6ace1f6e858ce02b11fcf0f839cbe8183fa71b9a239f70c5e98642f6e9b9b6eb31f12a752829ebecf0f12df0402a505fc1926bb6501f8ec4dc796d56786d7f019db9e43ccde07bbbddd95444df4f099310ef3f8d86a0a25ff72de0385563e44b9cb9e5e477299891959d24060a3b08b41aa36c29ce7297f0806a74f11aa99e32c001b924ae84aba3af2c4d6529c22ebd6ba900ac63c629723e035ab843295d41aec1e9ebb2906fa7471473dbdae7e182fbd7a9f14a2f599a79456a3dbb949203d9923c3c3600225f12217e38b69b88a080b5b5751d78ac84375c9a03ad0bc61492850c49488a654c376c49701abdde20d5658bce851e9a6fd1bee5429b9b4d4b55ed1eb888a43f435740b8f063ea6e2e7e81b53f12e67e3eac60020aab5c3ff45d34ff2c3dde4eb76ed2893df22232993deb1b9397d1d4f9cc1eb8405f7cbef5a24b2a40231cc2ddbf2715b51d07ed63e142ad874e7e173ec0c5d681b49e3060ca33bd65cf39921355dfaacc62dac7aa810c49daafbf8db8a1adc168da4a833eba0d75044080ade20470bbad9ccaae2d\" } Return: { \"result\" : true }","title":"Transfer from shielded address to shielded address"},{"location":"mechanism-algorithm/shielded-transaction/#transfer-from-shielded-address-to-transparent-address","text":"Step 1. Call api: wallet/getmerkletreevoucherinfo to get the voucher of the shield address, this info will be used when create shielded transaction Method: Post Parameter: { \"out_points\" :[{ \"hash\" : \"791d30b7123448a54c56407a11857d4f3885cb699a071ee5f265f7db408dec6c\" , \"index\" : 0 }], \"block_num\" : 1 } Return: { \"vouchers\" : [{ \"tree\" : { \"left\" : { \"content\" : \"e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02\" } , \"parents\" : [{ \"content\" : \"c835053e32be73852e67a65f4cd40407a11f4a7a38bb84b8d3e8a1f57acdbf61\" }]} , \"rt\" : \"8bdf96ac1241f30d5cd54d4ece7f10867d9eef854121ef77d1015f0ab2a26b1b\" }] , \"paths\" : [ \"2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420c835053e32be73852e67a65f4cd40407a11f4a7a38bb84b8d3e8a1f57acdbf612001000000000000000000000000000000000000000000000000000000000000000200000000000000\" ]} Step 2. Call api: wallet/createshieldedtransaction to create transaction Method: Post Parameter: { \"ask\" : \"653b3a3fdd40b60d2f53ba121df8840f6590384993f8fa9a0ecb0dfb23496604\" , \"nsk\" : \"428ff3c9e101dc1fca08f7b0e3387b23b68016746ae565aefc19d112b696db01\" , \"ovk\" : \"1274dcc5c7307bf0fd0ead466e9dd5641fed4a51391f681862370e2f2654cc61\" , \"shielded_spends\" : [ { \"note\" : { \"value\" : 80000000 , \"payment_address\" : \"ztron1wd46s6fwmz99gulqpxul6zffqtevzfpl93ng3s5834fhwf6e7w5l6zmjhmpvtwsc4wxa7dusmvr\" , \"rcm\" : \"ccced07d36641fc93cba33cddda7064cb82f6962a0bdf15a4240a4a742770e03\" }, \"alpha\" : \"3ad5406efd6efcd81d27696d5f91efc07ba5c98ea6fb0f787b93e557b51df405\" , \"voucher\" : { \"tree\" : { \"left\" : { \"content\" : \"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\" }, \"right\" : { \"content\" : \"e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02\" } }, \"rt\" : \"774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a567\" }, \"path\" : \"2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca15520f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b620100000000000000\" } ], \"transparent_to_address\" : \"41A7D8A35B260395C14AA456297662092BA3B76FC0\" , \"to_amount\" : 70000000 } Return: { \"txID\" : \"4dbdc95574a155434baeaf5e690e2d0c77a2b883a048d8d0103ab5c7fed8d866\" , \"raw_data\" : { \"contract\" : [{ \"parameter\" : { \"value\" : { \"to_amount\" :70000000, \"binding_signature\" : \"780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203\" , \"spend_description\" : [{ \"value_commitment\" : \"086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd9\" , \"anchor\" : \"774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a567\" , \"nullifier\" : \"fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587\" , \"rk\" : \"41132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d4\" , \"spend_authority_signature\" : \"b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f30207\" , \"zkproof\" : \"b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee1\" }] , \"fee\" :10000000, \"transparent_to_address\" : \"41a7d8a35b260395c14aa456297662092ba3b76fc0\" } , \"type_url\" : \"type.googleapis.com/protocol.ShieldedTransferContract\" } , \"type\" : \"ShieldedTransferContract\" }] , \"ref_block_bytes\" : \"00dc\" , \"ref_block_hash\" : \"a45c748f93fa2854\" , \"expiration\" :1558928754000, \"timestamp\" :1558928695327 } , \"raw_data_hex\" : \"0a0200dc2208a45c748f93fa285440d08a94bbaf2d5ab204083312ad040a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412f3031a8d030a20086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd91220774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a5671a20fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587222041132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d42ac001b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee13240b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f302072a40780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203321541a7d8a35b260395c14aa456297662092ba3b76fc03880bbb0214080ade204709fc090bbaf2d\" } Step 3. Call api: wallet/broadcasttransaction to broadcast this transaction(no need to sign this transaction) Method: Post Parameter: { \"txID\" : \"4dbdc95574a155434baeaf5e690e2d0c77a2b883a048d8d0103ab5c7fed8d866\" , \"raw_data\" :{ \"contract\" :[{ \"parameter\" :{ \"value\" :{ \"to_amount\" : 70000000 , \"binding_signature\" : \"780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203\" , \"spend_description\" :[{ \"value_commitment\" : \"086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd9\" , \"anchor\" : \"774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a567\" , \"nullifier\" : \"fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587\" , \"rk\" : \"41132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d4\" , \"spend_authority_signature\" : \"b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f30207\" , \"zkproof\" : \"b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee1\" }], \"fee\" : 10000000 , \"transparent_to_address\" : \"41a7d8a35b260395c14aa456297662092ba3b76fc0\" }, \"type_url\" : \"type.googleapis.com/protocol.ShieldedTransferContract\" }, \"type\" : \"ShieldedTransferContract\" }], \"ref_block_bytes\" : \"00dc\" , \"ref_block_hash\" : \"a45c748f93fa2854\" , \"expiration\" : 1558928754000 , \"timestamp\" : 1558928695327 }, \"raw_data_hex\" : \"0a0200dc2208a45c748f93fa285440d08a94bbaf2d5ab204083312ad040a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412f3031a8d030a20086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd91220774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a5671a20fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587222041132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d42ac001b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee13240b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f302072a40780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203321541a7d8a35b260395c14aa456297662092ba3b76fc03880bbb0214080ade204709fc090bbaf2d\" } Return: { \"result\" : true }","title":"Transfer from shielded address to transparent address"},{"location":"mechanism-algorithm/sr/","text":"Super Representative \u00b6 How to Become a Super Representative \u00b6 Block producers in the TRON network, also called super representatives, are elected by voting. Any account can apply to become a super representative candidate by paying 9999 TRX and then participate in the super representative election. Any account can vote for super representative candidates, and the top 27 candidates with the most votes become super representatives, and they have the right to produce blocks. Super representative needs to run a TRON node to participate in block production, and will also receive block rewards and voting rewards. Voters who vote to super representatives will receive voting rewards. The super representative candidates ranked 28th to 127th are also called super representative partners. Super representative partners do not participate in block production and packaging transactions, but will receive voting rewards. Voters who vote to super representative partners will also receive voting rewards. The votes will be counted every 6 hours, so super representatives and super representative partners will be changed every 6 hours. Super Representative Election \u00b6 To vote, you need to have TRON Power(TP). To get TRON Power, you need to stake TRX. Every 1 staked TRX accounts for one TRON Power(TP). Every account in TRON network has the right to vote for a super representative candidate. After you unstake your staked TRX, you will lose the responding TRON Power(TP), so your previous vote will be invalid. Note: Only your latest vote will be counted in TRON network which means your previous vote will be over written by your latest vote. Example (Using wallet-cli): > freezebalancev2 10,000,000 3 // Stake 10 TRX to get 10 TRON Power(TP) > votewitness SR1 4 SR2 6 // Vote 4 votes for SR1, 6 votes for SR2 > votewitness SR1 3 SR2 7 // Vote 3 votes for SR1, 7 votes for SR2 The final output above is: Vote 3 votes for SR1, 7 votes for SR2. Super Representatives Brokerage \u00b6 The default ratio is 20%. Super representatives and super representative partners can query the brokerage ratio through the wallet/getBrokerage interface, and can also modify the brokerage ratio through the wallet/updateBrokerage interface. If a SR(Super Representatives) get 20% of the reward, and the other 80% will be awarded to the voters. If the brokerage ratio is set to 100%, the rewards are all obtained by the SR; if set to 0, the rewards are all sent to the voters. Reward for SR(Super Representatives) \u00b6 Votes Reward \u00b6 Vote rewards are 160 TRX every block, with a block generated every 3 seconds, the total vote rewards per day is 4,608,000 TRX. For each SR and Partner, the daily Vote Rewards = 4,608,000 * ( votes / total votes) x 20% TRX Block Producing Reward \u00b6 Every time after a super representative produces a block, it will be reward 16 TRX. The 27 super representatives take turns to produce blocks every 3 seconds. The annual block producing reward is 168,192,000 TRX in total. Every time after a super representative produces a block, the 16 TRX block producing reward will be sent to it's sub-account. The sub-account is a read-only account, it allows a withdraw action from sub-account to super representative account every 24 hours. 16 (\\mathsf{TRX}/block) \\times 28,800 (blocks/day) = 460,800 (\\mathsf{TRX}/day) 16 (\\mathsf{TRX}/block) \\times 28,800 (blocks/day) = 460,800 (\\mathsf{TRX}/day) For each super representative, the daily block Rewards_{sr} = (460,800 / 27) \\times 20 \\% \\mathsf{TRX} Rewards_{sr} = (460,800 / 27) \\times 20 \\% \\mathsf{TRX} . Reward may be less than the theoretical number due to missed blocks and maintenance period. Reward for Voters \u00b6 If you vote for a SR(Super Representative): the daily Voter Rewards = (((the number of votes you vote to a SR) * 4,608,000 / total votes) * 80%) + ((460,800 / 27) * 80%) * (the number of votes you vote to a SR) / (the total number of votes a SR receives) TRX If you vote for a Partner: the daily Voter Rewards = (((the number of votes you vote to a SR) * 4,608,000 / total votes) * 80%) TRX Committee \u00b6 1. What is Committee \u00b6 Committee can modify the TRON network parameters, like transacton fees, block producing reward amount, etc. Committee is composed of the current 27 super representatives. Every super representative has the right to start a proposal. The proposal will be passed after it gets more than 18 approves from the super representatives and will become valid in the next maintenance period. 2. Create a Proposal \u00b6 Only SRs, Partners and Candidates can create a proposal. Please refer to here for TRON network dynamic parameters and their values. Example (Using wallet-cli): > createproposal id value # id: the serial number # value: the parameter value 3. Vote for a Proposal \u00b6 Proposal only support YES vote. Since the creation time of the proposal, the proposal is valid within 3 days. If the proposal does not receive enough YES votes within the period of validity, the proposal will be invalid beyond the period of validity. Yes vote can be cancelled. Example (Using wallet-cli): > approveProposal id is_or_not_add_approval # id: proposal id # is_or_not_add_approval: YES vote or cancel YES vote 4. Cancel Proposal \u00b6 Proposal creator can cancel the proposal before it is passed. Example (Using wallet-cli): > deleteProposal id # id: proposal id 5. Query Proposal \u00b6 Query all the proposals list (ListProposals) Query all the proposals list by pagination (GetPaginatedProposalList) Query a proposal by proposal id (GetProposalById) For more API detail, please refer to HTTP API .","title":"Super Representative"},{"location":"mechanism-algorithm/sr/#super-representative","text":"","title":"Super Representative"},{"location":"mechanism-algorithm/sr/#how-to-become-a-super-representative","text":"Block producers in the TRON network, also called super representatives, are elected by voting. Any account can apply to become a super representative candidate by paying 9999 TRX and then participate in the super representative election. Any account can vote for super representative candidates, and the top 27 candidates with the most votes become super representatives, and they have the right to produce blocks. Super representative needs to run a TRON node to participate in block production, and will also receive block rewards and voting rewards. Voters who vote to super representatives will receive voting rewards. The super representative candidates ranked 28th to 127th are also called super representative partners. Super representative partners do not participate in block production and packaging transactions, but will receive voting rewards. Voters who vote to super representative partners will also receive voting rewards. The votes will be counted every 6 hours, so super representatives and super representative partners will be changed every 6 hours.","title":"How to Become a Super Representative"},{"location":"mechanism-algorithm/sr/#super-representative-election","text":"To vote, you need to have TRON Power(TP). To get TRON Power, you need to stake TRX. Every 1 staked TRX accounts for one TRON Power(TP). Every account in TRON network has the right to vote for a super representative candidate. After you unstake your staked TRX, you will lose the responding TRON Power(TP), so your previous vote will be invalid. Note: Only your latest vote will be counted in TRON network which means your previous vote will be over written by your latest vote. Example (Using wallet-cli): > freezebalancev2 10,000,000 3 // Stake 10 TRX to get 10 TRON Power(TP) > votewitness SR1 4 SR2 6 // Vote 4 votes for SR1, 6 votes for SR2 > votewitness SR1 3 SR2 7 // Vote 3 votes for SR1, 7 votes for SR2 The final output above is: Vote 3 votes for SR1, 7 votes for SR2.","title":"Super Representative Election"},{"location":"mechanism-algorithm/sr/#super-representatives-brokerage","text":"The default ratio is 20%. Super representatives and super representative partners can query the brokerage ratio through the wallet/getBrokerage interface, and can also modify the brokerage ratio through the wallet/updateBrokerage interface. If a SR(Super Representatives) get 20% of the reward, and the other 80% will be awarded to the voters. If the brokerage ratio is set to 100%, the rewards are all obtained by the SR; if set to 0, the rewards are all sent to the voters.","title":"Super Representatives Brokerage"},{"location":"mechanism-algorithm/sr/#reward-for-srsuper-representatives","text":"","title":"Reward for SR(Super Representatives)"},{"location":"mechanism-algorithm/sr/#votes-reward","text":"Vote rewards are 160 TRX every block, with a block generated every 3 seconds, the total vote rewards per day is 4,608,000 TRX. For each SR and Partner, the daily Vote Rewards = 4,608,000 * ( votes / total votes) x 20% TRX","title":"Votes Reward"},{"location":"mechanism-algorithm/sr/#block-producing-reward","text":"Every time after a super representative produces a block, it will be reward 16 TRX. The 27 super representatives take turns to produce blocks every 3 seconds. The annual block producing reward is 168,192,000 TRX in total. Every time after a super representative produces a block, the 16 TRX block producing reward will be sent to it's sub-account. The sub-account is a read-only account, it allows a withdraw action from sub-account to super representative account every 24 hours. 16 (\\mathsf{TRX}/block) \\times 28,800 (blocks/day) = 460,800 (\\mathsf{TRX}/day) 16 (\\mathsf{TRX}/block) \\times 28,800 (blocks/day) = 460,800 (\\mathsf{TRX}/day) For each super representative, the daily block Rewards_{sr} = (460,800 / 27) \\times 20 \\% \\mathsf{TRX} Rewards_{sr} = (460,800 / 27) \\times 20 \\% \\mathsf{TRX} . Reward may be less than the theoretical number due to missed blocks and maintenance period.","title":"Block Producing Reward"},{"location":"mechanism-algorithm/sr/#reward-for-voters","text":"If you vote for a SR(Super Representative): the daily Voter Rewards = (((the number of votes you vote to a SR) * 4,608,000 / total votes) * 80%) + ((460,800 / 27) * 80%) * (the number of votes you vote to a SR) / (the total number of votes a SR receives) TRX If you vote for a Partner: the daily Voter Rewards = (((the number of votes you vote to a SR) * 4,608,000 / total votes) * 80%) TRX","title":"Reward for Voters"},{"location":"mechanism-algorithm/sr/#committee","text":"","title":"Committee"},{"location":"mechanism-algorithm/sr/#1-what-is-committee","text":"Committee can modify the TRON network parameters, like transacton fees, block producing reward amount, etc. Committee is composed of the current 27 super representatives. Every super representative has the right to start a proposal. The proposal will be passed after it gets more than 18 approves from the super representatives and will become valid in the next maintenance period.","title":"1. What is Committee"},{"location":"mechanism-algorithm/sr/#2-create-a-proposal","text":"Only SRs, Partners and Candidates can create a proposal. Please refer to here for TRON network dynamic parameters and their values. Example (Using wallet-cli): > createproposal id value # id: the serial number # value: the parameter value","title":"2. Create a Proposal"},{"location":"mechanism-algorithm/sr/#3-vote-for-a-proposal","text":"Proposal only support YES vote. Since the creation time of the proposal, the proposal is valid within 3 days. If the proposal does not receive enough YES votes within the period of validity, the proposal will be invalid beyond the period of validity. Yes vote can be cancelled. Example (Using wallet-cli): > approveProposal id is_or_not_add_approval # id: proposal id # is_or_not_add_approval: YES vote or cancel YES vote","title":"3. Vote for a Proposal"},{"location":"mechanism-algorithm/sr/#4-cancel-proposal","text":"Proposal creator can cancel the proposal before it is passed. Example (Using wallet-cli): > deleteProposal id # id: proposal id","title":"4. Cancel Proposal"},{"location":"mechanism-algorithm/sr/#5-query-proposal","text":"Query all the proposals list (ListProposals) Query all the proposals list by pagination (GetPaginatedProposalList) Query a proposal by proposal id (GetProposalById) For more API detail, please refer to HTTP API .","title":"5. Query Proposal"},{"location":"mechanism-algorithm/system-contracts/","text":"System Contracts \u00b6 The TRON network supports many different types of transactions, such as TRX transfer transactions, TRC10 transfer transactions, creating smart contract transactions, triggering smart contract transactions, staking TRX transactions, and more. To create different types of transactions, you need to call different API. For example, the type of smart contract deployment transaction is CreateSmartContract , you need to call wallet/deploycontractAPI to create a transaction; the type of stake TRX transactions is FreezeBalanceV2Contract , you need to call wallet/freezebalancev2API to create transactions, we collectively refer to the implementation of these different transaction types as system contracts, the following are the types of system contracts and their contents: 1. AccountCreateContract \u00b6 message AccountCreateContract { bytes owner_address = 1; bytes account_address = 2; AccountType type = 3; } owner_address : The owner of the current account. account_address : The target address to create. type : Account type. 0 means normal account; 1 means the Genesis account; 2 means smart contract account. 2. TransferContract \u00b6 message TransferContract { bytes owner_address = 1; bytes to_address = 2; int64 amount = 3; } owner_address : The owner of the current account. to_address : The target address to transfer. amount : The amount of TRX to transfer. 3. TransferAssetContract \u00b6 message TransferAssetContract { bytes asset_name = 1; bytes owner_address = 2; bytes to_address = 3; int64 amount = 4; } asset_name : The token id to transfer. owner_address : The owner of the current account. to_address : The target address to transfer. amount : The amount of token to transfer. 4. VoteWitnessContract \u00b6 message VoteWitnessContract { message Vote { bytes vote_address = 1; int64 vote_count = 2; } bytes owner_address = 1; repeated Vote votes = 2; bool support = 3; } owner_address : The owner of the current account. vote_address : The SR or candidate's address. vote_count : The votes number. support : Constant true, not used. 5. WitnessCreateContract \u00b6 message WitnessCreateContract { bytes owner_address = 1; bytes url = 2; } owner_address : The owner of the current account. url : The website url of the witness. 6. AssetIssueContract \u00b6 message AssetIssueContract { message FrozenSupply { int64 frozen_amount = 1; int64 frozen_days = 2; } bytes owner_address = 1; bytes name = 2; bytes abbr = 3; int64 total_supply = 4; repeated FrozenSupply frozen_supply = 5; int32 trx_num = 6; int32 num = 8; int64 start_time = 9; int64 end_time = 10; int64 order = 11; // the order of tokens of the same name int32 vote_score = 16; bytes description = 20; bytes url = 21; int64 free_asset_net_limit = 22; int64 public_free_asset_net_limit = 23; int64 public_free_asset_net_usage = 24; int64 public_latest_free_net_time = 25; } owner_address : The owner of the current account. name : The token name to issue. abbr : The abbreviation of the token name. total_supply : The amount of token to issue. frozen_supply : The amount of token and staked days to stake. trx_num : trx_num/num defines the token price. num : trx_num/num defines the token price. start_time : ICO starts time. end_time : ICO ends time. order : Deprecated. vote_score : Deprecated. description : The description of the token. url : The website url of the token. free_asset_net_limit : The free bandwidth limit each account owns when transfers asset. public_free_asset_net_limit : The free bandwidth limit all the accounts can use. public_free_asset_net_usage : The free bandwidth usage of all the accounts. public_latest_free_net_time : The latest bandwidth consumption time of token transfer. 7. WitnessUpdateContract \u00b6 message WitnessUpdateContract { bytes owner_address = 1; bytes update_url = 12; } owner_address : The owner of the current account. update_url : The website url of the witness. 8. ParticipateAssetIssueContract \u00b6 message ParticipateAssetIssueContract { bytes owner_address = 1; bytes to_address = 2; bytes asset_name = 3; int64 amount = 4; } owner_address : The owner of the current account. to_address : The token owner address. account_name : The token id. amount : The amount of token to purchase. 9. AccountUpdateContract \u00b6 // Update account name. Account name is unique now. message AccountUpdateContract { bytes account_name = 1; bytes owner_address = 2; } owner_address : The owner of the current account. account_name : Account name. 10. FreezeBalanceContract \u00b6 message FreezeBalanceContract { bytes owner_address = 1; int64 frozen_balance = 2; int64 frozen_duration = 3; ResourceCode resource = 10; bytes receiver_address = 15; } owner_address : The owner of the current account. frozen_balance : The amount of TRX to stake. frozen_duration : The stake duration. resource : The type of resource get by staking TRX. receiver_address : The account address to receive resource. 11. UnfreezeBalanceContract \u00b6 message UnfreezeBalanceContract { bytes owner_address = 1; ResourceCode resource = 10; bytes receiver_address = 13; } owner_address : The owner of the current account. resource : The type of resource to unfree. receiver_address : The account address to receive resource. 12. WithdrawBalanceContract \u00b6 message WithdrawBalanceContract { bytes owner_address = 1; } owner_address : The owner of the current account. 13. UnfreezeAssetContract \u00b6 message UnfreezeAssetContract { bytes owner_address = 1; } owner_address : The owner of the current account. 14. UpdateAssetContract \u00b6 message UpdateAssetContract { bytes owner_address = 1; bytes description = 2; bytes url = 3; int64 new_limit = 4; int64 new_public_limit = 5; } owner_address : The owner of the current account. description : The description of the token. url : The website url of the token. new_limit : The bandwidth consumption limit of each account when transfers asset. new_public_limit : The bandwidth consumption limit of the accounts. 15. ProposalCreateContract \u00b6 message ProposalCreateContract { bytes owner_address = 1; map<int64, int64> parameters = 2; } owner_address : The owner of the current account. parameters : The proposal. 16. ProposalApproveContract \u00b6 message ProposalApproveContract { bytes owner_address = 1; int64 proposal_id = 2; bool is_add_approval = 3; // add or remove approval } owner_address : The owner of the current account. proposal_id : The proposal id. is_add_approval : Whether to approve. 17. ProposalDeleteContract \u00b6 message ProposalDeleteContract { bytes owner_address = 1; int64 proposal_id = 2; } owner_address : The owner of the current account. proposal_id : The proposal id. 18. SetAccountIdContract \u00b6 // Set account id if the account has no id. Account id is unique and case insensitive. message SetAccountIdContract { bytes account_id = 1; bytes owner_address = 2; } owner_address : The owner of the current account. account_id : The account id. 19. CreateSmartContract \u00b6 message CreateSmartContract { bytes owner_address = 1; SmartContract new_contract = 2; int64 call_token_value = 5; int64 token_id = 6; } owner_address : The owner of the current account. new_contract : the smart contract. call_token_value : The amount of TRC-10 token to send to the contract when triggers. token_id : The id of the TRC-10 token to be sent to the contract. 20. TriggerSmartContract \u00b6 message TriggerSmartContract { bytes owner_address = 1; bytes contract_address = 2; int64 call_value = 3; bytes data = 4; int64 call_token_value = 5; int64 token_id = 6; } owner_address : The owner of the current account. contract_address : The contract address. call_value : The amount of TRX to send to the contract when triggers. data : The parameters to trigger the contract. call_token_value : The amount of TRC-10 token to send to the contract when triggers. token_id : The id of the TRC-10 token to be sent to the contract. 21. UpdateSettingContract \u00b6 message UpdateSettingContract { bytes owner_address = 1; bytes contract_address = 2; int64 consume_user_resource_percent = 3; } owner_address : The owner of the current account. contract_address : The address of the smart contract. consume_user_resource_percent : The percentage of resource consumption ratio. 22. ExchangeCreateContract \u00b6 message ExchangeCreateContract { bytes owner_address = 1; bytes first_token_id = 2; int64 first_token_balance = 3; bytes second_token_id = 4; int64 second_token_balance = 5; } owner_address : The owner of the current account. first_token_id : First token id. first_token_balance : First token balance. second_token_id : Second token id. second_token_balance : Second token balance. 23. ExchangeInjectContract \u00b6 message ExchangeInjectContract { bytes owner_address = 1; int64 exchange_id = 2; bytes token_id = 3; int64 quant = 4; } owner_address : The owner of the current account. exchange_id : The token pair id. token_id : The token id to inject. quant : The token amount to inject. 24. ExchangeWithdrawContract \u00b6 message ExchangeWithdrawContract { bytes owner_address = 1; int64 exchange_id = 2; bytes token_id = 3; int64 quant = 4; } owner_address : The owner of the current account. exchange_id : The token pair id. token_id : The token id to withdraw. quant : The token amount to withdraw. 25. ExchangeTransactionContract \u00b6 message ExchangeTransactionContract { bytes owner_address = 1; int64 exchange_id = 2; bytes token_id = 3; int64 quant = 4; } owner_address : The owner of the current account. exchange_id : The token pair id. token_id : The token id to sell. quant : The token amount to sell. 26. ShieldedTransferContract \u00b6 message ShieldedTransferContract { bytes transparent_from_address = 1; int64 from_amount = 2; repeated SpendDescription spend_description = 3; repeated ReceiveDescription receive_description = 4; bytes binding_signature = 5; bytes transparent_to_address = 6; int64 to_amount = 7; } transparent_from_address : The transparent address of the sender. from_amount : The amount to send. spend_description : Shielded spend information. receive_description : Shielded receive information. binding_signature : The binding signature. transparent_to_address : The transparent address of the receiver. to_amount : The amount to receive. message SpendDescription { bytes value_commitment = 1; bytes anchor = 2; bytes nullifier = 3; bytes rk = 4; bytes zkproof = 5; bytes spend_authority_signature = 6; } value_commitment : value commitment of spender's transfer amount. anchor : root of the note commitment Merkle tree at some block. nullifier : nullifier of spender's note, to prevent double-spent. rk : public key, to verify spender's Spend Authorization Signature . zkproof : zero-knowledge proof of spender's note, prove that this note exists and could be spent. spend_authority_signature : the spender's Spend Authorization Signature . message ReceiveDescription { bytes value_commitment = 1; bytes note_commitment = 2; bytes epk = 3; bytes c_enc = 4; bytes c_out = 5; bytes zkproof = 6; } value_commitment : value commitment of receiver's transfer amount. note_commitment : commitment of the receiver's not. epk : ephemeral public key, in order to generate note's decryption key. c_enc : part of note ciphertext, encryption of diversifier, receiver's transfer amount, rcm, and memo. c_out : part of note ciphertext, encryption of the receiver's public key and ephemeral private key. zkproof : zero-knowledge proof of the receiver's note. 27. Account Permission Management \u00b6 Account Permission Management 28. ClearABIContract \u00b6 message ClearABIContract { bytes owner_address = 1; bytes contract_address = 2; } owner_address : The owner of the current account. account_address : The target contract address to clear ABI. 29. UpdateBrokerageContract \u00b6 message UpdateBrokerageContract { bytes owner_address = 1; int32 brokerage = 2; } owner_address : The owner of the current account. brokerage : Commission rate, from 0 to 100,1 mean 1%. 30. UpdateEnergyLimitContract \u00b6 message UpdateEnergyLimitContract { bytes owner_address = 1; bytes contract_address = 2; int64 origin_energy_limit = 3; } owner_address : The owner of the current account. contract_address : The contract address. origin_energy_limit : The target energy limit to change. 31. FreezeBalanceV2Contract \u00b6 message FreezeBalanceV2Contract { bytes owner_address = 1 ; int64 frozen_balance = 2 ; ResourceCode resource = 3 ; } owner_address \uff1aOwner address frozen_balance \uff1aTRX stake amount, the unit is sun resource \uff1a Resource type 32. UnfreezeBalanceV2Contract \u00b6 message UnfreezeBalanceV2Contract { bytes owner_address = 1 ; int64 unfreeze_balance = 2 ; ResourceCode resource = 3 ; } owner_address \uff1aOwner address unfreeze_balance \uff1aThe amount of TRX to unstake, in sun resource \uff1a Resource type 33. WithdrawExpireUnfreezeContract \u00b6 message WithdrawExpireUnfreezeContract { bytes owner_address = 1 ; } owner_address \uff1aOwner address 34. DelegateResourceContract \u00b6 message DelegateResourceContract { bytes owner_address = 1 ; ResourceCode resource = 2 ; int64 balance = 3 ; bytes receiver_address = 4 ; bool lock = 5 ; } owner_address \uff1aOwner address resource \uff1a Resource type balance \uff1a Amount of TRX staked for resources to be delegated, unit is sun receiver_address \uff1aResource receiver address lock \uff1aWhether it is locked, if it is set to true, the delegated resources cannot be undelegated within 3 days. When the lock time is not over, if the owner delegates the same type of resources using the lock to the same address, the lock time will be reset to 3 days 35. UnDelegateResourceContract \u00b6 message UnDelegateResourceContract { bytes owner_address = 1 ; ResourceCode resource = 2 ; int64 balance = 3 ; bytes receiver_address = 4 ; } owner_address \uff1aOwner address resource \uff1a Resource type balance \uff1aundelegated TRX, unit is sun receiver_address \uff1aResource receiver address","title":"System Contract"},{"location":"mechanism-algorithm/system-contracts/#system-contracts","text":"The TRON network supports many different types of transactions, such as TRX transfer transactions, TRC10 transfer transactions, creating smart contract transactions, triggering smart contract transactions, staking TRX transactions, and more. To create different types of transactions, you need to call different API. For example, the type of smart contract deployment transaction is CreateSmartContract , you need to call wallet/deploycontractAPI to create a transaction; the type of stake TRX transactions is FreezeBalanceV2Contract , you need to call wallet/freezebalancev2API to create transactions, we collectively refer to the implementation of these different transaction types as system contracts, the following are the types of system contracts and their contents:","title":"System Contracts"},{"location":"mechanism-algorithm/system-contracts/#1-accountcreatecontract","text":"message AccountCreateContract { bytes owner_address = 1; bytes account_address = 2; AccountType type = 3; } owner_address : The owner of the current account. account_address : The target address to create. type : Account type. 0 means normal account; 1 means the Genesis account; 2 means smart contract account.","title":"1. AccountCreateContract"},{"location":"mechanism-algorithm/system-contracts/#2-transfercontract","text":"message TransferContract { bytes owner_address = 1; bytes to_address = 2; int64 amount = 3; } owner_address : The owner of the current account. to_address : The target address to transfer. amount : The amount of TRX to transfer.","title":"2. TransferContract"},{"location":"mechanism-algorithm/system-contracts/#3-transferassetcontract","text":"message TransferAssetContract { bytes asset_name = 1; bytes owner_address = 2; bytes to_address = 3; int64 amount = 4; } asset_name : The token id to transfer. owner_address : The owner of the current account. to_address : The target address to transfer. amount : The amount of token to transfer.","title":"3. TransferAssetContract"},{"location":"mechanism-algorithm/system-contracts/#4-votewitnesscontract","text":"message VoteWitnessContract { message Vote { bytes vote_address = 1; int64 vote_count = 2; } bytes owner_address = 1; repeated Vote votes = 2; bool support = 3; } owner_address : The owner of the current account. vote_address : The SR or candidate's address. vote_count : The votes number. support : Constant true, not used.","title":"4. VoteWitnessContract"},{"location":"mechanism-algorithm/system-contracts/#5-witnesscreatecontract","text":"message WitnessCreateContract { bytes owner_address = 1; bytes url = 2; } owner_address : The owner of the current account. url : The website url of the witness.","title":"5. WitnessCreateContract"},{"location":"mechanism-algorithm/system-contracts/#6-assetissuecontract","text":"message AssetIssueContract { message FrozenSupply { int64 frozen_amount = 1; int64 frozen_days = 2; } bytes owner_address = 1; bytes name = 2; bytes abbr = 3; int64 total_supply = 4; repeated FrozenSupply frozen_supply = 5; int32 trx_num = 6; int32 num = 8; int64 start_time = 9; int64 end_time = 10; int64 order = 11; // the order of tokens of the same name int32 vote_score = 16; bytes description = 20; bytes url = 21; int64 free_asset_net_limit = 22; int64 public_free_asset_net_limit = 23; int64 public_free_asset_net_usage = 24; int64 public_latest_free_net_time = 25; } owner_address : The owner of the current account. name : The token name to issue. abbr : The abbreviation of the token name. total_supply : The amount of token to issue. frozen_supply : The amount of token and staked days to stake. trx_num : trx_num/num defines the token price. num : trx_num/num defines the token price. start_time : ICO starts time. end_time : ICO ends time. order : Deprecated. vote_score : Deprecated. description : The description of the token. url : The website url of the token. free_asset_net_limit : The free bandwidth limit each account owns when transfers asset. public_free_asset_net_limit : The free bandwidth limit all the accounts can use. public_free_asset_net_usage : The free bandwidth usage of all the accounts. public_latest_free_net_time : The latest bandwidth consumption time of token transfer.","title":"6. AssetIssueContract"},{"location":"mechanism-algorithm/system-contracts/#7-witnessupdatecontract","text":"message WitnessUpdateContract { bytes owner_address = 1; bytes update_url = 12; } owner_address : The owner of the current account. update_url : The website url of the witness.","title":"7. WitnessUpdateContract"},{"location":"mechanism-algorithm/system-contracts/#8-participateassetissuecontract","text":"message ParticipateAssetIssueContract { bytes owner_address = 1; bytes to_address = 2; bytes asset_name = 3; int64 amount = 4; } owner_address : The owner of the current account. to_address : The token owner address. account_name : The token id. amount : The amount of token to purchase.","title":"8. ParticipateAssetIssueContract"},{"location":"mechanism-algorithm/system-contracts/#9-accountupdatecontract","text":"// Update account name. Account name is unique now. message AccountUpdateContract { bytes account_name = 1; bytes owner_address = 2; } owner_address : The owner of the current account. account_name : Account name.","title":"9. AccountUpdateContract"},{"location":"mechanism-algorithm/system-contracts/#10-freezebalancecontract","text":"message FreezeBalanceContract { bytes owner_address = 1; int64 frozen_balance = 2; int64 frozen_duration = 3; ResourceCode resource = 10; bytes receiver_address = 15; } owner_address : The owner of the current account. frozen_balance : The amount of TRX to stake. frozen_duration : The stake duration. resource : The type of resource get by staking TRX. receiver_address : The account address to receive resource.","title":"10. FreezeBalanceContract"},{"location":"mechanism-algorithm/system-contracts/#11-unfreezebalancecontract","text":"message UnfreezeBalanceContract { bytes owner_address = 1; ResourceCode resource = 10; bytes receiver_address = 13; } owner_address : The owner of the current account. resource : The type of resource to unfree. receiver_address : The account address to receive resource.","title":"11. UnfreezeBalanceContract"},{"location":"mechanism-algorithm/system-contracts/#12-withdrawbalancecontract","text":"message WithdrawBalanceContract { bytes owner_address = 1; } owner_address : The owner of the current account.","title":"12. WithdrawBalanceContract"},{"location":"mechanism-algorithm/system-contracts/#13-unfreezeassetcontract","text":"message UnfreezeAssetContract { bytes owner_address = 1; } owner_address : The owner of the current account.","title":"13. UnfreezeAssetContract"},{"location":"mechanism-algorithm/system-contracts/#14-updateassetcontract","text":"message UpdateAssetContract { bytes owner_address = 1; bytes description = 2; bytes url = 3; int64 new_limit = 4; int64 new_public_limit = 5; } owner_address : The owner of the current account. description : The description of the token. url : The website url of the token. new_limit : The bandwidth consumption limit of each account when transfers asset. new_public_limit : The bandwidth consumption limit of the accounts.","title":"14. UpdateAssetContract"},{"location":"mechanism-algorithm/system-contracts/#15-proposalcreatecontract","text":"message ProposalCreateContract { bytes owner_address = 1; map<int64, int64> parameters = 2; } owner_address : The owner of the current account. parameters : The proposal.","title":"15. ProposalCreateContract"},{"location":"mechanism-algorithm/system-contracts/#16-proposalapprovecontract","text":"message ProposalApproveContract { bytes owner_address = 1; int64 proposal_id = 2; bool is_add_approval = 3; // add or remove approval } owner_address : The owner of the current account. proposal_id : The proposal id. is_add_approval : Whether to approve.","title":"16. ProposalApproveContract"},{"location":"mechanism-algorithm/system-contracts/#17-proposaldeletecontract","text":"message ProposalDeleteContract { bytes owner_address = 1; int64 proposal_id = 2; } owner_address : The owner of the current account. proposal_id : The proposal id.","title":"17. ProposalDeleteContract"},{"location":"mechanism-algorithm/system-contracts/#18-setaccountidcontract","text":"// Set account id if the account has no id. Account id is unique and case insensitive. message SetAccountIdContract { bytes account_id = 1; bytes owner_address = 2; } owner_address : The owner of the current account. account_id : The account id.","title":"18. SetAccountIdContract"},{"location":"mechanism-algorithm/system-contracts/#19-createsmartcontract","text":"message CreateSmartContract { bytes owner_address = 1; SmartContract new_contract = 2; int64 call_token_value = 5; int64 token_id = 6; } owner_address : The owner of the current account. new_contract : the smart contract. call_token_value : The amount of TRC-10 token to send to the contract when triggers. token_id : The id of the TRC-10 token to be sent to the contract.","title":"19. CreateSmartContract"},{"location":"mechanism-algorithm/system-contracts/#20-triggersmartcontract","text":"message TriggerSmartContract { bytes owner_address = 1; bytes contract_address = 2; int64 call_value = 3; bytes data = 4; int64 call_token_value = 5; int64 token_id = 6; } owner_address : The owner of the current account. contract_address : The contract address. call_value : The amount of TRX to send to the contract when triggers. data : The parameters to trigger the contract. call_token_value : The amount of TRC-10 token to send to the contract when triggers. token_id : The id of the TRC-10 token to be sent to the contract.","title":"20. TriggerSmartContract"},{"location":"mechanism-algorithm/system-contracts/#21-updatesettingcontract","text":"message UpdateSettingContract { bytes owner_address = 1; bytes contract_address = 2; int64 consume_user_resource_percent = 3; } owner_address : The owner of the current account. contract_address : The address of the smart contract. consume_user_resource_percent : The percentage of resource consumption ratio.","title":"21. UpdateSettingContract"},{"location":"mechanism-algorithm/system-contracts/#22-exchangecreatecontract","text":"message ExchangeCreateContract { bytes owner_address = 1; bytes first_token_id = 2; int64 first_token_balance = 3; bytes second_token_id = 4; int64 second_token_balance = 5; } owner_address : The owner of the current account. first_token_id : First token id. first_token_balance : First token balance. second_token_id : Second token id. second_token_balance : Second token balance.","title":"22. ExchangeCreateContract"},{"location":"mechanism-algorithm/system-contracts/#23-exchangeinjectcontract","text":"message ExchangeInjectContract { bytes owner_address = 1; int64 exchange_id = 2; bytes token_id = 3; int64 quant = 4; } owner_address : The owner of the current account. exchange_id : The token pair id. token_id : The token id to inject. quant : The token amount to inject.","title":"23. ExchangeInjectContract"},{"location":"mechanism-algorithm/system-contracts/#24-exchangewithdrawcontract","text":"message ExchangeWithdrawContract { bytes owner_address = 1; int64 exchange_id = 2; bytes token_id = 3; int64 quant = 4; } owner_address : The owner of the current account. exchange_id : The token pair id. token_id : The token id to withdraw. quant : The token amount to withdraw.","title":"24. ExchangeWithdrawContract"},{"location":"mechanism-algorithm/system-contracts/#25-exchangetransactioncontract","text":"message ExchangeTransactionContract { bytes owner_address = 1; int64 exchange_id = 2; bytes token_id = 3; int64 quant = 4; } owner_address : The owner of the current account. exchange_id : The token pair id. token_id : The token id to sell. quant : The token amount to sell.","title":"25. ExchangeTransactionContract"},{"location":"mechanism-algorithm/system-contracts/#26-shieldedtransfercontract","text":"message ShieldedTransferContract { bytes transparent_from_address = 1; int64 from_amount = 2; repeated SpendDescription spend_description = 3; repeated ReceiveDescription receive_description = 4; bytes binding_signature = 5; bytes transparent_to_address = 6; int64 to_amount = 7; } transparent_from_address : The transparent address of the sender. from_amount : The amount to send. spend_description : Shielded spend information. receive_description : Shielded receive information. binding_signature : The binding signature. transparent_to_address : The transparent address of the receiver. to_amount : The amount to receive. message SpendDescription { bytes value_commitment = 1; bytes anchor = 2; bytes nullifier = 3; bytes rk = 4; bytes zkproof = 5; bytes spend_authority_signature = 6; } value_commitment : value commitment of spender's transfer amount. anchor : root of the note commitment Merkle tree at some block. nullifier : nullifier of spender's note, to prevent double-spent. rk : public key, to verify spender's Spend Authorization Signature . zkproof : zero-knowledge proof of spender's note, prove that this note exists and could be spent. spend_authority_signature : the spender's Spend Authorization Signature . message ReceiveDescription { bytes value_commitment = 1; bytes note_commitment = 2; bytes epk = 3; bytes c_enc = 4; bytes c_out = 5; bytes zkproof = 6; } value_commitment : value commitment of receiver's transfer amount. note_commitment : commitment of the receiver's not. epk : ephemeral public key, in order to generate note's decryption key. c_enc : part of note ciphertext, encryption of diversifier, receiver's transfer amount, rcm, and memo. c_out : part of note ciphertext, encryption of the receiver's public key and ephemeral private key. zkproof : zero-knowledge proof of the receiver's note.","title":"26. ShieldedTransferContract"},{"location":"mechanism-algorithm/system-contracts/#27-account-permission-management","text":"Account Permission Management","title":"27. Account Permission Management"},{"location":"mechanism-algorithm/system-contracts/#28-clearabicontract","text":"message ClearABIContract { bytes owner_address = 1; bytes contract_address = 2; } owner_address : The owner of the current account. account_address : The target contract address to clear ABI.","title":"28. ClearABIContract"},{"location":"mechanism-algorithm/system-contracts/#29-updatebrokeragecontract","text":"message UpdateBrokerageContract { bytes owner_address = 1; int32 brokerage = 2; } owner_address : The owner of the current account. brokerage : Commission rate, from 0 to 100,1 mean 1%.","title":"29. UpdateBrokerageContract"},{"location":"mechanism-algorithm/system-contracts/#30-updateenergylimitcontract","text":"message UpdateEnergyLimitContract { bytes owner_address = 1; bytes contract_address = 2; int64 origin_energy_limit = 3; } owner_address : The owner of the current account. contract_address : The contract address. origin_energy_limit : The target energy limit to change.","title":"30. UpdateEnergyLimitContract"},{"location":"mechanism-algorithm/system-contracts/#31-freezebalancev2contract","text":"message FreezeBalanceV2Contract { bytes owner_address = 1 ; int64 frozen_balance = 2 ; ResourceCode resource = 3 ; } owner_address \uff1aOwner address frozen_balance \uff1aTRX stake amount, the unit is sun resource \uff1a Resource type","title":"31. FreezeBalanceV2Contract"},{"location":"mechanism-algorithm/system-contracts/#32-unfreezebalancev2contract","text":"message UnfreezeBalanceV2Contract { bytes owner_address = 1 ; int64 unfreeze_balance = 2 ; ResourceCode resource = 3 ; } owner_address \uff1aOwner address unfreeze_balance \uff1aThe amount of TRX to unstake, in sun resource \uff1a Resource type","title":"32. UnfreezeBalanceV2Contract"},{"location":"mechanism-algorithm/system-contracts/#33-withdrawexpireunfreezecontract","text":"message WithdrawExpireUnfreezeContract { bytes owner_address = 1 ; } owner_address \uff1aOwner address","title":"33. WithdrawExpireUnfreezeContract"},{"location":"mechanism-algorithm/system-contracts/#34-delegateresourcecontract","text":"message DelegateResourceContract { bytes owner_address = 1 ; ResourceCode resource = 2 ; int64 balance = 3 ; bytes receiver_address = 4 ; bool lock = 5 ; } owner_address \uff1aOwner address resource \uff1a Resource type balance \uff1a Amount of TRX staked for resources to be delegated, unit is sun receiver_address \uff1aResource receiver address lock \uff1aWhether it is locked, if it is set to true, the delegated resources cannot be undelegated within 3 days. When the lock time is not over, if the owner delegates the same type of resources using the lock to the same address, the lock time will be reset to 3 days","title":"34. DelegateResourceContract"},{"location":"mechanism-algorithm/system-contracts/#35-undelegateresourcecontract","text":"message UnDelegateResourceContract { bytes owner_address = 1 ; ResourceCode resource = 2 ; int64 balance = 3 ; bytes receiver_address = 4 ; } owner_address \uff1aOwner address resource \uff1a Resource type balance \uff1aundelegated TRX, unit is sun receiver_address \uff1aResource receiver address","title":"35. UnDelegateResourceContract"},{"location":"mechanism-algorithm/trc10/","text":"TRC-10 \u00b6 TRON network supports two types of tokens, one is TRC-20 token issued by smart contract, the other one is TRC-10 token issued by system contract. How to Issue a TRC-10 Token \u00b6 HTTP API: wallet/createassetissue Description: Issue a token demo: curl -X POST http://127.0.0.1:8090/wallet/createassetissue -d '{ \"owner_address\":\"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"name\":\"0x6173736574497373756531353330383934333132313538\", \"abbr\": \"0x6162627231353330383934333132313538\", \"total_supply\" :4321, \"trx_num\":1, \"num\":1, \"start_time\" : 1530894315158, \"end_time\":1533894312158, \"description\":\"007570646174654e616d6531353330363038383733343633\", \"url\":\"007570646174654e616d6531353330363038383733343633\", \"free_asset_net_limit\":10000, \"public_free_asset_net_limit\":10000, \"frozen_supply\":{\"frozen_amount\":1, \"frozen_days\":2} }' Parameter owner_address: Owner address, default hexString Parameter name: Token name, default hexString Parameter abbr: Token name abbreviation, default hexString Parameter total_supply: Token total supply Parameter trx_num: Define the price by the ratio of trx_num/num, Parameter num: Define the price by the ratio of trx_num/num Parameter start_time: ICO start time Parameter end_time: ICO end time Parameter description: Token description, default hexString Parameter url: Token official website url, default hexString Parameter free_asset_net_limit: The free bandwidth limit of each token holder Parameter public_free_asset_net_limit: The total free bandwidth limit of the Token Parameter frozen_supply: Token staked supply Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'trx_num' is SUN Participate TRC-10 Token Issuing \u00b6 HTTP API: wallet/participateassetissue Description: Participate a token issuing demo: curl -X POST http://127.0.0.1:8090/wallet/participateassetissue -d '{ \"to_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"owner_address\":\"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", \"amount\":100, \"asset_name\":\"3230313271756265696a696e67\" }' Parameter to_address: The issuer address of the token, default hexString Parameter owner_address: The participant address, default hexString Parameter amount: Participate token amount Parameter asset_name: Token id, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token TRC-10 Token Transfer \u00b6 HTTP API: wallet/transferasset Description: Transfer token demo: curl -X POST http://127.0.0.1:8090/wallet/transferasset -d '{ \"owner_address\":\"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"to_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"asset_name\": \"31303030303031\", \"amount\": 100 }' Parameter owner_address: Owner address, default hexString Parameter to_address: To address, default hexString Parameter asset_name: Token id number encoded as hexString Parameter amount: Token transfer amount Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token","title":"TRC-10"},{"location":"mechanism-algorithm/trc10/#trc-10","text":"TRON network supports two types of tokens, one is TRC-20 token issued by smart contract, the other one is TRC-10 token issued by system contract.","title":"TRC-10"},{"location":"mechanism-algorithm/trc10/#how-to-issue-a-trc-10-token","text":"HTTP API: wallet/createassetissue Description: Issue a token demo: curl -X POST http://127.0.0.1:8090/wallet/createassetissue -d '{ \"owner_address\":\"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"name\":\"0x6173736574497373756531353330383934333132313538\", \"abbr\": \"0x6162627231353330383934333132313538\", \"total_supply\" :4321, \"trx_num\":1, \"num\":1, \"start_time\" : 1530894315158, \"end_time\":1533894312158, \"description\":\"007570646174654e616d6531353330363038383733343633\", \"url\":\"007570646174654e616d6531353330363038383733343633\", \"free_asset_net_limit\":10000, \"public_free_asset_net_limit\":10000, \"frozen_supply\":{\"frozen_amount\":1, \"frozen_days\":2} }' Parameter owner_address: Owner address, default hexString Parameter name: Token name, default hexString Parameter abbr: Token name abbreviation, default hexString Parameter total_supply: Token total supply Parameter trx_num: Define the price by the ratio of trx_num/num, Parameter num: Define the price by the ratio of trx_num/num Parameter start_time: ICO start time Parameter end_time: ICO end time Parameter description: Token description, default hexString Parameter url: Token official website url, default hexString Parameter free_asset_net_limit: The free bandwidth limit of each token holder Parameter public_free_asset_net_limit: The total free bandwidth limit of the Token Parameter frozen_supply: Token staked supply Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'trx_num' is SUN","title":"How to Issue a TRC-10 Token"},{"location":"mechanism-algorithm/trc10/#participate-trc-10-token-issuing","text":"HTTP API: wallet/participateassetissue Description: Participate a token issuing demo: curl -X POST http://127.0.0.1:8090/wallet/participateassetissue -d '{ \"to_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"owner_address\":\"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", \"amount\":100, \"asset_name\":\"3230313271756265696a696e67\" }' Parameter to_address: The issuer address of the token, default hexString Parameter owner_address: The participant address, default hexString Parameter amount: Participate token amount Parameter asset_name: Token id, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token","title":"Participate TRC-10 Token Issuing"},{"location":"mechanism-algorithm/trc10/#trc-10-token-transfer","text":"HTTP API: wallet/transferasset Description: Transfer token demo: curl -X POST http://127.0.0.1:8090/wallet/transferasset -d '{ \"owner_address\":\"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"to_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"asset_name\": \"31303030303031\", \"amount\": 100 }' Parameter owner_address: Owner address, default hexString Parameter to_address: To address, default hexString Parameter asset_name: Token id number encoded as hexString Parameter amount: Token transfer amount Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token","title":"TRC-10 Token Transfer"},{"location":"releases/history/","text":"History \u00b6 Code Name Version Released Incl TIPs Release Note Specs Epicurus GreatVoyage-v4.7.7 2024-11-29 TIP-697 Release Note Specs Anaximander GreatVoyage-v4.7.6 2024-10-04 N/A Release Note Specs Cleobulus GreatVoyage-v4.7.5 2024-5-30 TIP-653 Release Note Specs Bias GreatVoyage-v4.7.4 2024-3-15 TIP-635 TIP-621 Release Note Specs Solon GreatVoyage-v4.7.3.1 2024-1-12 N/A Release Note Specs Chilon GreatVoyage-v4.7.3 2023-10-25 TIP-586 TIP-592 Release Note Specs Periander GreatVoyage-v4.7.2 2023-7-1 TIP-541 TIP-542 TIP-543 TIP-544 TIP-555 TIP-547 TIP-548 TIP-549 TIP-550 Release Note Specs Pittacus GreatVoyage-v4.7.1.1 2023-4-17 TIP-534 Release Note Specs Sartre GreatVoyage-v4.7.1 2023-2-27 N/A Release Note Specs Aristotle GreatVoyage-v4.7.0.1 2023-1-20 TIP-467 TIP-474 TIP-491 Release Note Specs Socrates GreatVoyage-v4.6.0 2022-11-21 TIP-387 TIP-461 TIP-465 TIP-476 Release Note Specs Aurelius GreatVoyage-v4.5.2 2022-8-18 TIP-425 TIP-428 TIP-440 Release Note Specs Tertullian GreatVoyage-v4.5.1 2022-1-19 TIP-391 TIP-388 TIP-383 TIP-382 TIP-370 TIP-369 TIP-397 Release Note Specs David GreatVoyage-v4.4.6 2022-5-25 N/A Release Note Specs Cicero GreatVoyage-4.4.5 2022-4-27 N/A Release Note Specs Plotinus GreatVoyage-4.4.4 2022-2-22 TIP-362 TIP-366 Release Note Specs Pythagoras GreatVoyage-4.4.3 2021-12-17 N/A Release Note N/A Augustinus GreatVoyage-4.4.2 2021-12-16 TIP-343 TIP-344 Release Note Specs Protagoras GreatVoyage-4.4.1 2021-10-19 N/A Release Note N/A Rousseau GreatVoyage-4.4.0 2021-10-15 TIP-289 TIP-290 TIP-272 TIP-318 Release Note Specs Bacon GreatVoyage-4.3.0 2021-8-3 TIP-292 TIP-293 TIP-295 TIP-271 TIP-306 Release Note Specs Epictetus GreatVoyage-4.2.2.1 2021-6-25 N/A Release Note Specs Lucretius GreatVoyage-4.2.2 2021-6-22 TIP-268 TIP-269 TIP-281 Release Note Specs Origen GreatVoyage-4.2.1 2021-5-22 N/A Release Note N/A Plato GreatVoyage-4.2.0 2021-4-27 TIP-157 TIP-207 Release Note Specs Thales GreatVoyage-4.1.3 2021-3-18 TIP-238 Release Note Specs N/A GreatVoyage-4.1.2 2021-1-20 TIP-196 TIP-204 TIP-209 Release Note Specs N/A GreatVoyage-4.1.1 2020-11-9 N/A Release Note Specs N/A GreatVoyage-v4.1.0 2020-11-2 TIP-127 TIP-128 TIP-174 TIP-175 TIP-176 Release Note N/A N/A GreatVoyage-v4.0.2 2020-11-2 N/A Release Note N/A N/A GreatVoyage-v4.0.1 2020-3-17 N/A Release Note N/A N/A GreatVoyage-4.0.0 2020-7-7 TIP-135 TIP-137 TIP-138 Release Note Specs N/A Odyssey-v3.7 2020-3-17 N/A Release Note Specs N/A Odyssey-v3.6.5 2019-10-8 TIP-37 TIP-43 TIP-44 TIP-53 TIP-54 TIP-60 Release Note Specs N/A Odyssey-v3.6.2 2019-8-8 N/A Release Note N/A N/A Odyssey-v3.6.1 2019-7-10 TIP-41 Release Note N/A N/A Odyssey-v3.6.0 2019-6-20 TIP-26 TIP-28 TIP-29 TIP-30 TIP-31 TIP-32 Release Note N/A N/A Odyssey-v3.5.1 2019-4-10 N/A Release Note N/A N/A Odyssey-v3.5.0.1 2019-3-1 N/A Release Note N/A N/A Odyssey-v3.5 2019-3-1 N/A Release Note N/A N/A Odyssey-v3.2.5 2019-1-25 N/A Release Note N/A N/A Odyssey-v3.2.4 2019-1-14 N/A Release Note N/A N/A Odyssey-v3.2.3 2018-12-24 N/A Release Note N/A N/A Odyssey-v3.2.2 2018-12-17 N/A Release Note N/A N/A Odyssey-v3.2.1.2 2018-12-7 N/A Release Note N/A N/A Odyssey-v3.2.1 2018-11-30 N/A Release Note N/A N/A Odyssey-v3.2 2018-11-30 N/A Release Note N/A N/A Odyssey-v3.1.3 2018-10-19 N/A Release Note N/A N/A Odyssey-v3.1.2 2018-10-12 N/A Release Note N/A N/A Odyssey-v3.1.1 2018-9-17 N/A Release Note N/A N/A Odyssey-v3.1.0 2018-9-10 N/A Release Note N/A N/A Odyssey-v3.0.1 2018-9-6 N/A Release Note N/A N/A Odyssey-v3.0 2018-8-30 N/A Release Note N/A N/A Odyssey-v2.0.8.1 2018-8-20 N/A Release Note N/A N/A Odyssey-v2.0.8 2018-8-14 N/A Release Note N/A N/A Odyssey-v2.0.7 2018-8-9 N/A Release Note N/A N/A Odyssey-v2.0.6 2018-7-11 N/A Release Note N/A N/A Odyssey-v2.0.5 2018-6-24 N/A Release Note N/A N/A Odyssey-v2.0.4.1 2018-6-24 N/A Release Note N/A N/A Odyssey-v2.0.4 2018-6-22 N/A Release Note N/A N/A Odyssey-v2.0.3 2018-6-20 N/A Release Note N/A N/A Odyssey-v2.0.2 2018-6-19 N/A Release Note N/A N/A Odyssey-v2.0.1 2018-6-6 N/A Release Note N/A N/A Odyssey-v2.0 2018-5-31 N/A Release Note N/A N/A Odyssey-v1.1.2 2018-5-31 N/A Release Note N/A N/A Odyssey-v1.1.1 2018-5-28 N/A Release Note N/A N/A Odyssey-v1.1 2018-5-18 N/A Release Note N/A N/A Odyssey-v1.0.6.3 2018-5-10 N/A Release Note N/A N/A Odyssey-v1.0.6.1 2018-5-7 N/A Release Note N/A N/A Odyssey-v1.0.6 2018-5-7 N/A Release Note N/A N/A Odyssey-v1.0.5 2018-4-20 N/A Release Note N/A N/A Odyssey-v1.0.4 2018-4-13 N/A Release Note N/A N/A Odyssey-v1.0.3 2018-4-5 N/A Release Note N/A N/A Exodus-v1.0 2017-12-28 N/A Release Note N/A GreatVoyage-4.7.7(Epicurus) \u00b6 GreatVoyage-4.7.7(Epicurus) introduces multiple important optimizations and updates, including a new proposal to upgrade the floating-point power calculation library from java.lang.Math to java.lang.StrictMath , to expand TRON hardware compatibility and provide users with more flexible hardware platform selection, and save operating costs; optimizing event subscription processing logic to ensure the integrity of event acquisition, and bring users a more user-friendly development experience; adapting to the GRPC asynchronous call mode, and further improve the node monitoring system. You may find the details below. Core \u00b6 1. Migrate pow operation from java.lang.Math to java.lang.StrictMath for cross-platform computational consistency \u00b6 In order to enable java-tron to support multiple platforms and be compatible with new JDK versions, the Epicurus version switches the floating-point power operation library from java.lang.Math to java.lang.StrictMath to ensure consistency in cross-platform calculations. Note: This optimization is the No. 87 parameter of the TRON network. After Epicurus is deployed, it is disabled by default and can be enabled through governance voting. TIP: https://github.com/tronprotocol/tips/issues/697 Source Code: https://github.com/tronprotocol/java-tron/pull/6098 Other Changes \u00b6 1. Optimize event subscription processing logic \u00b6 java-tron provides event subscription service, and developers can subscribe to specific events from node through event plugin. For block events, when a node receives a new block, if it successfully verifies and processes the block, it will save the block data in the memory database. At the same time, if there is a new solidified block, the solidified block data will be written to the disk database. If the node deployer subscribes to block events, after the node completing the above block processing steps, the event sending related logic will be performed, that is, the latest block event and the latest solidified block event will be sent to the event plugin. However, in previous versions of Epicurus, block processing and event sending used the same exception capture logic: the newly received block data was removed from the memory database and an exception was thrown. This would result in the new block data being deleted when the block processing was normal but an exception occurred during event sending, which might temporarily affect block synchronization. The Epicurus version optimizes the event subscription processing logic and performs separate exception capture on the block event sending logic. When an exception occurs during event sending, an error log is output and the node exits, so that the node deployer can understand the node abnormality in time and ensure the integrity of event acquisition. Source Code: https://github.com/tronprotocol/java-tron/pull/6096 2. Support graceful shutdown with signal -15 (SIGTERM) for nodes enabling backup. \u00b6 The Epicurus version adjusts the resource release order of the master and backup services, first closing the communication channel between the master and backup nodes, and then closing the thread pool to ensure that the nodes enabling backup can exit gracefully through the kill -15 command. Source Code: https://github.com/tronprotocol/java-tron/pull/6095 3. Improve duration metrics accuracy of gRPC interfaces \u00b6 The Epicurus version optimizes the duration statistics method for GRPC interface calls to adapt to the GRPC asynchronous call mode: a new server-side interceptor is added to record the start time of the GRPC call and monitor the end event of the GRPC call to accurately calculate the time consumption of the GRPC interface asynchronous call. Source Code: https://github.com/tronprotocol/java-tron/pull/6097 Not what we have but what we enjoy, constitutes our abundance. ---Epicurus GreatVoyage-v4.7.6(Anaximander) \u00b6 The GreatVoyage-4.7.6(Anaximander) introduces several important optimizations and updates, including optimized unit test tasks to improve the stability of test cases execution; newly added TCP and UDP traffic statistics further enriches node monitoring data; optimized peer node idle judgment logic improves the stability of block synchronization; optimized node connection random disconnection logic improves the robustness of node network. Please find the details below. Other Changes \u00b6 1. Optimize the statistical logic of node HTTP request monitoring metric \u00b6 java-tron supports node monitoring and provides various metrics data. Anaximander optimizes the statistical logic of node HTTP request monitoring metric to ensure data consistency during concurrent access by multiple threads when counting request data from each mapping address. Source Code: https://github.com/tronprotocol/java-tron/pull/5920 2. Improve stability of Gradle test task \u00b6 Anaximander optimizes the unit test task. The Gradle test-retry plugin is introduced to allow the failed unit test tasks to be re-executed. The @Ignore annotation is used to skip temporarily unused and unstable test cases. This optimization improves the stability of test task execution. Source Code: https://github.com/tronprotocol/java-tron/pull/5916 https://github.com/tronprotocol/java-tron/pull/5927 3. Add TCP outflow monitoring metric for Prometheus and add UDP inflow traffic statistic to /monitor/getstatsinfo API \u00b6 Anaximander adds a new node TCP outflow monitoring metric and adds a UDP inflow statistic to the /monitor/getstatsinfo interface, further enriching the node monitoring data. Source Code: https://github.com/tronprotocol/java-tron/pull/5942 4. Optimize peer node idle judgment logic \u00b6 Anaximander optimizes the logic of judging whether the peer node is idle during the block synchronization process, so that block synchronization is not affected by the process of broadcasting blocks/transactions, which improves the efficiency of block synchronization and the stability of the connection between nodes. Source Code: https://github.com/tronprotocol/java-tron/pull/5921 5. Optimize peer sorting logic \u00b6 Anaximander optimizes the peers\u2019 sorting logic and adds exception-catching to improve the efficiency of establishing connections between nodes. Source Code: https://github.com/tronprotocol/java-tron/pull/5923 6. Optimize check logic for fetching block inventory message \u00b6 Anaximander optimizes the check logic for fetching block inventory messages. The block number requested should be smaller than the largest block number in chain inventory message so that the node can detect illegal messages in time and disconnect from the other node. At the same time, richer node logs are conducive to the troubleshooting and location of connection issues between nodes. Source Code: https://github.com/tronprotocol/java-tron/pull/5922 7. Optimize block processing logic \u00b6 Anaximander optimizes the block processing logic. When processing a received broadcasted block, the node will promptly update the ID and number of the block which the node with its peer both have to better understand the status of the peers. Source Code: https://github.com/tronprotocol/java-tron/pull/5925 8. Optimize random disconnection strategy \u00b6 When a node\u2019s latest block height is higher than all peers\u2019 that are connected to it, this node will neither be able to synchronize blocks from peers, nor broadcast transactions. We call it an \"island node\". An island node actually does not have a valid peer. In order to prevent a node from entering the island state, Anaximander optimizes the random disconnection logic of the node, disconnects nodes that have been inactive for a long time, increases the number of valid connections, and improves the robustness of the node network. Source Code: https://github.com/tronprotocol/java-tron/pull/5924 https://github.com/tronprotocol/java-tron/pull/5944 https://github.com/tronprotocol/java-tron/pull/5956 https://github.com/tronprotocol/java-tron/pull/5984 Nature is eternal and does not age. ---Anaximander GreatVoyage-v4.7.5(Cleobulus) \u00b6 The Cleobulus version introduces multiple important optimizations and updates, including a new proposal to adjust the energy cost of some opcodes in TVM to make the energy cost more reasonable. The enhanced transaction and block verification logic improves the system's fault tolerance. The optimized synchronization logic between threads improves data consistency. You may find the details below. Core \u00b6 1. Optimize block synchronization and production logic \u00b6 The Cleobulus version optimizes the block production logic. After obtaining the block production lock, the node will check whether it meets the conditions for producing blocks to avoid inconsistent state before and after obtaining the block production lock, thereby improving the stability of the TRON network. Additionally, Cleobulus enhances the block verification logic. All nodes add checks on block size and block time. Source Code: https://github.com/tronprotocol/java-tron/pull/5833 https://github.com/tronprotocol/java-tron/pull/5830 2. Strengthen size check of account creation transactions \u00b6 The Cleobulus version optimizes the account creation logic, strengthens the size check of account creation transactions, and adds the No.82 TRON network parameter to set the maximum number of bytes allowed for account creation transactions. The parameter ranges from 500 to 10000 and the default value is 1000. The value can be modified by initiating a proposal for a vote. Source Code: https://github.com/tronprotocol/java-tron/pull/5835 TVM \u00b6 1. Adjust energy cost for some opcodes in TVM \u00b6 Cleobulus adjusts the energy cost of the VOTEWITNESS and SUICIDE opcodes to make the energy consumption more reasonable based on the resources and time required for the actual execution of each opcode. This optimization is the No. 81 parameter of the TRON network. After Cleobulus is deployed, it is disabled by default and can be enabled through governance voting. TIP: https://github.com/tronprotocol/tips/blob/master/tip-653.md Source Code: https://github.com/tronprotocol/java-tron/pull/5837 Other Changes \u00b6 1. Optimize synchronization logic among threads \u00b6 The Cleobulus version optimizes the block request logic and no longer reads fetchBlockInfo data when printing logs, improving the stability of concurrent access to fetchBlockInfo object by multiple threads. Additionally, Cleobulus optimizes the synchronization block processing logic. Regardless of whether the syncBlockToFetch queue is empty, the node can process block data normally, improving the efficiency of block synchronization. Source Code: https://github.com/tronprotocol/java-tron/pull/5831 https://github.com/tronprotocol/java-tron/pull/5832 2. Remove redundant code \u00b6 The Cleobulus version removes redundant code in the block processing logic, improving the readability and maintainability of the code. Source Code: https://github.com/tronprotocol/java-tron/pull/5834 Seek virtue and eschew vice. ---Cleobulus GreatVoyage-v4.7.4(Bias) \u00b6 The Bias version introduces several important optimizations and updates, including a new proposal to optimize the performance of voting reward withdrawal; the refactored Gradle dependency reduces the complexity of core protocol development; support for gRPC reflection services and optimized logging system brings a more friendly and convenient development experience to users. Please find the details below. Core \u00b6 1. Optimize voting reward withdrawal performance \u00b6 TIP-465 aims to improve the calculation performance of TRON voting rewards. By recording the single-vote cumulative reward value of each super representative in each maintenance period, the time complexity of voting reward calculation can be reduced from linear time to constant time. The TIP-465 has been implemented as early as the Socrates version, and No. 82 proposal based on TIP-465 has been officially adopted at 2023-01-20 14:00:00. However, this proposal only optimizes the calculation performance of voting rewards generated after the proposal takes effect (constant time complexity), while the calculation performance of voting rewards generated before the proposal takes effect is still low (linear time complexity). The Bias version optimizes the calculation performance of voting rewards generated before the No.82 proposal takes effect. It calculates the single-vote cumulative reward value of each super representative in each maintenance period before the No.82 proposal takes effect in advance through background tasks, and saves the calculation results to the database. This will make the calculation performance of voting rewards generated before and after the No. 82 proposal takes effect consistent, so that any transaction involving reward withdrawal can complete the reward calculation within a constant time, speeding up the execution speed of transactions related to voting rewards withdrawal, improving network throughput. This optimization is the No. 79 parameter of the TRON network. After Bias is deployed, it is turned off by default and can be enabled through governance voting. TIP: https://github.com/tronprotocol/tips/issues/635 Source Code: https://github.com/tronprotocol/java-tron/pull/5406 https://github.com/tronprotocol/java-tron/pull/5654 https://github.com/tronprotocol/java-tron/pull/5683 https://github.com/tronprotocol/java-tron/pull/5742 https://github.com/tronprotocol/java-tron/pull/5748 2. Add check function for the number of unsolidified blocks \u00b6 The block solidification mechanism of the TRON network is: a block can be solidified only after it is confirmed by 70% of the super representatives, that is, the block data is written to the disk and the data cannot be changed. Blocks that cannot be solidified are always stored in memory. If the number of unsolidified blocks continues to increase, it may cause memory exhaustion and the node to stop running. The Bias version adds a check function for the number of unsolidified blocks. When it is detected that the number of unsolidified blocks of a node reaches the threshold, the node will stop broadcasting transactions to avoid too many transactions that cannot be solidified in the network. This can not only reduce the node's memory usage, but also reduce the number of transactions in the block, improve the block execution speed, and facilitate the rapid recovery of the network in the later period.. This feature is disabled by default. Node deployers can turn on it and configure the threshold through the below configuration items. node.unsolidifiedBlockCheck = true node.maxUnsolidifiedBlocks = 54 Source Code: https://github.com/tronprotocol/java-tron/pull/5643 API \u00b6 1. Supply BLOCK_UNSOLIDIFIED in code for /wallet/broadcasttransaction API \u00b6 The Bias version adds a check function for the number of unsolidified blocks. When it is detected that the number of unsolidified blocks of a node reaches the threshold, the node will stop broadcasting transactions. In order to provide better feedback on the node status, the Bias version adds a new return code BLOCK_UNSOLIDIFIED for the /wallet/broadcasttransaction API. This code indicates that the node has too many unsolidified blocks and the number has exceeded the threshold, the node cannot broadcast the transaction. Source Code: https://github.com/tronprotocol/java-tron/pull/5643 Other Changes \u00b6 1. Add field codeVersion to HelloMessage to declare code version \u00b6 Bias adds a new field codeVersion representing version information in the HelloMessage message, so that nodes can obtain the version information of the other node during the node discovery phase, which is beneficial to troubleshooting and locating problems later. TIP: https://github.com/tronprotocol/tips/issues/621 Source Code: https://github.com/tronprotocol/java-tron/pull/5584 https://github.com/tronprotocol/java-tron/pull/5667 2. Bump libp2p to version 2.2.1 \u00b6 Bias upgrades the network module to libp2p v2.2.1. The main contents of this version include: bump snappy-java dependency library to v1.1.10.5, add LAN IP acquisition logic, optimize handshake logic, and adjust some log levels. Source Code: https://github.com/tronprotocol/java-tron/pull/5692 3. Bump jetty to 9.4.53.v20231009 \u00b6 The Bias version bumps the jetty dependency library to v9.4.53.v20231009. Source Code: https://github.com/tronprotocol/java-tron/pull/5571 4. Refactor Gradle dependencies \u00b6 The java-tron code is divided into multiple modules, each module has its own dependencies, but currently there are situations where dependencies are declared multiple times in multiple modules. The Bias version reconstructs the Gradle dependencies of each module and deletes duplicate dependency statements, making the code dependencies clearer and enabling unified management of dependencies to reduce maintenance costs. Source Code: https://github.com/tronprotocol/java-tron/pull/5625 5. Provide gRPC reflection service \u00b6 Starting from the Bias version, the gRPC reflection service is supported. Users can directly use the gRPCurl command line tool to make the gPRC interface calls, which improves the ease of use of the gRPC interface. This feature needs to be enabled through the following configuration items: node.rpc.reflectionService=true Source Code: https://github.com/tronprotocol/java-tron/pull/5583 6. Delete the LiteFullNodeTool related code under the framework module \u00b6 In order to facilitate tool maintenance and developer use, TRON has launched the Toolkit.jar toolbox, which includes various TRON development tools. As early as the Aristotle version, the code related to the LiteFullNode data clipping tool has been integrated into the Toolkit toolbox (located under the plugin module), and Toolkit can completely replace LiteFullNodeTool (located under the framework module). Therefore, the Bias version deletes the LiteFullNodeTool related code under the framework module, which not only reduces code redundancy, but also makes the division of functional modules clearer. The commands to use the LiteFullNode data pruning function in the Toolkit are as follows: $ java -jar Toolkit.jar db lite Source Code: https://github.com/tronprotocol/java-tron/pull/5711 7. Remove configuration item node.discovery.bind.ip \u00b6 Bias upgrades libp2p to v2.2.1. That makes the node can obtain the node LAN IP directly through libp2p without manual configuration by the deployer. Therefore, the Bias version deletes the no longer used configuration item node.discovery.bind.ip , simplifying the configuration complexity. Source Code: https://github.com/tronprotocol/java-tron/pull/5597 https://github.com/tronprotocol/java-tron/pull/5750 8. Remove redundant CI scripts \u00b6 The Bias version removes project build scripts that are no longer used, including checkStyle.sh, codecov.sh, querySonar.sh, sonar.sh. Source Code: https://github.com/tronprotocol/java-tron/pull/5580 9. Initialize the API service first during the node startup \u00b6 The Bias version adjusts the start order of each service, starts the node API service first, and then starts the P2P service and consensus service. This prevents the API service port from being occupied by other services. Source Code: https://github.com/tronprotocol/java-tron/pull/5711 10. Optimize log \u00b6 The Bias version optimizes node logs, adjusts some log levels according to business logic, simplifies expected exception logs, and elaborates unexpected exception logs to facilitate problem location. Source Code: https://github.com/tronprotocol/java-tron/pull/5624 https://github.com/tronprotocol/java-tron/pull/5601 https://github.com/tronprotocol/java-tron/pull/5660 https://github.com/tronprotocol/java-tron/pull/5687 https://github.com/tronprotocol/java-tron/pull/5697 11. Add synchronization control when writing to ZeroMQ \u00b6 java-tron supports subscribing to events through the built-in ZeroMQ message queue. However, when multiple threads concurrently send events to the ZeroMQ, write exception errors may occur. The Bias version adds synchronization control when writing to ZeroMQ, ensuring the order of concurrent access between threads. Source Code: https://github.com/tronprotocol/java-tron/pull/5536 12.Optimize unexpected exception capture process of scalingFactor in /wallet/createshieldedcontractparameters API. \u00b6 The Bias version optimizes the /wallet/createshieldedcontractparameters interface and adds a legality check for the anonymous contract scaling factor parameter scalingFactor , which must be a positive integer. Source Code: https://github.com/tronprotocol/java-tron/pull/5746 Be slow in considering, but resolute in action. ---Bias GreatVoyage-v4.7.3.1(Solon) \u00b6 Solon is a non-mandatory upgrade version that will introduce two important updates. A more stable HTTP interface and Lite FullNode data pruning tool bring users a more friendly development experience. Please find the details below. Other Changes \u00b6 1. More stable /wallet/getnodeinfo interface \u00b6 In versions prior to Solon, there was a very small probability that an exception might be triggered when calling the /wallet/getnodeinfo interface due to the concurrent execution of block data object serialization. Therefore, the Solon version modified the serialization logic of block data to ensure the correctness of block data acquisition and make the /wallet/getnodeinfo interface more stable. Source Code: https://github.com/tronprotocol/java-tron/pull/5594 2. Optimize Lite FullNode data pruning tool \u00b6 In order to solve the problem of node database corruption caused by the abnormal shutdowns, starting from Socrates version, the Checkpoint V2 mechanism was introduced. The V2 mechanism saves multiple checkpoints on the disk, corresponding to multiple solidified block data, which is used to restore the data when the node database is damaged. The Lite FullNode data pruning tool should also be compatible with the checkpoint v2 version. When a node stops abnormally, the pruning tool can also restore the node data and complete the data pruning. Therefore, Solon optimized the Lite FullNode data pruning tool in the toolkit. When it is found that checkpoint v2 is used, the data will be queried from the checkpoint v2 database, so that even if the node stops abnormally, the tool can restore and prune the data, which improves the usability of the Lite FullNode data pruning tool. Source Code: https://github.com/tronprotocol/java-tron/pull/5658 Do not counsel what is most pleasant, but what is best. ---Solon GreatVoyage-v4.7.3(Chilon) \u00b6 Chilon is a non-mandatory upgrade version that will introduce multiple important updates. Richer gRPC interfaces and faster node startup speed, bring users a more friendly development experience. Optimized disconnection strategy and synchronization process improve the stability of the connection among nodes. The optimized transaction processing logic and database query performance elevate the transaction packaging efficiency and network throughput. Please find the details below. Core \u00b6 1. Add gRPC interfaces for resource price and transaction memo fee query \u00b6 Chilon adds three new gRPC interfaces. Users can obtain historical bandwidth unit price through getBandwidthPrices API, obtain historical energy unit price through getEnergyPrices API, and obtain transaction memo fee through getMemoFee API. These new gRPC APIs further improve the developer experience. TIP: https://github.com/tronprotocol/tips/blob/master/tip-586.md Source Code: https://github.com/tronprotocol/java-tron/pull/5412 2. Supplement disconnect reasons \u00b6 When a node fails to process a message from a peer, it may initiatively disconnect from the peer. However, in previous versions of Chilon, in some cases, the node did not inform the other node of the reason for the disconnection, which was not conducive to the analysis and troubleshooting of the connection issue by the other node. The Chilon version supplements two reasons for disconnection. Node will send the disconnection reasons to the other node before dropping the connection, so as to facilitate efficient handling of node connection problems. TIP: https://github.com/tronprotocol/tips/blob/master/tip-592.md Source Code: https://github.com/tronprotocol/java-tron/pull/5392 3. Discard transactions from bad peers instead of disconnected peers \u00b6 For a broadcast transaction, the node must determine whether to process it. In previous versions of Chilon, the basis for judgment is whether the transaction comes from a disconnected peer. If so, the transaction will be discarded. However, whether to execute a broadcasted transaction should not be judged based on whether it maintains a connection with the other node, but whether the other node is a malicious node. Therefore, the Chilon version optimizes the transaction processing logic and no longer discards transactions from disconnected peers. Instead, it only discards transactions broadcasted from the nodes that have sent illegal transactions. This change improves transaction broadcast and packaging efficiency. Source Code: https://github.com/tronprotocol/java-tron/pull/5440 4. Optimize Stake 2.0 codes and error messages \u00b6 The Chilon version standardizes Stake 2.0-related code and simplifies complex functions\uff0c improving the simplicity and readability of the code. Source Code: https://github.com/tronprotocol/java-tron/pull/5426 5. Accelerate bloomFilter initialization for transaction cache \u00b6 When a node starts, it will load the transactions of the latest 65536 blocks from the database to build a transaction cache bloomFilter, which is used to determine duplicate transactions when verifying transactions later. In previous versions of Chilon, the loading time of the transaction cache accounted for more than 70% of the node startup time. In order to accelerate the speed of the transaction cache bloomFilter initialization, the Chilon version persists in the transaction cache bloomFilter. When the node exits normally, the transaction cache bloomFilter-related data will be stored on the disk. When the node restarts, there will be no need to read the transaction information in the recent blocks, but directly load the bloomFilter data into the memory, speeding up the initialization process of the transaction cache bloomFilter and greatly improving the node startup speed. This feature is disabled by default and can be enabled through the node configuration item storage.txCache.initOptimization = true . Source Code: https://github.com/tronprotocol/java-tron/pull/5394 https://github.com/tronprotocol/java-tron/pull/5491 https://github.com/tronprotocol/java-tron/pull/5505 https://github.com/tronprotocol/java-tron/pull/5523 https://github.com/tronprotocol/java-tron/pull/5543 6. Fix concurrency issues when generating chain inventory \u00b6 In previous versions of Chilon, when node A requests to synchronize blocks from node B, it first sends its own chain summary to node B. After receiving it, node B generates node A's missing block list according to the local chain and returns the list to node A. The list generation process is: first, find the maximum common block height of the two nodes from the chain summary of node A, and then add the IDs of several blocks starting from the maximum common block height to the missing blocks list of node A. Since the generation of the missing block list and chain switching are executed concurrently, if chain switching occurs when generating the missing block list, it may happen that after the maximum common block height is obtained, the corresponding block id cannot be obtained, causing the generated missing block list does not match the chain summary of node A, resulting in dropping the node connection. The Chilon version optimizes the generation logic of the missing block list. When the ID of the highest common block previously calculated cannot be obtained, the node will retry to ensure that the returned list contains the highest common block information, which improves the stability of connections between nodes. Source Code: https://github.com/tronprotocol/java-tron/pull/5393 https://github.com/tronprotocol/java-tron/pull/5532 7. Correct resource disorder closure behavior on kill -15 \u00b6 In previous versions of Chilon, when the service is shut down, abnormal errors may occur due to the resource release order issue. The Chilon version optimizes the service shutdown logic. When the kill -15 command is used to shut down the service, it can ensure the accuracy of the release sequence of various types of resources so that the node can exit normally. Source Code: https://github.com/tronprotocol/java-tron/pull/5410 https://github.com/tronprotocol/java-tron/pull/5425 https://github.com/tronprotocol/java-tron/pull/5421 https://github.com/tronprotocol/java-tron/pull/5429 https://github.com/tronprotocol/java-tron/pull/5447 API \u00b6 1. Optimize HTTP interface monitoring \u00b6 Chilon optimizes the HTTP interface monitoring, it no longer counts requests for APIs that are not supported by the node, making the statistics of successful or failed HTTP interface requests more accurate. Source Code: https://github.com/tronprotocol/java-tron/pull/5332 2. Provide uniform rate limitation configuration for all HTTP and gRPC APIs \u00b6 java-tron supports interface rate limiting. The default qps (queries per second) of each interface is 1000. Node deployers can also limit the traffic of a particular interface. However, in previous versions of Chilon, it was not supported to modify the default qps of each interface, that way, If you want to configure the default qps of each interface to 2000, you need to configure the current limit for each interface respectively. The Chilon version adds a new default interface rate limit configuration rate.limiter.global.api.qps . With this configuration, users can change the rate limit of all interfaces, simplifying the configuration complexity. rate.limiter.global.api.qps = 1000 Source Code: https://github.com/tronprotocol/java-tron/pull/5502 3. Optimize HTTP interface parameter parsing \u00b6 In previous versions of Chilon, for interfaces involving reward queries, if the request passes in invalid parameters or non-JSON formatted parameters, the node will throw an exception. The Chilon version optimizes the HTTP interface parameter parsing logic and returns a 0 value or error message for requests with incorrect parameter formats. Source Code: https://github.com/tronprotocol/java-tron/pull/5367 https://github.com/tronprotocol/java-tron/pull/5483 4. Add solidity query interfaces of resource unit price \u00b6 Chilon supplements query interfaces of resource unit price for solidity, they are /walletsolidity/getbandwidthprices and /walletsolidity/getenergyprices . Source Code: https://github.com/tronprotocol/java-tron/pull/5412 https://github.com/tronprotocol/java-tron/pull/5451 https://github.com/tronprotocol/java-tron/pull/5437 5. Optimize the processing logic of some HTTP interfaces \u00b6 The Chilon version optimizes some HTTP interfaces to make it consistent with get and post request processing, including parameters check and return value. The interfaces include /wallet/getavailableunfreezecount , /wallet/getcanwithdrawunfreezeamount , /wallet/getcandelegatedmaxsize , and /wallet/getavailableunfreezecount . Source Code: https://github.com/tronprotocol/java-tron/pull/5408 Other Changes \u00b6 1. Add check for expired transactions when fetching transactions \u00b6 Chilon adds a check for expired transactions in the broadcast list it receives. For transactions timed out in the list, it will no longer make requests to its remote node, avoiding node connections being disconnected due to transaction processing failures, and improving node connection stability. Source Code: https://github.com/tronprotocol/java-tron/pull/5460 2. Fix concurrency issue of getHeadBlockId method \u00b6 During the block synchronization process, the node must obtain the BlockId of the latest block through the getHeadBlockId method. In previous versions of Chilon, the BlockId was obtained through the block number and hash of the latest block. However, due to the concurrent execution of the latest block data acquisition thread and the update thread, getHeadBlockId may start to obtain the BlockId of the latest block before the block number and hash value of the latest block have been updated, which makes it possible for the getHeadBlockId method to return an abnormal BlockId value. Chilon optimizes the BlockId acquisition logic of the latest block, and getHeadBlockId only obtains BlockId through the hash value of the latest block, ensuring the correctness of the block ID acquisition. Source Code: https://github.com/tronprotocol/java-tron/pull/5403 3. Delete unused network configurations \u00b6 Chilon deleted four unused network parameters, including the three configuration items below, simplifying the complexity of using for developers. node.discovery.public.home.node node.discovery.ping.timeout node.p2p.pingInterval Source Code: https://github.com/tronprotocol/java-tron/pull/5441 4. Obtain external IP through Libp2p \u00b6 In previous versions of Chilon, when a node starts, the external IP address would be obtained repeatedly, and java-tron and lib2p2 each perform the IP acquisition once. To improve the node startup speed, Chilon optimizes the external IP acquisition logic. When a node starts, it directly calls the libp2p module to obtain the external IP, and it can directly assign the external IP to libp2p and repeated obtaining is avoided. Source Code: https://github.com/tronprotocol/java-tron/pull/5407 5. Add address parsing for stake-related transactions in event subscription \u00b6 Chilon optimizes the event subscription service and adds the parsing of addresses in stake-related transactions, so that event subscribers can obtain address information in stake, resource delegation, and other transactions. Source Code: https://github.com/tronprotocol/java-tron/pull/5419 6. Adjust default number of CPU cores used in signature validation \u00b6 In previous versions of Chilon, nodes used 1/2 of the system CPU cores for parallel signature verification by default. To improve the performance of node synchronization and block processing, the Chilon version changed the default value of the number of threads used for signature verification to the maximum number of CPU cores to maximize signature verification performance. Node deployers can also adjust the number of signature verification threads through the node.validateSignThreadNum configuration item. Source Code: https://github.com/tronprotocol/java-tron/pull/5396 7. Migrate LiteFullNode tool related unit test cases to Plugins module \u00b6 In the previous version, the code related to the LiteFullNode tool has been integrated into the toolkit in the plugins module. The Chilon version has further integrated and moved the test cases related to the LiteFullNode tool from the framework module to the plugins module. Not only does It make the code structure clearer but also improves the execution efficiency of test cases. Source Code: https://github.com/tronprotocol/java-tron/pull/5475 https://github.com/tronprotocol/java-tron/pull/5482 8. Enhance query performance of properties DB \u00b6 During the block processing process, nodes access the properties database more frequently. Better properties database query performance will improve the processing speed of the block. Since the property data volume is small and updates are infrequent, Chilon optimizes the query performance of the properties database, loading all data into the first-level cache to maximize data query performance and thereby improve transaction processing capabilities. Source Code: https://github.com/tronprotocol/java-tron/pull/5378 Do not desire impossible. ---Chilon GreatVoyage-v4.7.2(Periander) \u00b6 The Periander version introduces several important optimizations and updates, adding two governance proposals to optimize Stake 2.0, greatly improving the flexibility of the TRON stake mechanism; adding a governance proposal to implement EIP-3855 PUSH0 Instruction, which not only ensures the compatibility of TRON and Ethereum at the virtual machine level but also reduces the cost of using TRON smart contracts; more friendly smart contracts interfaces to improve the convenience of smart contract development; the P2P network module of TRON has been fully upgraded to support IPV6 protocol, node discovery via DNS, message compression, etc., greatly improving the performance of TRON network infrastructure. Please see the details below. Core \u00b6 1. Upgrade Libp2p to v1.2.0 \u00b6 Libp2p is a Java version open-source P2P protocol framework developed by the java-tron core developers and anyone can develop distributed applications with Libp2p, as the underlying P2P network of java-tron is implemented based on Libp2p. In order to further improve the underlying network performance of java-tron, Periander upgrades the Libp2p v0.1.4 with the v1.2.0 version. Libp2p v1.2.0 has the following new features\uff1a Support IPv6 protocol IPV6 protocol is the next-generation Internet IP protocol that replaces IPV4. While solving the problem of IP4 address exhaustion, the network performance has also been improved. Currently, mainstream server operating systems support both IPv4 and IPv6. Therefore, Libp2p v1.2.0 supporting dual protocol stacks not only improves the network performance of TRON but also enables nodes that either support one of the protocols or support both of them to join the TRON network. This function is disabled by default and needs to be enabled through the node configuration item node.enableIpv6 = true . TIP: https://github.com/tronprotocol/tips/blob/master/tip-549.md Node Discovery via DNS Libp2p v1.2.0 supports node discovery through DNS so that nodes can use not only the Kademlia algorithm but also the DNS servers for node discovery. The nodes supporting the feature can publish nodes to the DNS service and use DNS for node discovery. These functions need to be enabled through node configuration items, see below: Publish Nodes to DNS The node supports publishing known nodes to the DNS service for other nodes to use. There are two ways to publish nodes: dynamic publishing and static publishing. Dynamic publishing is the node periodically publishing the remote node IP in the K-bucket to DNS. Static publishing is to publish the nodes in the dns.staticNodes configuration item to the DNS service at one time, without updating later. If dns.staticNodes is not empty, it means to adopt the static publishing way, otherwise, the dynamic publishing way. node.dns { # enable or disable dns publish, default false publish = true # dns domain to publish nodes, required if publish is enable dnsDomain = \"...\" # dns private key used to publish, required if publish is enable, hex string of length 64 dnsPrivate = \"...\" # dns server to publish, required if publish is enable, only \u201daws\u201d or \u201caliyun\u201d is support serverType = \"...\" # access key id of aws or aliyun api, required if publish is enable, string accessKeyId = \"...\" # access key secret of aws or aliyun api, required if publish is enable, string accessKeySecret = \"...\" # if publish is enable and serverType is aliyun, it's endpoint of aws dns server, string aliyunDnsEndpoint = \"...\" # if publish is enable and serverType is aws, it's region of aws api, such as \"eu-south-1\", string awsRegion = \"...\" # if publish is enable and serverType is aws, it's host zone id of aws's domain, string awsHostZoneId = \"...\" # static nodes to published on dns staticNodes = [ # Sample entries: # \"ip:port\", # \"ip:port\" ] # the range is from 1 to 5 maxMergeSize = 2 changeThreshold = 0.001 } Node discovery via DNS To use the function of node discovery via DNS, you need to configure the following configuration items: node.dns { # DNS URL to get nodes, URL format tree://{pubkey}@{domain}, default empty treeUrls = [......] } TIP: https://github.com/tronprotocol/tips/blob/master/tip-548.md Connection precheck before P2P communication Libp2p v0.1.4 chooses whether to establish a connection and synchronize data with a remote node according to the order of the update time of the node. In actual scenarios, the connection may be rejected by the other party for some reason, which will affect data synchronization. In order to improve the efficiency of establishing connections between nodes, Libp2p v1.2.0 supports node connection precheck before the P2P communication, which can check whether the other node can accept the connection in advance. The node tries to establish a TCP connection with the other node in advance to know whether it is online. If the TCP connection is established, a pair of interactive messages are used to obtain the relevant information of the other node, including the Libp2p version, the maximum number of connections, the current number of connections, etc., to determine whether the other node can still accept connections. This function avoids invalid connection requests and greatly improves the efficiency of connection establishment. This function is disabled by default and needs to be enabled through the node configuration item node.nodeDetectEnable . TIP: https://github.com/tronprotocol/tips/blob/master/tip-547.md P2P message Snappy compression Libp2p v1.2.0 supports TCP message compression. The node compresses the TCP message before transmission and decompresses it after receiving the compressed message. After testing, the time consumption for message compression and decompression is short, less than 1 ms, and this function can significantly reduce the network bandwidth occupation of message transmission, which can save about 40% of the bandwidth. TIP: https://github.com/tronprotocol/tips/blob/master/tip-550.md Source Code: https://github.com/tronprotocol/java-tron/pull/5017 2. Support canceling unstaking in Stake 2.0 \u00b6 In the versions previous to Periander, after initiating an unstaking transaction through the HTTP API in Stake 2.0, the user needs to wait for a 14-day waiting period before withdrawing the corresponding funds, and the unstaking cannot be canceled. The Periander version optimizes the Stake 2.0 mechanism, allowing users to cancel unstakings that have been initiated but not completed yet. When canceling unstakings, all unstaked funds still in the waiting period will be re-staked, and the resource obtained through the re-staking remains the same as before. Unstakings that exceeded the 14-day waiting period cannot be canceled, and this part of the unstaked funds will be automatically withdrawn to the owner\u2019s account. This feature is controlled by the No. 77 parameter of the TRON network, which needs to be enabled through governance voting. After it is enabled, the nodes will support a new transaction type, and users can use the wallet/cancelallunfreezev2 API to create an unstaking canceling transaction: curl -X POST http://127.0.0.1:8090/wallet/cancelallunfreezev2 -d \\ '{ \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\", \"visible\": true }' TIP: https://github.com/tronprotocol/tips/blob/master/tip-541.md Source Code: https://github.com/tronprotocol/java-tron/pull/5230 https://github.com/tronprotocol/java-tron/pull/5260 https://github.com/tronprotocol/java-tron/pull/5279 3. Resource delegating supports customizable lock period \u00b6 In the versions previous to Periander, users can choose whether to lock or not when delegating resources. If chosen to lock, the resource delegating to the recipient address could not be canceled within 3 days, which is more conducive for users participating in the resource rental market. The Periander version further optimizes the lock time when delegating resources, changing it from the current fixed value of 3 days to a configurable length of time for users according to their needs. This feature is controlled by the No.78 parameter of the TRON network. It needs to be enabled through governance voting. When enabling the proposal, a time parameter needs to be specified, indicating the maximum value of the lock time that can be set. Once enabled, a new parameter, lock_period , will be added to wallet/delegateresource API: curl -X POST http://127.0.0.1:8090/wallet/delegateresource -d \\ '{ \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\", \"receiver_address\": \"TPswDDCAWhJAZGdHPidFg5nEf8TkNToDX1\", \"balance\": 1000000, \"resource\": \"ENERGY\", \"lock\": true, \"lock_period\": 86400, \"visible\": true }' lock: whether to lock the delegating lock_period: lock time, only when lock is true , this field is valid. The owner cannot cancel the delegating before the lock time is up. The unit of lock_period is block interval(3 seconds). This field indicates the time of how many blocks will be produced from the moment the transaction is executed. So the above 86400 means locking for 259200 seconds (3 days). lock_period cannot exceed the maximum lock period (value of the No.78 network parameter). The default value of lock_period is 86400, which is 3 days. That is, when lock is true , if lock_period is not specified or set to 0, lock_period will be set to 86400 by default, which will ensure compatibility before and after this feature takes effect. In addition, the value of lock_period cannot be lower than the remaining lock time of this type of resource that was previously delegated to the same recipient address, and the value will overwrite the remaining lock time of the previous delegating. For example, user A delegates 100 energy shares to B, and lock_period is set to 57600 (2 days), and so that the remaining lock time after 1 day is 28800. At this time, when A delegates energy to B again, if choose to lock, lock_period should be set to at least 28800 (1 day), otherwise, an exception error will be thrown when creating the delegating transaction: \u201cThe lock period for ENERGY this time cannot be less will be thrown when creating a proxy transaction than the remaining time[9600000ms] of the last lock period for ENERGY!.\u201d TIP: https://github.com/tronprotocol/tips/blob/master/tip-542.md Source Code: https://github.com/tronprotocol/java-tron/pull/5255 4. Optimize effective peer-acquiring strategy \u00b6 When the latest block heights of all connected remote nodes are lower than a node\u2019s, then the node will not be able to synchronize blocks from the remote nodes, nor broadcast the transactions. We call this kind of node an \"island node\". In fact, the island node has no valid peer node. In order to enable nodes to connect to effective peer nodes, the Periander version optimizes the node acquisition strategy and adds island node detection. If a node finds that it is in an island state, it will look for a node with a higher header block than the local one and establish a connection with it. This strategy prevents the node from being in an isolated state for a long time, ensures that the node can quickly replenish effective connections, enables it to obtain new blocks and broadcast transactions, and improves the stability of the node. This function is disabled by default and needs to be enabled by setting the node configuration item node.effectiveCheckEnable . Source Code: https://github.com/tronprotocol/java-tron/pull/5088 TVM \u00b6 1. Implement EIP-3855 PUSH0 Instruction \u00b6 EIP-3855 is included in the Shanghai upgrade of Ethereum, which adds a new instruction called PUSH0 to the Ethereum Virtual Machine (EVM) to reduce the gas cost of smart contract transactions, and Periander also adds a new governance proposal to be compatible with EIP-3855. On one hand, it can ensure the compatibility between TRON and Ethereum at the virtual machine level, and on the other hand, it also reduces the energy cost of using smart contracts on TRON as well. TIP: https://github.com/tronprotocol/tips/blob/master/tip-543.md Source Code: https://github.com/tronprotocol/java-tron/pull/5175 API \u00b6 1. Add API global rate limiter \u00b6 Limiting the API access rate can not only effectively allocate node resources, but also ensure the stable running of a node. In previous versions of Periander, a rate limiter only affected a single interface. You can set the maximum number of accesses per second for an interface, the maximum number of accesses per second for an IP to this interface, and the number of concurrent accesses allowed to this interface. But there is no global rate limiter for all interfaces. In addition to the original rate limit control function for individual interfaces, the Periander version adds a global rate limit for all interfaces. The overall traffic of all HTTP, gRPC and JSON-RPC interfaces can be limited through the configuration item rate.limiter.global.qps , and the access rate of an IP to all interfaces can be limited through rate.limiter.global.ip.qps . # QPS rate limit for all interfaces rate.limiter.global.qps =10 # QPS rate limit to all interfaces from the same IP address rate.limiter.global.ip.qps = 5 Source Code: https://github.com/tronprotocol/java-tron/pull/5093 2. Add data to HTTP Interfaces for Smart Contract Interaction \u00b6 The Periander version optimizes the HTTP smart contract calling interfaces triggersmartcontract , triggerconstantcontract and estimateenergy , and adds a data parameter to them. This optimization not only realizes the contract call directly through the data field in the transaction but also enables the triggerconstantcontract and estimateenergy interfaces to estimate the energy consumption of smart contract deployment transactions, which greatly improves the convenience of smart contract development. Calling contract using function_selector and parameter curl --request POST \\ --url https://api.shasta.trongrid.io/wallet/triggersmartcontract \\ --header 'accept: application/json' \\ --header 'content-type: application/json' \\ --data ' { \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\", \"contract_address\": \"TG3XXyExBkPp9nzdajDZsozEu4BkaSJozs\", \"function_selector\": \"balanceOf(address)\", \"parameter\": \"000000000000000000000000a614f803b6fd780986a42c78ec9c7f77e6ded13c\", \"visible\": true } ' Calling contract through data curl --request POST \\ --url https://api.shasta.trongrid.io/wallet/triggersmartcontract \\ --header 'accept: application/json' \\ --header 'content-type: application/json' \\ --data ' { \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\", \"contract_address\": \"TG3XXyExBkPp9nzdajDZsozEu4BkaSJozs\", \"data\": \"70a08231000000000000000000000000a614f803b6fd780986a42c78ec9c7f77e6ded13c\", \"visible\": true }' Estimate energy consumption of contract deployment transaction curl --request POST \\ --url https://api.shasta.trongrid.io/wallet/triggerconstantcontract \\ --header 'accept: application/json' \\ --header 'content-type: application/json' \\ --data ' { \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\", \"data\": \"608060405234801561001057600080fd5b50d3801561001d57600080fd5b50d2801561002a57600080fd5b506101c18061003a6000396000f3fe608060405234801561001057600080fd5b50d3801561001d57600080fd5b50d2801561002a57600080fd5b50600436106100455760003560e01c8063f8b2cb4f1461004a575b600080fd5b610064600480360381019061005f919061012a565b61007a565b6040516100719190610170565b60405180910390f35b60008173ffffffffffffffffffffffffffffffffffffffff16319050919050565b600080fd5b600074ffffffffffffffffffffffffffffffffffffffffff82169050919050565b6100ca816100a0565b81146100d557600080fd5b50565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610103826100d8565b9050919050565b600081359050610119816100c1565b610122816100f8565b905092915050565b6000602082840312156101405761013f61009b565b5b600061014e8482850161010a565b91505092915050565b6000819050919050565b61016a81610157565b82525050565b60006020820190506101856000830184610161565b9291505056fea26474726f6e58221220839f9be3efc349a3efd6bb491d0bee7bc34d86313c73f6e6eeddc4719ec69c0064736f6c63430008120033\", \"visible\": true }' TIP: https://github.com/tronprotocol/tips/blob/master/tip-544.md Source Code: https://github.com/tronprotocol/java-tron/pull/5079 3. Optimize getStorageAt interface \u00b6 In versions previous to Periander, for contracts created by the create2 instruction, the contract data cannot be queried through the getStorageAt interface. This is due to the difference in index construction of contract data in the underlying storage for contracts created using the create instruction and the create2 instruction. The Periander version optimizes the getStorageAt interface, which will select the corresponding method to construct the index according to the way the contract was created to ensure the availability of the getStorageAt interface. Source Code: https://github.com/tronprotocol/java-tron/pull/5061 Other Changes \u00b6 1. Optimize event forwarding logic in event subscription \u00b6 java-tron supports event subscription. In the previous version of Periander, if the solidified transaction event is subscribed, then when the node receives a new block, it would send the transaction information in the latest solidified block to the subscriber. If the network of most SR nodes is unstable, making them unable to synchronize and produce blocks in time, in this case, according to the calculation logic of the latest solidified block of the node, the height of the latest solidified block will not be guaranteed to increase by one each time. So that the latest obtained solidified block forwarded to the subscriber during event forwarding may not be the block next to the one that was forwarded the last time, resulting in data missing. Since the conditions for this problem are very strict, it will basically not appear in the main network. However, to avoid this problem occurring in the test network or private chain, the Periander version optimizes the event forwarding logic in the event subscription and records the height of the solidified block forwarded last time, so when the node receives a new block, it will sequentially send the blocks after the last forwarded solidified block to the subscribers, ensuring the integrity of data forwarding. Source Code: https://github.com/tronprotocol/java-tron/pull/5031 2. Support dynamic loading according to node.active and node.passive \u00b6 java-tron supports configuring trusted nodes for the local node with node.active and node.passive . The local node will actively connect to the nodes in node.active and accept the connection request of the nodes in node.passive . By configuring trusted nodes, you can solve the problem that the node has no valid connections or the number of connections is rather small. However, in the previous version of Periander, you need to stop the node first to change the configuration file, and then restart the node after the update is completed. Restarting the node has a certain impact on some applications. Therefore, starting from the Periander version, the dynamic loading of node.active and node.passive configuration items are supported, so that the change of the trusted node can be completed without restarting the local node, which improves the online stability of the node. This function is disabled by default and needs to be enabled by modifying the following node configuration items. node.dynamicConfig.enable=true node.dynamicConfig.checkInterval = 600 Source Code: https://github.com/tronprotocol/java-tron/pull/5090 3. Optimize block synchronization logic \u00b6 The Periander version optimizes the block synchronization logic, ensures the correctness of concurrent execution of the block acquisition thread and block synchronization thread, the block summary obtaining thread and chain switching thread through the lock mechanism, and improves the stability of block synchronization and node connection. Source Code: https://github.com/tronprotocol/java-tron/pull/5094 https://github.com/tronprotocol/java-tron/pull/5097 https://github.com/tronprotocol/java-tron/pull/5102 4. Normalize HTTP URLs \u00b6 The node supports disabling the specified HTTP APIs, and the node deployer can configure the interfaces to which the node will stop providing services through the node.disabledApi . In previous versions of Periander, even if the interface was added to the node.disabledApi list, the node would still respond to non-standard URL requests. The Periander version normalizes the requested URL to ensure the validity of the node.disabledApi list. node.disabledApi= [ \"getaccount\", \"getnowblock2\" ] Source Code: https://github.com/tronprotocol/java-tron/pull/5085 5. Optimize block fetching logic \u00b6 After a node requests a block from another node, if it does not receive the block within a certain period of time, the request will be considered as a timeout, and then it will request the block from another node that meets the conditions. Of which, one of the conditions for selecting a node is that the node's block acquisition delay is lower than the block timeout period . Therefore, a low block timeout setting may make the node unable to find other remote nodes, resulting in slow block synchronization or stopping the synchronization. In order to improve block synchronization performance under an unstable network, the Periander version increases the default value of the timeout period for nodes to obtain blocks, from 200ms to 500ms, which not only expands the scope of node selection but also increases the probability of successfully obtaining blocks, greatly improving the efficiency of block synchronization. The node deployer can also adjust the timeout period through the node.fetchBlock.timeout configuration item. Source Code: https://github.com/tronprotocol/java-tron/pull/5106 6. Add a new node startup mode \u00b6 In order to facilitate data backup or data statistics for node deployers, the client supports stopping running under specific conditions. Users can set the conditions for node stop through the node configuration file. When the conditions are met, the node will stop syncing and exit. However, in the versions previous to Periander, the node only supports stopping under certain conditions and does not support the interface query service after stopping, so users cannot call the interface to query the status of the system. Therefore, the Periander version adds a new node startup mode to support data query services without starting the P2P network module. When the node successfully stops under certain conditions, the user can add -p2p- disable true parameter to the command to start the node. At this time, the node will not start the network module, and will not perform node discovery and block synchronization, but will provide interface query services, so that users can query the current system status. Below is the start command: java -jar FullNode.jar -c config.conf --p2p-disable true Source Code: https://github.com/tronprotocol/java-tron/pull/5011 7. Upgrade JUnit to 4.13.2 \u00b6 The Periander version upgrades the unit testing framework and upgrades the JUnit dependency library from v4.12 to v4.13.2. Source Code: https://github.com/tronprotocol/java-tron/pull/5244 8. Add monitoring metrics for JSON-RPC \u00b6 The Periander version supports JSON-RPC interface latency monitoring metrics, allowing node deployers to monitor the latency of all types of interfaces. Source Code: https://github.com/tronprotocol/java-tron/pull/5222 9. Optimize the database module \u00b6 In versions previous to Periander, for nodes using LevelDB as the storage engine, if the LevelDB database is detected to be damaged during the startup period, it will try to repair the data. Although this function can repair the data, it cannot guarantee the integrity of the data. Therefore, the Periander version optimizes the database module and removes the LevelDB data automatic repair function, so that when the node detects that the database is damaged, it immediately reports an error and exits, avoiding invalid synchronization. Source Code: https://github.com/tronprotocol/java-tron/pull/5223 10. Optimize checkpoint v2 recovery process \u00b6 In order to solve the problem of node database corruption caused by the abnormal shutdowns, starting from GreatVoyage-v4.6.0 (Socrates), the Checkpoint V2 mechanism is introduced. The V2 mechanism will save multiple checkpoints on the disk, corresponding to multiple solidified block data, which is used to restore the data when the node database is damaged. This function needs to periodically clean up expired checkpoints. Since the operation of deleting expired checkpoints is not an atomic operation, this will lead to the situation that expired checkpoints may not be completely deleted when the machine is abnormally shut down, that is, there may be damaged checkpoints. Therefore, the Periander version optimizes the automatic repair function of checkpoint v2. When restoring data, all expired checkpoints are skipped, avoiding the situation of using damaged checkpoints to repair data, and improving the stability of nodes. Source Code: https://github.com/tronprotocol/java-tron/pull/5224 Forethought in all things. ---Periander GreatVoyage-v4.7.1.1 (Pittacus) \u00b6 GreatVoyage-v4.7.1.1 (Pittacus) version optimized multiple interfaces and removed APIs involving sensitive information. Please see the details below. API \u00b6 1. Remove APIs involving sensitive information \u00b6 Versions prior to GreatVoyage-v4.7.1.1 (Pittacus) provide APIs related to signature and address generation. Since the input or output of these APIs contains private keys, there are security risks in transmission in the network. At present, public API service providers in the TRON ecosystem have closed these APIs, such as TronGrid, Anker, GetBlock, etc. In the developer document, these APIs have already been tagged as obsolete and it is recommended to sign transactions and create addresses offline using SDK. GreatVoyage-v4.7.1.1(Pittacus) officially removes these APIs: HTTP createaddress : Create an address based on the specified password generateaddress : Create address randomly easytransfer : Transfer TRX with password easytransferbyprivate : Transfer TRX with private key easytransferasset : Transfer TRC10 token with password easytransferassetbyprivate : Transfer TRC10 token with private key gettransactionsign : Sign transaction with private key addtransactionsign : Sign transaction with private key which is mainly used to sign multi-signature transactions gRPC CreateAddress : Create an address based on the specified password GenerateAddress : Create address randomly EasyTransfer : Transfer TRX with password EasyTransferByPrivate : Transfer TRX with private key EasyTransferAsset : Transfer TRC10 token with password EasyTransferAssetByPrivate : Transfer TRC10 token with private key GetTransactionSign : Sign transaction with private key GetTransactionSign2 : Sign transaction with private key AddSign : Sign transaction with private key which is mainly used to sign multi-signature transactions TIP: https://github.com/tronprotocol/tips/issues/534 Source Code: https://github.com/tronprotocol/java-tron/pull/5096 2. Optimize resource delegate information query interface \u00b6 The /wallet/getdelegatedresourcev2 interface can query the resources that an address delegates to another address, and resource delegate can choose whether to be locked. For 2 resource delegation to the same address, one of them may be locked, and the other may be not locked, so /wallet/getdelegatedresourcev2 interface will return two sets of information: locked resource delegation data and unlocked resource delegation data. In versions prior to GreatVoyage-v4.7.1.1 (Pittacus), if all the resource delegation by one address to another address are locked, then the non-locked resource delegation data will be 0. In this case, the interface may also return non-locked resource delegation data (0 value which is meaningless). The GreatVoyage-v4.7.1.1 (Pittacus) version optimizes the /wallet/getdelegatedresourcev2 interface, and only returns resource delegation data with non-zero value, making the returned data more concise and clear. Source Code: https://github.com/tronprotocol/java-tron/pull/5123 Other Changes \u00b6 1. Optimize the update logic of the origin_energy_usage field in the transaction receipt \u00b6 The TRON network supports contract deployers to share part of the contract call cost. In order to facilitate users to query the energy consumption of contract transactions, in addition to recording the total energy consumption of the transaction through the energy_usage_total field, the transaction receipt will also record the amount of energy paid by the contract deployer through the origin_energy_usage field. energy_usage_total contains origin_energy_usage . In versions prior to GreatVoyage-v4.7.1.1 (Pittacus), in rare cases, the energy_usage_total field is 0 while the origin_energy_usage field is not 0 when querying through /wallet/gettransactioninfobyid API. Therefore the GreatVoyage-v4.7.1.1 (Pittacus) version optimizes the update logic of origin_energy_usage in the transaction receipt to ensure the accuracy of querying the consumed energy of the contract deployer. Source Code: https://github.com/tronprotocol/java-tron/pull/5120 Whatever you do, do it well. ---Pittacus GreatVoyage-v4.7.1(Sartre) \u00b6 GreatVoyage-v4.7.1(Sartre) introduces several important optimizations and updates. The optimized block synchronization logic improves the stability of block synchronization; the optimized node IP setting improves the availability of nodes; the optimized node log improves the maintainability of nodes. Please see the details below. Cores \u00b6 1. Optimize the node IP setting \u00b6 When the node starts, it will obtain the local IP of the node, and then use this IP to communicate with other nodes in the network. If the node cannot access the external network, it will not be able to obtain the local IP. At this time, the node will set its local IP to the default value of 0.0.0.0, and this IP will make the node even unable to communicate with other nodes successfully in the LAN. So the GreatVoyage- v4.7.1 (Sartre) version changes the default IP of the node. If the node cannot obtain the local IP, it will set its local IP to 127.0.0.1, so that even if the node cannot access the external network, it can still communicate with other nodes in the LAN normally. Source code: https://github.com/tronprotocol/java-tron/pull/4990 2. Optimize block synchronization logic \u00b6 During the block synchronization process, the node will maintain a block request list, which contains the IDs of all blocks that have sent requests to other nodes. When the connection between the node and node A is abnormally disconnected with a very small probability, the block ID that is being requested to node A will be deleted from the request list. After that, the node will think that it has not requested the block, and then send the block request to node B and add the block ID to the request list again. Before this node disconnects with node A, the requested block may have already been sent by node A\uff0cand it is received by the node after disconnecting. Since the node found that the block is from node A that has already been disconnected, it will discard the block, and delete the block ID from the request list again, this will lead to the node to send a request for the same block to node B again. When Node B receives the repeated block request, it will consider it an illegal message and disconnect from the node. In order to improve the efficiency of block synchronization in concurrent scenarios, the GreatVoyage-v4.7.1 (Sartre) version optimized the update mechanism of the block request list, and saved the block ID and node information in the request list at the same time. In the above scenario, after receiving a block from node A that has been disconnected, the same block ID requested from node B will not be deleted from the request list to ensure that it will not be disconnected from node B, thereby improving the stability of block synchronization. Source code: https://github.com/tronprotocol/java-tron/pull/4995 When a node synchronizes blocks from other nodes, it needs to obtain the local block chain summary of the node. The summary includes the IDs of several blocks including the local header block. In versions prior to GreatVoyage-v4.7.1 (Sartre), when obtaining the summary, the node will first query the Dynamic database to obtain the block height, and then query the Block database to obtain the ID of the block according to the block height. However, when the node is processing a block, the writing to each database is not carried out at the same time. The node will first update the Dynamic database, and then update other databases such as Block. As a result, in versions prior to GreatVoyage-v4.7.1 (Sartre), the following scenario will occur with a very small probability: when the latest block information is only written into the Dynamic database, but have not yet been written into the block database, the node starts to obtain the summary. In this situation the corresponding block ID will not be found in the block database according to the head block height obtained from the Dynamic database, leading to the summary reading fail. The GreatVoyage-v4.7.1 (Sartre) version optimizes the block chain summary acquisition logic. The ID of the head block is directly obtained from the Dynamic database instead of the Block database, which improves the stability of summary reading. Source code: https://github.com/tronprotocol/java-tron/pull/5009 The GreatVoyage-v4.7.1 (Sartre) version optimizes the lock mechanism during block synchronization and improves the stability of the node connection under concurrency. Source code: https://github.com/tronprotocol/java-tron/pull/4996 API \u00b6 1. Optimize the list of solidified block APIs \u00b6 GreatVoyage-v4.7.1(Sartre) version deletes the useless solidified block query API to make the code more clearer. Source code: https://github.com/tronprotocol/java-tron/pull/4997 2. Optimize resource delegation relationship API \u00b6 GreatVoyage-v4.7.1 (Sartre) version optimizes the resource delegation relationship query API, adds the check to the interface parameters, and makes the interface more stable. Other Changes \u00b6 1. Optimize LiteFullNode detection logic \u00b6 In versions prior to GreatVoyage-v4.7.1 (Sartre), different modules of the node have different logics for detecting whether the current node is a LiteFullNode. GreatVoyage-v4.7.1 (Sartre) version unifies the logic of light node judgment, making the code more concise. Source code: https://github.com/tronprotocol/java-tron/pull/4986 2. Optimize node log output \u00b6 The Database Log Starting from GreatVoyage-v4.7.0.1 (Aristotle), the logs of LevelDB or RocksDB databases are redirected to the node log file, which simplifies the difficulty of database troubleshooting. GreatVoyage-v4.7.1 (Sartre) further optimizes the log module, Output database logs to a separate db.log file to make node logs clearer. Source code: https://github.com/tronprotocol/java-tron/pull/4985 https://github.com/tronprotocol/java-tron/pull/5001 https://github.com/tronprotocol/java-tron/pull/5010 The Event Service Module Log Remove invalid logging output for event service module. Source code: https://github.com/tronprotocol/java-tron/pull/4974 The network module log Optimized the log output of the network module, outputting Error-level logs for received abnormal blocks, and outputting Warn-level logs for network requests that have already timed out, improving the efficiency of troubleshooting network-related problems. Source code: https://github.com/tronprotocol/java-tron/pull/4977 The more sand that has escaped from the hourglass of our life, the clearer we should see through it. ---Sartre GreatVoyage-v4.7.0.1(Aristotle) \u00b6 GreatVoyage-v4.7.0.1 (Aristotle) introduces several important optimizations and updates. The new stake mechanism, Stake 2.0, improves the flexibility of the resource model and the stability of the stake system; the dynamic energy model helps to promote ecologically balanced development; the secondary cache mechanism optimizes the database reading performance, improves transaction execution performance, and expands the network throughput; uses the libp2p library as the java-tron P2P network module to make the code structure clearer and reduce code coupling; optimizes the log output, redirect the logs of LevelDB and RocksDB to java-tron log files; integrate more tools and functions into the \u2018Toolkit.jar\u2019 toolbox to bring users a more convenient development experience. Please see the details below. Cores \u00b6 1. A new stake model - Stake 2.0 \u00b6 GreatVoyage-v4.7.0.1 (Aristotle) version introduces a new stake model, Stake 2.0, aiming to establish a more flexible, efficient and stable stake system. Compared with the current Stake 1.0 model, Stake 2.0 has been improved in the following aspects, Staking and delegating are separated In Stake 1.0, staking and resource delegating are combined in one operation. The resource recipient must be specified in the operation. After the staking is completed, the resource will be delegated to the designated resource recipient. The unstaking and undelegating are also combined in one operation. If you want to cancel the delegating, you must unstake the corresponding TRX as well. Stake 2.0 separates staking and resource delegating into two independent operations. The user executes the staking first, the resource selected is allocated to the owner now. And then executes the delegate operation to assign the resource to the designated address. Unstaking and undelegating are also separated into two operations. If the user wants to cancel the delegating, he or she can directly perform the undelegate operation without unstaking and then can delegate the resource to others again as needed. Separation of staking/unstaking and delegating/undelegating simplifies user operations and reduces operational complexity. Resource Fragmentation Management In Stake 1.0, one unstake operation will unstake all the staked TRX, and the specified amount of TRX cannot be unstaked. This is optimized in Stake 2.0 now. We can specify an amount of TRX to unstake, as long as the specified amount is less than or equal to the total staked amount. In Stake 1.0, to cancel a certain resource delegate, you can only cancel all delegated resources at once, and you cannot cancel by specifying an amount. Stake 2.0 has also brought partially undelegate, we can now undelegate part of the delegated resources as needed, which improves the flexibility of resource management. Unstake Lock Period and Delayed Arrival of Unstaked TRX In Stake 1.0, after staking TRX, we need to wait 3 days before releasing the TRX. After the release, the TRX staked will immediately arrive in the owner\u2019s account. In Stake 2.0, after the staking is completed, the TRX staked can be released at any time, but it needs to wait for \u2019N\u2019 days. After the \u2019N\u2019 days delay, the TRX released could be withdrawn to the owner\u2019s account. \u2019N\u2019 is the TRON network parameter. When the TRX market fluctuates violently, due to the delayed arrival of funds, it will no longer trigger a large number of stake or unstake operations, which improves the stability of the stake model, and at the same time will not cause a large number of funds to flood into the market and aggravate market volatility. It helps to build a more anticipated future of the entire network circulation for the network participants. TVM Supports Staking and Resource Management In Stake 2.0, the TRON virtual machine integrates instructions related to stake and resource management. Users can perform TRX stake/unstake operations in smart contracts, as well as perform resource delegate/undelegate operations. For more details on Stake 2.0, please refer to What is Stake 2.0? The new stake mechanism is a dynamic parameter in the TRON network. After GreatVoyage-v4.7.0.1 (Aristotle) is deployed, it is disabled by default and can be enabled by initiating a proposal vote. TIP: https://github.com/tronprotocol/tips/issues/467 Source code: https://github.com/tronprotocol/java-tron/pull/4838 2.Enhance database query performance \u00b6 java-tron uses memory and disk databases for data storage. The solidified block data will be stored in multiple disk databases, and the unsolidified data will be stored in memory. When a block is solidified, the corresponding in-memory data is written to the disk databases. When querying data, first query the data in memory, if not found, then query the disk database. The disk database query is time-consuming. Therefore, the GreatVoyage-v4.7.0.1 (Aristotle) version optimizes the database query performance and adds a secondary cache before performing the underlying disk database operation. When data is written to the disk, the data is also written to the second-level cache. When the disk database needs to be queried, if the data to be queried exists in the second-level cache, it will be returned directly without querying the disk database. The second-level cache reduces the number of queries to the disk database, improves transaction execution speed, and improves network throughput. Source code: https://github.com/tronprotocol/java-tron/pull/4740 3. Optimize block production process \u00b6 When a node produces a block, it will sequentially verify and execute all transactions that can be packaged into the block, and each transaction verification and execution will involve the acquisition of block data, such as block number, block size, block transaction information, etc. In versions prior to GreatVoyage-v4.7.0.1 (Aristotle), when nodes package transactions, block data is recalculated during the process of verifying and executing each transaction, which includes many repeated calculations. In order to improve the efficiency of packaging transactions, the GreatVoyage-v4.7.0.1 (Aristotle) optimizes the block production process, only calculates the block data once and updates the data only when necessary, thus greatly reducing the number of block data calculations and improving the block packaging efficiency. Source code: https://github.com/tronprotocol/java-tron/pull/4756 4. Add transaction hash cache \u00b6 When a node processes a block, it will use the transaction hash value multiple times. In versions before GreatVoyage-v4.7.0.1 (Aristotle), the transaction hash value is calculated as it is used, and the calculation of the transaction hash value is time-consuming, which leads to slower block processing. Therefore, GreatVoyage-v4.7.0.1 (Aristotle) adds a transaction hash cache, the transaction hash will be directly obtained from the cache when used. Only when the transaction data changes, the transaction hash is recalculated. The newly added cache reduces unnecessary transaction hash calculations and improves block processing speed. Source code: https://github.com/tronprotocol/java-tron/pull/4792 5. Add libp2p module as java-tron p2p network protocol implementation \u00b6 Starting from GreatVoyage-v4.7.0.1 (Aristotle), the libp2p library will be directly used as the P2P network module of java-tron, instead of using the original p2p network stack, so that the code structure is clearer, the code coupling is lower, and is easy to maintain. Source code: https://github.com/tronprotocol/java-tron/pull/4791 TVM \u00b6 1. Add new instructions to support Stake 2.0 \u00b6 GreatVoyage-v4.7.0.1 (Aristotle) introduces Stake 2.0, TVM will support Stake 2.0 related stake and resource delegate instructions simultaneously. Users can perform stake and resource delegate operations through smart contracts, which further enriches the application scenarios of smart contracts on the TRON network. A total of 6 instructions from 0xda to 0xdf have been added to TVM: ID TVM instruction Description 0xda FREEZEBALANCEV2 Performs the same operation as the system contract FreezeBalanceV2 for contract account 0xdb UNFREEZEBALANCEV2 Performs the same operation as the system contract UnfreezeBalanceV2 for contract account 0xdc CANCELALLUNFREEZEV2 Cancel all pending unfreeze balances for contract account 0xdd WITHDRAWEXPIREUNFREEZE Performs the same operation as the system contract WithdrawExpireUnfreeze for contract account 0xde DELEGATERESOURCE Performs the same operation as the system contract DelegateResource for contract account 0xdf UNDELEGATERESOURCE Performs the same operation as the system contract UnDelegateResource for contract account A total of 11 precompiled contracts from 0x100000b to 0x1000015 have been added to TVM: ID Precompiled Contract Description 0x100000b GetChainParameter Query the specific chain parameters 0x100000c AvailableUnfreezeV2Size Query the size of the available unfreeze queue for target address 0x100000d UnfreezableBalanceV2 Query the unfreezable balance of a specified resourceType for target address 0x100000e ExpireUnfreezeBalanceV2 Query the withdrawal balance at the specified timestamp for target address 0x100000f DelegatableResource Query the amount of delegatable resources(unit: SUN) of the specified resourceType for the target address 0x1000010 ResourceV2 Query the amount of resources(unit: SUN) of a specific resourceType delegated by from address to target address 0x1000011 CheckUnDelegateResource Check whether the contract can recycle the specified amount of resources of a specific resourceType that have been delegated to target address, and return the amount of clean resource(unit: SUN), the amount of dirty resource(unit: SUN) and the restore time 0x1000012 ResourceUsage Query the usage of a specific resourceType of resources for target address, and return the amount of usage(unit: SUN) and the restore time 0x1000013 TotalResource Query the total amount of resources(unit: SUN) of a specific resourceType for target address 0x1000014 TotalDelegatedResource Query the amount of delegated resources of a specific resourceType for target address 0x1000015 TotalAcquiredResource Query the amount of acquired resources(unit: SUN) of a specific resourceType for target address Stake 2.0 is a dynamic parameter in the TRON network. After GreatVoyage-v4.7.0.1 (Aristotle) is deployed, it is disabled by default and can be enabled by initiating a proposal vote. TIP: https://github.com/tronprotocol/tips/issues/467 Source code: https://github.com/tronprotocol/java-tron/pull/4872 2. Dynamic energy model \u00b6 The dynamic energy model is a scheme to dynamically adjust the future energy consumption of the contract based on the known energy usage of the contract. If a contract uses too many resources in one cycle, then the next cycle in this contract, a certain percentage of punitive consumption will be added, and users who send the same transaction to this contract will cost more energy than before. When the contract uses resources reasonably, the energy consumption generated by the user calling the contract will gradually return to normal. Through this mechanism, the allocation of energy resources on the chain will be more reasonable, and excessive concentration of network resources on a few contracts will be prevented. For more information about the dynamic energy model: Introduction to Dynamic Energy Model The dynamic energy model is a dynamic parameter in the TRON network. After GreatVoyage-v4.7.0.1 (Aristotle) is deployed, it is disabled by default and can be enabled by initiating a proposal vote. TIP: https://github.com/tronprotocol/tips/issues/491 Source code: https://github.com/tronprotocol/java-tron/pull/4873 3. Optimize the return value of the chainId opcode \u00b6 Starting from the GreatVoyage-v4.7.0.1 (Aristotle) version, the return value of the chainid opcode is changed from the block hash of the genesis block to the last four bytes of the block hash of the genesis block, keeping the return value of the chainid opcode consistent with the return value of the java-tron JSON-RPC eth_chainId API. The return value optimization of the chainId opcode is a dynamic parameter of the TRON network. It is disabled by default after GreatVoyage-v4.7.0.1 (Aristotle) is deployed, and can be enabled by initiating a proposal. TIP: https://github.com/tronprotocol/tips/issues/474 Source code: https://github.com/tronprotocol/java-tron/pull/4863 API \u00b6 1. Add APIs to support Stake 2.0 \u00b6 GreatVoyage-v4.7.0.1 (Aristotle) adds 10 APIs to support Stake 2.0: API Description /wallet/freezebalancev2 Stake TRX to obtain resources /wallet/unfreezebalancev2 Unstake TRX /wallet/delegateresource Delegate resources to other account /wallet/undelegateresource Undelegate resource /wallet/withdrawexpireunfreeze Withdraw the funds that has expired the N lock-up period /wallet/getavailableunfreezecount Query the remaining times of available unstaking operation /wallet/getcanwithdrawunfreezeamount Query the withdrawable balance at the specified timestamp /wallet/getcandelegatedmaxsize Query the amount of delegatable resources of the specified resource type for target address /wallet/getdelegatedresourcev2 Query the resource delegate amount from an address to the target address (unit: sun) /wallet/getdelegatedresourceaccountindexv2 Query the resource delegate amount from an address to the target address (unit: sun) For detailed information of new APIs, please refer to: What is Stake 2.0? TIP: https://github.com/tronprotocol/tips/issues/467 Source code: https://github.com/tronprotocol/java-tron/pull/4838 2. Add energy estimation API \u00b6 In versions prior to GreatVoyage-v4.7.0.1 (Aristotle), users can estimate the energy consumption for executing smart contract transactions through the /wallet/triggerconstantcontract interface, and then set the feelimit parameter of the transaction according to the estimated consumption. However, since some smart contract transactions may call other smart contracts, it is possible that the estimated feelimit parameter is inaccurate. Therefore, the GreatVoyage-v4.7.0.1(Aristotle) version adds an energy estimation interface /wallet/estimateenergy , and the feelimit estimated by this interface is reliable in any case. The energy_required field in the return value of this interface indicates the estimated amount of energy required for the successful execution of this smart contract transaction. So user can calculate the feelimit parameter based on this field: feelimit = energy_required * energy unit price, currently the unit price of energy is 210 sun. If the execution of the estimated interface call fails for some reason, the value of the energy_required field will be 0, and this field will not be displayed in the return value. At this time, you can check the reason for the execution failure for the estimated interface call through the result field. After the GreatVoyage-v4.7.0.1 (Aristotle) version is successfully deployed, this API is closed by default. To open this interface, the two configuration items vm.estimateEnergy and vm.supportConstant must be enabled in the node configuration file at the same time. The default values of vm.estimateEnergy and vm.supportConstant are both false. An example of /wallet/estimateenergy call is as follows: curl --location --request POST 'https://api.nileex.io/wallet/estimateenergy' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"owner_address\": \"TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\", \"contract_address\": \"TXLAQ63Xg1NAzckPwKHvzw7CSEmLMEqcdj\", \"function_selector\": \"transfer(address,uint256)\", \"parameter\": \"0000000000000000000000002EEF13ADA48F286066F9066CE84A9AD686A3EA480000000000000000000000000000000000000000000000000000000000000004\", \"visible\": true }' Source code: https://github.com/tronprotocol/java-tron/pull/4873 Other Changes \u00b6 1. Optimize Gradle compilation parameters \u00b6 GreatVoyage-v4.7.0.1(Aristotle) optimizes the compiling parameters of Gradle, configuring JVM minimum heap size to 1GB, which improves the compilation speed of java-tron. Source code: https://github.com/tronprotocol/java-tron/pull/4837 2. Optimize node conditional stop function \u00b6 In order to facilitate data backup or data statistics for node deployers, starting from GreatVoyage-v4.5.1 (Tertullian), nodes support stopping under specific conditions. Users can set the conditions for node stopping through the node configuration file, and the node will stop running when the conditions are met. It supports three stop conditions to be set at the same time, and the node is stopped when any condition is met. These three conditions include block time, block height, and the number of blocks that need to be synchronized from the start to the stop of the node. However, since multiple stop conditions are allowed to be set at the same time, when the user only needs one condition, the other 2 conditional configuration items in the configuration file need to be deleted, so if the user forgets to delete, the node may stop on an unexpected block. However, there are actually no application scenarios that require multiple conditions to be set at the same time. Therefore, the GreatVoyage-v4.7.0.1 (Aristotle) version optimizes the node conditional stop function. The optional configuration parameters remain unchanged, but only one valid parameter is allowed to be set at the same time. If the node deployer sets multiple parameters, the node will report an error and exit run. This optimization simplifies the complexity of users\u2019 settings. Source code: https://github.com/tronprotocol/java-tron/pull/4853 https://github.com/tronprotocol/java-tron/pull/4858 3. Delete code related to database v1 \u00b6 In versions prior to GreatVoyage-v4.7.0.1 (Aristotle), there are two versions of the database, v1 and v2. Users can choose from them through the configuration item db.version . Since the v2 version adopts the memory + disk database mode, it supports the expansion of the underlying database, the correct data recovery function under abnormal conditions, etc., and has obvious advantages compared with v1. Therefore, in order to make the code structure clearer, starting from GreatVoyage-v4.7.0.1 (Aristotle), the code related to the database v1 version and the database version configuration item db.version has been deleted. Users no longer need to configure the database version, only v2 is available from now on, which reduces the complexity of configuring nodes. Source code: https://github.com/tronprotocol/java-tron/pull/4836 4. Optimize database log output \u00b6 In versions prior to GreatVoyage-v4.7.0.1 (Aristotle), the node logs do not include the underlying logs output by LevelDB or RocksDB itself, making it difficult to troubleshoot database read and write problems. Therefore, the GreatVoyage-v4.7.0.1 (Aristotle) optimizes the database log and redirects the output of the underlying log of the LevelDB or RocksDB data module to the node log file, which simplifies the difficulty of database troubleshooting and improves the reliability of node operation and maintenance efficiency. Source code: https://github.com/tronprotocol/java-tron/pull/4833 5. Make snapshot flush speed configurable \u00b6 Nodes newly added to the network need to synchronize block data from other nodes, and the nodes will first save the synchronized block data in memory, and then store it on disk. In versions prior to GreatVoyage-v4.7.0.1 (Aristotle), when a node synchronizes the blocks, a flush operation will write the data of 500 blocks from the memory to the disk, so more than 500 blocks data will be kept in the memory, and each block data is associated through a linked list. When querying data, it will first search in these more than 500 blocks in sequence, and then query the disk database when the data to be queried is not found, but traversing more than 500 block data reduces the efficiency of data query. Therefore, starting from the GreatVoyage-v4.7.0.1 (Aristotle) version, the number of snapshot flush can be configured, and the maximum number of snapshot flush at one time can be set through the configuration item: storage.snapshot.maxFlushCount to maximize the efficiency of database query and improve block processing speed. If the configuration item is not set, the maximum number of snapshots flush into the dish is the default value of 1. Source code: https://github.com/tronprotocol/java-tron/pull/4834 6. Toolkit.jar Integration \u00b6 DBConvert.jar is a database conversion tool, which can convert LevelDB into RocksDB; LiteFullNodeTool.jar is a light FullNode tool, which can convert FullNode data into LiteFullNode data. Starting from GreatVoyage-v4.7.0.1 (Aristotle), DBConvert.jar and LiteFullNodeTool.jar have been integrated into the Toolkit.jar toolbox, and a database copy function is added which can realize fast Node database copy. In the future, the tools around java-tron will be gradually integrated into the Toolkit.jar toolbox in order to facilitate tool maintenance and developer use. The commands for using the new functions of the Toolkit.jar toolbox are as follows: // Convert LevelDB data to RocksDB data java -jar Toolkit.jar db convert -h // convert FullNode data into LiteFullNode data java -jar Toolkit.jar db lite -h // Database copy java -jar Toolkit.jar db copy -h Source code: https://github.com/tronprotocol/java-tron/pull/4813 Courage is the first of human qualities because it is the quality that guarantees others. --- Aristotle GreatVoyage-v4.6.0 (Socrates) \u00b6 The GreatVoyage-v4.6.0 (Socrates) introduces several important optimizations and updates, such as an optimized database checkpoint mechanism, which improves the stability of node operation; optimized resource delegate relationship index structure, and an updated voting reward algorithm, which speed up the execution speed of transactions and increase network throughput; a new proposal to add transaction memo fees, increasing the cost of transactions with memo to reduce the number of low-value transactions, so that improves the security and reliability of the TRON network. The integrated toolkit, new network-related Prometheus metrics, and new help command line together bring users a more convenient development experience. Please check below for details. Core \u00b6 1. Optimize delegate relationship index structure \u00b6 In the TRON network, accounts can delegate resources to other accounts through staking, and can also accept resources that other accounts stake for themselves. Therefore, each account needs to maintain a record of the delegate relationship, including all the recipient addresses that the account delegated resources to and all the addresses that delegated resources for the account. In versions prior to GreatVoyage-v4.6.0 (Socrates), the delegate relationship is stored in the form of a list. When performing resource delegating, it needs first to check whether the recipient account already exists in the list and then adds the account to the list only if it is not present. If a particular account has delegated resources to multiple accounts or many accounts have delegated the resources to the particular account, then the length of the delegate relationship list for the particular account will be substantial. The lookup operation would be considerably time-consuming, resulting in long transaction execution times. Therefore, GreatVoyage-v4.6.0 (Socrates) optimizes the index storage structure of the resource delegate relationship and changes it from a list to a key-value pair, so as to complete the querying and modification of its data in a constant time, which greatly speeds up the execution speed of the delegation related transactions and improves network throughput. The delegate relationship storage optimization is a dynamic parameter of the TRON network. It is disabled by default and can be enabled by initiating a proposal. TIP: https://github.com/tronprotocol/tips/issues/476 Source code: https://github.com/tronprotocol/java-tron/pull/4788 2. Add transaction memo fee proposal \u00b6 Starting from GreatVoyage-v4.6.0 (Socrates), a memo fee will be charged for transactions with a memo. By increasing the cost, the fee will reduce the number of low-value transactions, so as to improve the security and reliability of the TRON network. The memo fee is a dynamic parameter of the TRON network. After GreatVoyage-v4.6.0 (Socrates) is deployed, the default value is \u20180\u2019, and the unit is \u2018sun\u2019. It can be enabled by specifying a non-zero value by initiating a proposal, for example, \u20181000000\u2019, indicating that the transaction with memo will require an additional 1 TRX fee. TIP: https://github.com/tronprotocol/tips/issues/387 Source code: https://github.com/tronprotocol/java-tron/pull/4758 3. Add optimized reward algorithm proposal \u00b6 Many voters in the TRON network will accumulate rewards for a long time before withdrawing them. The interval between two withdrawals of rewards is often very long. In versions prior to GreatVoyage-v4.6.0 (Socrates), for the transaction to withdraw rewards, it will calculate and accumulate rewards for each maintenance period since the last withdrawal of rewards, so the longer the time since the last withdrawal of rewards, the more time-consuming it will be to calculate the reward. Therefore, GreatVoyage-v4.6.0 (Socrates) optimizes the calculation algorithm of voting rewards. Instead of accumulating the rewards of each maintenance period, the sum of unwithdrawn rewards can be obtained by subtracting the total number of rewards recorded in the maintenance period of the last reward withdrawal from the total rewards recorded in the previous maintenance period. This algorithm realizes the calculation of the total number of unclaimed rewards in a constant time, which greatly improves the calculation efficiency and speeds up the execution of reward calculation, thereby improving the throughput of the network. The optimized reward algorithm is a TRON network parameter and is disabled by default once GreatVoyage-v4.6.0 (Socrates) is deployed, and can be enabled by voting through a proposal. TIP: https://github.com/tronprotocol/tips/issues/465 Source code: https://github.com/tronprotocol/java-tron/pull/4694 4. Upgrade checkpoint mechanism to v2 in database module \u00b6 The Checkpoint is a recovery mechanism established to prevent database damage caused by the exceptional shutdown. java-tron uses memory and multi-disk databases for data storage. The data of the solidified block will be stored in multiple business databases. Unsolidified data is stored in the memory. When a block is solidified, the corresponding memory data will be written to relevant databases. However, since the writing to multiple business databases is not an atomic operation, if there is an unexpected downtime due to some reason, then all the data in the block may not be able to be written to the disk, and the node will not be able to restart due to database corruption. Therefore, before the memory data is written to the disk, a checkpoint would be created. The checkpoint contains all the data that needs to be written to each business database this time. After the checkpoint is created, first writes the checkpoint data to an independent Checkpoint database, and then performs the operation of writing the business database, and the Checkpoint database always retains the latest solidified block data. If the business database is damaged due to system shutdown, after the node restarts, the business database will be recovered through the data previously saved in the checkpoint database. At present, the Checkpoint mechanism can deal with the vast majority of downtime situations, but there is still a small probability that the business database will be damaged due to downtime. At present, the data writing of LevelDB is asynchronous. The program calls LevelDB to request to write the data to the disk. In fact, the data is only written into the cache of the operating system, and then the operating system will decide when to actually write to the disk according to its own strategy. If an unexpected downtime occurs at the time when the node just finished writing to the Checkpoint database and continues to write to the business database, it is possible that the data written to the Checkpoint database is not actually written to the disk by the operating system. In this case, the node would fail to restart properly because the Checkpoint database has no recovery data. In order to solve this problem, GreatVoyage-v4.6.0 (Socrates) upgrades the V2 version of Checkpoint implementation. The Checkpoint mechanism V2 will store multiple solidified blocks data. So that even if the latest solidified block data is not written successfully to the Checkpoint database due to abnormal shutdown, the historical solidified block data can be used to restore the business database when the node restarts. The Checkpoint mechanism V2 is disabled by default in the configuration file. This function can be enabled by modifying the configuration. It should be noted that if a node has enabled the checkpoint V2 and has been running for a certain period of time, it would not be able to roll back to V1 anymore. TIP: https://github.com/tronprotocol/tips/issues/461 Source code: https://github.com/tronprotocol/java-tron/pull/4614 5. Optimize block production priority between active and backup nodes \u00b6 If the super representative deploys the active and backup nodes, the connection between the nodes will be maintained. When the active and backup nodes are temporarily disconnected due to network problems, the backup node will consider that the active node is invalid and take over the block production. This will cause a duplicate block production process as both the active and backup nodes will produce blocks at the same time. In versions prior to GreatVoyage-v4.6.0 (Socrates), when the active and backup nodes receive blocks of the same height block generated by each other, both of them will suspend for 1-9 block production cycles. That is, the super representative will miss 1-9 blocks. The GreatVoyage-v4.6.0 (Socrates) optimizes the priority of block production logic. When the situation above happens, both nodes will compare the hash value of the block produced by the other node. The node with a larger block hash will continue to produce blocks, and the node with smaller block hash will suspend a block production cycle, then continue to produce blocks, and compare the block hash again. A total of 27 super representatives will generate blocks sequentially, so it takes 81 seconds to skip a block production cycle. During this period, if the connection problem between them is a short-term network failure, there will be enough time to recover it. In addition, after receiving these two blocks, other nodes will also choose the block with a larger hash and discard the one with a smaller hash. This implementation will significantly improve the block production efficiency during obstructed network connections between active and backup nodes and network stability. Source code\uff1a https://github.com/tronprotocol/java-tron/pull/4630 6.Optimize the Kademlia algorithm for the network module \u00b6 The java-tron node ID is a random number, which will be regenerated every time the node is started. In the implementation of the Kademlia algorithm of java-tron, the distance of the node will be calculated according to the node ID, and then the node information will be put into the corresponding K bucket according to the distance. If the node in the K bucket is restarted for some reason, the node ID will change. When it is detected that the node is offline again, the distance calculated according to the latest node ID has been unable to locate the original K bucket, therefore it is not able to delete the node from the bucket. Too many such nodes restarted will cause too much invalid data to be stored in the K bucket of the node. Therefore, the GreatVoyage-v4.6.0 (Socrates) optimizes the Kademlia algorithm, and uses a hash table to record the discovered nodes. The distance of a node is only calculated once when it is written into the K bucket for the first time and is assigned to the \u2018distance\u2019 field of the node, and then the node is added to the hash table. In the future, the node distance will be obtained directly through this field. Even if the node ID changes after the node is restarted, the distance of the node in the Hash table will not be updated. When the node is detected to be offline, the corresponding node can be found from the hash table according to the node IP, and then the distance to the node can be obtained through the node distance field, at last the node information can be deleted from the K bucket. Source code: https://github.com/tronprotocol/java-tron/pull/4620 https://github.com/tronprotocol/java-tron/pull/4622 Other Changes \u00b6 1. Merge ArchiveManifest.jar into Toolkit.jar \u00b6 ArchiveManifest.jar is an independent LevelDB startup optimization tool, which can optimize the file size of LevelDB manifest, thereby reducing memory usage and greatly improving node startup speed. Starting from the GreatVoyage-v4.6.0 (Socrates), the ArchiveManifest.jar tool has been integrated into the Toolkit.jar. In the future, all the tools around java-tron will be gradually integrated into the Toolkit.jar toolbox to facilitate tool maintenance and developer use. Source code: https://github.com/tronprotocol/java-tron/pull/4603 2. Add prometheus metrics for network module \u00b6 GreatVoyage-v4.6.0 (Socrates) adds three new Prometheus metrics related to the network module: block fetching delay, block receiving delay, and message processing delay. New metrics help with network health monitoring of the node. Source code: https://github.com/tronprotocol/java-tron/pull/4626 3. Add the --help command option \u00b6 GreatVoyage-v4.6.0(Socrates) adds \u2018help\u2019 command line options to check all parameters and instructions. Please check the example below, $ java -jar FullNode.jar --help Name: FullNode - the java-tron command line interface Usage: java -jar FullNode.jar [options] [seedNode <seedNode> ...] VERSION: 4.5.2-d05f766 TRON OPTIONS: -v, --version Output code version -h, --help Show help message -c, --config Config file (default:config.conf) --log-config Logback config file --es Start event subscribe server DB OPTIONS: -d, --output-directory Data directory for the databases (default:output-directory) WITNESS OPTIONS: -w, --witness Is witness node -p, --private-key Witness private key VIRTUAL MACHINE OPTIONS: --debug Switch for TVM debug mode. In debug model, TVM will not check for timeout. (default: false) Source code: https://github.com/tronprotocol/java-tron/pull/4606 4. Optimize LiteFullNodeTool.jar \u00b6 LiteFullNodeTool.jar is a light node tool of java-tron. Its main function is to convert the fullnode database into a light node database. GreatVoyage-v4.6.0 (Socrates) optimizes the tool and improves the convenience and stability of the tool. Source code: https://github.com/tronprotocol/java-tron/pull/4607 5. Optimize the return value of eth_getBlockByHash and eth_getBlockByNumber APIs \u00b6 In order to be better compatible with Ethereum's JsonRPC 2.0 protocol interface, GreatVoyage-v4.6.0(Socrates) changes the unit of the timestamp field in the return value of the eth_getBlockByHash and eth_getBlockByNumber APIs from milliseconds to seconds, making the return values of these two APIs fully compatible with Ethereum Geth. Source code: https://github.com/tronprotocol/java-tron/pull/4642 To move the world we must move ourselves. --- Socrates GreatVoyage-v4.5.2(Aurelius) \u00b6 The GreatVoyage-v4.5.2 (Aurelius) version introduces several important optimizations. The optimized transaction cache mechanism greatly reduces memory usage and improves node performance; the optimized P2P node connection strategy improves the efficiency of establishing connections between nodes and speeds up the node synchronization process; the optimized block production and processing logic improve node stability; the newly added database storage partition tool reduces the pressure on data storage; the newly added block header query API and historical bandwidth unit price Query API are to bring users a more convenient development experience. Core \u00b6 1. Optimize block processing \u00b6 In versions prior to GreatVoyage-v4.5.2 (Aurelius), threads such as block production, block processing, and transaction processing compete for synchronization lock at the same time. In the case of high concurrency and transactions executing much time, the block production thread or the block processing thread will take a long time to get to the synchronization lock, which leads to the occurrence of a small probability of a block loss event. In order to improve node stability, the GreatVoyage-v4.5.2 (Aurelius) version optimizes the synchronization lock in the block processing logic, allowing only one transaction processing thread to compete for the synchronization lock with the block production or processing thread, and when the transaction processing thread finds that block-related threads waiting for the synchronization lock, it will voluntarily give in, which greatly increases the probability of block production and block processing threads acquiring synchronization lock, and ensures high throughput and stable operation of the node. TIP: https://github.com/tronprotocol/tips/blob/master/tip-428.md Source Code: https://github.com/tronprotocol/java-tron/pull/4551 2. Optimize transaction cache \u00b6 The node uses the transaction cache to determine whether the newly received transaction is a duplicate transaction. In versions prior to GreatVoyage-v4.5.2 (Aurelius), the transaction cache is a hashmap data structure, which saves transactions in the latest 65536 blocks. The hashmap allocates memory for each transaction separately. Therefore, the transaction cache will occupy nearly 2GB of memory during program runtime, meanwhile, frequent memory requests will trigger frequent JVM garbage collection which indirectly affects the performance of the node. To solve this issue, the GreatVoyage-v4.5.2 (Aurelius) version optimizes the implementation of the transaction cache, using the bloom filter instead of the hashmap, the bloom filter uses a fixed and extremely small memory space to record recent historical transactions, which greatly reduces the memory usage of the transaction cache and improve the node performance. TIP: https://github.com/tronprotocol/tips/blob/master/tip-440.md Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4538 3. Optimize nodes connection strategy \u00b6 In versions prior to GreatVoyage-v4.5.2 (Aurelius), when the number of remote nodes connected by a node has reached the maximum value, the node will reject connection requests from new remote nodes. With the increase of such fully connected nodes in the network, it will become more and more difficult for the newly added nodes to establish connections with other nodes in the network. In order to speed up the connection process between nodes in the network, the GreatVoyage-v4.5.2 (Aurelius) version optimizes the P2P node connection strategy. It will periodically check the number of TCP connections of the node. When the number of connections is full, a certain disconnection strategy is adopted to disconnect one or two nodes to increase the possibility of a newly added node in the network successfully connecting to it, thereby improving the efficiency of establishing connections between P2P nodes in the network and improving network stability. Please note that the nodes configured in the node.active and node.passive lists in the configuration file are trusted nodes and will not be disconnected. TIP: https://github.com/tronprotocol/tips/blob/master/tip-425.md Source Code: https://github.com/tronprotocol/java-tron/pull/4549 4. Optimize block generating logic \u00b6 In versions prior to GreatVoyage-v4.5.2 (Aurelius), for pre-executed normal transactions, they may encounter JVM GC pauses during packaging which can result in transaction execution timeout and being discarded. Therefore, the GreatVoyage-v4.5.2 (Aurelius) version optimizes the block generating logic. For a pre-executed normal transaction, if it executes time out during packaging, a retry operation is taken to avoid transaction discard caused by JVM GC pause during the packaging. Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4387 5. Optimize fork switching logic \u00b6 Micro-forks occur in the TRON network occasionally. The chain switching behavior will occur when a micro-fork happens. The chain switching will roll back blocks, and the transactions in the rolled back block will be put back into the transaction pending queue. When these transactions are repackaged and executed, the execution results may be inconsistent due to chain switching. In versions prior to GreatVoyage-v4.5.2 (Aurelius), the entire process refers to the same transaction object, so chain switching may lead to the transaction result in the rolled back block being changed. When the chain switching occurs again and the original chain is switched back, the transaction on the original chain will be executed again, at this time, it will report a Different resultCode error, which will cause the node to stop synchronizing. Therefore, the GreatVoyage-v4.5.2 (Aurelius) version optimizes the chain-switching logic. When a block is rolled back, a new transaction object is created for the transaction in the rolled-back block, so as to avoid the modification of the transaction result and improve the node's stability for fork handling. Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4583 6. Add database storage partition tool \u00b6 As the data on the chain grows, the disk space of the FullNode may be insufficient, and a larger capacity disk needs to be replaced. So starting from the GreatVoyage-v4.5.2 (Aurelius) version, a database storage partition tool is provided, which can migrate some databases to other disk partitions according to the user's configuration, so users only need to add disks according to capacity requirements, no need to replace the original disk, that is convenient for users to expand the disk capacity, and at the same time reduces the cost of running a node. Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4545 https://github.com/tronprotocol/java-tron/pull/4559 https://github.com/tronprotocol/java-tron/pull/4563 API \u00b6 1. New block header query API \u00b6 From the GreatVoyage-v4.5.2 (Aurelius) version, a new block header query API is added, which only returns the block header information, not the transaction information in the block. Users can obtain the block header information without querying the entire block. This not only reduces the network I/O load of the node, and since the block does not carry transaction information, the serialization time is reduced, the interface delay is reduced, and the query efficiency is improved. Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4492 https://github.com/tronprotocol/java-tron/pull/4552 2. New historical bandwidth unit price query API \u00b6 According to the bandwidth consumption rules, if the transaction initiator\u2019s bandwidth obtained by staking TRX or free bandwidth is insufficient, TRX will be burned to pay for the bandwidth fee. At this time, only the bandwidth fee is recorded in the transaction record, but not the bandwidth consumption number. In order to understand bandwidth consumption of historical transactions, starting from GreatVoyage-v4.5.2 (Aurelius), a new historical bandwidth unit price query API /wallet/getbandwidthprices is added. Users can obtain historical records of bandwidth unit price through this API so that they can calculate bandwidth consumption of historical transactions. Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4556 Other Changes \u00b6 1. Optimize block synchronization logic \u00b6 The GreatVoyage-v4.5.2 (Aurelius) version optimizes the block synchronization logic, avoids unnecessary node disconnection in the process of synchronizing blocks, and improves node stability. Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4542 https://github.com/tronprotocol/java-tron/pull/4540 2. Optimize eth_estimateGas and eth_call API \u00b6 The GreatVoyage-v4.5.2 (Aurelius) version optimizes the eth_estimateGas and eth_cal JSON-RPC interfaces; they can return error information when smart contract transaction execution is interrupted. Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4570 3. Enhance the fault tolerance of the interface \u00b6 The GreatVoyage-v4.5.2 (Aurelius) version optimizes multiple API interfaces, enhances its fault tolerance for parameters, and improves the stability of API interfaces. Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4560 https://github.com/tronprotocol/java-tron/pull/4556 The universe is change; our life is what our thoughts make it. --- Aurelius GreatVoyage-v4.5.1(Tertullian) \u00b6 The GreatVoyage-v4.5.1(Tertullian) version introduces several important optimization updates. The optimized transaction cache loading process shortens the node startup time; the optimized block acquisition logic and light node synchronization logic promote the stability of the node; the optimized account asset structure and TVM cache structure improves the processing speed of transactions, thereby further improving the performance of node; supporting prometheus protocol interface brings users a more convenient development experience and helps to further prosper the TRON ecosystem. Core \u00b6 1. Optimize transaction cache loading \u00b6 In versions prior to GreatVoyage-v4.5.1 (Tertullian), it took a long time from node startup to block synchronization, and the loading of the transaction cache took up most of the node startup time. The transaction cache is used by the node to determine whether a transaction is a duplicate transaction, so during the node startup process, the transaction cache needs to be loaded from the database to the memory, and in versions prior to GreatVoyage-v4.5.1 (Tertullian), it adopts transaction as the storage unit to read the database when loading the transaction cache, so the amount of data to be read is large, and the entire reading process is time-consuming. In order to speed up the startup of the node, the GreatVoyage-v4.5.1 (Tertullian) version optimizes the loading of the transaction cache. By adopting the block as the storage unit to read the database reduces the times of database reading, improves the efficiency of transaction cache loading, and improves the speed of node startup. TIP: https://github.com/tronprotocol/tips/blob/master/tip-383.md Source Code: https://github.com/tronprotocol/java-tron/pull/4319 2. Optimize account TRC-10 asset storage structure \u00b6 In versions prior to GreatVoyage-v4.5.1 (Tertullian), when there were too many TRC10 assets in the account, the content of the account stored in the database was large, resulting in the deserialization of the account during the transaction execution process is very time-consuming , therefore, the GreatVoyage-v4.5.1 (Tertullian) version adds a new proposal to optimize the asset structure of the account, allowing TRC-10 assets to be separated from the account and stored separately in a key-value data structure. That will reduce the content of the account structure, speed up the deserialization operation of the account and reduce the execution time of the transaction, thereby increasing the network throughput and improving the network performance. TIP: https://github.com/tronprotocol/tips/blob/master/tip-382.md Source Code: https://github.com/tronprotocol/java-tron/pull/4392 3. Optimize light node synchronization \u00b6 Since light nodes do not store complete block data, there is a possibility that a node connects to a light node which does not have the block the node wants to synchronize with, in this situation, the light node will actively disconnect the connection. In versions prior to GreatVoyage-v4.5.1 (Tertullian), nodes may repeatedly establish connections with such light nodes, and then be disconnected by the other part, which greatly affects the efficiency of synchronizing blocks between nodes. Therefore, in the GreatVoyage-v4.5.1 (Tertullian) version, the logic of establishing a connection with light nodes has been optimized, and the two fields of \"node type\" and \"node's lowest block\" are added to the handshake message between nodes, and the nodes will save the handshake messages with each node. If the highest block of the current node is lower than the lowest block of the light node, it will actively disconnect from the light node, and the next time it establishes a connection with the node, it will filter out such nodes to avoid more invalidations connection, which improves the efficiency of synchronization between nodes. TIP: https://github.com/tronprotocol/tips/blob/master/tip-388.md Source Code: https://github.com/tronprotocol/java-tron/pull/4323 4. Optimize block broadcasting \u00b6 The GreatVoyage-v4.5.1 (Tertullian) version optimizes the block broadcast logic, so that the fast forward node only broadcasts the block to the three super representative nodes that will produce blocks next (the number of broadcasted super representative nodes can be changed through the configuration file) to ensure that the super representative node can obtain the latest block in time, which improves the efficiency of block production. Source Code: https://github.com/tronprotocol/java-tron/pull/4336 5. Optimize fetch block process \u00b6 Due to network reasons, the node may not receive the new broadcasted block. In versions before GreatVoyage-v4.5.1 (Tertullian), when the block acquisition times out, the node will acquire the block through the P2P synchronization process, but the process is complicated and time-consuming. Therefore, the GreatVoyage-v4.5.1 (Tertullian) version optimizes the process of obtaining the latest block. The node will first select a node according to the status of each node, and then directly send the block obtaining message FetchInvDataMessage to this node to obtain the latest block, which saves most of the time in the block synchronization process, speeds up the acquisition of the latest block, and improves the stability of the node. TIP: https://github.com/tronprotocol/tips/blob/master/tip-391.md Source Code: https://github.com/tronprotocol/java-tron/pull/4326 6. Support prometheus metric protocol interface \u00b6 Starting from the GreatVoyage-v4.5.1 (Tertullian) version, the node provides an open source system monitoring tool - prometheus\u2019s protocol interface, and users can monitor the health status of the node more conveniently. TIP: https://github.com/tronprotocol/tips/blob/master/tip-369.md Source Code: https://github.com/tronprotocol/java-tron/pull/4337 7. Support node stop at specified condition \u00b6 In order to facilitate node deployers to do data backup or data statistics, starting from the GreatVoyage-v4.5.1 (Tertullian) version, the node could stop running under specific conditions. Users can set the conditions for node stop through the node configuration file, such as the node stop\u2019s block time, block height, and the number of blocks the node needs to synchronize from start to stop. The node will stop running automatically when the set conditions are met. TIP: https://github.com/tronprotocol/tips/blob/master/tip-370.md Source Code: https://github.com/tronprotocol/java-tron/pull/4325 TVM \u00b6 1. Adjust the upper limit that can be set for the maximum execution time of TVM \u00b6 \"TVM maximum execution time\" is a dynamic parameter of the TRON network, indicating the maximum time allowed for a smart contract to be executed. Super representatives can change this parameter through proposal voting. In versions prior to GreatVoyage-v4.5.1 (Tertullian), the maximum value that this parameter can be modified is 100ms. With the stability of the TRON network infrastructure and the vigorous development of the ecology, the 100ms upper limit confines the complexity of smart contracts. Therefore, GreatVoyage-v4.5.1 (Tertullian) version adds a new proposal that allows to raise the configurable upper limit of \"TVM maximum execution time\" to 400ms. TIP: https://github.com/tronprotocol/tips/blob/master/tip-397.md Source Code: https://github.com/tronprotocol/java-tron/pull/4375 2. Optimize the cache structure of TVM \u00b6 In versions prior to GreatVoyage-v4.5.1 (Tertullian), the cached data in TVM is stored in the form of a byte array. When the data in the cache needs to be changed, the data must first be converted from the form of a byte array to a protobuf object by performing a serialization operation, then change a field of the object (such as account balance, etc.) to generate a new object, then serialize the newly generated protobuf object to byte array, and at last write the result byte array to TVM cache. Since the serialization and deserialization of protobuf is time-consuming, the GreatVoyage-v4.5.1 (Tertullian) version optimizes the data structure in the cache when TVM is executed, and directly saves the protobuf object data to reduce the serialize/deserialize operations when accessing the data in the cache, speeding up TVM execution of bytecode. Source Code: https://github.com/tronprotocol/java-tron/pull/4375 Hope is patience with the lamp lit. --- Tertullian GreatVoyage-v4.4.6(David) \u00b6 GreatVoyage-v4.4.6 (David) updated the version of the dependency library fastjson to ensure the security of using fastjson. Other Changes \u00b6 1. Update the fastjson dependency library to the latest version \u00b6 Due to security vulnerabilities in fastjson 1.2.80 and earlier versions, GreatVoyage-v4.4.6 (David) updated the version of the fastjson dependency library to 1.2.83, and enabled the safemode mode of fastjson to ensure the safety of using fastjson. Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4393 *Beauty in things exists in the mind which contemplates them. * ---David Hume GreatVoyage-4.4.5(Cicero) \u00b6 The GreatVoyage-v4.4.5 (Cicero) version optimizes the query interface of the node to filter out invalid fields, which ensures the stability of the interface for parsing data. Other Changes \u00b6 1. Optimize the query interface of the node \u00b6 The GreatVoyage-v4.5.0 (Cicero) version optimizes the query interface of the node. When parsing the obtained data, the node will filter out invalid fields to ensure to return the correct interface data Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4349 No one can give you better advice than yourself. ---Cicero GreatVoyage-4.4.4(Plotinus) \u00b6 The GreatVoyage-v4.4.4 (Plotinus) version introduces several important optimization updates, which reduces the node memory usage; speeds up node startup; Optimized network module, block production threads, improve the stability of nodes; Improved java-tron upgrade mechanism achieves more efficient decentralized governance; TVM supports multi-version program executors, which helps make it more compatible with EVM, brings users a more convenient development experience, and helps further flourish the TRON ecosystem. Core \u00b6 1. Optimize node startup time \u00b6 Before the GreatVoyage-v4.4.4 (Plotinus), the node will execute about a minute from startup to block synchronization. The block synchronization thread will first delay 30s to wait for the P2P thread to discover remote nodes, then establish TCP connection with the discovered nodes, and finally perform the block synchronization. This delay time occupies most of the startup time. In fact, every newly discovered node will be persisted to the local database, so there is no need to spend extra time waiting for the node to be discovered when node is started for the second time. So in the GreatVoyage-v4.4.4(Plotinus) version, the waiting time for node discovery has been reduced from 30s to 100ms to improve the speed of node startup. TIP: https://github.com/tronprotocol/tips/blob/master/tip-366.md Source Code: https://github.com/tronprotocol/java-tron/pull/4254 2. Optimize memory usage \u00b6 In order to avoid repeatedly broadcasting a transaction, the node will cache the transaction data into the broadcast data buffer. However,due to the limitation of the JVM's recycling policy, old cached data cannot be deleted in time until the buffer is full. Therefore, a buffer with a larger capacity will occupy a large amount of memory space. Before the GreatVoyage-v4.4.4 (Plotinus) version, the buffer pool size was 100000 transactions. In order to release the memory occupied by expired transactions in time , the GreatVoyage-v4.4.4 (Plotinus) version changed the buffer size to 20000 to reduce memory usage. TIP: https://github.com/tronprotocol/tips/blob/master/tip-362.md Source Code: https://github.com/tronprotocol/java-tron/pull/4250 3. Optimize the block-producing thread \u00b6 The GreatVoyage-v4.4.4 (Plotinus) version adds the interrupt exceptions handling in block-producing thread, so that when the block-producing node catches the interrupt instruction, it can exit safely. Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4219 TVM \u00b6 1. TVM support multi-version program-executors \u00b6 In order to enable the TRON network to support various types of smart contract transactions in the future, starting from GreatVoyage-v4.4.4 (Plotinus), TVM code is refactored to support multi-version program executors, it will select different instruction set to interpret and execute the bytecode of smart contract according to the contract version information. Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4257 https://github.com/tronprotocol/java-tron/pull/4259 Other Changes \u00b6 1. Optimize log storage \u00b6 The GreatVoyage-v4.4.4 (Plotinus) version modifies the node log retention time from 3 days to 7 days to facilitate users to troubleshoot issues. Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4245 2. Optimize network service shutdown logic \u00b6 The GreatVoyage-v4.4.4(Plotinus) version optimizes the network service shutdown logic, closing the synchronization service first, and then closing the TCP connection service to ensure that all P2P connection related services exit safely. Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4220 3. improve the java-tron upgrade mechenism \u00b6 For upgrade mechanism of java-tron,Before the GreatVoyage-v4.4.4 (Plotinus) version,all 27 super representative nodes need to complete the code upgrade, TRON network can be upgraded to the new version,TRON is a completely decentralized governance network,Sometimes the 27 super representative nodes cannot complete the code upgrade within a certain period of time, making the version upgrade process slow.In order to achieve more efficient decentralized governance, in GreatVoyage-v4.4.4 (Plotinus), the upgrade mechanism of java-tron has been improved, only 22 super representative nodes are needed to complete the code upgrade, and the TRON network can complete the upgrade. Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4218 The world is knowable, harmonious, and good. --- Plotinus GreatVoyage-4.4.2(Augustinus) \u00b6 The GreatVoyage-v4.4.2(Augustinus) has three essential updates: The new execution model of opcode boosts the TVM performance; individualized LevelDB parameters improve the database performance; and the newly added log filter APIs make the JSON-RPC API more comprehensive. TVM \u00b6 1. TVM Opcode Execution Model Optimization \u00b6 The opcode execution model of the interpreter in TVM is optimized in GreatVoyage-v4.4.2(Augustinus). The performance of TVM is proven to have a great boost through testing. TIP: https://github.com/tronprotocol/tips/blob/master/tip-344.md Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4157 API \u00b6 1. Newly Adding ETH compatible log filter for JSON-RPC APIs. \u00b6 Log filter related APIs are available from GreatVoyage-v4.4.2 for compatibility with Ethereum JSON-RPC API. TIP: https://github.com/tronprotocol/tips/issues/343 Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4153 Other Changes \u00b6 1. LevelDB Databases Performance Optimization \u00b6 Parameters of each LevelDB database have been individualized by the I/O frequencies from GreatVoyage-v4.4.2(Augustinus). This will significantly boost the database performance. Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4154 Patience is the companion of wisdom. --- Augustinus GreatVoyage-4.4.0(Rousseau) \u00b6 The GreatVoyage-v4.4.0 (Rousseau) version introduces several important updates: the optimization of block broadcasting will let the block be broadcast to the entire network faster; the query performance optimization of dynamic store and the optimization of database parameters will be greatly improved Block processing speed, thereby improving the performance of java-tron; API customization in FullNode makes node configuration more flexible for different application scenarios; TVM will also be better compatible with EVM and adapt to the Ethereum London upgrade, the new JSON-RPC API will bring developers a better development experience, help developers to join the TRON ecosystem more easily, and promote the prosperity of the TRON ecosystem. Core \u00b6 1. Optimize the block broadcasting \u00b6 In the version before GreatVoyage-v4.4.0 (Rousseau), the logic of block processing is: verify block -> process block -> broadcast block. However, due to the long block processing time, there is a delay in block broadcasting. In order to speed up block broadcasting, In GreatVoyage-v4.4.0 (Rousseau) version, the block processing logic is changed to: verify block -> broadcast block -> process block, so that the block can be quickly broadcast to the entire network. TIP: https://github.com/tronprotocol/tips/blob/master/tip-289.md Source Code:https://github.com/tronprotocol/java-tron/pull/3986 2. Optimize the query performance of dynamic store \u00b6 During the block processing, The frequency of visits to dynamic store is very high. The GreatVoyage-v4.4.0(Rousseau) version optimizes the query performance of the dynamic store by loading all the data of dynamic store into the first-level cache, the cache hit rate of the dynamic store is improved and the block processing speed is also improved. TIP: https://github.com/tronprotocol/tips/blob/master/tip-290.md Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/3993 3. Optimize the transaction broadcasting interface \u00b6 The GreatVoyage-v4.4.0 (Rousseau) version optimizes the processing flow of the transaction broadcast interface. The transaction broadcast is changed from asynchronous to synchronous, and the result will be returned after the broadcast is successful, making the return result of the broadcast more accurate. Source code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4000 4. Optimize the parameters of the database \u00b6 The GreatVoyage-v4.4.0 (Rousseau) version optimizes the parameters of the database, which improves the read and write performance of the database, thereby improving the efficiency of block processing. Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4018 https://github.com/tronprotocol/java-tron/pull/3992 TVM \u00b6 1. Provide compatibility with EVM \u00b6 The GreatVoyage-v4.4.0 (Rousseau) version provides compatibility solution for those instructions that are different from EVM, so that the newly deployed contract supports the following features: - The GASPRICE instruction returns the unit price of energy. - The try/catch-statement supports catching all types of TVM exceptions. - Forbid the system contract \u201cTransferContract\u201d to transfer TRX to the smart contract account. TIP: https://github.com/tronprotocol/tips/blob/master/tip-272.md Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4032 NOTICE \uff1a By default, this feature is disabled, and the super representative or super partner will initiate a vote request to enable it in the future. 2. Adapt to Ethereum London Release \u00b6 In the GreatVoyage-v4.4.0 (Rousseau) version, TVM is also adapted to the Ethereum London upgrade: introduce the BASEFEE opcode; the deployment of new contracts starting with 0xEF is prohibited. TIP: https://github.com/tronprotocol/tips/blob/master/tip-318.md Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4032 NOTICE \uff1a By default, this feature is disabled, and the super representative or super partner will initiate a vote request to enable it in the future. 3. In constant mode, Energy limit supports customization and the default value is increased \u00b6 Before the GreatVoyage-v4.4.0 (Rousseau) version, the energy limit in constant mode was a fixed value( 3,000,000 ). The GreatVoyage-v4.4.0 (Rousseau) version changed it to configurable, and increase the default value to 100,000,000 . after upgraded to the latest version, Energy limit can be configured in startup parameters( --max-energy-limit-for-constant ) or in the configuration file( vm.maxEnergyLimitForConstant ). Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4032 API \u00b6 1. Support Ethereum compatible JSON-RPC API \u00b6 Starting from the GreatVoyage-v4.4.0 (Rousseau) version, the FullNode supports JSON-RPC APIs. For details, please refer to: https://developers.tron.network/reference#json-rpc-api Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4046 2. FullNode supports disabling APIs \u00b6 In order to make the FullNode customizable, starting from GreatVoyage-v4.4.0 (Rousseau) version, FullNode supports disabling specific APIs through the configuration file. Source code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4045 3. Optimize the TriggerConstantContract API \u00b6 In GreatVoyage-v4.4.0 (Rousseau), the following optimizations have been introduced to the TriggerConstantContract interface: - Execute contract creation when ContractAddress is empty - Remove the check of the incoming parameters callvalue and tokenvalue - The log list and internal transaction list are added to TransactionExtention Source Code\uff1a https://github.com/tronprotocol/java-tron/pull/4032 Changes \u00b6 1. Upgrade event plugin to support BTTC data \u00b6 The event plugin has been upgraded in GreatVoyage-v4.4.0 (Rousseau) to support BTTC . Source code: https://github.com/tronprotocol/java-tron/pull/4067 2. Increase the upper limit of the MaxFeeLimit network parameter. \u00b6 In the version before GreatVoyage-v4.4.0 (Rousseau), the value range of MaxFeeLimit is [0,1e10] sun, in GreatVoyage-v4.4.0 (Rousseau) the value range of MaxFeeLimit is expanded to [0, 1e17] sun. Source Code\uff1a https://github.com/tronprotocol/java-tron/pull/4032 NOTICE \uff1a By default, this feature is disabled, it will be enabled after the London upgrade proposal takes effect. 3. Optimize the quick start script start.sh \u00b6 The quick start script tool is also upgraded in the GreatVoyage-v4.4.0 (Rousseau) version, please refer to the latest user guide from: https://github.com/tronprotocol/java-tron/blob/release_v4.4.0/shell.md The world of reality has its limits; the world of imagination is boundless. --- Rousseau GreatVoyage-4.3.0(Bacon) \u00b6 The release of GreatVoyage-v4.3.0 (Bacon) includes several significant optimization enhancements. The configurability of the parameters FREE_NET_LIMIT and TOTAL_NET_LIMIT will aid the TRON community in achieving improved on-chain governance; The addition of new TVM instructions and ABI types facilitates the use of smart contracts; the new cryptography library strengthens the TRON network's security; the optimization of the account data storage and transaction verification procedures increases transaction processing speed and block verification speed, greatly improving the TRON network's performance; node startup speed improvement will benefit customers and help the TRON ecosystem grow even further. Core \u00b6 1. Add a proposal to adjust the free net limit in an account. \u00b6 Prior to GreatVoyage-v4.3.0 (Bacon), the account's daily free bandwidth quota was fixed at 5000. The GreatVoyage-v4.3.0 (Bacon) version includes the #61 proposal FREE_NET_LIMIT , which allows for the customization of the free bandwidth quota. Super representatives and super partners may initiate a vote request for Proposal 61, which modifies the FREE_NET_LIMIT variable, which has the value [0, 100000]. TIP: https://github.com/tronprotocol/tips/blob/master/tip-292.md Source Code: https://github.com/tronprotocol/java-tron/pull/3917 NOTICE The account's daily free bandwidth quota is not changed now. The super representative or super partner will initiate a vote request to change the value in the future. 2. Add a proposal to adjust the total net limit. \u00b6 Prior to GreatVoyage-v4.3.0 (Bacon), the total bandwidth obtained by staking TRX throughout the entire network was fixed at 43,200,000,000. The GreatVoyage-v4.3.0 (Bacon) version incorporates proposal #62 TOTAL_NET_LIMIT , which allows for configuring the total bandwidth available by staking TRX over the entire network. Super representatives and super partners may initiate a voting request for Proposal 62, which amends TOTAL_NET_LIMIT . TOTAL_NET_LIMIT has a range of [0, 1000000000000]. TIP: https://github.com/tronprotocol/tips/blob/master/tip-293.md Source Code: https://github.com/tronprotocol/java-tron/pull/3917 NOTICE The total net limit is not changed now. The super representative or super partner will initiate a vote request to change the value in the future. 3. Optimize the Account Data Structure \u00b6 Account is a database that receives numerous accesses during the node's operation, necessitating frequent deserialization operations on the account data structure. Prior to GreatVoyage-v4.3.0 (Bacon), Account contained not only the account's basic data, but also user TRC-10 asset data. However, for TRX transfers and smart contract-related transactions, only the Account's basic data is used. An excessively large TRC-10 asset list will have a significant impact on the Account data structure's deserialization performance. GreatVoyage-v4.3.0 (Bacon) improves the Account database's storage structure by separating TRC-10 asset data from the Account and storing it independently in the AccountAssetIssue . Reduce the amount of data that is deserialized during Account deserialization and increase the deserialization speed. TIP: https://github.com/tronprotocol/tips/blob/master/tip-295.md Source Code: https://github.com/tronprotocol/java-tron/pull/3906 NOTICE By default, this feature is disabled, and the super representative or super partner will initiate a vote request to enable it in the future. TVM \u00b6 1. Add Vote Instructions and Precompile Contracts in TVM \u00b6 Ordinary accounts can earn block rewards and voting rewards in versions prior to GreatVoyage-v4.3.0 (Bacon) by voting for super representatives or super representative candidates. However, because TVM does not accept voting instructions, TRX assets in smart contract accounts are unable to generate revenue via voting. The GreatVoyage-v4.3.0 (Bacon) version adds voting instructions to TVM: VOTE / WITHDRAWBALANCE , allowing smart contract accounts to vote for super representatives or super representative candidates. TIP: https://github.com/tronprotocol/tips/blob/master/tip-271.md Source Code: https://github.com/tronprotocol/java-tron/pull/3921 NOTICE By default, this feature is disabled, and the super representative or super partner will initiate a vote request to enable it in the future. 2. Add a New Type: Error in Smart Contract ABI \u00b6 GreatVoyage-v4.3.0 (Bacon) provides a new ABI type Error, which is a custom error type that is compatible with Ethereum solidity 0.8.4's new features. TIP: https://github.com/tronprotocol/tips/blob/master/tip-306.md Source Code: https://github.com/tronprotocol/java-tron/pull/3921 API \u00b6 1. Add a New Field: energy_used in TransactionExtention \u00b6 Users cannot forecast the energy usage of smart contract transactions in versions earlier to GreatVoyage-v4.3.0 (Bacon). The version of GreatVoyage-v4.3.0 (Bacon) adds the energy_used field to the TransactionExtension . When the user invokes the contract method via TriggerConstantContract , a sandbox environment based on the most recently synchronized block at the current node is created to supply TVM with this method call. Following the execution, the actual energy consumption figure is written to the energy_used field(this operation will not generate an on-chain transaction, nor will it change the status of the current node). Source Code: https://github.com/tronprotocol/java-tron/pull/3940 Changes \u00b6 1. Change the Cryptography Library to Bouncy Castle \u00b6 Since SpongyCastle is no longer maintained, BouncyCastle is utilized as the encryption library starting with GreatVoyage-v4.3.0 (Bacon). Source Code: https://github.com/tronprotocol/java-tron/pull/3919 2. Modify the Calculation of net_usage Value in the Transactioninfo when Creating New Accounts \u00b6 When a new account is created in GreatVoyage-v4.3.0 (Bacon), the method for calculating net_usage is altered. Source Code: https://github.com/tronprotocol/java-tron/pull/3917 3. Optimize the Block Verification \u00b6 When a node checks a block prior to GreatVoyage-v4.3.0 (Bacon), it verifies each transaction included inside it, regardless of whether it has been verified previously. The transaction verification procedure consumes roughly one-third of the total time required to process a block. The GreatVoyage-v4.3.0 (Bacon) release optimizes the block verification logic. If non- AccountUpdateContract transactions in the block have been validated previously ( AccountUpdateContract transactions entail account permission changes), they will no longer be verified to expedite block verification. TIP: https://github.com/tronprotocol/tips/blob/master/tip-276.md Source Code: https://github.com/tronprotocol/java-tron/pull/3910 4. Optimize the Node Startup \u00b6 Prior to GreatVoyage-v4.3.0 (Bacon), during node startup, transaction cache and block data from the database are read to complete the RAM transaction cache initialization. The RAM transaction cache initialization process has been streamlined in GreatVoyage-v4.3.0 (Bacon), and some superfluous parsing processes have been deleted. The speed of node startup will be increased following optimization. TIP: https://github.com/tronprotocol/tips/blob/master/tip-285.md Source Code: https://github.com/tronprotocol/java-tron/pull/3907 5. Optimize Transaction Processing Flow to Reduce Memory Usage \u00b6 The transaction processing flow is streamlined in GreatVoyage-v4.3.0 (Bacon), unneeded objects are released in advance, and memory utilization is optimized. Source Code: https://github.com/tronprotocol/java-tron/pull/3911 6. Add New Plugins to Optimize the Performance of levedb Startup \u00b6 In the version before GreatVoyage-v4.3.0 (Bacon), with the running of levedb , the manifest file will continue to grow. Excessive manifest file will not only affect the startup speed of the node but also may cause the memory to continue to grow and lead to insufficient memory and the service was terminated abnormally. GreatVoyage-v4.3.0 (Bacon) introduces the leveldb startup optimization plug-in. The plug-in optimizes the file size of the manifest and the startup process of LevelDB, reduces memory usage, and improves node startup speed. TIP: https://github.com/tronprotocol/tips/blob/master/tip-298.md Source Code: https://github.com/tronprotocol/java-tron/pull/3925 Plug-in Usage Guide: https://github.com/tronprotocol/documentation-en/blob/master/docs/developers/archive-manifest.md Knowledge is power. --- Francis Bacon GreatVoyage-4.2.2.1(Epictetus) \u00b6 We have just released the version of GreatVoyage-v4.2.2.1(Epictetus). The main new features and modifications are as follows: Core Protocol \u00b6 1. Optimize the processing logic of pending transactions . \u00b6 In the versions before GreatVoyage-v4.2.2.1(Epictetus), if the node has enabled the event subscription service, there will be a small probability of abnormal node synchronization. The GreatVoyage-v4.2.2.1(Epictetus) version optimizes the processing logic of pending transaction , fixes the synchronization exception, and improves the stability of the event subscription service. Source code: #3874 The update introduced by the GreatVoyage-v4.2.2.1(Epictetus) version optimizes the processing logic of pending transaction , which will greatly improve the stability of the event subscription service, bring a better experience for TRON users, and further prosper the TRON ecosystem. No great thing is created suddenly. --- Epictetus GreatVoyage-4.2.2(Lucretius) \u00b6 The version of GreatVoyage-v4.2.2 (Lucretius) introduces three important optimizations. The optimization of block processing effectively improves the execution speed of the block, thereby significantly improving the performance of the TRON network. Efficient HTTP/RPC query and excellent TVM performance will bring a better experience to TRON DAPP users and further prosper the TRON ecosystem. Core Protocol \u00b6 1. Block Processing optimization \u00b6 In the versions before GreatVoyage-v4.2.2 (Lucretius), to obtain the witness list during block processing, multiple database queries and deserialization operations were performed, which took up nearly 1/3 of the block processing time. The GreatVoyage-v4.2.2 (Lucretius) version simplifies the query of witnesses. In the block processing process, the witness list can be obtained by only one query. After testing, this optimization has dramatically improved the block processing performance. TIP: TIP-269 Source code: #3827 2. Data Query optimization \u00b6 In the versions before GreatVoyage-v4.2.2 (Lucretius), multiple HTTP or RPC queries for data on the chain are mutually exclusive. If a query request is being processed, a new query request will keep waiting until the previous request is completed. However, data query methods never use shared data, and no lock operation is required. This optimization removes unnecessary synchronization locks in the query process and improves the performance of internal queries, HTTP and RPC query requests of nodes. 3. Smart Contract ABI Storage optimization \u00b6 In the version before GreatVoyage-v4.2.2 (Lucretius), the ABI other data of the smart contract are stored together in the contract database, and some high-frequency instructions (SLOAD, SSTORE, Etc.) will read all the data of a smart contract from the contract database. However, the execution of the contract does not use these ABI data, and these frequent readings will impact the execution efficiency of these instructions. In the version of GreatVoyage-v4.2.2 (Lucretius), smart contract ABIs are transferred to a particular ABI database. The ABI data will no longer be read during the execution of the contract, thus significantly improving the performance of TVM. TIP: TIP-268 Source code: #3836 Other Changes \u00b6 1. System Contract BatchValidateSign Initialization Process optimization \u00b6 Source code: #3836 --- Truths kindle light for truths. --- Lucretius GreatVoyage-4.2.0(Plato) \u00b6 The GreatVoyage-4.2.0 (Plato) version introduces two important updates. The optimization of the resource model will increase the utilization rate of TRON network resources and make the resource acquisition method more reasonable. The new TVM instructions make the use scenarios of smart contracts more abundant and will further enrich the TRON ecosystem. Core Protocol \u00b6 1. Optimize the resource model \u00b6 Before the GreatVoyage-4.2.0 (Plato) version, while users obtained a large amount of TRON power by staking TRX, they also obtained a large amount of energy and bandwidth. The utilization rate of these energies and bandwidth is extremely low, and most of them are not used at all, which increases the cost of obtaining resources. In order to improve the utilization rate of these resources, the GreatVoyage-4.2.0(Plato) version proposes an optimization of the resource model, where staking TRX can only obtain one of the three resources, namely bandwidth, energy, and TRON power. After optimization, users can obtain the corresponding resources based on their own needs, thereby improving the utilization rate of resources. TIP\uff1a TIP-207 Source Code: #3726 Notes: * This feature is disabled by default and can be enabled through the proposal system. * After the feature is enabled, the user's previously obtained resources remain unchanged. The TRON power obtained before the proposal passage will be cleared when the user triggers an unstake transaction (unstake bandwidth, energy, or TRON power). TVM \u00b6 1\u3001Add Freeze/Unfreeze instructions in TVM \u00b6 In the TRON network, one non-contract account can stake TRX to obtain resources such as bandwidth, energy, TRON power, and reasonable use of these resources can bring certain benefits to users. At the same time, although smart contract accounts do have TRX, there is no way to stake these TRX to obtain resources. In order to solve this inconsistency, the GreatVoyage-4.2.0(Plato) version introduces Freeze/Unfreeze instructions in TVM, so that smart contracts can also support staking TRX to obtain resources. TIP: TIP-157 Source Code\uff1a #3728 Notes: * This feature is disabled by default and can be enabled through the proposal system. * The TVM freeze instruction can obtain bandwidth and energy. For TRON POWER, it can be obtained and used after the TVM supports the voting instruction. * The receiving address/ target address used in the Freeze/Unfreeze instructions must be address payable type, and the receiving address/ target address cannot be a contract address other than itself. * The inactive account will be automatically activated if the account is the receiver of TVM Freeze instruction, and 25,000 energy will be deducted as the account activation cost. Other Changes \u00b6 1\u3001Optimize the block synchronization. \u00b6 Source code\uff1a #3732 The beginning is the most important part of the work. --- Plato GreatVoyage-4.1.3(Thales) \u00b6 GreatVoyage-4.1.3(Thales) is released with the following new features and modifications: Core Protocol \u00b6 1.Sorting the transactions in pending pool, SR will prioritize the transactions with high packing fee \u00b6 In GreatVoyage-4.1.2 and earlier versions, SR packaging transactions are carried out in accordance with the time sequence of the arrival of the transaction.This will easily be attacked by low transaction fees. After this optimization, block producers sort the transactions to be packaged according to the cost, and then prioritize the transaction with high cost to prevent low-cost transaction attacks. API \u00b6 1.Add new API to support transaction query in pending pool. \u00b6 It is currently impossible to query the intermediate state information of a certain transaction from after it is issued to before it is on the chain.After a transaction is sent, if it is not on the chain, we cannot know whether it is waiting for packaging or has been discarded. In this upgrade, the Fullnode node provides 3 API to obtain detailed information about the pending pool: - /wallet/gettransactionfrompending: Obtain the transaction information from pending pool through the - transaction ID - /wallet/gettransactionlistfrompending: Get all transactions from the pending pool - /wallet/getpendingsize: Get the number of transactions in pending pool The optimization of transaction packaging logic of GreatVoyage-4.1.3(Thales) will effectively reduce low-cost attacks and greatly improve the security of the TRON public chain. Great Voyage - v4.1.2 \u00b6 GreatVoyage-version 4.1.2 is released with the following new features and modifications: I. Core Protocol \u00b6 1\u3001Reward SRs with the transaction fees charged for bandwidth and energy. \u00b6 After this feature is turned on, the transaction fee from burning TRX which charged for bandwidth/energy (except OUT_OF_TIME) will be transferred to TRANSACTION_FEE_POOL. At the end of each block, the fee of all transactions in this block is rewarded to the block SR and its voters. At the same time, in \"transactioninfo\", the \"packingFee\" field is added to indicate the available fees to the current SR and SR voters. TIP: TIP-196 Source Code: #3532 2\u3001Support account history balance query. \u00b6 The account historical balance query function can facilitate developers to query the account balance information at a specific block height. Developers can obtain the account historical balance information through the following two APIs. /wallet/getaccountbalance \uff1aquery account balance at a specific block. /wallet/getblockbalance \uff1a Query the balance-changing operations in a specific block. Note: 1. This function is disabled by default and can be enabled through the node configuration file. 2. After the function is enabled, users can only query the historical balance after the enabled time. If users need to query the complete historical balance information, they can use the data snapshot which contains the historical balance information to resynchronize the node. Source Code\uff1a #3538 Guide \uff1a https://github.com/tronprotocol/documentation-en/blob/master/docs/api/http.md 3\u3001Optimized the blackhole account to improve transaction execution speed \u00b6 After the feature is turned on, the transaction fee from burning TRX which charged f for bandwidth and energy will no longer be transferred to the black hole address but will be directly accumulated and recorded in the database. Source code\uff1a #3617 II. TVM \u00b6 1\u3001Adopt to solidity0.6.0. \u00b6 After this upgrade, TRON will be fully compatible with the new features introduced by solidity 0.6.0, including the new virtual and override keywords, and supporting try/catch. For details, please refer to the TRON Solidity release note: https://github.com/tronprotocol/solidity/releases/tag/tv_0.6.0 TIP: TIP-209 Source Code\uff1a #3351 2\u3001Make MAX_FEE_LIMIT configurable as a chain property. \u00b6 After the new version, SR and SRP can initiate a voting request to modify MAX_FEE_LIMIT. The range of MAX_FEE_LIMIT is [0,10000000000]. TIP\uff1a TIP-204 Source code\uff1a #3534 III. Others Changes \u00b6 1\u3001Use the jitpack repository to provide dependency support and make it easy for developers to use java-tron as a dependency for their projects. \u00b6 Source code: #3554 GreatVoyage-v4.1.1 \u00b6 GreatVoyage-version 4.1.1 is released with the following new features and modifications: I. Core Protocol \u00b6 1. New Consensus Protocol \u00b6 The new consensus mechanism combines TRON's existing DPoS consensus with the PBFT consensus mechanism. PBFT's three-phase voting mechanism is adopted to confirm whether a block should be solidified. It will take an average of 1-2 slots (a slot equals 3s) from creation to confirmation of a TRON block, much shorter than the previous 19 slots. This signifies a remarkable increase in the block confirmation speed. TIP: TICP-Optimized-PBFT Source code: #3082 2. New Node Type \u00b6 We added another type of node to the existing FullNode: Lite FullNode. Lite FullNode executes the same code with the FullNode. What sets it apart is that its launch is based on the status data snapshot, which contains all the status data and data history of the latest 256 blocks. The status data snapshot can be acquired by executing LiteFullNodeTool.jar (please see: Use the LiteFullNode Tool ). - TIP: TIP-128 - Source code: #3031 II. TVM \u00b6 Achieved compatibility with Ethereum Istanbul upgrade \u00b6 a. Added new instruction CHAINID to fetch the genesis block ID of the current chain, which avoids possible replay attacks of one transaction being repeated on different chains. - TIP: TIP-174 - Source code: #3351 b. Added new instruction SELFBALANCE to fetch the balance of the current contract address in the smart contract. For obtaining the balance of any address, please stick with instruction BALANCE.SELFBALANCE is safer to use. Energy consumption of using BALANCE might rise in the future. - TIP: TIP-175 - Source code: #3351 c. Reduced Energy consumption of three precompiled contract instructions, namely BN128Addition, BN128Multiplication, and BN128Pairing. BN128Addition: from 500 Energy to 150 Energy BN128Multiplication: from 40000 Energy to 6000 Energy BN128Pairing: from (80000 * pairs + 100000) Energy to (34000 * pairs + 45000) Energy - TIP: TIP-176 - Source code: #3351 III. Mechanism \u00b6 Added two new system contracts, namely MarketSellAssetContract and MarketCancelOrderContract, for on-chain TRX/TRC10 transactions in decentralized exchanges. TIP: TIP-127 Source code: #3302 IV. Other Modifications \u00b6 Added a few node performance indicators. Source code: #3350 Added market order detail in the original transactionInfo interface. TIP: TIP-127 Source code: #3302 Improved the script for docker deployment. Source code: #3330 GreatVoyage-v4.0.0 \u00b6 Release 4.0.0 has implemented the shielded TRC-20 contract, which can hide the source address, destination address, and the token amount for TRC-20 transactions and provide users with better privacy. The shielded TRC-20 contract has three core functions: mint , transfer and burn . mint is used to transform the public TRC-20 token to shielded token; transfer is used for shielded token transactions; burn is used to transform the shielded token back to the public TRC-20 token. To support the shielded TRC-20 contract, four new zero-knowledge instructions ( verifyMintProof , verifyTransferProof , verifyBurnProof and pedersenHash ) are add in TVM, which make it convenient to provide privacy for arbitrary TRC-20 contract. Notices \u00b6 Forced upgrade New features \u00b6 Add 4 new instructions ( verifyMintProof , verifyTransferProof , verifyBurnProof and pedersenHash ) in TVM to support TRC20 shielded transactions based on zk-SNARKs (#3172). verifyMintProof : used to validate the zero-knowledge proof for mint function. verifyTransferProof : used to validate the zero-knowledge proof for transfer function. verifyBurnProof : used to validate the zero-knowledge proof for burn function. pedersenHash : used to compute the Pedersen hash. Update the initial parameters of zk-SNARKs scheme generated by the MPC Torch (#3210). Add the APIs to support shielded TRC-20 contract transaction (#3172). 1. Create shielded contract parameters rpc CreateShieldedContractParameters ( PrivateShieldedTRC20Parameters ) returns ( ShieldedTRC20Parameters ) {} 2. Create shielded contract parameters without ask rpc CreateShieldedContractParametersWithoutAsk ( PrivateShieldedTRC20ParametersWithoutAsk ) returns ( ShieldedTRC20Parameters ) {} 3. Scan shielded TRC20 notes by ivk rpc ScanShieldedTRC20NotesByIvk ( IvkDecryptTRC20Parameters ) returns ( DecryptNotesTRC20 ) {} 4. Scan shielded TRC20 notes by ovk rpc ScanShieldedTRC20NotesByOvk ( OvkDecryptTRC20Parameters ) returns ( DecryptNotesTRC20 ) {} 5. Check if the shielded TRC20 note is spent rpc IsShieldedTRC20ContractNoteSpent ( NfTRC20Parameters ) returns ( NullifierResult ) {} 6. Get the trigger input for the shielded TRC20 contract rpc GetTriggerInputForShieldedTRC20Contract ( ShieldedTRC20TriggerContractParameters ) returns ( BytesMessage ) {} - Support the ovk to scan the transparent output of burn transaction (#3203). - Support the burn transaction with zero or one shielded output (#3224). - Add data field in transaction log trigger class for future memo note (#3200). The following TIPs are implemented in this release: - TIP-135 : Shielded TRC-20 contract standards, guarantee the privacy of the shielded transfer of TRC-20 tokens. - TIP-137 : Implements three zero-knowledge proof instructions in TVM to support the shielded TRC-20 contract (#3172). - TIP-138 : Implements the Pedersen hash computation instruction in TVM to support the shielded TRC-20 contract (#3172). Changes \u00b6 Check if null before getInstance when get transaction info from DB to fix exception of getTransactioninfoByBlkNum (#3165). Odyssey-v3.7 \u00b6 Odyssey-v3.7 is a non-mandatory upgrade, includes the following new features and improvements. Modularization \u00b6 Odyssey-v3.7 has modularized the code organization structure, making it much easier for developers to develop customized module\uff0cseveral mainly modules are listed as follows\uff1a Framework \u00b6 As the core module, Framework performs as both a gateway to the blockchain and an adhesive that effectively connects all other modules. In other words, the framework module initializes each module and facilitates communication between modules. Protocol \u00b6 The decentralized TRON protocol can be implemented by any teams without limitation of programming languages. Any clients in accordance with the TRON protocol can communicate with each other. A concise and efficient data transfer protocol is essential to a distributed network, even more for the blockchain. So, the implementation of the protocol is based on the Protocol Buffers, an open-source and excellent software protocol maintained by Google. The specific business logic of the blockchain defined by the protocol includes: - the data format of message\uff0cincluding block, transaction, proposal, witness, vote, account, exchange and so on. - the communication protocols between blockchain nodes, including the node discovery protocol, the node data synchronization protocol, the node scoring protocol and so on. - the interface protocols that the blockchain provides to the external system or clients Consensus \u00b6 The consensus mechanism is an essential part of the blockchain. The TRON blockchain chooses the DPoS as the core consensus mechanism and it has been running steadily for a long time. But replaceable consensus module is essential if we want to redefine the java-tron as the powerful infrastructure for building application-specific blockchains. The developers of blockchain should determine to choose the consensus mechanism that considered to be most suitable to the specific application scenario. The ultimate goal of the replaceable consensus module is that the consensus mechanism can be determined by configuring some necessary parameters. In addition, the developers can implement a customized consensus module as long as several essential interfaces implemented. Crypto \u00b6 Encryption is also one of the core modules of the blockchain. It is the foundation of the blockchain data security. such as public and private key deduction, transaction verification, zero-knowledge proof, etc. The java-tron abstracts the encryption module and supports the replacement of encryption algorithms. A suitable encryption algorithm can be chosen according to different business needs. Actuator \u00b6 Actuator is the core module used for handling various kinds of transactions. As you know, every transaction in the TRON blockchain contains a contract. On a high level, there are two types of contracts in the TRON blockchain, the system contract and the smart contract. A large number of applications are implemented by the smart contracts and ran in an internal virtual machine of the blockchain. Unfortunately, smart contracts are constrained in terms of their functions and not flexible enough to accommodate the needs of complex applications. Customized actuators offer application developers a brand new way of development. They can choose to implant their application codes into the chain instead of running them on virtual machines. Chainbase \u00b6 Chainbase is specially designed for data storage in the blockchain. Nodes always consider the longest chain to be the correct one and will keep working on extending it. So switching to the longest chain is a common scenario for the blockchain unless it uses a deterministic consensus algorithm like PBFT. For this reason, supporting data rollback is the most distinctive feature of the chainbase module. Several well-designed abstract interfaces are defined in this module. So, the developers can choose the storage engine freely and then implement corresponding interfaces. The LevelDB and RocksDB are two existing implementation. New event subscription trigger for solidified block \u00b6 Added a subscription trigger for the updating a solidified block, which triggers the solidified block update event to the message queue, so that users can get the latest solidified block information on time. A solidified block is a block that regarded as can not be revocable. So, when the block becomes a solidified block, it means that the transactions packed in this block are accepted by the blockchain. Two new HTTP APIs added \u00b6 gettransactioninfobyblocknum This api is both added in the context: /wallet & /walletsolidity. * Description: Query the list of information of transactions in a specific block. * Parameter num: the height of the block. * Return: The list of transaction information. broadcasthex /wallet/broadcasthex * Description: broadcast signed transaction with the format of the hex string * Parameter: signed transaction with the format of the hex string * Return: the result of the broadcast A new RPC API added \u00b6 Adding the GetTransactionInfoByBlockNum method both in Wallet WalletSolidity services\uff1a rpc GetTransactionInfoByBlockNum ( NumberMessage ) returns ( TransactionInfoList ) { } a code snippet\uff1a NumberMessage.Builder builder = NumberMessage.newBuilder(); builder.setNum(blockNum); TransactionInfoList transactionInfoList = blockingStubFull.getTransactionInfoByBlockNum(builder.build()); Odyssey-v3.6.5 \u00b6 Odyssey v3.6.5 Update includes the following new features and improvements 1. New delegation mechanism \u00b6 The new delegation mechanism enables SRs to set commission rates by themselves, which will serve as a reference for users when they vote for SRs. Meanwhile, traceability of the SR\u2019s commission rate on the chain makes the amount of rewards that users receive through voting more transparent. Moreover, the new delegation mechanism lays a foundation for more complex consensus mechanisms and incentive schemes in the near future. 2. Fairer and more efficient staking rewards mechanism \u00b6 Staking rewards are now distributed in a fully-decentralized way, a step forward from the old partially-decentralized mechanism. With this change, staking rewards are now distributed entirely through the blockchain, ensuring complete supervision from the chain and thus true decentralization. Moreover, the new mechanism cuts unnecessary reward distribution transactions, signaling lower bandwidth consumption and higher efficiency on the TRON network. 3. Fairer incentive mechanism \u00b6 Block rewards decreased from 32 TRX to 16 TRX, while voting rewards increased from 16 TRX to 160 TRX. The adjustment will boost voter turnout in the community, with more TRX locked up by users in the TRON ecosystem. This move is accompanied by the new staking rewards mechanism to guarantee real staking revenues to users. 4. Improvement and optimization of TVM \u00b6 (1) Added a new VM instruction ISCONTRACT(0xd4), which has made smart contract development more flexible by allowing developers to identify the type of the target address in VMs when writing contracts. batchvalidatesign(bytes32 hash, bytes[] memory signatures, address[] memory addresses) (2) Adopted a multi-thread method for VMs to verify signatures, which is faster than ecrecover of Ethereum while cutting Energy consumption by half. Contract address: 0x09. To use it in solidity: batchvalidatesign(bytes32 hash, bytes[] memory signatures, address[] memory addresses) validatemultisign(address accountAddress, uint256 permissionId, bytes32 content, bytes[] signatures) (3) Added a new pre-compiled contract to boost multi-signature verification in TVM, speeding up the verification process and reducing Energy consumption. (4) Banned transfer TRX to smart contract address by two system contract TransferContract and TransferAssetContract. The transfer would fail if the target address is a smart address when using TransferContract and TransferAssetContract. This can prevent general users from transferring assets to smart contract address by mistake, avoiding users\u2019 asset loss. (5) Allowed automatic activation of inactive accounts when transferring TRX/ TRC10 tokens to accounts in smart contracts. (6) Added triggerConstantContract feature for SolidityNode and FullNode so as to improve the functionality of node APIs. 5. Improvement of the dynamic adjustment scheme of Energy upper limit \u00b6 The method of calculating Energy consumed per unit of time shifted from only calculating the staked Energy consumed to all Energy consumed. With this change, statistics of Energy consumption will be more accurate and effective, providing reference for adjusting Energy upper limit, saving users\u2019 costs of using TRON blockchain network and improving network efficiency.","title":"History"},{"location":"releases/history/#history","text":"Code Name Version Released Incl TIPs Release Note Specs Epicurus GreatVoyage-v4.7.7 2024-11-29 TIP-697 Release Note Specs Anaximander GreatVoyage-v4.7.6 2024-10-04 N/A Release Note Specs Cleobulus GreatVoyage-v4.7.5 2024-5-30 TIP-653 Release Note Specs Bias GreatVoyage-v4.7.4 2024-3-15 TIP-635 TIP-621 Release Note Specs Solon GreatVoyage-v4.7.3.1 2024-1-12 N/A Release Note Specs Chilon GreatVoyage-v4.7.3 2023-10-25 TIP-586 TIP-592 Release Note Specs Periander GreatVoyage-v4.7.2 2023-7-1 TIP-541 TIP-542 TIP-543 TIP-544 TIP-555 TIP-547 TIP-548 TIP-549 TIP-550 Release Note Specs Pittacus GreatVoyage-v4.7.1.1 2023-4-17 TIP-534 Release Note Specs Sartre GreatVoyage-v4.7.1 2023-2-27 N/A Release Note Specs Aristotle GreatVoyage-v4.7.0.1 2023-1-20 TIP-467 TIP-474 TIP-491 Release Note Specs Socrates GreatVoyage-v4.6.0 2022-11-21 TIP-387 TIP-461 TIP-465 TIP-476 Release Note Specs Aurelius GreatVoyage-v4.5.2 2022-8-18 TIP-425 TIP-428 TIP-440 Release Note Specs Tertullian GreatVoyage-v4.5.1 2022-1-19 TIP-391 TIP-388 TIP-383 TIP-382 TIP-370 TIP-369 TIP-397 Release Note Specs David GreatVoyage-v4.4.6 2022-5-25 N/A Release Note Specs Cicero GreatVoyage-4.4.5 2022-4-27 N/A Release Note Specs Plotinus GreatVoyage-4.4.4 2022-2-22 TIP-362 TIP-366 Release Note Specs Pythagoras GreatVoyage-4.4.3 2021-12-17 N/A Release Note N/A Augustinus GreatVoyage-4.4.2 2021-12-16 TIP-343 TIP-344 Release Note Specs Protagoras GreatVoyage-4.4.1 2021-10-19 N/A Release Note N/A Rousseau GreatVoyage-4.4.0 2021-10-15 TIP-289 TIP-290 TIP-272 TIP-318 Release Note Specs Bacon GreatVoyage-4.3.0 2021-8-3 TIP-292 TIP-293 TIP-295 TIP-271 TIP-306 Release Note Specs Epictetus GreatVoyage-4.2.2.1 2021-6-25 N/A Release Note Specs Lucretius GreatVoyage-4.2.2 2021-6-22 TIP-268 TIP-269 TIP-281 Release Note Specs Origen GreatVoyage-4.2.1 2021-5-22 N/A Release Note N/A Plato GreatVoyage-4.2.0 2021-4-27 TIP-157 TIP-207 Release Note Specs Thales GreatVoyage-4.1.3 2021-3-18 TIP-238 Release Note Specs N/A GreatVoyage-4.1.2 2021-1-20 TIP-196 TIP-204 TIP-209 Release Note Specs N/A GreatVoyage-4.1.1 2020-11-9 N/A Release Note Specs N/A GreatVoyage-v4.1.0 2020-11-2 TIP-127 TIP-128 TIP-174 TIP-175 TIP-176 Release Note N/A N/A GreatVoyage-v4.0.2 2020-11-2 N/A Release Note N/A N/A GreatVoyage-v4.0.1 2020-3-17 N/A Release Note N/A N/A GreatVoyage-4.0.0 2020-7-7 TIP-135 TIP-137 TIP-138 Release Note Specs N/A Odyssey-v3.7 2020-3-17 N/A Release Note Specs N/A Odyssey-v3.6.5 2019-10-8 TIP-37 TIP-43 TIP-44 TIP-53 TIP-54 TIP-60 Release Note Specs N/A Odyssey-v3.6.2 2019-8-8 N/A Release Note N/A N/A Odyssey-v3.6.1 2019-7-10 TIP-41 Release Note N/A N/A Odyssey-v3.6.0 2019-6-20 TIP-26 TIP-28 TIP-29 TIP-30 TIP-31 TIP-32 Release Note N/A N/A Odyssey-v3.5.1 2019-4-10 N/A Release Note N/A N/A Odyssey-v3.5.0.1 2019-3-1 N/A Release Note N/A N/A Odyssey-v3.5 2019-3-1 N/A Release Note N/A N/A Odyssey-v3.2.5 2019-1-25 N/A Release Note N/A N/A Odyssey-v3.2.4 2019-1-14 N/A Release Note N/A N/A Odyssey-v3.2.3 2018-12-24 N/A Release Note N/A N/A Odyssey-v3.2.2 2018-12-17 N/A Release Note N/A N/A Odyssey-v3.2.1.2 2018-12-7 N/A Release Note N/A N/A Odyssey-v3.2.1 2018-11-30 N/A Release Note N/A N/A Odyssey-v3.2 2018-11-30 N/A Release Note N/A N/A Odyssey-v3.1.3 2018-10-19 N/A Release Note N/A N/A Odyssey-v3.1.2 2018-10-12 N/A Release Note N/A N/A Odyssey-v3.1.1 2018-9-17 N/A Release Note N/A N/A Odyssey-v3.1.0 2018-9-10 N/A Release Note N/A N/A Odyssey-v3.0.1 2018-9-6 N/A Release Note N/A N/A Odyssey-v3.0 2018-8-30 N/A Release Note N/A N/A Odyssey-v2.0.8.1 2018-8-20 N/A Release Note N/A N/A Odyssey-v2.0.8 2018-8-14 N/A Release Note N/A N/A Odyssey-v2.0.7 2018-8-9 N/A Release Note N/A N/A Odyssey-v2.0.6 2018-7-11 N/A Release Note N/A N/A Odyssey-v2.0.5 2018-6-24 N/A Release Note N/A N/A Odyssey-v2.0.4.1 2018-6-24 N/A Release Note N/A N/A Odyssey-v2.0.4 2018-6-22 N/A Release Note N/A N/A Odyssey-v2.0.3 2018-6-20 N/A Release Note N/A N/A Odyssey-v2.0.2 2018-6-19 N/A Release Note N/A N/A Odyssey-v2.0.1 2018-6-6 N/A Release Note N/A N/A Odyssey-v2.0 2018-5-31 N/A Release Note N/A N/A Odyssey-v1.1.2 2018-5-31 N/A Release Note N/A N/A Odyssey-v1.1.1 2018-5-28 N/A Release Note N/A N/A Odyssey-v1.1 2018-5-18 N/A Release Note N/A N/A Odyssey-v1.0.6.3 2018-5-10 N/A Release Note N/A N/A Odyssey-v1.0.6.1 2018-5-7 N/A Release Note N/A N/A Odyssey-v1.0.6 2018-5-7 N/A Release Note N/A N/A Odyssey-v1.0.5 2018-4-20 N/A Release Note N/A N/A Odyssey-v1.0.4 2018-4-13 N/A Release Note N/A N/A Odyssey-v1.0.3 2018-4-5 N/A Release Note N/A N/A Exodus-v1.0 2017-12-28 N/A Release Note N/A","title":"History"},{"location":"releases/history/#greatvoyage-477epicurus","text":"GreatVoyage-4.7.7(Epicurus) introduces multiple important optimizations and updates, including a new proposal to upgrade the floating-point power calculation library from java.lang.Math to java.lang.StrictMath , to expand TRON hardware compatibility and provide users with more flexible hardware platform selection, and save operating costs; optimizing event subscription processing logic to ensure the integrity of event acquisition, and bring users a more user-friendly development experience; adapting to the GRPC asynchronous call mode, and further improve the node monitoring system. You may find the details below.","title":"GreatVoyage-4.7.7(Epicurus)"},{"location":"releases/history/#core","text":"","title":"Core"},{"location":"releases/history/#1-migrate-pow-operation-from-javalangmath-to-javalangstrictmath-for-cross-platform-computational-consistency","text":"In order to enable java-tron to support multiple platforms and be compatible with new JDK versions, the Epicurus version switches the floating-point power operation library from java.lang.Math to java.lang.StrictMath to ensure consistency in cross-platform calculations. Note: This optimization is the No. 87 parameter of the TRON network. After Epicurus is deployed, it is disabled by default and can be enabled through governance voting. TIP: https://github.com/tronprotocol/tips/issues/697 Source Code: https://github.com/tronprotocol/java-tron/pull/6098","title":"1. Migrate pow operation from java.lang.Math to java.lang.StrictMath for cross-platform computational consistency"},{"location":"releases/history/#other-changes","text":"","title":"Other Changes"},{"location":"releases/history/#1-optimize-event-subscription-processing-logic","text":"java-tron provides event subscription service, and developers can subscribe to specific events from node through event plugin. For block events, when a node receives a new block, if it successfully verifies and processes the block, it will save the block data in the memory database. At the same time, if there is a new solidified block, the solidified block data will be written to the disk database. If the node deployer subscribes to block events, after the node completing the above block processing steps, the event sending related logic will be performed, that is, the latest block event and the latest solidified block event will be sent to the event plugin. However, in previous versions of Epicurus, block processing and event sending used the same exception capture logic: the newly received block data was removed from the memory database and an exception was thrown. This would result in the new block data being deleted when the block processing was normal but an exception occurred during event sending, which might temporarily affect block synchronization. The Epicurus version optimizes the event subscription processing logic and performs separate exception capture on the block event sending logic. When an exception occurs during event sending, an error log is output and the node exits, so that the node deployer can understand the node abnormality in time and ensure the integrity of event acquisition. Source Code: https://github.com/tronprotocol/java-tron/pull/6096","title":"1. Optimize event subscription processing logic"},{"location":"releases/history/#2-support-graceful-shutdown-with-signal-15-sigterm-for-nodes-enabling-backup","text":"The Epicurus version adjusts the resource release order of the master and backup services, first closing the communication channel between the master and backup nodes, and then closing the thread pool to ensure that the nodes enabling backup can exit gracefully through the kill -15 command. Source Code: https://github.com/tronprotocol/java-tron/pull/6095","title":"2. Support graceful shutdown with signal -15 (SIGTERM) for nodes enabling backup."},{"location":"releases/history/#3-improve-duration-metrics-accuracy-of-grpc-interfaces","text":"The Epicurus version optimizes the duration statistics method for GRPC interface calls to adapt to the GRPC asynchronous call mode: a new server-side interceptor is added to record the start time of the GRPC call and monitor the end event of the GRPC call to accurately calculate the time consumption of the GRPC interface asynchronous call. Source Code: https://github.com/tronprotocol/java-tron/pull/6097 Not what we have but what we enjoy, constitutes our abundance. ---Epicurus","title":"3. Improve duration metrics accuracy of gRPC interfaces"},{"location":"releases/history/#greatvoyage-v476anaximander","text":"The GreatVoyage-4.7.6(Anaximander) introduces several important optimizations and updates, including optimized unit test tasks to improve the stability of test cases execution; newly added TCP and UDP traffic statistics further enriches node monitoring data; optimized peer node idle judgment logic improves the stability of block synchronization; optimized node connection random disconnection logic improves the robustness of node network. Please find the details below.","title":"GreatVoyage-v4.7.6(Anaximander)"},{"location":"releases/history/#other-changes_1","text":"","title":"Other Changes"},{"location":"releases/history/#1-optimize-the-statistical-logic-of-node-http-request-monitoring-metric","text":"java-tron supports node monitoring and provides various metrics data. Anaximander optimizes the statistical logic of node HTTP request monitoring metric to ensure data consistency during concurrent access by multiple threads when counting request data from each mapping address. Source Code: https://github.com/tronprotocol/java-tron/pull/5920","title":"1. Optimize the statistical logic of node HTTP request monitoring metric"},{"location":"releases/history/#2-improve-stability-of-gradle-test-task","text":"Anaximander optimizes the unit test task. The Gradle test-retry plugin is introduced to allow the failed unit test tasks to be re-executed. The @Ignore annotation is used to skip temporarily unused and unstable test cases. This optimization improves the stability of test task execution. Source Code: https://github.com/tronprotocol/java-tron/pull/5916 https://github.com/tronprotocol/java-tron/pull/5927","title":"2. Improve stability of Gradle test task"},{"location":"releases/history/#3-add-tcp-outflow-monitoring-metric-for-prometheus-and-add-udp-inflow-traffic-statistic-to-monitorgetstatsinfo-api","text":"Anaximander adds a new node TCP outflow monitoring metric and adds a UDP inflow statistic to the /monitor/getstatsinfo interface, further enriching the node monitoring data. Source Code: https://github.com/tronprotocol/java-tron/pull/5942","title":"3. Add TCP outflow monitoring metric for Prometheus and add UDP inflow traffic statistic to /monitor/getstatsinfo API"},{"location":"releases/history/#4-optimize-peer-node-idle-judgment-logic","text":"Anaximander optimizes the logic of judging whether the peer node is idle during the block synchronization process, so that block synchronization is not affected by the process of broadcasting blocks/transactions, which improves the efficiency of block synchronization and the stability of the connection between nodes. Source Code: https://github.com/tronprotocol/java-tron/pull/5921","title":"4. Optimize peer node idle judgment logic"},{"location":"releases/history/#5-optimize-peer-sorting-logic","text":"Anaximander optimizes the peers\u2019 sorting logic and adds exception-catching to improve the efficiency of establishing connections between nodes. Source Code: https://github.com/tronprotocol/java-tron/pull/5923","title":"5. Optimize peer sorting logic"},{"location":"releases/history/#6-optimize-check-logic-for-fetching-block-inventory-message","text":"Anaximander optimizes the check logic for fetching block inventory messages. The block number requested should be smaller than the largest block number in chain inventory message so that the node can detect illegal messages in time and disconnect from the other node. At the same time, richer node logs are conducive to the troubleshooting and location of connection issues between nodes. Source Code: https://github.com/tronprotocol/java-tron/pull/5922","title":"6. Optimize check logic for fetching block inventory message"},{"location":"releases/history/#7-optimize-block-processing-logic","text":"Anaximander optimizes the block processing logic. When processing a received broadcasted block, the node will promptly update the ID and number of the block which the node with its peer both have to better understand the status of the peers. Source Code: https://github.com/tronprotocol/java-tron/pull/5925","title":"7. Optimize block processing logic"},{"location":"releases/history/#8-optimize-random-disconnection-strategy","text":"When a node\u2019s latest block height is higher than all peers\u2019 that are connected to it, this node will neither be able to synchronize blocks from peers, nor broadcast transactions. We call it an \"island node\". An island node actually does not have a valid peer. In order to prevent a node from entering the island state, Anaximander optimizes the random disconnection logic of the node, disconnects nodes that have been inactive for a long time, increases the number of valid connections, and improves the robustness of the node network. Source Code: https://github.com/tronprotocol/java-tron/pull/5924 https://github.com/tronprotocol/java-tron/pull/5944 https://github.com/tronprotocol/java-tron/pull/5956 https://github.com/tronprotocol/java-tron/pull/5984 Nature is eternal and does not age. ---Anaximander","title":"8. Optimize random disconnection strategy"},{"location":"releases/history/#greatvoyage-v475cleobulus","text":"The Cleobulus version introduces multiple important optimizations and updates, including a new proposal to adjust the energy cost of some opcodes in TVM to make the energy cost more reasonable. The enhanced transaction and block verification logic improves the system's fault tolerance. The optimized synchronization logic between threads improves data consistency. You may find the details below.","title":"GreatVoyage-v4.7.5(Cleobulus)"},{"location":"releases/history/#core_1","text":"","title":"Core"},{"location":"releases/history/#1-optimize-block-synchronization-and-production-logic","text":"The Cleobulus version optimizes the block production logic. After obtaining the block production lock, the node will check whether it meets the conditions for producing blocks to avoid inconsistent state before and after obtaining the block production lock, thereby improving the stability of the TRON network. Additionally, Cleobulus enhances the block verification logic. All nodes add checks on block size and block time. Source Code: https://github.com/tronprotocol/java-tron/pull/5833 https://github.com/tronprotocol/java-tron/pull/5830","title":"1. Optimize block synchronization and production logic"},{"location":"releases/history/#2-strengthen-size-check-of-account-creation-transactions","text":"The Cleobulus version optimizes the account creation logic, strengthens the size check of account creation transactions, and adds the No.82 TRON network parameter to set the maximum number of bytes allowed for account creation transactions. The parameter ranges from 500 to 10000 and the default value is 1000. The value can be modified by initiating a proposal for a vote. Source Code: https://github.com/tronprotocol/java-tron/pull/5835","title":"2. Strengthen size check of account creation transactions"},{"location":"releases/history/#tvm","text":"","title":"TVM"},{"location":"releases/history/#1-adjust-energy-cost-for-some-opcodes-in-tvm","text":"Cleobulus adjusts the energy cost of the VOTEWITNESS and SUICIDE opcodes to make the energy consumption more reasonable based on the resources and time required for the actual execution of each opcode. This optimization is the No. 81 parameter of the TRON network. After Cleobulus is deployed, it is disabled by default and can be enabled through governance voting. TIP: https://github.com/tronprotocol/tips/blob/master/tip-653.md Source Code: https://github.com/tronprotocol/java-tron/pull/5837","title":"1. Adjust energy cost for some opcodes in TVM"},{"location":"releases/history/#other-changes_2","text":"","title":"Other Changes"},{"location":"releases/history/#1-optimize-synchronization-logic-among-threads","text":"The Cleobulus version optimizes the block request logic and no longer reads fetchBlockInfo data when printing logs, improving the stability of concurrent access to fetchBlockInfo object by multiple threads. Additionally, Cleobulus optimizes the synchronization block processing logic. Regardless of whether the syncBlockToFetch queue is empty, the node can process block data normally, improving the efficiency of block synchronization. Source Code: https://github.com/tronprotocol/java-tron/pull/5831 https://github.com/tronprotocol/java-tron/pull/5832","title":"1. Optimize synchronization logic among threads"},{"location":"releases/history/#2-remove-redundant-code","text":"The Cleobulus version removes redundant code in the block processing logic, improving the readability and maintainability of the code. Source Code: https://github.com/tronprotocol/java-tron/pull/5834 Seek virtue and eschew vice. ---Cleobulus","title":"2. Remove redundant code"},{"location":"releases/history/#greatvoyage-v474bias","text":"The Bias version introduces several important optimizations and updates, including a new proposal to optimize the performance of voting reward withdrawal; the refactored Gradle dependency reduces the complexity of core protocol development; support for gRPC reflection services and optimized logging system brings a more friendly and convenient development experience to users. Please find the details below.","title":"GreatVoyage-v4.7.4(Bias)"},{"location":"releases/history/#core_2","text":"","title":"Core"},{"location":"releases/history/#1-optimize-voting-reward-withdrawal-performance","text":"TIP-465 aims to improve the calculation performance of TRON voting rewards. By recording the single-vote cumulative reward value of each super representative in each maintenance period, the time complexity of voting reward calculation can be reduced from linear time to constant time. The TIP-465 has been implemented as early as the Socrates version, and No. 82 proposal based on TIP-465 has been officially adopted at 2023-01-20 14:00:00. However, this proposal only optimizes the calculation performance of voting rewards generated after the proposal takes effect (constant time complexity), while the calculation performance of voting rewards generated before the proposal takes effect is still low (linear time complexity). The Bias version optimizes the calculation performance of voting rewards generated before the No.82 proposal takes effect. It calculates the single-vote cumulative reward value of each super representative in each maintenance period before the No.82 proposal takes effect in advance through background tasks, and saves the calculation results to the database. This will make the calculation performance of voting rewards generated before and after the No. 82 proposal takes effect consistent, so that any transaction involving reward withdrawal can complete the reward calculation within a constant time, speeding up the execution speed of transactions related to voting rewards withdrawal, improving network throughput. This optimization is the No. 79 parameter of the TRON network. After Bias is deployed, it is turned off by default and can be enabled through governance voting. TIP: https://github.com/tronprotocol/tips/issues/635 Source Code: https://github.com/tronprotocol/java-tron/pull/5406 https://github.com/tronprotocol/java-tron/pull/5654 https://github.com/tronprotocol/java-tron/pull/5683 https://github.com/tronprotocol/java-tron/pull/5742 https://github.com/tronprotocol/java-tron/pull/5748","title":"1. Optimize voting reward withdrawal performance"},{"location":"releases/history/#2-add-check-function-for-the-number-of-unsolidified-blocks","text":"The block solidification mechanism of the TRON network is: a block can be solidified only after it is confirmed by 70% of the super representatives, that is, the block data is written to the disk and the data cannot be changed. Blocks that cannot be solidified are always stored in memory. If the number of unsolidified blocks continues to increase, it may cause memory exhaustion and the node to stop running. The Bias version adds a check function for the number of unsolidified blocks. When it is detected that the number of unsolidified blocks of a node reaches the threshold, the node will stop broadcasting transactions to avoid too many transactions that cannot be solidified in the network. This can not only reduce the node's memory usage, but also reduce the number of transactions in the block, improve the block execution speed, and facilitate the rapid recovery of the network in the later period.. This feature is disabled by default. Node deployers can turn on it and configure the threshold through the below configuration items. node.unsolidifiedBlockCheck = true node.maxUnsolidifiedBlocks = 54 Source Code: https://github.com/tronprotocol/java-tron/pull/5643","title":"2. Add check function for the number of unsolidified blocks"},{"location":"releases/history/#api","text":"","title":"API"},{"location":"releases/history/#1-supply-block_unsolidified-in-code-for-walletbroadcasttransaction-api","text":"The Bias version adds a check function for the number of unsolidified blocks. When it is detected that the number of unsolidified blocks of a node reaches the threshold, the node will stop broadcasting transactions. In order to provide better feedback on the node status, the Bias version adds a new return code BLOCK_UNSOLIDIFIED for the /wallet/broadcasttransaction API. This code indicates that the node has too many unsolidified blocks and the number has exceeded the threshold, the node cannot broadcast the transaction. Source Code: https://github.com/tronprotocol/java-tron/pull/5643","title":"1. Supply BLOCK_UNSOLIDIFIED in code for /wallet/broadcasttransaction API"},{"location":"releases/history/#other-changes_3","text":"","title":"Other Changes"},{"location":"releases/history/#1-add-field-codeversion-to-hellomessage-to-declare-code-version","text":"Bias adds a new field codeVersion representing version information in the HelloMessage message, so that nodes can obtain the version information of the other node during the node discovery phase, which is beneficial to troubleshooting and locating problems later. TIP: https://github.com/tronprotocol/tips/issues/621 Source Code: https://github.com/tronprotocol/java-tron/pull/5584 https://github.com/tronprotocol/java-tron/pull/5667","title":"1. Add field codeVersion to HelloMessage to declare code version"},{"location":"releases/history/#2-bump-libp2p-to-version-221","text":"Bias upgrades the network module to libp2p v2.2.1. The main contents of this version include: bump snappy-java dependency library to v1.1.10.5, add LAN IP acquisition logic, optimize handshake logic, and adjust some log levels. Source Code: https://github.com/tronprotocol/java-tron/pull/5692","title":"2. Bump libp2p to version 2.2.1"},{"location":"releases/history/#3-bump-jetty-to-9453v20231009","text":"The Bias version bumps the jetty dependency library to v9.4.53.v20231009. Source Code: https://github.com/tronprotocol/java-tron/pull/5571","title":"3. Bump jetty to 9.4.53.v20231009"},{"location":"releases/history/#4-refactor-gradle-dependencies","text":"The java-tron code is divided into multiple modules, each module has its own dependencies, but currently there are situations where dependencies are declared multiple times in multiple modules. The Bias version reconstructs the Gradle dependencies of each module and deletes duplicate dependency statements, making the code dependencies clearer and enabling unified management of dependencies to reduce maintenance costs. Source Code: https://github.com/tronprotocol/java-tron/pull/5625","title":"4. Refactor Gradle dependencies"},{"location":"releases/history/#5-provide-grpc-reflection-service","text":"Starting from the Bias version, the gRPC reflection service is supported. Users can directly use the gRPCurl command line tool to make the gPRC interface calls, which improves the ease of use of the gRPC interface. This feature needs to be enabled through the following configuration items: node.rpc.reflectionService=true Source Code: https://github.com/tronprotocol/java-tron/pull/5583","title":"5. Provide gRPC reflection service"},{"location":"releases/history/#6-delete-the-litefullnodetool-related-code-under-the-framework-module","text":"In order to facilitate tool maintenance and developer use, TRON has launched the Toolkit.jar toolbox, which includes various TRON development tools. As early as the Aristotle version, the code related to the LiteFullNode data clipping tool has been integrated into the Toolkit toolbox (located under the plugin module), and Toolkit can completely replace LiteFullNodeTool (located under the framework module). Therefore, the Bias version deletes the LiteFullNodeTool related code under the framework module, which not only reduces code redundancy, but also makes the division of functional modules clearer. The commands to use the LiteFullNode data pruning function in the Toolkit are as follows: $ java -jar Toolkit.jar db lite Source Code: https://github.com/tronprotocol/java-tron/pull/5711","title":"6. Delete the LiteFullNodeTool related code under the framework module"},{"location":"releases/history/#7-remove-configuration-item-nodediscoverybindip","text":"Bias upgrades libp2p to v2.2.1. That makes the node can obtain the node LAN IP directly through libp2p without manual configuration by the deployer. Therefore, the Bias version deletes the no longer used configuration item node.discovery.bind.ip , simplifying the configuration complexity. Source Code: https://github.com/tronprotocol/java-tron/pull/5597 https://github.com/tronprotocol/java-tron/pull/5750","title":"7. Remove configuration item node.discovery.bind.ip"},{"location":"releases/history/#8-remove-redundant-ci-scripts","text":"The Bias version removes project build scripts that are no longer used, including checkStyle.sh, codecov.sh, querySonar.sh, sonar.sh. Source Code: https://github.com/tronprotocol/java-tron/pull/5580","title":"8. Remove redundant CI scripts"},{"location":"releases/history/#9-initialize-the-api-service-first-during-the-node-startup","text":"The Bias version adjusts the start order of each service, starts the node API service first, and then starts the P2P service and consensus service. This prevents the API service port from being occupied by other services. Source Code: https://github.com/tronprotocol/java-tron/pull/5711","title":"9. Initialize the API service first during the node startup"},{"location":"releases/history/#10-optimize-log","text":"The Bias version optimizes node logs, adjusts some log levels according to business logic, simplifies expected exception logs, and elaborates unexpected exception logs to facilitate problem location. Source Code: https://github.com/tronprotocol/java-tron/pull/5624 https://github.com/tronprotocol/java-tron/pull/5601 https://github.com/tronprotocol/java-tron/pull/5660 https://github.com/tronprotocol/java-tron/pull/5687 https://github.com/tronprotocol/java-tron/pull/5697","title":"10. Optimize log"},{"location":"releases/history/#11-add-synchronization-control-when-writing-to-zeromq","text":"java-tron supports subscribing to events through the built-in ZeroMQ message queue. However, when multiple threads concurrently send events to the ZeroMQ, write exception errors may occur. The Bias version adds synchronization control when writing to ZeroMQ, ensuring the order of concurrent access between threads. Source Code: https://github.com/tronprotocol/java-tron/pull/5536","title":"11. Add synchronization control when writing to ZeroMQ"},{"location":"releases/history/#12optimize-unexpected-exception-capture-process-of-scalingfactor-in-walletcreateshieldedcontractparameters-api","text":"The Bias version optimizes the /wallet/createshieldedcontractparameters interface and adds a legality check for the anonymous contract scaling factor parameter scalingFactor , which must be a positive integer. Source Code: https://github.com/tronprotocol/java-tron/pull/5746 Be slow in considering, but resolute in action. ---Bias","title":"12.Optimize unexpected exception capture process of scalingFactor in /wallet/createshieldedcontractparameters API."},{"location":"releases/history/#greatvoyage-v4731solon","text":"Solon is a non-mandatory upgrade version that will introduce two important updates. A more stable HTTP interface and Lite FullNode data pruning tool bring users a more friendly development experience. Please find the details below.","title":"GreatVoyage-v4.7.3.1(Solon)"},{"location":"releases/history/#other-changes_4","text":"","title":"Other Changes"},{"location":"releases/history/#1-more-stable-walletgetnodeinfo-interface","text":"In versions prior to Solon, there was a very small probability that an exception might be triggered when calling the /wallet/getnodeinfo interface due to the concurrent execution of block data object serialization. Therefore, the Solon version modified the serialization logic of block data to ensure the correctness of block data acquisition and make the /wallet/getnodeinfo interface more stable. Source Code: https://github.com/tronprotocol/java-tron/pull/5594","title":"1. More stable /wallet/getnodeinfo interface"},{"location":"releases/history/#2-optimize-lite-fullnode-data-pruning-tool","text":"In order to solve the problem of node database corruption caused by the abnormal shutdowns, starting from Socrates version, the Checkpoint V2 mechanism was introduced. The V2 mechanism saves multiple checkpoints on the disk, corresponding to multiple solidified block data, which is used to restore the data when the node database is damaged. The Lite FullNode data pruning tool should also be compatible with the checkpoint v2 version. When a node stops abnormally, the pruning tool can also restore the node data and complete the data pruning. Therefore, Solon optimized the Lite FullNode data pruning tool in the toolkit. When it is found that checkpoint v2 is used, the data will be queried from the checkpoint v2 database, so that even if the node stops abnormally, the tool can restore and prune the data, which improves the usability of the Lite FullNode data pruning tool. Source Code: https://github.com/tronprotocol/java-tron/pull/5658 Do not counsel what is most pleasant, but what is best. ---Solon","title":"2. Optimize Lite FullNode data pruning tool"},{"location":"releases/history/#greatvoyage-v473chilon","text":"Chilon is a non-mandatory upgrade version that will introduce multiple important updates. Richer gRPC interfaces and faster node startup speed, bring users a more friendly development experience. Optimized disconnection strategy and synchronization process improve the stability of the connection among nodes. The optimized transaction processing logic and database query performance elevate the transaction packaging efficiency and network throughput. Please find the details below.","title":"GreatVoyage-v4.7.3(Chilon)"},{"location":"releases/history/#core_3","text":"","title":"Core"},{"location":"releases/history/#1-add-grpc-interfaces-for-resource-price-and-transaction-memo-fee-query","text":"Chilon adds three new gRPC interfaces. Users can obtain historical bandwidth unit price through getBandwidthPrices API, obtain historical energy unit price through getEnergyPrices API, and obtain transaction memo fee through getMemoFee API. These new gRPC APIs further improve the developer experience. TIP: https://github.com/tronprotocol/tips/blob/master/tip-586.md Source Code: https://github.com/tronprotocol/java-tron/pull/5412","title":"1. Add gRPC interfaces for resource price and transaction memo fee query"},{"location":"releases/history/#2-supplement-disconnect-reasons","text":"When a node fails to process a message from a peer, it may initiatively disconnect from the peer. However, in previous versions of Chilon, in some cases, the node did not inform the other node of the reason for the disconnection, which was not conducive to the analysis and troubleshooting of the connection issue by the other node. The Chilon version supplements two reasons for disconnection. Node will send the disconnection reasons to the other node before dropping the connection, so as to facilitate efficient handling of node connection problems. TIP: https://github.com/tronprotocol/tips/blob/master/tip-592.md Source Code: https://github.com/tronprotocol/java-tron/pull/5392","title":"2. Supplement disconnect reasons"},{"location":"releases/history/#3-discard-transactions-from-bad-peers-instead-of-disconnected-peers","text":"For a broadcast transaction, the node must determine whether to process it. In previous versions of Chilon, the basis for judgment is whether the transaction comes from a disconnected peer. If so, the transaction will be discarded. However, whether to execute a broadcasted transaction should not be judged based on whether it maintains a connection with the other node, but whether the other node is a malicious node. Therefore, the Chilon version optimizes the transaction processing logic and no longer discards transactions from disconnected peers. Instead, it only discards transactions broadcasted from the nodes that have sent illegal transactions. This change improves transaction broadcast and packaging efficiency. Source Code: https://github.com/tronprotocol/java-tron/pull/5440","title":"3. Discard transactions from bad peers instead of disconnected peers"},{"location":"releases/history/#4-optimize-stake-20-codes-and-error-messages","text":"The Chilon version standardizes Stake 2.0-related code and simplifies complex functions\uff0c improving the simplicity and readability of the code. Source Code: https://github.com/tronprotocol/java-tron/pull/5426","title":"4. Optimize Stake 2.0 codes and error messages"},{"location":"releases/history/#5-accelerate-bloomfilter-initialization-for-transaction-cache","text":"When a node starts, it will load the transactions of the latest 65536 blocks from the database to build a transaction cache bloomFilter, which is used to determine duplicate transactions when verifying transactions later. In previous versions of Chilon, the loading time of the transaction cache accounted for more than 70% of the node startup time. In order to accelerate the speed of the transaction cache bloomFilter initialization, the Chilon version persists in the transaction cache bloomFilter. When the node exits normally, the transaction cache bloomFilter-related data will be stored on the disk. When the node restarts, there will be no need to read the transaction information in the recent blocks, but directly load the bloomFilter data into the memory, speeding up the initialization process of the transaction cache bloomFilter and greatly improving the node startup speed. This feature is disabled by default and can be enabled through the node configuration item storage.txCache.initOptimization = true . Source Code: https://github.com/tronprotocol/java-tron/pull/5394 https://github.com/tronprotocol/java-tron/pull/5491 https://github.com/tronprotocol/java-tron/pull/5505 https://github.com/tronprotocol/java-tron/pull/5523 https://github.com/tronprotocol/java-tron/pull/5543","title":"5. Accelerate bloomFilter initialization for transaction cache"},{"location":"releases/history/#6-fix-concurrency-issues-when-generating-chain-inventory","text":"In previous versions of Chilon, when node A requests to synchronize blocks from node B, it first sends its own chain summary to node B. After receiving it, node B generates node A's missing block list according to the local chain and returns the list to node A. The list generation process is: first, find the maximum common block height of the two nodes from the chain summary of node A, and then add the IDs of several blocks starting from the maximum common block height to the missing blocks list of node A. Since the generation of the missing block list and chain switching are executed concurrently, if chain switching occurs when generating the missing block list, it may happen that after the maximum common block height is obtained, the corresponding block id cannot be obtained, causing the generated missing block list does not match the chain summary of node A, resulting in dropping the node connection. The Chilon version optimizes the generation logic of the missing block list. When the ID of the highest common block previously calculated cannot be obtained, the node will retry to ensure that the returned list contains the highest common block information, which improves the stability of connections between nodes. Source Code: https://github.com/tronprotocol/java-tron/pull/5393 https://github.com/tronprotocol/java-tron/pull/5532","title":"6. Fix concurrency issues when generating chain inventory"},{"location":"releases/history/#7-correct-resource-disorder-closure-behavior-on-kill-15","text":"In previous versions of Chilon, when the service is shut down, abnormal errors may occur due to the resource release order issue. The Chilon version optimizes the service shutdown logic. When the kill -15 command is used to shut down the service, it can ensure the accuracy of the release sequence of various types of resources so that the node can exit normally. Source Code: https://github.com/tronprotocol/java-tron/pull/5410 https://github.com/tronprotocol/java-tron/pull/5425 https://github.com/tronprotocol/java-tron/pull/5421 https://github.com/tronprotocol/java-tron/pull/5429 https://github.com/tronprotocol/java-tron/pull/5447","title":"7. Correct resource disorder closure behavior on kill -15"},{"location":"releases/history/#api_1","text":"","title":"API"},{"location":"releases/history/#1-optimize-http-interface-monitoring","text":"Chilon optimizes the HTTP interface monitoring, it no longer counts requests for APIs that are not supported by the node, making the statistics of successful or failed HTTP interface requests more accurate. Source Code: https://github.com/tronprotocol/java-tron/pull/5332","title":"1. Optimize HTTP interface monitoring"},{"location":"releases/history/#2-provide-uniform-rate-limitation-configuration-for-all-http-and-grpc-apis","text":"java-tron supports interface rate limiting. The default qps (queries per second) of each interface is 1000. Node deployers can also limit the traffic of a particular interface. However, in previous versions of Chilon, it was not supported to modify the default qps of each interface, that way, If you want to configure the default qps of each interface to 2000, you need to configure the current limit for each interface respectively. The Chilon version adds a new default interface rate limit configuration rate.limiter.global.api.qps . With this configuration, users can change the rate limit of all interfaces, simplifying the configuration complexity. rate.limiter.global.api.qps = 1000 Source Code: https://github.com/tronprotocol/java-tron/pull/5502","title":"2. Provide uniform rate limitation configuration for all HTTP and gRPC APIs"},{"location":"releases/history/#3-optimize-http-interface-parameter-parsing","text":"In previous versions of Chilon, for interfaces involving reward queries, if the request passes in invalid parameters or non-JSON formatted parameters, the node will throw an exception. The Chilon version optimizes the HTTP interface parameter parsing logic and returns a 0 value or error message for requests with incorrect parameter formats. Source Code: https://github.com/tronprotocol/java-tron/pull/5367 https://github.com/tronprotocol/java-tron/pull/5483","title":"3. Optimize HTTP interface parameter parsing"},{"location":"releases/history/#4-add-solidity-query-interfaces-of-resource-unit-price","text":"Chilon supplements query interfaces of resource unit price for solidity, they are /walletsolidity/getbandwidthprices and /walletsolidity/getenergyprices . Source Code: https://github.com/tronprotocol/java-tron/pull/5412 https://github.com/tronprotocol/java-tron/pull/5451 https://github.com/tronprotocol/java-tron/pull/5437","title":"4. Add solidity query interfaces of resource unit price"},{"location":"releases/history/#5-optimize-the-processing-logic-of-some-http-interfaces","text":"The Chilon version optimizes some HTTP interfaces to make it consistent with get and post request processing, including parameters check and return value. The interfaces include /wallet/getavailableunfreezecount , /wallet/getcanwithdrawunfreezeamount , /wallet/getcandelegatedmaxsize , and /wallet/getavailableunfreezecount . Source Code: https://github.com/tronprotocol/java-tron/pull/5408","title":"5. Optimize the processing logic of some HTTP interfaces"},{"location":"releases/history/#other-changes_5","text":"","title":"Other Changes"},{"location":"releases/history/#1-add-check-for-expired-transactions-when-fetching-transactions","text":"Chilon adds a check for expired transactions in the broadcast list it receives. For transactions timed out in the list, it will no longer make requests to its remote node, avoiding node connections being disconnected due to transaction processing failures, and improving node connection stability. Source Code: https://github.com/tronprotocol/java-tron/pull/5460","title":"1. Add check for expired transactions when fetching transactions"},{"location":"releases/history/#2-fix-concurrency-issue-of-getheadblockid-method","text":"During the block synchronization process, the node must obtain the BlockId of the latest block through the getHeadBlockId method. In previous versions of Chilon, the BlockId was obtained through the block number and hash of the latest block. However, due to the concurrent execution of the latest block data acquisition thread and the update thread, getHeadBlockId may start to obtain the BlockId of the latest block before the block number and hash value of the latest block have been updated, which makes it possible for the getHeadBlockId method to return an abnormal BlockId value. Chilon optimizes the BlockId acquisition logic of the latest block, and getHeadBlockId only obtains BlockId through the hash value of the latest block, ensuring the correctness of the block ID acquisition. Source Code: https://github.com/tronprotocol/java-tron/pull/5403","title":"2. Fix concurrency issue of getHeadBlockId method"},{"location":"releases/history/#3-delete-unused-network-configurations","text":"Chilon deleted four unused network parameters, including the three configuration items below, simplifying the complexity of using for developers. node.discovery.public.home.node node.discovery.ping.timeout node.p2p.pingInterval Source Code: https://github.com/tronprotocol/java-tron/pull/5441","title":"3. Delete unused network configurations"},{"location":"releases/history/#4-obtain-external-ip-through-libp2p","text":"In previous versions of Chilon, when a node starts, the external IP address would be obtained repeatedly, and java-tron and lib2p2 each perform the IP acquisition once. To improve the node startup speed, Chilon optimizes the external IP acquisition logic. When a node starts, it directly calls the libp2p module to obtain the external IP, and it can directly assign the external IP to libp2p and repeated obtaining is avoided. Source Code: https://github.com/tronprotocol/java-tron/pull/5407","title":"4. Obtain external IP through Libp2p"},{"location":"releases/history/#5-add-address-parsing-for-stake-related-transactions-in-event-subscription","text":"Chilon optimizes the event subscription service and adds the parsing of addresses in stake-related transactions, so that event subscribers can obtain address information in stake, resource delegation, and other transactions. Source Code: https://github.com/tronprotocol/java-tron/pull/5419","title":"5. Add address parsing for stake-related transactions in event subscription"},{"location":"releases/history/#6-adjust-default-number-of-cpu-cores-used-in-signature-validation","text":"In previous versions of Chilon, nodes used 1/2 of the system CPU cores for parallel signature verification by default. To improve the performance of node synchronization and block processing, the Chilon version changed the default value of the number of threads used for signature verification to the maximum number of CPU cores to maximize signature verification performance. Node deployers can also adjust the number of signature verification threads through the node.validateSignThreadNum configuration item. Source Code: https://github.com/tronprotocol/java-tron/pull/5396","title":"6. Adjust default number of CPU cores used in signature validation"},{"location":"releases/history/#7-migrate-litefullnode-tool-related-unit-test-cases-to-plugins-module","text":"In the previous version, the code related to the LiteFullNode tool has been integrated into the toolkit in the plugins module. The Chilon version has further integrated and moved the test cases related to the LiteFullNode tool from the framework module to the plugins module. Not only does It make the code structure clearer but also improves the execution efficiency of test cases. Source Code: https://github.com/tronprotocol/java-tron/pull/5475 https://github.com/tronprotocol/java-tron/pull/5482","title":"7. Migrate LiteFullNode tool related unit test cases to Plugins module"},{"location":"releases/history/#8-enhance-query-performance-of-properties-db","text":"During the block processing process, nodes access the properties database more frequently. Better properties database query performance will improve the processing speed of the block. Since the property data volume is small and updates are infrequent, Chilon optimizes the query performance of the properties database, loading all data into the first-level cache to maximize data query performance and thereby improve transaction processing capabilities. Source Code: https://github.com/tronprotocol/java-tron/pull/5378 Do not desire impossible. ---Chilon","title":"8. Enhance query performance of properties DB"},{"location":"releases/history/#greatvoyage-v472periander","text":"The Periander version introduces several important optimizations and updates, adding two governance proposals to optimize Stake 2.0, greatly improving the flexibility of the TRON stake mechanism; adding a governance proposal to implement EIP-3855 PUSH0 Instruction, which not only ensures the compatibility of TRON and Ethereum at the virtual machine level but also reduces the cost of using TRON smart contracts; more friendly smart contracts interfaces to improve the convenience of smart contract development; the P2P network module of TRON has been fully upgraded to support IPV6 protocol, node discovery via DNS, message compression, etc., greatly improving the performance of TRON network infrastructure. Please see the details below.","title":"GreatVoyage-v4.7.2(Periander)"},{"location":"releases/history/#core_4","text":"","title":"Core"},{"location":"releases/history/#1-upgrade-libp2p-to-v120","text":"Libp2p is a Java version open-source P2P protocol framework developed by the java-tron core developers and anyone can develop distributed applications with Libp2p, as the underlying P2P network of java-tron is implemented based on Libp2p. In order to further improve the underlying network performance of java-tron, Periander upgrades the Libp2p v0.1.4 with the v1.2.0 version. Libp2p v1.2.0 has the following new features\uff1a Support IPv6 protocol IPV6 protocol is the next-generation Internet IP protocol that replaces IPV4. While solving the problem of IP4 address exhaustion, the network performance has also been improved. Currently, mainstream server operating systems support both IPv4 and IPv6. Therefore, Libp2p v1.2.0 supporting dual protocol stacks not only improves the network performance of TRON but also enables nodes that either support one of the protocols or support both of them to join the TRON network. This function is disabled by default and needs to be enabled through the node configuration item node.enableIpv6 = true . TIP: https://github.com/tronprotocol/tips/blob/master/tip-549.md Node Discovery via DNS Libp2p v1.2.0 supports node discovery through DNS so that nodes can use not only the Kademlia algorithm but also the DNS servers for node discovery. The nodes supporting the feature can publish nodes to the DNS service and use DNS for node discovery. These functions need to be enabled through node configuration items, see below: Publish Nodes to DNS The node supports publishing known nodes to the DNS service for other nodes to use. There are two ways to publish nodes: dynamic publishing and static publishing. Dynamic publishing is the node periodically publishing the remote node IP in the K-bucket to DNS. Static publishing is to publish the nodes in the dns.staticNodes configuration item to the DNS service at one time, without updating later. If dns.staticNodes is not empty, it means to adopt the static publishing way, otherwise, the dynamic publishing way. node.dns { # enable or disable dns publish, default false publish = true # dns domain to publish nodes, required if publish is enable dnsDomain = \"...\" # dns private key used to publish, required if publish is enable, hex string of length 64 dnsPrivate = \"...\" # dns server to publish, required if publish is enable, only \u201daws\u201d or \u201caliyun\u201d is support serverType = \"...\" # access key id of aws or aliyun api, required if publish is enable, string accessKeyId = \"...\" # access key secret of aws or aliyun api, required if publish is enable, string accessKeySecret = \"...\" # if publish is enable and serverType is aliyun, it's endpoint of aws dns server, string aliyunDnsEndpoint = \"...\" # if publish is enable and serverType is aws, it's region of aws api, such as \"eu-south-1\", string awsRegion = \"...\" # if publish is enable and serverType is aws, it's host zone id of aws's domain, string awsHostZoneId = \"...\" # static nodes to published on dns staticNodes = [ # Sample entries: # \"ip:port\", # \"ip:port\" ] # the range is from 1 to 5 maxMergeSize = 2 changeThreshold = 0.001 } Node discovery via DNS To use the function of node discovery via DNS, you need to configure the following configuration items: node.dns { # DNS URL to get nodes, URL format tree://{pubkey}@{domain}, default empty treeUrls = [......] } TIP: https://github.com/tronprotocol/tips/blob/master/tip-548.md Connection precheck before P2P communication Libp2p v0.1.4 chooses whether to establish a connection and synchronize data with a remote node according to the order of the update time of the node. In actual scenarios, the connection may be rejected by the other party for some reason, which will affect data synchronization. In order to improve the efficiency of establishing connections between nodes, Libp2p v1.2.0 supports node connection precheck before the P2P communication, which can check whether the other node can accept the connection in advance. The node tries to establish a TCP connection with the other node in advance to know whether it is online. If the TCP connection is established, a pair of interactive messages are used to obtain the relevant information of the other node, including the Libp2p version, the maximum number of connections, the current number of connections, etc., to determine whether the other node can still accept connections. This function avoids invalid connection requests and greatly improves the efficiency of connection establishment. This function is disabled by default and needs to be enabled through the node configuration item node.nodeDetectEnable . TIP: https://github.com/tronprotocol/tips/blob/master/tip-547.md P2P message Snappy compression Libp2p v1.2.0 supports TCP message compression. The node compresses the TCP message before transmission and decompresses it after receiving the compressed message. After testing, the time consumption for message compression and decompression is short, less than 1 ms, and this function can significantly reduce the network bandwidth occupation of message transmission, which can save about 40% of the bandwidth. TIP: https://github.com/tronprotocol/tips/blob/master/tip-550.md Source Code: https://github.com/tronprotocol/java-tron/pull/5017","title":"1. Upgrade Libp2p to v1.2.0"},{"location":"releases/history/#2-support-canceling-unstaking-in-stake-20","text":"In the versions previous to Periander, after initiating an unstaking transaction through the HTTP API in Stake 2.0, the user needs to wait for a 14-day waiting period before withdrawing the corresponding funds, and the unstaking cannot be canceled. The Periander version optimizes the Stake 2.0 mechanism, allowing users to cancel unstakings that have been initiated but not completed yet. When canceling unstakings, all unstaked funds still in the waiting period will be re-staked, and the resource obtained through the re-staking remains the same as before. Unstakings that exceeded the 14-day waiting period cannot be canceled, and this part of the unstaked funds will be automatically withdrawn to the owner\u2019s account. This feature is controlled by the No. 77 parameter of the TRON network, which needs to be enabled through governance voting. After it is enabled, the nodes will support a new transaction type, and users can use the wallet/cancelallunfreezev2 API to create an unstaking canceling transaction: curl -X POST http://127.0.0.1:8090/wallet/cancelallunfreezev2 -d \\ '{ \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\", \"visible\": true }' TIP: https://github.com/tronprotocol/tips/blob/master/tip-541.md Source Code: https://github.com/tronprotocol/java-tron/pull/5230 https://github.com/tronprotocol/java-tron/pull/5260 https://github.com/tronprotocol/java-tron/pull/5279","title":"2. Support canceling unstaking in Stake 2.0"},{"location":"releases/history/#3-resource-delegating-supports-customizable-lock-period","text":"In the versions previous to Periander, users can choose whether to lock or not when delegating resources. If chosen to lock, the resource delegating to the recipient address could not be canceled within 3 days, which is more conducive for users participating in the resource rental market. The Periander version further optimizes the lock time when delegating resources, changing it from the current fixed value of 3 days to a configurable length of time for users according to their needs. This feature is controlled by the No.78 parameter of the TRON network. It needs to be enabled through governance voting. When enabling the proposal, a time parameter needs to be specified, indicating the maximum value of the lock time that can be set. Once enabled, a new parameter, lock_period , will be added to wallet/delegateresource API: curl -X POST http://127.0.0.1:8090/wallet/delegateresource -d \\ '{ \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\", \"receiver_address\": \"TPswDDCAWhJAZGdHPidFg5nEf8TkNToDX1\", \"balance\": 1000000, \"resource\": \"ENERGY\", \"lock\": true, \"lock_period\": 86400, \"visible\": true }' lock: whether to lock the delegating lock_period: lock time, only when lock is true , this field is valid. The owner cannot cancel the delegating before the lock time is up. The unit of lock_period is block interval(3 seconds). This field indicates the time of how many blocks will be produced from the moment the transaction is executed. So the above 86400 means locking for 259200 seconds (3 days). lock_period cannot exceed the maximum lock period (value of the No.78 network parameter). The default value of lock_period is 86400, which is 3 days. That is, when lock is true , if lock_period is not specified or set to 0, lock_period will be set to 86400 by default, which will ensure compatibility before and after this feature takes effect. In addition, the value of lock_period cannot be lower than the remaining lock time of this type of resource that was previously delegated to the same recipient address, and the value will overwrite the remaining lock time of the previous delegating. For example, user A delegates 100 energy shares to B, and lock_period is set to 57600 (2 days), and so that the remaining lock time after 1 day is 28800. At this time, when A delegates energy to B again, if choose to lock, lock_period should be set to at least 28800 (1 day), otherwise, an exception error will be thrown when creating the delegating transaction: \u201cThe lock period for ENERGY this time cannot be less will be thrown when creating a proxy transaction than the remaining time[9600000ms] of the last lock period for ENERGY!.\u201d TIP: https://github.com/tronprotocol/tips/blob/master/tip-542.md Source Code: https://github.com/tronprotocol/java-tron/pull/5255","title":"3. Resource delegating supports customizable lock period"},{"location":"releases/history/#4-optimize-effective-peer-acquiring-strategy","text":"When the latest block heights of all connected remote nodes are lower than a node\u2019s, then the node will not be able to synchronize blocks from the remote nodes, nor broadcast the transactions. We call this kind of node an \"island node\". In fact, the island node has no valid peer node. In order to enable nodes to connect to effective peer nodes, the Periander version optimizes the node acquisition strategy and adds island node detection. If a node finds that it is in an island state, it will look for a node with a higher header block than the local one and establish a connection with it. This strategy prevents the node from being in an isolated state for a long time, ensures that the node can quickly replenish effective connections, enables it to obtain new blocks and broadcast transactions, and improves the stability of the node. This function is disabled by default and needs to be enabled by setting the node configuration item node.effectiveCheckEnable . Source Code: https://github.com/tronprotocol/java-tron/pull/5088","title":"4. Optimize effective peer-acquiring strategy"},{"location":"releases/history/#tvm_1","text":"","title":"TVM"},{"location":"releases/history/#1-implement-eip-3855-push0-instruction","text":"EIP-3855 is included in the Shanghai upgrade of Ethereum, which adds a new instruction called PUSH0 to the Ethereum Virtual Machine (EVM) to reduce the gas cost of smart contract transactions, and Periander also adds a new governance proposal to be compatible with EIP-3855. On one hand, it can ensure the compatibility between TRON and Ethereum at the virtual machine level, and on the other hand, it also reduces the energy cost of using smart contracts on TRON as well. TIP: https://github.com/tronprotocol/tips/blob/master/tip-543.md Source Code: https://github.com/tronprotocol/java-tron/pull/5175","title":"1. Implement EIP-3855 PUSH0 Instruction"},{"location":"releases/history/#api_2","text":"","title":"API"},{"location":"releases/history/#1-add-api-global-rate-limiter","text":"Limiting the API access rate can not only effectively allocate node resources, but also ensure the stable running of a node. In previous versions of Periander, a rate limiter only affected a single interface. You can set the maximum number of accesses per second for an interface, the maximum number of accesses per second for an IP to this interface, and the number of concurrent accesses allowed to this interface. But there is no global rate limiter for all interfaces. In addition to the original rate limit control function for individual interfaces, the Periander version adds a global rate limit for all interfaces. The overall traffic of all HTTP, gRPC and JSON-RPC interfaces can be limited through the configuration item rate.limiter.global.qps , and the access rate of an IP to all interfaces can be limited through rate.limiter.global.ip.qps . # QPS rate limit for all interfaces rate.limiter.global.qps =10 # QPS rate limit to all interfaces from the same IP address rate.limiter.global.ip.qps = 5 Source Code: https://github.com/tronprotocol/java-tron/pull/5093","title":"1. Add API global rate limiter"},{"location":"releases/history/#2-add-data-to-http-interfaces-for-smart-contract-interaction","text":"The Periander version optimizes the HTTP smart contract calling interfaces triggersmartcontract , triggerconstantcontract and estimateenergy , and adds a data parameter to them. This optimization not only realizes the contract call directly through the data field in the transaction but also enables the triggerconstantcontract and estimateenergy interfaces to estimate the energy consumption of smart contract deployment transactions, which greatly improves the convenience of smart contract development. Calling contract using function_selector and parameter curl --request POST \\ --url https://api.shasta.trongrid.io/wallet/triggersmartcontract \\ --header 'accept: application/json' \\ --header 'content-type: application/json' \\ --data ' { \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\", \"contract_address\": \"TG3XXyExBkPp9nzdajDZsozEu4BkaSJozs\", \"function_selector\": \"balanceOf(address)\", \"parameter\": \"000000000000000000000000a614f803b6fd780986a42c78ec9c7f77e6ded13c\", \"visible\": true } ' Calling contract through data curl --request POST \\ --url https://api.shasta.trongrid.io/wallet/triggersmartcontract \\ --header 'accept: application/json' \\ --header 'content-type: application/json' \\ --data ' { \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\", \"contract_address\": \"TG3XXyExBkPp9nzdajDZsozEu4BkaSJozs\", \"data\": \"70a08231000000000000000000000000a614f803b6fd780986a42c78ec9c7f77e6ded13c\", \"visible\": true }' Estimate energy consumption of contract deployment transaction curl --request POST \\ --url https://api.shasta.trongrid.io/wallet/triggerconstantcontract \\ --header 'accept: application/json' \\ --header 'content-type: application/json' \\ --data ' { \"owner_address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\", \"data\": \"608060405234801561001057600080fd5b50d3801561001d57600080fd5b50d2801561002a57600080fd5b506101c18061003a6000396000f3fe608060405234801561001057600080fd5b50d3801561001d57600080fd5b50d2801561002a57600080fd5b50600436106100455760003560e01c8063f8b2cb4f1461004a575b600080fd5b610064600480360381019061005f919061012a565b61007a565b6040516100719190610170565b60405180910390f35b60008173ffffffffffffffffffffffffffffffffffffffff16319050919050565b600080fd5b600074ffffffffffffffffffffffffffffffffffffffffff82169050919050565b6100ca816100a0565b81146100d557600080fd5b50565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610103826100d8565b9050919050565b600081359050610119816100c1565b610122816100f8565b905092915050565b6000602082840312156101405761013f61009b565b5b600061014e8482850161010a565b91505092915050565b6000819050919050565b61016a81610157565b82525050565b60006020820190506101856000830184610161565b9291505056fea26474726f6e58221220839f9be3efc349a3efd6bb491d0bee7bc34d86313c73f6e6eeddc4719ec69c0064736f6c63430008120033\", \"visible\": true }' TIP: https://github.com/tronprotocol/tips/blob/master/tip-544.md Source Code: https://github.com/tronprotocol/java-tron/pull/5079","title":"2. Add data to HTTP Interfaces for Smart Contract Interaction"},{"location":"releases/history/#3-optimize-getstorageat-interface","text":"In versions previous to Periander, for contracts created by the create2 instruction, the contract data cannot be queried through the getStorageAt interface. This is due to the difference in index construction of contract data in the underlying storage for contracts created using the create instruction and the create2 instruction. The Periander version optimizes the getStorageAt interface, which will select the corresponding method to construct the index according to the way the contract was created to ensure the availability of the getStorageAt interface. Source Code: https://github.com/tronprotocol/java-tron/pull/5061","title":"3. Optimize getStorageAt interface"},{"location":"releases/history/#other-changes_6","text":"","title":"Other Changes"},{"location":"releases/history/#1-optimize-event-forwarding-logic-in-event-subscription","text":"java-tron supports event subscription. In the previous version of Periander, if the solidified transaction event is subscribed, then when the node receives a new block, it would send the transaction information in the latest solidified block to the subscriber. If the network of most SR nodes is unstable, making them unable to synchronize and produce blocks in time, in this case, according to the calculation logic of the latest solidified block of the node, the height of the latest solidified block will not be guaranteed to increase by one each time. So that the latest obtained solidified block forwarded to the subscriber during event forwarding may not be the block next to the one that was forwarded the last time, resulting in data missing. Since the conditions for this problem are very strict, it will basically not appear in the main network. However, to avoid this problem occurring in the test network or private chain, the Periander version optimizes the event forwarding logic in the event subscription and records the height of the solidified block forwarded last time, so when the node receives a new block, it will sequentially send the blocks after the last forwarded solidified block to the subscribers, ensuring the integrity of data forwarding. Source Code: https://github.com/tronprotocol/java-tron/pull/5031","title":"1. Optimize event forwarding logic in event subscription"},{"location":"releases/history/#2-support-dynamic-loading-according-to-nodeactive-and-nodepassive","text":"java-tron supports configuring trusted nodes for the local node with node.active and node.passive . The local node will actively connect to the nodes in node.active and accept the connection request of the nodes in node.passive . By configuring trusted nodes, you can solve the problem that the node has no valid connections or the number of connections is rather small. However, in the previous version of Periander, you need to stop the node first to change the configuration file, and then restart the node after the update is completed. Restarting the node has a certain impact on some applications. Therefore, starting from the Periander version, the dynamic loading of node.active and node.passive configuration items are supported, so that the change of the trusted node can be completed without restarting the local node, which improves the online stability of the node. This function is disabled by default and needs to be enabled by modifying the following node configuration items. node.dynamicConfig.enable=true node.dynamicConfig.checkInterval = 600 Source Code: https://github.com/tronprotocol/java-tron/pull/5090","title":"2. Support dynamic loading according to node.active and node.passive"},{"location":"releases/history/#3-optimize-block-synchronization-logic","text":"The Periander version optimizes the block synchronization logic, ensures the correctness of concurrent execution of the block acquisition thread and block synchronization thread, the block summary obtaining thread and chain switching thread through the lock mechanism, and improves the stability of block synchronization and node connection. Source Code: https://github.com/tronprotocol/java-tron/pull/5094 https://github.com/tronprotocol/java-tron/pull/5097 https://github.com/tronprotocol/java-tron/pull/5102","title":"3. Optimize block synchronization logic"},{"location":"releases/history/#4-normalize-http-urls","text":"The node supports disabling the specified HTTP APIs, and the node deployer can configure the interfaces to which the node will stop providing services through the node.disabledApi . In previous versions of Periander, even if the interface was added to the node.disabledApi list, the node would still respond to non-standard URL requests. The Periander version normalizes the requested URL to ensure the validity of the node.disabledApi list. node.disabledApi= [ \"getaccount\", \"getnowblock2\" ] Source Code: https://github.com/tronprotocol/java-tron/pull/5085","title":"4. Normalize HTTP URLs"},{"location":"releases/history/#5-optimize-block-fetching-logic","text":"After a node requests a block from another node, if it does not receive the block within a certain period of time, the request will be considered as a timeout, and then it will request the block from another node that meets the conditions. Of which, one of the conditions for selecting a node is that the node's block acquisition delay is lower than the block timeout period . Therefore, a low block timeout setting may make the node unable to find other remote nodes, resulting in slow block synchronization or stopping the synchronization. In order to improve block synchronization performance under an unstable network, the Periander version increases the default value of the timeout period for nodes to obtain blocks, from 200ms to 500ms, which not only expands the scope of node selection but also increases the probability of successfully obtaining blocks, greatly improving the efficiency of block synchronization. The node deployer can also adjust the timeout period through the node.fetchBlock.timeout configuration item. Source Code: https://github.com/tronprotocol/java-tron/pull/5106","title":"5. Optimize block fetching logic"},{"location":"releases/history/#6-add-a-new-node-startup-mode","text":"In order to facilitate data backup or data statistics for node deployers, the client supports stopping running under specific conditions. Users can set the conditions for node stop through the node configuration file. When the conditions are met, the node will stop syncing and exit. However, in the versions previous to Periander, the node only supports stopping under certain conditions and does not support the interface query service after stopping, so users cannot call the interface to query the status of the system. Therefore, the Periander version adds a new node startup mode to support data query services without starting the P2P network module. When the node successfully stops under certain conditions, the user can add -p2p- disable true parameter to the command to start the node. At this time, the node will not start the network module, and will not perform node discovery and block synchronization, but will provide interface query services, so that users can query the current system status. Below is the start command: java -jar FullNode.jar -c config.conf --p2p-disable true Source Code: https://github.com/tronprotocol/java-tron/pull/5011","title":"6. Add a new node startup mode"},{"location":"releases/history/#7-upgrade-junit-to-4132","text":"The Periander version upgrades the unit testing framework and upgrades the JUnit dependency library from v4.12 to v4.13.2. Source Code: https://github.com/tronprotocol/java-tron/pull/5244","title":"7. Upgrade JUnit to 4.13.2"},{"location":"releases/history/#8-add-monitoring-metrics-for-json-rpc","text":"The Periander version supports JSON-RPC interface latency monitoring metrics, allowing node deployers to monitor the latency of all types of interfaces. Source Code: https://github.com/tronprotocol/java-tron/pull/5222","title":"8. Add monitoring metrics for JSON-RPC"},{"location":"releases/history/#9-optimize-the-database-module","text":"In versions previous to Periander, for nodes using LevelDB as the storage engine, if the LevelDB database is detected to be damaged during the startup period, it will try to repair the data. Although this function can repair the data, it cannot guarantee the integrity of the data. Therefore, the Periander version optimizes the database module and removes the LevelDB data automatic repair function, so that when the node detects that the database is damaged, it immediately reports an error and exits, avoiding invalid synchronization. Source Code: https://github.com/tronprotocol/java-tron/pull/5223","title":"9. Optimize the database module"},{"location":"releases/history/#10-optimize-checkpoint-v2-recovery-process","text":"In order to solve the problem of node database corruption caused by the abnormal shutdowns, starting from GreatVoyage-v4.6.0 (Socrates), the Checkpoint V2 mechanism is introduced. The V2 mechanism will save multiple checkpoints on the disk, corresponding to multiple solidified block data, which is used to restore the data when the node database is damaged. This function needs to periodically clean up expired checkpoints. Since the operation of deleting expired checkpoints is not an atomic operation, this will lead to the situation that expired checkpoints may not be completely deleted when the machine is abnormally shut down, that is, there may be damaged checkpoints. Therefore, the Periander version optimizes the automatic repair function of checkpoint v2. When restoring data, all expired checkpoints are skipped, avoiding the situation of using damaged checkpoints to repair data, and improving the stability of nodes. Source Code: https://github.com/tronprotocol/java-tron/pull/5224 Forethought in all things. ---Periander","title":"10. Optimize checkpoint v2 recovery process"},{"location":"releases/history/#greatvoyage-v4711-pittacus","text":"GreatVoyage-v4.7.1.1 (Pittacus) version optimized multiple interfaces and removed APIs involving sensitive information. Please see the details below.","title":"GreatVoyage-v4.7.1.1 (Pittacus)"},{"location":"releases/history/#api_3","text":"","title":"API"},{"location":"releases/history/#1-remove-apis-involving-sensitive-information","text":"Versions prior to GreatVoyage-v4.7.1.1 (Pittacus) provide APIs related to signature and address generation. Since the input or output of these APIs contains private keys, there are security risks in transmission in the network. At present, public API service providers in the TRON ecosystem have closed these APIs, such as TronGrid, Anker, GetBlock, etc. In the developer document, these APIs have already been tagged as obsolete and it is recommended to sign transactions and create addresses offline using SDK. GreatVoyage-v4.7.1.1(Pittacus) officially removes these APIs: HTTP createaddress : Create an address based on the specified password generateaddress : Create address randomly easytransfer : Transfer TRX with password easytransferbyprivate : Transfer TRX with private key easytransferasset : Transfer TRC10 token with password easytransferassetbyprivate : Transfer TRC10 token with private key gettransactionsign : Sign transaction with private key addtransactionsign : Sign transaction with private key which is mainly used to sign multi-signature transactions gRPC CreateAddress : Create an address based on the specified password GenerateAddress : Create address randomly EasyTransfer : Transfer TRX with password EasyTransferByPrivate : Transfer TRX with private key EasyTransferAsset : Transfer TRC10 token with password EasyTransferAssetByPrivate : Transfer TRC10 token with private key GetTransactionSign : Sign transaction with private key GetTransactionSign2 : Sign transaction with private key AddSign : Sign transaction with private key which is mainly used to sign multi-signature transactions TIP: https://github.com/tronprotocol/tips/issues/534 Source Code: https://github.com/tronprotocol/java-tron/pull/5096","title":"1. Remove APIs involving sensitive information"},{"location":"releases/history/#2-optimize-resource-delegate-information-query-interface","text":"The /wallet/getdelegatedresourcev2 interface can query the resources that an address delegates to another address, and resource delegate can choose whether to be locked. For 2 resource delegation to the same address, one of them may be locked, and the other may be not locked, so /wallet/getdelegatedresourcev2 interface will return two sets of information: locked resource delegation data and unlocked resource delegation data. In versions prior to GreatVoyage-v4.7.1.1 (Pittacus), if all the resource delegation by one address to another address are locked, then the non-locked resource delegation data will be 0. In this case, the interface may also return non-locked resource delegation data (0 value which is meaningless). The GreatVoyage-v4.7.1.1 (Pittacus) version optimizes the /wallet/getdelegatedresourcev2 interface, and only returns resource delegation data with non-zero value, making the returned data more concise and clear. Source Code: https://github.com/tronprotocol/java-tron/pull/5123","title":"2. Optimize resource delegate information query interface"},{"location":"releases/history/#other-changes_7","text":"","title":"Other Changes"},{"location":"releases/history/#1-optimize-the-update-logic-of-the-origin_energy_usage-field-in-the-transaction-receipt","text":"The TRON network supports contract deployers to share part of the contract call cost. In order to facilitate users to query the energy consumption of contract transactions, in addition to recording the total energy consumption of the transaction through the energy_usage_total field, the transaction receipt will also record the amount of energy paid by the contract deployer through the origin_energy_usage field. energy_usage_total contains origin_energy_usage . In versions prior to GreatVoyage-v4.7.1.1 (Pittacus), in rare cases, the energy_usage_total field is 0 while the origin_energy_usage field is not 0 when querying through /wallet/gettransactioninfobyid API. Therefore the GreatVoyage-v4.7.1.1 (Pittacus) version optimizes the update logic of origin_energy_usage in the transaction receipt to ensure the accuracy of querying the consumed energy of the contract deployer. Source Code: https://github.com/tronprotocol/java-tron/pull/5120 Whatever you do, do it well. ---Pittacus","title":"1. Optimize the update logic of the origin_energy_usage field in the transaction receipt"},{"location":"releases/history/#greatvoyage-v471sartre","text":"GreatVoyage-v4.7.1(Sartre) introduces several important optimizations and updates. The optimized block synchronization logic improves the stability of block synchronization; the optimized node IP setting improves the availability of nodes; the optimized node log improves the maintainability of nodes. Please see the details below.","title":"GreatVoyage-v4.7.1(Sartre)"},{"location":"releases/history/#cores","text":"","title":"Cores"},{"location":"releases/history/#1-optimize-the-node-ip-setting","text":"When the node starts, it will obtain the local IP of the node, and then use this IP to communicate with other nodes in the network. If the node cannot access the external network, it will not be able to obtain the local IP. At this time, the node will set its local IP to the default value of 0.0.0.0, and this IP will make the node even unable to communicate with other nodes successfully in the LAN. So the GreatVoyage- v4.7.1 (Sartre) version changes the default IP of the node. If the node cannot obtain the local IP, it will set its local IP to 127.0.0.1, so that even if the node cannot access the external network, it can still communicate with other nodes in the LAN normally. Source code: https://github.com/tronprotocol/java-tron/pull/4990","title":"1. Optimize the node IP setting"},{"location":"releases/history/#2-optimize-block-synchronization-logic","text":"During the block synchronization process, the node will maintain a block request list, which contains the IDs of all blocks that have sent requests to other nodes. When the connection between the node and node A is abnormally disconnected with a very small probability, the block ID that is being requested to node A will be deleted from the request list. After that, the node will think that it has not requested the block, and then send the block request to node B and add the block ID to the request list again. Before this node disconnects with node A, the requested block may have already been sent by node A\uff0cand it is received by the node after disconnecting. Since the node found that the block is from node A that has already been disconnected, it will discard the block, and delete the block ID from the request list again, this will lead to the node to send a request for the same block to node B again. When Node B receives the repeated block request, it will consider it an illegal message and disconnect from the node. In order to improve the efficiency of block synchronization in concurrent scenarios, the GreatVoyage-v4.7.1 (Sartre) version optimized the update mechanism of the block request list, and saved the block ID and node information in the request list at the same time. In the above scenario, after receiving a block from node A that has been disconnected, the same block ID requested from node B will not be deleted from the request list to ensure that it will not be disconnected from node B, thereby improving the stability of block synchronization. Source code: https://github.com/tronprotocol/java-tron/pull/4995 When a node synchronizes blocks from other nodes, it needs to obtain the local block chain summary of the node. The summary includes the IDs of several blocks including the local header block. In versions prior to GreatVoyage-v4.7.1 (Sartre), when obtaining the summary, the node will first query the Dynamic database to obtain the block height, and then query the Block database to obtain the ID of the block according to the block height. However, when the node is processing a block, the writing to each database is not carried out at the same time. The node will first update the Dynamic database, and then update other databases such as Block. As a result, in versions prior to GreatVoyage-v4.7.1 (Sartre), the following scenario will occur with a very small probability: when the latest block information is only written into the Dynamic database, but have not yet been written into the block database, the node starts to obtain the summary. In this situation the corresponding block ID will not be found in the block database according to the head block height obtained from the Dynamic database, leading to the summary reading fail. The GreatVoyage-v4.7.1 (Sartre) version optimizes the block chain summary acquisition logic. The ID of the head block is directly obtained from the Dynamic database instead of the Block database, which improves the stability of summary reading. Source code: https://github.com/tronprotocol/java-tron/pull/5009 The GreatVoyage-v4.7.1 (Sartre) version optimizes the lock mechanism during block synchronization and improves the stability of the node connection under concurrency. Source code: https://github.com/tronprotocol/java-tron/pull/4996","title":"2. Optimize block synchronization logic"},{"location":"releases/history/#api_4","text":"","title":"API"},{"location":"releases/history/#1-optimize-the-list-of-solidified-block-apis","text":"GreatVoyage-v4.7.1(Sartre) version deletes the useless solidified block query API to make the code more clearer. Source code: https://github.com/tronprotocol/java-tron/pull/4997","title":"1. Optimize the list of solidified block APIs"},{"location":"releases/history/#2-optimize-resource-delegation-relationship-api","text":"GreatVoyage-v4.7.1 (Sartre) version optimizes the resource delegation relationship query API, adds the check to the interface parameters, and makes the interface more stable.","title":"2. Optimize resource delegation relationship API"},{"location":"releases/history/#other-changes_8","text":"","title":"Other Changes"},{"location":"releases/history/#1-optimize-litefullnode-detection-logic","text":"In versions prior to GreatVoyage-v4.7.1 (Sartre), different modules of the node have different logics for detecting whether the current node is a LiteFullNode. GreatVoyage-v4.7.1 (Sartre) version unifies the logic of light node judgment, making the code more concise. Source code: https://github.com/tronprotocol/java-tron/pull/4986","title":"1. Optimize LiteFullNode detection logic"},{"location":"releases/history/#2-optimize-node-log-output","text":"The Database Log Starting from GreatVoyage-v4.7.0.1 (Aristotle), the logs of LevelDB or RocksDB databases are redirected to the node log file, which simplifies the difficulty of database troubleshooting. GreatVoyage-v4.7.1 (Sartre) further optimizes the log module, Output database logs to a separate db.log file to make node logs clearer. Source code: https://github.com/tronprotocol/java-tron/pull/4985 https://github.com/tronprotocol/java-tron/pull/5001 https://github.com/tronprotocol/java-tron/pull/5010 The Event Service Module Log Remove invalid logging output for event service module. Source code: https://github.com/tronprotocol/java-tron/pull/4974 The network module log Optimized the log output of the network module, outputting Error-level logs for received abnormal blocks, and outputting Warn-level logs for network requests that have already timed out, improving the efficiency of troubleshooting network-related problems. Source code: https://github.com/tronprotocol/java-tron/pull/4977 The more sand that has escaped from the hourglass of our life, the clearer we should see through it. ---Sartre","title":"2. Optimize node log output"},{"location":"releases/history/#greatvoyage-v4701aristotle","text":"GreatVoyage-v4.7.0.1 (Aristotle) introduces several important optimizations and updates. The new stake mechanism, Stake 2.0, improves the flexibility of the resource model and the stability of the stake system; the dynamic energy model helps to promote ecologically balanced development; the secondary cache mechanism optimizes the database reading performance, improves transaction execution performance, and expands the network throughput; uses the libp2p library as the java-tron P2P network module to make the code structure clearer and reduce code coupling; optimizes the log output, redirect the logs of LevelDB and RocksDB to java-tron log files; integrate more tools and functions into the \u2018Toolkit.jar\u2019 toolbox to bring users a more convenient development experience. Please see the details below.","title":"GreatVoyage-v4.7.0.1(Aristotle)"},{"location":"releases/history/#cores_1","text":"","title":"Cores"},{"location":"releases/history/#1-a-new-stake-model-stake-20","text":"GreatVoyage-v4.7.0.1 (Aristotle) version introduces a new stake model, Stake 2.0, aiming to establish a more flexible, efficient and stable stake system. Compared with the current Stake 1.0 model, Stake 2.0 has been improved in the following aspects, Staking and delegating are separated In Stake 1.0, staking and resource delegating are combined in one operation. The resource recipient must be specified in the operation. After the staking is completed, the resource will be delegated to the designated resource recipient. The unstaking and undelegating are also combined in one operation. If you want to cancel the delegating, you must unstake the corresponding TRX as well. Stake 2.0 separates staking and resource delegating into two independent operations. The user executes the staking first, the resource selected is allocated to the owner now. And then executes the delegate operation to assign the resource to the designated address. Unstaking and undelegating are also separated into two operations. If the user wants to cancel the delegating, he or she can directly perform the undelegate operation without unstaking and then can delegate the resource to others again as needed. Separation of staking/unstaking and delegating/undelegating simplifies user operations and reduces operational complexity. Resource Fragmentation Management In Stake 1.0, one unstake operation will unstake all the staked TRX, and the specified amount of TRX cannot be unstaked. This is optimized in Stake 2.0 now. We can specify an amount of TRX to unstake, as long as the specified amount is less than or equal to the total staked amount. In Stake 1.0, to cancel a certain resource delegate, you can only cancel all delegated resources at once, and you cannot cancel by specifying an amount. Stake 2.0 has also brought partially undelegate, we can now undelegate part of the delegated resources as needed, which improves the flexibility of resource management. Unstake Lock Period and Delayed Arrival of Unstaked TRX In Stake 1.0, after staking TRX, we need to wait 3 days before releasing the TRX. After the release, the TRX staked will immediately arrive in the owner\u2019s account. In Stake 2.0, after the staking is completed, the TRX staked can be released at any time, but it needs to wait for \u2019N\u2019 days. After the \u2019N\u2019 days delay, the TRX released could be withdrawn to the owner\u2019s account. \u2019N\u2019 is the TRON network parameter. When the TRX market fluctuates violently, due to the delayed arrival of funds, it will no longer trigger a large number of stake or unstake operations, which improves the stability of the stake model, and at the same time will not cause a large number of funds to flood into the market and aggravate market volatility. It helps to build a more anticipated future of the entire network circulation for the network participants. TVM Supports Staking and Resource Management In Stake 2.0, the TRON virtual machine integrates instructions related to stake and resource management. Users can perform TRX stake/unstake operations in smart contracts, as well as perform resource delegate/undelegate operations. For more details on Stake 2.0, please refer to What is Stake 2.0? The new stake mechanism is a dynamic parameter in the TRON network. After GreatVoyage-v4.7.0.1 (Aristotle) is deployed, it is disabled by default and can be enabled by initiating a proposal vote. TIP: https://github.com/tronprotocol/tips/issues/467 Source code: https://github.com/tronprotocol/java-tron/pull/4838","title":"1. A new stake model - Stake 2.0"},{"location":"releases/history/#2enhance-database-query-performance","text":"java-tron uses memory and disk databases for data storage. The solidified block data will be stored in multiple disk databases, and the unsolidified data will be stored in memory. When a block is solidified, the corresponding in-memory data is written to the disk databases. When querying data, first query the data in memory, if not found, then query the disk database. The disk database query is time-consuming. Therefore, the GreatVoyage-v4.7.0.1 (Aristotle) version optimizes the database query performance and adds a secondary cache before performing the underlying disk database operation. When data is written to the disk, the data is also written to the second-level cache. When the disk database needs to be queried, if the data to be queried exists in the second-level cache, it will be returned directly without querying the disk database. The second-level cache reduces the number of queries to the disk database, improves transaction execution speed, and improves network throughput. Source code: https://github.com/tronprotocol/java-tron/pull/4740","title":"2.Enhance database query performance"},{"location":"releases/history/#3-optimize-block-production-process","text":"When a node produces a block, it will sequentially verify and execute all transactions that can be packaged into the block, and each transaction verification and execution will involve the acquisition of block data, such as block number, block size, block transaction information, etc. In versions prior to GreatVoyage-v4.7.0.1 (Aristotle), when nodes package transactions, block data is recalculated during the process of verifying and executing each transaction, which includes many repeated calculations. In order to improve the efficiency of packaging transactions, the GreatVoyage-v4.7.0.1 (Aristotle) optimizes the block production process, only calculates the block data once and updates the data only when necessary, thus greatly reducing the number of block data calculations and improving the block packaging efficiency. Source code: https://github.com/tronprotocol/java-tron/pull/4756","title":"3. Optimize block production process"},{"location":"releases/history/#4-add-transaction-hash-cache","text":"When a node processes a block, it will use the transaction hash value multiple times. In versions before GreatVoyage-v4.7.0.1 (Aristotle), the transaction hash value is calculated as it is used, and the calculation of the transaction hash value is time-consuming, which leads to slower block processing. Therefore, GreatVoyage-v4.7.0.1 (Aristotle) adds a transaction hash cache, the transaction hash will be directly obtained from the cache when used. Only when the transaction data changes, the transaction hash is recalculated. The newly added cache reduces unnecessary transaction hash calculations and improves block processing speed. Source code: https://github.com/tronprotocol/java-tron/pull/4792","title":"4. Add transaction hash cache"},{"location":"releases/history/#5-add-libp2p-module-as-java-tron-p2p-network-protocol-implementation","text":"Starting from GreatVoyage-v4.7.0.1 (Aristotle), the libp2p library will be directly used as the P2P network module of java-tron, instead of using the original p2p network stack, so that the code structure is clearer, the code coupling is lower, and is easy to maintain. Source code: https://github.com/tronprotocol/java-tron/pull/4791","title":"5. Add libp2p module as java-tron p2p network protocol implementation"},{"location":"releases/history/#tvm_2","text":"","title":"TVM"},{"location":"releases/history/#1-add-new-instructions-to-support-stake-20","text":"GreatVoyage-v4.7.0.1 (Aristotle) introduces Stake 2.0, TVM will support Stake 2.0 related stake and resource delegate instructions simultaneously. Users can perform stake and resource delegate operations through smart contracts, which further enriches the application scenarios of smart contracts on the TRON network. A total of 6 instructions from 0xda to 0xdf have been added to TVM: ID TVM instruction Description 0xda FREEZEBALANCEV2 Performs the same operation as the system contract FreezeBalanceV2 for contract account 0xdb UNFREEZEBALANCEV2 Performs the same operation as the system contract UnfreezeBalanceV2 for contract account 0xdc CANCELALLUNFREEZEV2 Cancel all pending unfreeze balances for contract account 0xdd WITHDRAWEXPIREUNFREEZE Performs the same operation as the system contract WithdrawExpireUnfreeze for contract account 0xde DELEGATERESOURCE Performs the same operation as the system contract DelegateResource for contract account 0xdf UNDELEGATERESOURCE Performs the same operation as the system contract UnDelegateResource for contract account A total of 11 precompiled contracts from 0x100000b to 0x1000015 have been added to TVM: ID Precompiled Contract Description 0x100000b GetChainParameter Query the specific chain parameters 0x100000c AvailableUnfreezeV2Size Query the size of the available unfreeze queue for target address 0x100000d UnfreezableBalanceV2 Query the unfreezable balance of a specified resourceType for target address 0x100000e ExpireUnfreezeBalanceV2 Query the withdrawal balance at the specified timestamp for target address 0x100000f DelegatableResource Query the amount of delegatable resources(unit: SUN) of the specified resourceType for the target address 0x1000010 ResourceV2 Query the amount of resources(unit: SUN) of a specific resourceType delegated by from address to target address 0x1000011 CheckUnDelegateResource Check whether the contract can recycle the specified amount of resources of a specific resourceType that have been delegated to target address, and return the amount of clean resource(unit: SUN), the amount of dirty resource(unit: SUN) and the restore time 0x1000012 ResourceUsage Query the usage of a specific resourceType of resources for target address, and return the amount of usage(unit: SUN) and the restore time 0x1000013 TotalResource Query the total amount of resources(unit: SUN) of a specific resourceType for target address 0x1000014 TotalDelegatedResource Query the amount of delegated resources of a specific resourceType for target address 0x1000015 TotalAcquiredResource Query the amount of acquired resources(unit: SUN) of a specific resourceType for target address Stake 2.0 is a dynamic parameter in the TRON network. After GreatVoyage-v4.7.0.1 (Aristotle) is deployed, it is disabled by default and can be enabled by initiating a proposal vote. TIP: https://github.com/tronprotocol/tips/issues/467 Source code: https://github.com/tronprotocol/java-tron/pull/4872","title":"1. Add new instructions to support Stake 2.0"},{"location":"releases/history/#2-dynamic-energy-model","text":"The dynamic energy model is a scheme to dynamically adjust the future energy consumption of the contract based on the known energy usage of the contract. If a contract uses too many resources in one cycle, then the next cycle in this contract, a certain percentage of punitive consumption will be added, and users who send the same transaction to this contract will cost more energy than before. When the contract uses resources reasonably, the energy consumption generated by the user calling the contract will gradually return to normal. Through this mechanism, the allocation of energy resources on the chain will be more reasonable, and excessive concentration of network resources on a few contracts will be prevented. For more information about the dynamic energy model: Introduction to Dynamic Energy Model The dynamic energy model is a dynamic parameter in the TRON network. After GreatVoyage-v4.7.0.1 (Aristotle) is deployed, it is disabled by default and can be enabled by initiating a proposal vote. TIP: https://github.com/tronprotocol/tips/issues/491 Source code: https://github.com/tronprotocol/java-tron/pull/4873","title":"2. Dynamic energy model"},{"location":"releases/history/#3-optimize-the-return-value-of-the-chainid-opcode","text":"Starting from the GreatVoyage-v4.7.0.1 (Aristotle) version, the return value of the chainid opcode is changed from the block hash of the genesis block to the last four bytes of the block hash of the genesis block, keeping the return value of the chainid opcode consistent with the return value of the java-tron JSON-RPC eth_chainId API. The return value optimization of the chainId opcode is a dynamic parameter of the TRON network. It is disabled by default after GreatVoyage-v4.7.0.1 (Aristotle) is deployed, and can be enabled by initiating a proposal. TIP: https://github.com/tronprotocol/tips/issues/474 Source code: https://github.com/tronprotocol/java-tron/pull/4863","title":"3. Optimize the return value of the chainId opcode"},{"location":"releases/history/#api_5","text":"","title":"API"},{"location":"releases/history/#1-add-apis-to-support-stake-20","text":"GreatVoyage-v4.7.0.1 (Aristotle) adds 10 APIs to support Stake 2.0: API Description /wallet/freezebalancev2 Stake TRX to obtain resources /wallet/unfreezebalancev2 Unstake TRX /wallet/delegateresource Delegate resources to other account /wallet/undelegateresource Undelegate resource /wallet/withdrawexpireunfreeze Withdraw the funds that has expired the N lock-up period /wallet/getavailableunfreezecount Query the remaining times of available unstaking operation /wallet/getcanwithdrawunfreezeamount Query the withdrawable balance at the specified timestamp /wallet/getcandelegatedmaxsize Query the amount of delegatable resources of the specified resource type for target address /wallet/getdelegatedresourcev2 Query the resource delegate amount from an address to the target address (unit: sun) /wallet/getdelegatedresourceaccountindexv2 Query the resource delegate amount from an address to the target address (unit: sun) For detailed information of new APIs, please refer to: What is Stake 2.0? TIP: https://github.com/tronprotocol/tips/issues/467 Source code: https://github.com/tronprotocol/java-tron/pull/4838","title":"1. Add APIs to support Stake 2.0"},{"location":"releases/history/#2-add-energy-estimation-api","text":"In versions prior to GreatVoyage-v4.7.0.1 (Aristotle), users can estimate the energy consumption for executing smart contract transactions through the /wallet/triggerconstantcontract interface, and then set the feelimit parameter of the transaction according to the estimated consumption. However, since some smart contract transactions may call other smart contracts, it is possible that the estimated feelimit parameter is inaccurate. Therefore, the GreatVoyage-v4.7.0.1(Aristotle) version adds an energy estimation interface /wallet/estimateenergy , and the feelimit estimated by this interface is reliable in any case. The energy_required field in the return value of this interface indicates the estimated amount of energy required for the successful execution of this smart contract transaction. So user can calculate the feelimit parameter based on this field: feelimit = energy_required * energy unit price, currently the unit price of energy is 210 sun. If the execution of the estimated interface call fails for some reason, the value of the energy_required field will be 0, and this field will not be displayed in the return value. At this time, you can check the reason for the execution failure for the estimated interface call through the result field. After the GreatVoyage-v4.7.0.1 (Aristotle) version is successfully deployed, this API is closed by default. To open this interface, the two configuration items vm.estimateEnergy and vm.supportConstant must be enabled in the node configuration file at the same time. The default values of vm.estimateEnergy and vm.supportConstant are both false. An example of /wallet/estimateenergy call is as follows: curl --location --request POST 'https://api.nileex.io/wallet/estimateenergy' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"owner_address\": \"TUoHaVjx7n5xz8LwPRDckgFrDWhMhuSuJM\", \"contract_address\": \"TXLAQ63Xg1NAzckPwKHvzw7CSEmLMEqcdj\", \"function_selector\": \"transfer(address,uint256)\", \"parameter\": \"0000000000000000000000002EEF13ADA48F286066F9066CE84A9AD686A3EA480000000000000000000000000000000000000000000000000000000000000004\", \"visible\": true }' Source code: https://github.com/tronprotocol/java-tron/pull/4873","title":"2. Add energy estimation API"},{"location":"releases/history/#other-changes_9","text":"","title":"Other Changes"},{"location":"releases/history/#1-optimize-gradle-compilation-parameters","text":"GreatVoyage-v4.7.0.1(Aristotle) optimizes the compiling parameters of Gradle, configuring JVM minimum heap size to 1GB, which improves the compilation speed of java-tron. Source code: https://github.com/tronprotocol/java-tron/pull/4837","title":"1. Optimize Gradle compilation parameters"},{"location":"releases/history/#2-optimize-node-conditional-stop-function","text":"In order to facilitate data backup or data statistics for node deployers, starting from GreatVoyage-v4.5.1 (Tertullian), nodes support stopping under specific conditions. Users can set the conditions for node stopping through the node configuration file, and the node will stop running when the conditions are met. It supports three stop conditions to be set at the same time, and the node is stopped when any condition is met. These three conditions include block time, block height, and the number of blocks that need to be synchronized from the start to the stop of the node. However, since multiple stop conditions are allowed to be set at the same time, when the user only needs one condition, the other 2 conditional configuration items in the configuration file need to be deleted, so if the user forgets to delete, the node may stop on an unexpected block. However, there are actually no application scenarios that require multiple conditions to be set at the same time. Therefore, the GreatVoyage-v4.7.0.1 (Aristotle) version optimizes the node conditional stop function. The optional configuration parameters remain unchanged, but only one valid parameter is allowed to be set at the same time. If the node deployer sets multiple parameters, the node will report an error and exit run. This optimization simplifies the complexity of users\u2019 settings. Source code: https://github.com/tronprotocol/java-tron/pull/4853 https://github.com/tronprotocol/java-tron/pull/4858","title":"2. Optimize node conditional stop function"},{"location":"releases/history/#3-delete-code-related-to-database-v1","text":"In versions prior to GreatVoyage-v4.7.0.1 (Aristotle), there are two versions of the database, v1 and v2. Users can choose from them through the configuration item db.version . Since the v2 version adopts the memory + disk database mode, it supports the expansion of the underlying database, the correct data recovery function under abnormal conditions, etc., and has obvious advantages compared with v1. Therefore, in order to make the code structure clearer, starting from GreatVoyage-v4.7.0.1 (Aristotle), the code related to the database v1 version and the database version configuration item db.version has been deleted. Users no longer need to configure the database version, only v2 is available from now on, which reduces the complexity of configuring nodes. Source code: https://github.com/tronprotocol/java-tron/pull/4836","title":"3. Delete code related to database v1"},{"location":"releases/history/#4-optimize-database-log-output","text":"In versions prior to GreatVoyage-v4.7.0.1 (Aristotle), the node logs do not include the underlying logs output by LevelDB or RocksDB itself, making it difficult to troubleshoot database read and write problems. Therefore, the GreatVoyage-v4.7.0.1 (Aristotle) optimizes the database log and redirects the output of the underlying log of the LevelDB or RocksDB data module to the node log file, which simplifies the difficulty of database troubleshooting and improves the reliability of node operation and maintenance efficiency. Source code: https://github.com/tronprotocol/java-tron/pull/4833","title":"4. Optimize database log output"},{"location":"releases/history/#5-make-snapshot-flush-speed-configurable","text":"Nodes newly added to the network need to synchronize block data from other nodes, and the nodes will first save the synchronized block data in memory, and then store it on disk. In versions prior to GreatVoyage-v4.7.0.1 (Aristotle), when a node synchronizes the blocks, a flush operation will write the data of 500 blocks from the memory to the disk, so more than 500 blocks data will be kept in the memory, and each block data is associated through a linked list. When querying data, it will first search in these more than 500 blocks in sequence, and then query the disk database when the data to be queried is not found, but traversing more than 500 block data reduces the efficiency of data query. Therefore, starting from the GreatVoyage-v4.7.0.1 (Aristotle) version, the number of snapshot flush can be configured, and the maximum number of snapshot flush at one time can be set through the configuration item: storage.snapshot.maxFlushCount to maximize the efficiency of database query and improve block processing speed. If the configuration item is not set, the maximum number of snapshots flush into the dish is the default value of 1. Source code: https://github.com/tronprotocol/java-tron/pull/4834","title":"5. Make snapshot flush speed configurable"},{"location":"releases/history/#6-toolkitjar-integration","text":"DBConvert.jar is a database conversion tool, which can convert LevelDB into RocksDB; LiteFullNodeTool.jar is a light FullNode tool, which can convert FullNode data into LiteFullNode data. Starting from GreatVoyage-v4.7.0.1 (Aristotle), DBConvert.jar and LiteFullNodeTool.jar have been integrated into the Toolkit.jar toolbox, and a database copy function is added which can realize fast Node database copy. In the future, the tools around java-tron will be gradually integrated into the Toolkit.jar toolbox in order to facilitate tool maintenance and developer use. The commands for using the new functions of the Toolkit.jar toolbox are as follows: // Convert LevelDB data to RocksDB data java -jar Toolkit.jar db convert -h // convert FullNode data into LiteFullNode data java -jar Toolkit.jar db lite -h // Database copy java -jar Toolkit.jar db copy -h Source code: https://github.com/tronprotocol/java-tron/pull/4813 Courage is the first of human qualities because it is the quality that guarantees others. --- Aristotle","title":"6. Toolkit.jar Integration"},{"location":"releases/history/#greatvoyage-v460-socrates","text":"The GreatVoyage-v4.6.0 (Socrates) introduces several important optimizations and updates, such as an optimized database checkpoint mechanism, which improves the stability of node operation; optimized resource delegate relationship index structure, and an updated voting reward algorithm, which speed up the execution speed of transactions and increase network throughput; a new proposal to add transaction memo fees, increasing the cost of transactions with memo to reduce the number of low-value transactions, so that improves the security and reliability of the TRON network. The integrated toolkit, new network-related Prometheus metrics, and new help command line together bring users a more convenient development experience. Please check below for details.","title":"GreatVoyage-v4.6.0 (Socrates)"},{"location":"releases/history/#core_5","text":"","title":"Core"},{"location":"releases/history/#1-optimize-delegate-relationship-index-structure","text":"In the TRON network, accounts can delegate resources to other accounts through staking, and can also accept resources that other accounts stake for themselves. Therefore, each account needs to maintain a record of the delegate relationship, including all the recipient addresses that the account delegated resources to and all the addresses that delegated resources for the account. In versions prior to GreatVoyage-v4.6.0 (Socrates), the delegate relationship is stored in the form of a list. When performing resource delegating, it needs first to check whether the recipient account already exists in the list and then adds the account to the list only if it is not present. If a particular account has delegated resources to multiple accounts or many accounts have delegated the resources to the particular account, then the length of the delegate relationship list for the particular account will be substantial. The lookup operation would be considerably time-consuming, resulting in long transaction execution times. Therefore, GreatVoyage-v4.6.0 (Socrates) optimizes the index storage structure of the resource delegate relationship and changes it from a list to a key-value pair, so as to complete the querying and modification of its data in a constant time, which greatly speeds up the execution speed of the delegation related transactions and improves network throughput. The delegate relationship storage optimization is a dynamic parameter of the TRON network. It is disabled by default and can be enabled by initiating a proposal. TIP: https://github.com/tronprotocol/tips/issues/476 Source code: https://github.com/tronprotocol/java-tron/pull/4788","title":"1. Optimize delegate relationship index structure"},{"location":"releases/history/#2-add-transaction-memo-fee-proposal","text":"Starting from GreatVoyage-v4.6.0 (Socrates), a memo fee will be charged for transactions with a memo. By increasing the cost, the fee will reduce the number of low-value transactions, so as to improve the security and reliability of the TRON network. The memo fee is a dynamic parameter of the TRON network. After GreatVoyage-v4.6.0 (Socrates) is deployed, the default value is \u20180\u2019, and the unit is \u2018sun\u2019. It can be enabled by specifying a non-zero value by initiating a proposal, for example, \u20181000000\u2019, indicating that the transaction with memo will require an additional 1 TRX fee. TIP: https://github.com/tronprotocol/tips/issues/387 Source code: https://github.com/tronprotocol/java-tron/pull/4758","title":"2. Add transaction memo fee proposal"},{"location":"releases/history/#3-add-optimized-reward-algorithm-proposal","text":"Many voters in the TRON network will accumulate rewards for a long time before withdrawing them. The interval between two withdrawals of rewards is often very long. In versions prior to GreatVoyage-v4.6.0 (Socrates), for the transaction to withdraw rewards, it will calculate and accumulate rewards for each maintenance period since the last withdrawal of rewards, so the longer the time since the last withdrawal of rewards, the more time-consuming it will be to calculate the reward. Therefore, GreatVoyage-v4.6.0 (Socrates) optimizes the calculation algorithm of voting rewards. Instead of accumulating the rewards of each maintenance period, the sum of unwithdrawn rewards can be obtained by subtracting the total number of rewards recorded in the maintenance period of the last reward withdrawal from the total rewards recorded in the previous maintenance period. This algorithm realizes the calculation of the total number of unclaimed rewards in a constant time, which greatly improves the calculation efficiency and speeds up the execution of reward calculation, thereby improving the throughput of the network. The optimized reward algorithm is a TRON network parameter and is disabled by default once GreatVoyage-v4.6.0 (Socrates) is deployed, and can be enabled by voting through a proposal. TIP: https://github.com/tronprotocol/tips/issues/465 Source code: https://github.com/tronprotocol/java-tron/pull/4694","title":"3. Add optimized reward algorithm proposal"},{"location":"releases/history/#4-upgrade-checkpoint-mechanism-to-v2-in-database-module","text":"The Checkpoint is a recovery mechanism established to prevent database damage caused by the exceptional shutdown. java-tron uses memory and multi-disk databases for data storage. The data of the solidified block will be stored in multiple business databases. Unsolidified data is stored in the memory. When a block is solidified, the corresponding memory data will be written to relevant databases. However, since the writing to multiple business databases is not an atomic operation, if there is an unexpected downtime due to some reason, then all the data in the block may not be able to be written to the disk, and the node will not be able to restart due to database corruption. Therefore, before the memory data is written to the disk, a checkpoint would be created. The checkpoint contains all the data that needs to be written to each business database this time. After the checkpoint is created, first writes the checkpoint data to an independent Checkpoint database, and then performs the operation of writing the business database, and the Checkpoint database always retains the latest solidified block data. If the business database is damaged due to system shutdown, after the node restarts, the business database will be recovered through the data previously saved in the checkpoint database. At present, the Checkpoint mechanism can deal with the vast majority of downtime situations, but there is still a small probability that the business database will be damaged due to downtime. At present, the data writing of LevelDB is asynchronous. The program calls LevelDB to request to write the data to the disk. In fact, the data is only written into the cache of the operating system, and then the operating system will decide when to actually write to the disk according to its own strategy. If an unexpected downtime occurs at the time when the node just finished writing to the Checkpoint database and continues to write to the business database, it is possible that the data written to the Checkpoint database is not actually written to the disk by the operating system. In this case, the node would fail to restart properly because the Checkpoint database has no recovery data. In order to solve this problem, GreatVoyage-v4.6.0 (Socrates) upgrades the V2 version of Checkpoint implementation. The Checkpoint mechanism V2 will store multiple solidified blocks data. So that even if the latest solidified block data is not written successfully to the Checkpoint database due to abnormal shutdown, the historical solidified block data can be used to restore the business database when the node restarts. The Checkpoint mechanism V2 is disabled by default in the configuration file. This function can be enabled by modifying the configuration. It should be noted that if a node has enabled the checkpoint V2 and has been running for a certain period of time, it would not be able to roll back to V1 anymore. TIP: https://github.com/tronprotocol/tips/issues/461 Source code: https://github.com/tronprotocol/java-tron/pull/4614","title":"4. Upgrade checkpoint mechanism to v2 in database module"},{"location":"releases/history/#5-optimize-block-production-priority-between-active-and-backup-nodes","text":"If the super representative deploys the active and backup nodes, the connection between the nodes will be maintained. When the active and backup nodes are temporarily disconnected due to network problems, the backup node will consider that the active node is invalid and take over the block production. This will cause a duplicate block production process as both the active and backup nodes will produce blocks at the same time. In versions prior to GreatVoyage-v4.6.0 (Socrates), when the active and backup nodes receive blocks of the same height block generated by each other, both of them will suspend for 1-9 block production cycles. That is, the super representative will miss 1-9 blocks. The GreatVoyage-v4.6.0 (Socrates) optimizes the priority of block production logic. When the situation above happens, both nodes will compare the hash value of the block produced by the other node. The node with a larger block hash will continue to produce blocks, and the node with smaller block hash will suspend a block production cycle, then continue to produce blocks, and compare the block hash again. A total of 27 super representatives will generate blocks sequentially, so it takes 81 seconds to skip a block production cycle. During this period, if the connection problem between them is a short-term network failure, there will be enough time to recover it. In addition, after receiving these two blocks, other nodes will also choose the block with a larger hash and discard the one with a smaller hash. This implementation will significantly improve the block production efficiency during obstructed network connections between active and backup nodes and network stability. Source code\uff1a https://github.com/tronprotocol/java-tron/pull/4630","title":"5. Optimize block production priority between active and backup nodes"},{"location":"releases/history/#6optimize-the-kademlia-algorithm-for-the-network-module","text":"The java-tron node ID is a random number, which will be regenerated every time the node is started. In the implementation of the Kademlia algorithm of java-tron, the distance of the node will be calculated according to the node ID, and then the node information will be put into the corresponding K bucket according to the distance. If the node in the K bucket is restarted for some reason, the node ID will change. When it is detected that the node is offline again, the distance calculated according to the latest node ID has been unable to locate the original K bucket, therefore it is not able to delete the node from the bucket. Too many such nodes restarted will cause too much invalid data to be stored in the K bucket of the node. Therefore, the GreatVoyage-v4.6.0 (Socrates) optimizes the Kademlia algorithm, and uses a hash table to record the discovered nodes. The distance of a node is only calculated once when it is written into the K bucket for the first time and is assigned to the \u2018distance\u2019 field of the node, and then the node is added to the hash table. In the future, the node distance will be obtained directly through this field. Even if the node ID changes after the node is restarted, the distance of the node in the Hash table will not be updated. When the node is detected to be offline, the corresponding node can be found from the hash table according to the node IP, and then the distance to the node can be obtained through the node distance field, at last the node information can be deleted from the K bucket. Source code: https://github.com/tronprotocol/java-tron/pull/4620 https://github.com/tronprotocol/java-tron/pull/4622","title":"6.Optimize the Kademlia algorithm for the network module"},{"location":"releases/history/#other-changes_10","text":"","title":"Other Changes"},{"location":"releases/history/#1-merge-archivemanifestjar-into-toolkitjar","text":"ArchiveManifest.jar is an independent LevelDB startup optimization tool, which can optimize the file size of LevelDB manifest, thereby reducing memory usage and greatly improving node startup speed. Starting from the GreatVoyage-v4.6.0 (Socrates), the ArchiveManifest.jar tool has been integrated into the Toolkit.jar. In the future, all the tools around java-tron will be gradually integrated into the Toolkit.jar toolbox to facilitate tool maintenance and developer use. Source code: https://github.com/tronprotocol/java-tron/pull/4603","title":"1. Merge ArchiveManifest.jar into Toolkit.jar"},{"location":"releases/history/#2-add-prometheus-metrics-for-network-module","text":"GreatVoyage-v4.6.0 (Socrates) adds three new Prometheus metrics related to the network module: block fetching delay, block receiving delay, and message processing delay. New metrics help with network health monitoring of the node. Source code: https://github.com/tronprotocol/java-tron/pull/4626","title":"2. Add prometheus metrics for network module"},{"location":"releases/history/#3-add-the-help-command-option","text":"GreatVoyage-v4.6.0(Socrates) adds \u2018help\u2019 command line options to check all parameters and instructions. Please check the example below, $ java -jar FullNode.jar --help Name: FullNode - the java-tron command line interface Usage: java -jar FullNode.jar [options] [seedNode <seedNode> ...] VERSION: 4.5.2-d05f766 TRON OPTIONS: -v, --version Output code version -h, --help Show help message -c, --config Config file (default:config.conf) --log-config Logback config file --es Start event subscribe server DB OPTIONS: -d, --output-directory Data directory for the databases (default:output-directory) WITNESS OPTIONS: -w, --witness Is witness node -p, --private-key Witness private key VIRTUAL MACHINE OPTIONS: --debug Switch for TVM debug mode. In debug model, TVM will not check for timeout. (default: false) Source code: https://github.com/tronprotocol/java-tron/pull/4606","title":"3. Add the --help command option"},{"location":"releases/history/#4-optimize-litefullnodetooljar","text":"LiteFullNodeTool.jar is a light node tool of java-tron. Its main function is to convert the fullnode database into a light node database. GreatVoyage-v4.6.0 (Socrates) optimizes the tool and improves the convenience and stability of the tool. Source code: https://github.com/tronprotocol/java-tron/pull/4607","title":"4. Optimize LiteFullNodeTool.jar"},{"location":"releases/history/#5-optimize-the-return-value-of-eth_getblockbyhash-and-eth_getblockbynumber-apis","text":"In order to be better compatible with Ethereum's JsonRPC 2.0 protocol interface, GreatVoyage-v4.6.0(Socrates) changes the unit of the timestamp field in the return value of the eth_getBlockByHash and eth_getBlockByNumber APIs from milliseconds to seconds, making the return values of these two APIs fully compatible with Ethereum Geth. Source code: https://github.com/tronprotocol/java-tron/pull/4642 To move the world we must move ourselves. --- Socrates","title":"5. Optimize the return value of eth_getBlockByHash and eth_getBlockByNumber APIs"},{"location":"releases/history/#greatvoyage-v452aurelius","text":"The GreatVoyage-v4.5.2 (Aurelius) version introduces several important optimizations. The optimized transaction cache mechanism greatly reduces memory usage and improves node performance; the optimized P2P node connection strategy improves the efficiency of establishing connections between nodes and speeds up the node synchronization process; the optimized block production and processing logic improve node stability; the newly added database storage partition tool reduces the pressure on data storage; the newly added block header query API and historical bandwidth unit price Query API are to bring users a more convenient development experience.","title":"GreatVoyage-v4.5.2(Aurelius)"},{"location":"releases/history/#core_6","text":"","title":"Core"},{"location":"releases/history/#1-optimize-block-processing","text":"In versions prior to GreatVoyage-v4.5.2 (Aurelius), threads such as block production, block processing, and transaction processing compete for synchronization lock at the same time. In the case of high concurrency and transactions executing much time, the block production thread or the block processing thread will take a long time to get to the synchronization lock, which leads to the occurrence of a small probability of a block loss event. In order to improve node stability, the GreatVoyage-v4.5.2 (Aurelius) version optimizes the synchronization lock in the block processing logic, allowing only one transaction processing thread to compete for the synchronization lock with the block production or processing thread, and when the transaction processing thread finds that block-related threads waiting for the synchronization lock, it will voluntarily give in, which greatly increases the probability of block production and block processing threads acquiring synchronization lock, and ensures high throughput and stable operation of the node. TIP: https://github.com/tronprotocol/tips/blob/master/tip-428.md Source Code: https://github.com/tronprotocol/java-tron/pull/4551","title":"1. Optimize block processing"},{"location":"releases/history/#2-optimize-transaction-cache","text":"The node uses the transaction cache to determine whether the newly received transaction is a duplicate transaction. In versions prior to GreatVoyage-v4.5.2 (Aurelius), the transaction cache is a hashmap data structure, which saves transactions in the latest 65536 blocks. The hashmap allocates memory for each transaction separately. Therefore, the transaction cache will occupy nearly 2GB of memory during program runtime, meanwhile, frequent memory requests will trigger frequent JVM garbage collection which indirectly affects the performance of the node. To solve this issue, the GreatVoyage-v4.5.2 (Aurelius) version optimizes the implementation of the transaction cache, using the bloom filter instead of the hashmap, the bloom filter uses a fixed and extremely small memory space to record recent historical transactions, which greatly reduces the memory usage of the transaction cache and improve the node performance. TIP: https://github.com/tronprotocol/tips/blob/master/tip-440.md Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4538","title":"2. Optimize transaction cache"},{"location":"releases/history/#3-optimize-nodes-connection-strategy","text":"In versions prior to GreatVoyage-v4.5.2 (Aurelius), when the number of remote nodes connected by a node has reached the maximum value, the node will reject connection requests from new remote nodes. With the increase of such fully connected nodes in the network, it will become more and more difficult for the newly added nodes to establish connections with other nodes in the network. In order to speed up the connection process between nodes in the network, the GreatVoyage-v4.5.2 (Aurelius) version optimizes the P2P node connection strategy. It will periodically check the number of TCP connections of the node. When the number of connections is full, a certain disconnection strategy is adopted to disconnect one or two nodes to increase the possibility of a newly added node in the network successfully connecting to it, thereby improving the efficiency of establishing connections between P2P nodes in the network and improving network stability. Please note that the nodes configured in the node.active and node.passive lists in the configuration file are trusted nodes and will not be disconnected. TIP: https://github.com/tronprotocol/tips/blob/master/tip-425.md Source Code: https://github.com/tronprotocol/java-tron/pull/4549","title":"3. Optimize nodes connection strategy"},{"location":"releases/history/#4-optimize-block-generating-logic","text":"In versions prior to GreatVoyage-v4.5.2 (Aurelius), for pre-executed normal transactions, they may encounter JVM GC pauses during packaging which can result in transaction execution timeout and being discarded. Therefore, the GreatVoyage-v4.5.2 (Aurelius) version optimizes the block generating logic. For a pre-executed normal transaction, if it executes time out during packaging, a retry operation is taken to avoid transaction discard caused by JVM GC pause during the packaging. Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4387","title":"4. Optimize block generating logic"},{"location":"releases/history/#5-optimize-fork-switching-logic","text":"Micro-forks occur in the TRON network occasionally. The chain switching behavior will occur when a micro-fork happens. The chain switching will roll back blocks, and the transactions in the rolled back block will be put back into the transaction pending queue. When these transactions are repackaged and executed, the execution results may be inconsistent due to chain switching. In versions prior to GreatVoyage-v4.5.2 (Aurelius), the entire process refers to the same transaction object, so chain switching may lead to the transaction result in the rolled back block being changed. When the chain switching occurs again and the original chain is switched back, the transaction on the original chain will be executed again, at this time, it will report a Different resultCode error, which will cause the node to stop synchronizing. Therefore, the GreatVoyage-v4.5.2 (Aurelius) version optimizes the chain-switching logic. When a block is rolled back, a new transaction object is created for the transaction in the rolled-back block, so as to avoid the modification of the transaction result and improve the node's stability for fork handling. Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4583","title":"5. Optimize fork switching logic"},{"location":"releases/history/#6-add-database-storage-partition-tool","text":"As the data on the chain grows, the disk space of the FullNode may be insufficient, and a larger capacity disk needs to be replaced. So starting from the GreatVoyage-v4.5.2 (Aurelius) version, a database storage partition tool is provided, which can migrate some databases to other disk partitions according to the user's configuration, so users only need to add disks according to capacity requirements, no need to replace the original disk, that is convenient for users to expand the disk capacity, and at the same time reduces the cost of running a node. Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4545 https://github.com/tronprotocol/java-tron/pull/4559 https://github.com/tronprotocol/java-tron/pull/4563","title":"6. Add database storage partition tool"},{"location":"releases/history/#api_6","text":"","title":"API"},{"location":"releases/history/#1-new-block-header-query-api","text":"From the GreatVoyage-v4.5.2 (Aurelius) version, a new block header query API is added, which only returns the block header information, not the transaction information in the block. Users can obtain the block header information without querying the entire block. This not only reduces the network I/O load of the node, and since the block does not carry transaction information, the serialization time is reduced, the interface delay is reduced, and the query efficiency is improved. Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4492 https://github.com/tronprotocol/java-tron/pull/4552","title":"1. New block header query API"},{"location":"releases/history/#2-new-historical-bandwidth-unit-price-query-api","text":"According to the bandwidth consumption rules, if the transaction initiator\u2019s bandwidth obtained by staking TRX or free bandwidth is insufficient, TRX will be burned to pay for the bandwidth fee. At this time, only the bandwidth fee is recorded in the transaction record, but not the bandwidth consumption number. In order to understand bandwidth consumption of historical transactions, starting from GreatVoyage-v4.5.2 (Aurelius), a new historical bandwidth unit price query API /wallet/getbandwidthprices is added. Users can obtain historical records of bandwidth unit price through this API so that they can calculate bandwidth consumption of historical transactions. Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4556","title":"2. New historical bandwidth unit price query API"},{"location":"releases/history/#other-changes_11","text":"","title":"Other Changes"},{"location":"releases/history/#1-optimize-block-synchronization-logic","text":"The GreatVoyage-v4.5.2 (Aurelius) version optimizes the block synchronization logic, avoids unnecessary node disconnection in the process of synchronizing blocks, and improves node stability. Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4542 https://github.com/tronprotocol/java-tron/pull/4540","title":"1. Optimize block synchronization logic"},{"location":"releases/history/#2-optimize-eth_estimategas-and-eth_call-api","text":"The GreatVoyage-v4.5.2 (Aurelius) version optimizes the eth_estimateGas and eth_cal JSON-RPC interfaces; they can return error information when smart contract transaction execution is interrupted. Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4570","title":"2. Optimize eth_estimateGas and eth_call API"},{"location":"releases/history/#3-enhance-the-fault-tolerance-of-the-interface","text":"The GreatVoyage-v4.5.2 (Aurelius) version optimizes multiple API interfaces, enhances its fault tolerance for parameters, and improves the stability of API interfaces. Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4560 https://github.com/tronprotocol/java-tron/pull/4556 The universe is change; our life is what our thoughts make it. --- Aurelius","title":"3. Enhance the fault tolerance of the interface"},{"location":"releases/history/#greatvoyage-v451tertullian","text":"The GreatVoyage-v4.5.1(Tertullian) version introduces several important optimization updates. The optimized transaction cache loading process shortens the node startup time; the optimized block acquisition logic and light node synchronization logic promote the stability of the node; the optimized account asset structure and TVM cache structure improves the processing speed of transactions, thereby further improving the performance of node; supporting prometheus protocol interface brings users a more convenient development experience and helps to further prosper the TRON ecosystem.","title":"GreatVoyage-v4.5.1(Tertullian)"},{"location":"releases/history/#core_7","text":"","title":"Core"},{"location":"releases/history/#1-optimize-transaction-cache-loading","text":"In versions prior to GreatVoyage-v4.5.1 (Tertullian), it took a long time from node startup to block synchronization, and the loading of the transaction cache took up most of the node startup time. The transaction cache is used by the node to determine whether a transaction is a duplicate transaction, so during the node startup process, the transaction cache needs to be loaded from the database to the memory, and in versions prior to GreatVoyage-v4.5.1 (Tertullian), it adopts transaction as the storage unit to read the database when loading the transaction cache, so the amount of data to be read is large, and the entire reading process is time-consuming. In order to speed up the startup of the node, the GreatVoyage-v4.5.1 (Tertullian) version optimizes the loading of the transaction cache. By adopting the block as the storage unit to read the database reduces the times of database reading, improves the efficiency of transaction cache loading, and improves the speed of node startup. TIP: https://github.com/tronprotocol/tips/blob/master/tip-383.md Source Code: https://github.com/tronprotocol/java-tron/pull/4319","title":"1. Optimize transaction cache loading"},{"location":"releases/history/#2-optimize-account-trc-10-asset-storage-structure","text":"In versions prior to GreatVoyage-v4.5.1 (Tertullian), when there were too many TRC10 assets in the account, the content of the account stored in the database was large, resulting in the deserialization of the account during the transaction execution process is very time-consuming , therefore, the GreatVoyage-v4.5.1 (Tertullian) version adds a new proposal to optimize the asset structure of the account, allowing TRC-10 assets to be separated from the account and stored separately in a key-value data structure. That will reduce the content of the account structure, speed up the deserialization operation of the account and reduce the execution time of the transaction, thereby increasing the network throughput and improving the network performance. TIP: https://github.com/tronprotocol/tips/blob/master/tip-382.md Source Code: https://github.com/tronprotocol/java-tron/pull/4392","title":"2. Optimize account TRC-10 asset storage structure"},{"location":"releases/history/#3-optimize-light-node-synchronization","text":"Since light nodes do not store complete block data, there is a possibility that a node connects to a light node which does not have the block the node wants to synchronize with, in this situation, the light node will actively disconnect the connection. In versions prior to GreatVoyage-v4.5.1 (Tertullian), nodes may repeatedly establish connections with such light nodes, and then be disconnected by the other part, which greatly affects the efficiency of synchronizing blocks between nodes. Therefore, in the GreatVoyage-v4.5.1 (Tertullian) version, the logic of establishing a connection with light nodes has been optimized, and the two fields of \"node type\" and \"node's lowest block\" are added to the handshake message between nodes, and the nodes will save the handshake messages with each node. If the highest block of the current node is lower than the lowest block of the light node, it will actively disconnect from the light node, and the next time it establishes a connection with the node, it will filter out such nodes to avoid more invalidations connection, which improves the efficiency of synchronization between nodes. TIP: https://github.com/tronprotocol/tips/blob/master/tip-388.md Source Code: https://github.com/tronprotocol/java-tron/pull/4323","title":"3. Optimize light node synchronization"},{"location":"releases/history/#4-optimize-block-broadcasting","text":"The GreatVoyage-v4.5.1 (Tertullian) version optimizes the block broadcast logic, so that the fast forward node only broadcasts the block to the three super representative nodes that will produce blocks next (the number of broadcasted super representative nodes can be changed through the configuration file) to ensure that the super representative node can obtain the latest block in time, which improves the efficiency of block production. Source Code: https://github.com/tronprotocol/java-tron/pull/4336","title":"4. Optimize block broadcasting"},{"location":"releases/history/#5-optimize-fetch-block-process","text":"Due to network reasons, the node may not receive the new broadcasted block. In versions before GreatVoyage-v4.5.1 (Tertullian), when the block acquisition times out, the node will acquire the block through the P2P synchronization process, but the process is complicated and time-consuming. Therefore, the GreatVoyage-v4.5.1 (Tertullian) version optimizes the process of obtaining the latest block. The node will first select a node according to the status of each node, and then directly send the block obtaining message FetchInvDataMessage to this node to obtain the latest block, which saves most of the time in the block synchronization process, speeds up the acquisition of the latest block, and improves the stability of the node. TIP: https://github.com/tronprotocol/tips/blob/master/tip-391.md Source Code: https://github.com/tronprotocol/java-tron/pull/4326","title":"5. Optimize fetch block process"},{"location":"releases/history/#6-support-prometheus-metric-protocol-interface","text":"Starting from the GreatVoyage-v4.5.1 (Tertullian) version, the node provides an open source system monitoring tool - prometheus\u2019s protocol interface, and users can monitor the health status of the node more conveniently. TIP: https://github.com/tronprotocol/tips/blob/master/tip-369.md Source Code: https://github.com/tronprotocol/java-tron/pull/4337","title":"6. Support prometheus metric protocol interface"},{"location":"releases/history/#7-support-node-stop-at-specified-condition","text":"In order to facilitate node deployers to do data backup or data statistics, starting from the GreatVoyage-v4.5.1 (Tertullian) version, the node could stop running under specific conditions. Users can set the conditions for node stop through the node configuration file, such as the node stop\u2019s block time, block height, and the number of blocks the node needs to synchronize from start to stop. The node will stop running automatically when the set conditions are met. TIP: https://github.com/tronprotocol/tips/blob/master/tip-370.md Source Code: https://github.com/tronprotocol/java-tron/pull/4325","title":"7. Support node stop at specified condition"},{"location":"releases/history/#tvm_3","text":"","title":"TVM"},{"location":"releases/history/#1-adjust-the-upper-limit-that-can-be-set-for-the-maximum-execution-time-of-tvm","text":"\"TVM maximum execution time\" is a dynamic parameter of the TRON network, indicating the maximum time allowed for a smart contract to be executed. Super representatives can change this parameter through proposal voting. In versions prior to GreatVoyage-v4.5.1 (Tertullian), the maximum value that this parameter can be modified is 100ms. With the stability of the TRON network infrastructure and the vigorous development of the ecology, the 100ms upper limit confines the complexity of smart contracts. Therefore, GreatVoyage-v4.5.1 (Tertullian) version adds a new proposal that allows to raise the configurable upper limit of \"TVM maximum execution time\" to 400ms. TIP: https://github.com/tronprotocol/tips/blob/master/tip-397.md Source Code: https://github.com/tronprotocol/java-tron/pull/4375","title":"1. Adjust the upper limit that can be set for the maximum execution time of TVM"},{"location":"releases/history/#2-optimize-the-cache-structure-of-tvm","text":"In versions prior to GreatVoyage-v4.5.1 (Tertullian), the cached data in TVM is stored in the form of a byte array. When the data in the cache needs to be changed, the data must first be converted from the form of a byte array to a protobuf object by performing a serialization operation, then change a field of the object (such as account balance, etc.) to generate a new object, then serialize the newly generated protobuf object to byte array, and at last write the result byte array to TVM cache. Since the serialization and deserialization of protobuf is time-consuming, the GreatVoyage-v4.5.1 (Tertullian) version optimizes the data structure in the cache when TVM is executed, and directly saves the protobuf object data to reduce the serialize/deserialize operations when accessing the data in the cache, speeding up TVM execution of bytecode. Source Code: https://github.com/tronprotocol/java-tron/pull/4375 Hope is patience with the lamp lit. --- Tertullian","title":"2. Optimize the cache structure of TVM"},{"location":"releases/history/#greatvoyage-v446david","text":"GreatVoyage-v4.4.6 (David) updated the version of the dependency library fastjson to ensure the security of using fastjson.","title":"GreatVoyage-v4.4.6(David)"},{"location":"releases/history/#other-changes_12","text":"","title":"Other Changes"},{"location":"releases/history/#1-update-the-fastjson-dependency-library-to-the-latest-version","text":"Due to security vulnerabilities in fastjson 1.2.80 and earlier versions, GreatVoyage-v4.4.6 (David) updated the version of the fastjson dependency library to 1.2.83, and enabled the safemode mode of fastjson to ensure the safety of using fastjson. Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4393 *Beauty in things exists in the mind which contemplates them. * ---David Hume","title":"1. Update the fastjson dependency library to the latest version"},{"location":"releases/history/#greatvoyage-445cicero","text":"The GreatVoyage-v4.4.5 (Cicero) version optimizes the query interface of the node to filter out invalid fields, which ensures the stability of the interface for parsing data.","title":"GreatVoyage-4.4.5(Cicero)"},{"location":"releases/history/#other-changes_13","text":"","title":"Other Changes"},{"location":"releases/history/#1-optimize-the-query-interface-of-the-node","text":"The GreatVoyage-v4.5.0 (Cicero) version optimizes the query interface of the node. When parsing the obtained data, the node will filter out invalid fields to ensure to return the correct interface data Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4349 No one can give you better advice than yourself. ---Cicero","title":"1. Optimize the query interface of the node"},{"location":"releases/history/#greatvoyage-444plotinus","text":"The GreatVoyage-v4.4.4 (Plotinus) version introduces several important optimization updates, which reduces the node memory usage; speeds up node startup; Optimized network module, block production threads, improve the stability of nodes; Improved java-tron upgrade mechanism achieves more efficient decentralized governance; TVM supports multi-version program executors, which helps make it more compatible with EVM, brings users a more convenient development experience, and helps further flourish the TRON ecosystem.","title":"GreatVoyage-4.4.4(Plotinus)"},{"location":"releases/history/#core_8","text":"","title":"Core"},{"location":"releases/history/#1-optimize-node-startup-time","text":"Before the GreatVoyage-v4.4.4 (Plotinus), the node will execute about a minute from startup to block synchronization. The block synchronization thread will first delay 30s to wait for the P2P thread to discover remote nodes, then establish TCP connection with the discovered nodes, and finally perform the block synchronization. This delay time occupies most of the startup time. In fact, every newly discovered node will be persisted to the local database, so there is no need to spend extra time waiting for the node to be discovered when node is started for the second time. So in the GreatVoyage-v4.4.4(Plotinus) version, the waiting time for node discovery has been reduced from 30s to 100ms to improve the speed of node startup. TIP: https://github.com/tronprotocol/tips/blob/master/tip-366.md Source Code: https://github.com/tronprotocol/java-tron/pull/4254","title":"1. Optimize node startup time"},{"location":"releases/history/#2-optimize-memory-usage","text":"In order to avoid repeatedly broadcasting a transaction, the node will cache the transaction data into the broadcast data buffer. However,due to the limitation of the JVM's recycling policy, old cached data cannot be deleted in time until the buffer is full. Therefore, a buffer with a larger capacity will occupy a large amount of memory space. Before the GreatVoyage-v4.4.4 (Plotinus) version, the buffer pool size was 100000 transactions. In order to release the memory occupied by expired transactions in time , the GreatVoyage-v4.4.4 (Plotinus) version changed the buffer size to 20000 to reduce memory usage. TIP: https://github.com/tronprotocol/tips/blob/master/tip-362.md Source Code: https://github.com/tronprotocol/java-tron/pull/4250","title":"2. Optimize memory usage"},{"location":"releases/history/#3-optimize-the-block-producing-thread","text":"The GreatVoyage-v4.4.4 (Plotinus) version adds the interrupt exceptions handling in block-producing thread, so that when the block-producing node catches the interrupt instruction, it can exit safely. Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4219","title":"3. Optimize the block-producing thread"},{"location":"releases/history/#tvm_4","text":"","title":"TVM"},{"location":"releases/history/#1-tvm-support-multi-version-program-executors","text":"In order to enable the TRON network to support various types of smart contract transactions in the future, starting from GreatVoyage-v4.4.4 (Plotinus), TVM code is refactored to support multi-version program executors, it will select different instruction set to interpret and execute the bytecode of smart contract according to the contract version information. Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4257 https://github.com/tronprotocol/java-tron/pull/4259","title":"1. TVM support multi-version program-executors"},{"location":"releases/history/#other-changes_14","text":"","title":"Other Changes"},{"location":"releases/history/#1-optimize-log-storage","text":"The GreatVoyage-v4.4.4 (Plotinus) version modifies the node log retention time from 3 days to 7 days to facilitate users to troubleshoot issues. Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4245","title":"1. Optimize log storage"},{"location":"releases/history/#2-optimize-network-service-shutdown-logic","text":"The GreatVoyage-v4.4.4(Plotinus) version optimizes the network service shutdown logic, closing the synchronization service first, and then closing the TCP connection service to ensure that all P2P connection related services exit safely. Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4220","title":"2. Optimize network service shutdown logic"},{"location":"releases/history/#3-improve-the-java-tron-upgrade-mechenism","text":"For upgrade mechanism of java-tron,Before the GreatVoyage-v4.4.4 (Plotinus) version,all 27 super representative nodes need to complete the code upgrade, TRON network can be upgraded to the new version,TRON is a completely decentralized governance network,Sometimes the 27 super representative nodes cannot complete the code upgrade within a certain period of time, making the version upgrade process slow.In order to achieve more efficient decentralized governance, in GreatVoyage-v4.4.4 (Plotinus), the upgrade mechanism of java-tron has been improved, only 22 super representative nodes are needed to complete the code upgrade, and the TRON network can complete the upgrade. Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4218 The world is knowable, harmonious, and good. --- Plotinus","title":"3. improve the java-tron upgrade mechenism"},{"location":"releases/history/#greatvoyage-442augustinus","text":"The GreatVoyage-v4.4.2(Augustinus) has three essential updates: The new execution model of opcode boosts the TVM performance; individualized LevelDB parameters improve the database performance; and the newly added log filter APIs make the JSON-RPC API more comprehensive.","title":"GreatVoyage-4.4.2(Augustinus)"},{"location":"releases/history/#tvm_5","text":"","title":"TVM"},{"location":"releases/history/#1-tvm-opcode-execution-model-optimization","text":"The opcode execution model of the interpreter in TVM is optimized in GreatVoyage-v4.4.2(Augustinus). The performance of TVM is proven to have a great boost through testing. TIP: https://github.com/tronprotocol/tips/blob/master/tip-344.md Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4157","title":"1. TVM Opcode Execution Model Optimization"},{"location":"releases/history/#api_7","text":"","title":"API"},{"location":"releases/history/#1-newly-adding-eth-compatible-log-filter-for-json-rpc-apis","text":"Log filter related APIs are available from GreatVoyage-v4.4.2 for compatibility with Ethereum JSON-RPC API. TIP: https://github.com/tronprotocol/tips/issues/343 Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4153","title":"1. Newly Adding ETH compatible log filter for JSON-RPC APIs."},{"location":"releases/history/#other-changes_15","text":"","title":"Other Changes"},{"location":"releases/history/#1-leveldb-databases-performance-optimization","text":"Parameters of each LevelDB database have been individualized by the I/O frequencies from GreatVoyage-v4.4.2(Augustinus). This will significantly boost the database performance. Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4154 Patience is the companion of wisdom. --- Augustinus","title":"1. LevelDB Databases Performance Optimization"},{"location":"releases/history/#greatvoyage-440rousseau","text":"The GreatVoyage-v4.4.0 (Rousseau) version introduces several important updates: the optimization of block broadcasting will let the block be broadcast to the entire network faster; the query performance optimization of dynamic store and the optimization of database parameters will be greatly improved Block processing speed, thereby improving the performance of java-tron; API customization in FullNode makes node configuration more flexible for different application scenarios; TVM will also be better compatible with EVM and adapt to the Ethereum London upgrade, the new JSON-RPC API will bring developers a better development experience, help developers to join the TRON ecosystem more easily, and promote the prosperity of the TRON ecosystem.","title":"GreatVoyage-4.4.0(Rousseau)"},{"location":"releases/history/#core_9","text":"","title":"Core"},{"location":"releases/history/#1-optimize-the-block-broadcasting","text":"In the version before GreatVoyage-v4.4.0 (Rousseau), the logic of block processing is: verify block -> process block -> broadcast block. However, due to the long block processing time, there is a delay in block broadcasting. In order to speed up block broadcasting, In GreatVoyage-v4.4.0 (Rousseau) version, the block processing logic is changed to: verify block -> broadcast block -> process block, so that the block can be quickly broadcast to the entire network. TIP: https://github.com/tronprotocol/tips/blob/master/tip-289.md Source Code:https://github.com/tronprotocol/java-tron/pull/3986","title":"1. Optimize the block broadcasting"},{"location":"releases/history/#2-optimize-the-query-performance-of-dynamic-store","text":"During the block processing, The frequency of visits to dynamic store is very high. The GreatVoyage-v4.4.0(Rousseau) version optimizes the query performance of the dynamic store by loading all the data of dynamic store into the first-level cache, the cache hit rate of the dynamic store is improved and the block processing speed is also improved. TIP: https://github.com/tronprotocol/tips/blob/master/tip-290.md Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/3993","title":"2. Optimize the query performance of dynamic store"},{"location":"releases/history/#3-optimize-the-transaction-broadcasting-interface","text":"The GreatVoyage-v4.4.0 (Rousseau) version optimizes the processing flow of the transaction broadcast interface. The transaction broadcast is changed from asynchronous to synchronous, and the result will be returned after the broadcast is successful, making the return result of the broadcast more accurate. Source code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4000","title":"3. Optimize the transaction broadcasting interface"},{"location":"releases/history/#4-optimize-the-parameters-of-the-database","text":"The GreatVoyage-v4.4.0 (Rousseau) version optimizes the parameters of the database, which improves the read and write performance of the database, thereby improving the efficiency of block processing. Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4018 https://github.com/tronprotocol/java-tron/pull/3992","title":"4. Optimize the parameters of the database"},{"location":"releases/history/#tvm_6","text":"","title":"TVM"},{"location":"releases/history/#1-provide-compatibility-with-evm","text":"The GreatVoyage-v4.4.0 (Rousseau) version provides compatibility solution for those instructions that are different from EVM, so that the newly deployed contract supports the following features: - The GASPRICE instruction returns the unit price of energy. - The try/catch-statement supports catching all types of TVM exceptions. - Forbid the system contract \u201cTransferContract\u201d to transfer TRX to the smart contract account. TIP: https://github.com/tronprotocol/tips/blob/master/tip-272.md Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4032 NOTICE \uff1a By default, this feature is disabled, and the super representative or super partner will initiate a vote request to enable it in the future.","title":"1. Provide compatibility with EVM"},{"location":"releases/history/#2-adapt-to-ethereum-london-release","text":"In the GreatVoyage-v4.4.0 (Rousseau) version, TVM is also adapted to the Ethereum London upgrade: introduce the BASEFEE opcode; the deployment of new contracts starting with 0xEF is prohibited. TIP: https://github.com/tronprotocol/tips/blob/master/tip-318.md Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4032 NOTICE \uff1a By default, this feature is disabled, and the super representative or super partner will initiate a vote request to enable it in the future.","title":"2. Adapt to Ethereum London Release"},{"location":"releases/history/#3-in-constant-mode-energy-limit-supports-customization-and-the-default-value-is-increased","text":"Before the GreatVoyage-v4.4.0 (Rousseau) version, the energy limit in constant mode was a fixed value( 3,000,000 ). The GreatVoyage-v4.4.0 (Rousseau) version changed it to configurable, and increase the default value to 100,000,000 . after upgraded to the latest version, Energy limit can be configured in startup parameters( --max-energy-limit-for-constant ) or in the configuration file( vm.maxEnergyLimitForConstant ). Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4032","title":"3. In constant mode, Energy limit supports customization and the default value is increased"},{"location":"releases/history/#api_8","text":"","title":"API"},{"location":"releases/history/#1-support-ethereum-compatible-json-rpc-api","text":"Starting from the GreatVoyage-v4.4.0 (Rousseau) version, the FullNode supports JSON-RPC APIs. For details, please refer to: https://developers.tron.network/reference#json-rpc-api Source Code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4046","title":"1. Support Ethereum compatible JSON-RPC API"},{"location":"releases/history/#2-fullnode-supports-disabling-apis","text":"In order to make the FullNode customizable, starting from GreatVoyage-v4.4.0 (Rousseau) version, FullNode supports disabling specific APIs through the configuration file. Source code\uff1ahttps://github.com/tronprotocol/java-tron/pull/4045","title":"2. FullNode supports disabling APIs"},{"location":"releases/history/#3-optimize-the-triggerconstantcontract-api","text":"In GreatVoyage-v4.4.0 (Rousseau), the following optimizations have been introduced to the TriggerConstantContract interface: - Execute contract creation when ContractAddress is empty - Remove the check of the incoming parameters callvalue and tokenvalue - The log list and internal transaction list are added to TransactionExtention Source Code\uff1a https://github.com/tronprotocol/java-tron/pull/4032","title":"3. Optimize the TriggerConstantContract API"},{"location":"releases/history/#changes","text":"","title":"Changes"},{"location":"releases/history/#1-upgrade-event-plugin-to-support-bttc-data","text":"The event plugin has been upgraded in GreatVoyage-v4.4.0 (Rousseau) to support BTTC . Source code: https://github.com/tronprotocol/java-tron/pull/4067","title":"1. Upgrade event plugin to support BTTC data"},{"location":"releases/history/#2-increase-the-upper-limit-of-the-maxfeelimit-network-parameter","text":"In the version before GreatVoyage-v4.4.0 (Rousseau), the value range of MaxFeeLimit is [0,1e10] sun, in GreatVoyage-v4.4.0 (Rousseau) the value range of MaxFeeLimit is expanded to [0, 1e17] sun. Source Code\uff1a https://github.com/tronprotocol/java-tron/pull/4032 NOTICE \uff1a By default, this feature is disabled, it will be enabled after the London upgrade proposal takes effect.","title":"2. Increase the upper limit of the MaxFeeLimit network parameter."},{"location":"releases/history/#3-optimize-the-quick-start-script-startsh","text":"The quick start script tool is also upgraded in the GreatVoyage-v4.4.0 (Rousseau) version, please refer to the latest user guide from: https://github.com/tronprotocol/java-tron/blob/release_v4.4.0/shell.md The world of reality has its limits; the world of imagination is boundless. --- Rousseau","title":"3. Optimize the quick start script start.sh"},{"location":"releases/history/#greatvoyage-430bacon","text":"The release of GreatVoyage-v4.3.0 (Bacon) includes several significant optimization enhancements. The configurability of the parameters FREE_NET_LIMIT and TOTAL_NET_LIMIT will aid the TRON community in achieving improved on-chain governance; The addition of new TVM instructions and ABI types facilitates the use of smart contracts; the new cryptography library strengthens the TRON network's security; the optimization of the account data storage and transaction verification procedures increases transaction processing speed and block verification speed, greatly improving the TRON network's performance; node startup speed improvement will benefit customers and help the TRON ecosystem grow even further.","title":"GreatVoyage-4.3.0(Bacon)"},{"location":"releases/history/#core_10","text":"","title":"Core"},{"location":"releases/history/#1-add-a-proposal-to-adjust-the-free-net-limit-in-an-account","text":"Prior to GreatVoyage-v4.3.0 (Bacon), the account's daily free bandwidth quota was fixed at 5000. The GreatVoyage-v4.3.0 (Bacon) version includes the #61 proposal FREE_NET_LIMIT , which allows for the customization of the free bandwidth quota. Super representatives and super partners may initiate a vote request for Proposal 61, which modifies the FREE_NET_LIMIT variable, which has the value [0, 100000]. TIP: https://github.com/tronprotocol/tips/blob/master/tip-292.md Source Code: https://github.com/tronprotocol/java-tron/pull/3917 NOTICE The account's daily free bandwidth quota is not changed now. The super representative or super partner will initiate a vote request to change the value in the future.","title":"1. Add a proposal to adjust the free net limit in an account."},{"location":"releases/history/#2-add-a-proposal-to-adjust-the-total-net-limit","text":"Prior to GreatVoyage-v4.3.0 (Bacon), the total bandwidth obtained by staking TRX throughout the entire network was fixed at 43,200,000,000. The GreatVoyage-v4.3.0 (Bacon) version incorporates proposal #62 TOTAL_NET_LIMIT , which allows for configuring the total bandwidth available by staking TRX over the entire network. Super representatives and super partners may initiate a voting request for Proposal 62, which amends TOTAL_NET_LIMIT . TOTAL_NET_LIMIT has a range of [0, 1000000000000]. TIP: https://github.com/tronprotocol/tips/blob/master/tip-293.md Source Code: https://github.com/tronprotocol/java-tron/pull/3917 NOTICE The total net limit is not changed now. The super representative or super partner will initiate a vote request to change the value in the future.","title":"2. Add a proposal to adjust the total net limit."},{"location":"releases/history/#3-optimize-the-account-data-structure","text":"Account is a database that receives numerous accesses during the node's operation, necessitating frequent deserialization operations on the account data structure. Prior to GreatVoyage-v4.3.0 (Bacon), Account contained not only the account's basic data, but also user TRC-10 asset data. However, for TRX transfers and smart contract-related transactions, only the Account's basic data is used. An excessively large TRC-10 asset list will have a significant impact on the Account data structure's deserialization performance. GreatVoyage-v4.3.0 (Bacon) improves the Account database's storage structure by separating TRC-10 asset data from the Account and storing it independently in the AccountAssetIssue . Reduce the amount of data that is deserialized during Account deserialization and increase the deserialization speed. TIP: https://github.com/tronprotocol/tips/blob/master/tip-295.md Source Code: https://github.com/tronprotocol/java-tron/pull/3906 NOTICE By default, this feature is disabled, and the super representative or super partner will initiate a vote request to enable it in the future.","title":"3. Optimize the Account Data Structure"},{"location":"releases/history/#tvm_7","text":"","title":"TVM"},{"location":"releases/history/#1-add-vote-instructions-and-precompile-contracts-in-tvm","text":"Ordinary accounts can earn block rewards and voting rewards in versions prior to GreatVoyage-v4.3.0 (Bacon) by voting for super representatives or super representative candidates. However, because TVM does not accept voting instructions, TRX assets in smart contract accounts are unable to generate revenue via voting. The GreatVoyage-v4.3.0 (Bacon) version adds voting instructions to TVM: VOTE / WITHDRAWBALANCE , allowing smart contract accounts to vote for super representatives or super representative candidates. TIP: https://github.com/tronprotocol/tips/blob/master/tip-271.md Source Code: https://github.com/tronprotocol/java-tron/pull/3921 NOTICE By default, this feature is disabled, and the super representative or super partner will initiate a vote request to enable it in the future.","title":"1. Add Vote Instructions and Precompile Contracts in TVM"},{"location":"releases/history/#2-add-a-new-type-error-in-smart-contract-abi","text":"GreatVoyage-v4.3.0 (Bacon) provides a new ABI type Error, which is a custom error type that is compatible with Ethereum solidity 0.8.4's new features. TIP: https://github.com/tronprotocol/tips/blob/master/tip-306.md Source Code: https://github.com/tronprotocol/java-tron/pull/3921","title":"2. Add a New Type: Error in Smart Contract ABI"},{"location":"releases/history/#api_9","text":"","title":"API"},{"location":"releases/history/#1-add-a-new-field-energy_used-in-transactionextention","text":"Users cannot forecast the energy usage of smart contract transactions in versions earlier to GreatVoyage-v4.3.0 (Bacon). The version of GreatVoyage-v4.3.0 (Bacon) adds the energy_used field to the TransactionExtension . When the user invokes the contract method via TriggerConstantContract , a sandbox environment based on the most recently synchronized block at the current node is created to supply TVM with this method call. Following the execution, the actual energy consumption figure is written to the energy_used field(this operation will not generate an on-chain transaction, nor will it change the status of the current node). Source Code: https://github.com/tronprotocol/java-tron/pull/3940","title":"1. Add a New Field: energy_used in TransactionExtention"},{"location":"releases/history/#changes_1","text":"","title":"Changes"},{"location":"releases/history/#1-change-the-cryptography-library-to-bouncy-castle","text":"Since SpongyCastle is no longer maintained, BouncyCastle is utilized as the encryption library starting with GreatVoyage-v4.3.0 (Bacon). Source Code: https://github.com/tronprotocol/java-tron/pull/3919","title":"1. Change the Cryptography Library to Bouncy Castle"},{"location":"releases/history/#2-modify-the-calculation-of-net_usage-value-in-the-transactioninfo-when-creating-new-accounts","text":"When a new account is created in GreatVoyage-v4.3.0 (Bacon), the method for calculating net_usage is altered. Source Code: https://github.com/tronprotocol/java-tron/pull/3917","title":"2. Modify the Calculation of net_usage Value in the Transactioninfo when Creating New Accounts"},{"location":"releases/history/#3-optimize-the-block-verification","text":"When a node checks a block prior to GreatVoyage-v4.3.0 (Bacon), it verifies each transaction included inside it, regardless of whether it has been verified previously. The transaction verification procedure consumes roughly one-third of the total time required to process a block. The GreatVoyage-v4.3.0 (Bacon) release optimizes the block verification logic. If non- AccountUpdateContract transactions in the block have been validated previously ( AccountUpdateContract transactions entail account permission changes), they will no longer be verified to expedite block verification. TIP: https://github.com/tronprotocol/tips/blob/master/tip-276.md Source Code: https://github.com/tronprotocol/java-tron/pull/3910","title":"3. Optimize the Block Verification"},{"location":"releases/history/#4-optimize-the-node-startup","text":"Prior to GreatVoyage-v4.3.0 (Bacon), during node startup, transaction cache and block data from the database are read to complete the RAM transaction cache initialization. The RAM transaction cache initialization process has been streamlined in GreatVoyage-v4.3.0 (Bacon), and some superfluous parsing processes have been deleted. The speed of node startup will be increased following optimization. TIP: https://github.com/tronprotocol/tips/blob/master/tip-285.md Source Code: https://github.com/tronprotocol/java-tron/pull/3907","title":"4. Optimize the Node Startup"},{"location":"releases/history/#5-optimize-transaction-processing-flow-to-reduce-memory-usage","text":"The transaction processing flow is streamlined in GreatVoyage-v4.3.0 (Bacon), unneeded objects are released in advance, and memory utilization is optimized. Source Code: https://github.com/tronprotocol/java-tron/pull/3911","title":"5. Optimize Transaction Processing Flow to Reduce Memory Usage"},{"location":"releases/history/#6-add-new-plugins-to-optimize-the-performance-of-levedb-startup","text":"In the version before GreatVoyage-v4.3.0 (Bacon), with the running of levedb , the manifest file will continue to grow. Excessive manifest file will not only affect the startup speed of the node but also may cause the memory to continue to grow and lead to insufficient memory and the service was terminated abnormally. GreatVoyage-v4.3.0 (Bacon) introduces the leveldb startup optimization plug-in. The plug-in optimizes the file size of the manifest and the startup process of LevelDB, reduces memory usage, and improves node startup speed. TIP: https://github.com/tronprotocol/tips/blob/master/tip-298.md Source Code: https://github.com/tronprotocol/java-tron/pull/3925 Plug-in Usage Guide: https://github.com/tronprotocol/documentation-en/blob/master/docs/developers/archive-manifest.md Knowledge is power. --- Francis Bacon","title":"6. Add New Plugins to Optimize the Performance of levedb Startup"},{"location":"releases/history/#greatvoyage-4221epictetus","text":"We have just released the version of GreatVoyage-v4.2.2.1(Epictetus). The main new features and modifications are as follows:","title":"GreatVoyage-4.2.2.1(Epictetus)"},{"location":"releases/history/#core-protocol","text":"","title":"Core Protocol"},{"location":"releases/history/#1-optimize-the-processing-logic-of-pending-transactions","text":"In the versions before GreatVoyage-v4.2.2.1(Epictetus), if the node has enabled the event subscription service, there will be a small probability of abnormal node synchronization. The GreatVoyage-v4.2.2.1(Epictetus) version optimizes the processing logic of pending transaction , fixes the synchronization exception, and improves the stability of the event subscription service. Source code: #3874 The update introduced by the GreatVoyage-v4.2.2.1(Epictetus) version optimizes the processing logic of pending transaction , which will greatly improve the stability of the event subscription service, bring a better experience for TRON users, and further prosper the TRON ecosystem. No great thing is created suddenly. --- Epictetus","title":"1. Optimize the processing logic of pending transactions."},{"location":"releases/history/#greatvoyage-422lucretius","text":"The version of GreatVoyage-v4.2.2 (Lucretius) introduces three important optimizations. The optimization of block processing effectively improves the execution speed of the block, thereby significantly improving the performance of the TRON network. Efficient HTTP/RPC query and excellent TVM performance will bring a better experience to TRON DAPP users and further prosper the TRON ecosystem.","title":"GreatVoyage-4.2.2(Lucretius)"},{"location":"releases/history/#core-protocol_1","text":"","title":"Core Protocol"},{"location":"releases/history/#1-block-processing-optimization","text":"In the versions before GreatVoyage-v4.2.2 (Lucretius), to obtain the witness list during block processing, multiple database queries and deserialization operations were performed, which took up nearly 1/3 of the block processing time. The GreatVoyage-v4.2.2 (Lucretius) version simplifies the query of witnesses. In the block processing process, the witness list can be obtained by only one query. After testing, this optimization has dramatically improved the block processing performance. TIP: TIP-269 Source code: #3827","title":"1. Block Processing optimization"},{"location":"releases/history/#2-data-query-optimization","text":"In the versions before GreatVoyage-v4.2.2 (Lucretius), multiple HTTP or RPC queries for data on the chain are mutually exclusive. If a query request is being processed, a new query request will keep waiting until the previous request is completed. However, data query methods never use shared data, and no lock operation is required. This optimization removes unnecessary synchronization locks in the query process and improves the performance of internal queries, HTTP and RPC query requests of nodes.","title":"2. Data Query optimization"},{"location":"releases/history/#3-smart-contract-abi-storage-optimization","text":"In the version before GreatVoyage-v4.2.2 (Lucretius), the ABI other data of the smart contract are stored together in the contract database, and some high-frequency instructions (SLOAD, SSTORE, Etc.) will read all the data of a smart contract from the contract database. However, the execution of the contract does not use these ABI data, and these frequent readings will impact the execution efficiency of these instructions. In the version of GreatVoyage-v4.2.2 (Lucretius), smart contract ABIs are transferred to a particular ABI database. The ABI data will no longer be read during the execution of the contract, thus significantly improving the performance of TVM. TIP: TIP-268 Source code: #3836","title":"3. Smart Contract ABI Storage optimization"},{"location":"releases/history/#other-changes_16","text":"","title":"Other Changes"},{"location":"releases/history/#1-system-contract-batchvalidatesign-initialization-process-optimization","text":"Source code: #3836 --- Truths kindle light for truths. --- Lucretius","title":"1. System Contract BatchValidateSign Initialization Process optimization"},{"location":"releases/history/#greatvoyage-420plato","text":"The GreatVoyage-4.2.0 (Plato) version introduces two important updates. The optimization of the resource model will increase the utilization rate of TRON network resources and make the resource acquisition method more reasonable. The new TVM instructions make the use scenarios of smart contracts more abundant and will further enrich the TRON ecosystem.","title":"GreatVoyage-4.2.0(Plato)"},{"location":"releases/history/#core-protocol_2","text":"","title":"Core Protocol"},{"location":"releases/history/#1-optimize-the-resource-model","text":"Before the GreatVoyage-4.2.0 (Plato) version, while users obtained a large amount of TRON power by staking TRX, they also obtained a large amount of energy and bandwidth. The utilization rate of these energies and bandwidth is extremely low, and most of them are not used at all, which increases the cost of obtaining resources. In order to improve the utilization rate of these resources, the GreatVoyage-4.2.0(Plato) version proposes an optimization of the resource model, where staking TRX can only obtain one of the three resources, namely bandwidth, energy, and TRON power. After optimization, users can obtain the corresponding resources based on their own needs, thereby improving the utilization rate of resources. TIP\uff1a TIP-207 Source Code: #3726 Notes: * This feature is disabled by default and can be enabled through the proposal system. * After the feature is enabled, the user's previously obtained resources remain unchanged. The TRON power obtained before the proposal passage will be cleared when the user triggers an unstake transaction (unstake bandwidth, energy, or TRON power).","title":"1. Optimize the resource model"},{"location":"releases/history/#tvm_8","text":"","title":"TVM"},{"location":"releases/history/#1add-freezeunfreeze-instructions-in-tvm","text":"In the TRON network, one non-contract account can stake TRX to obtain resources such as bandwidth, energy, TRON power, and reasonable use of these resources can bring certain benefits to users. At the same time, although smart contract accounts do have TRX, there is no way to stake these TRX to obtain resources. In order to solve this inconsistency, the GreatVoyage-4.2.0(Plato) version introduces Freeze/Unfreeze instructions in TVM, so that smart contracts can also support staking TRX to obtain resources. TIP: TIP-157 Source Code\uff1a #3728 Notes: * This feature is disabled by default and can be enabled through the proposal system. * The TVM freeze instruction can obtain bandwidth and energy. For TRON POWER, it can be obtained and used after the TVM supports the voting instruction. * The receiving address/ target address used in the Freeze/Unfreeze instructions must be address payable type, and the receiving address/ target address cannot be a contract address other than itself. * The inactive account will be automatically activated if the account is the receiver of TVM Freeze instruction, and 25,000 energy will be deducted as the account activation cost.","title":"1\u3001Add Freeze/Unfreeze instructions in TVM"},{"location":"releases/history/#other-changes_17","text":"","title":"Other Changes"},{"location":"releases/history/#1optimize-the-block-synchronization","text":"Source code\uff1a #3732 The beginning is the most important part of the work. --- Plato","title":"1\u3001Optimize the block synchronization."},{"location":"releases/history/#greatvoyage-413thales","text":"GreatVoyage-4.1.3(Thales) is released with the following new features and modifications:","title":"GreatVoyage-4.1.3(Thales)"},{"location":"releases/history/#core-protocol_3","text":"","title":"Core Protocol"},{"location":"releases/history/#1sorting-the-transactions-in-pending-pool-sr-will-prioritize-the-transactions-with-high-packing-fee","text":"In GreatVoyage-4.1.2 and earlier versions, SR packaging transactions are carried out in accordance with the time sequence of the arrival of the transaction.This will easily be attacked by low transaction fees. After this optimization, block producers sort the transactions to be packaged according to the cost, and then prioritize the transaction with high cost to prevent low-cost transaction attacks.","title":"1.Sorting the transactions in pending pool, SR will prioritize the transactions with high packing fee"},{"location":"releases/history/#api_10","text":"","title":"API"},{"location":"releases/history/#1add-new-api-to-support-transaction-query-in-pending-pool","text":"It is currently impossible to query the intermediate state information of a certain transaction from after it is issued to before it is on the chain.After a transaction is sent, if it is not on the chain, we cannot know whether it is waiting for packaging or has been discarded. In this upgrade, the Fullnode node provides 3 API to obtain detailed information about the pending pool: - /wallet/gettransactionfrompending: Obtain the transaction information from pending pool through the - transaction ID - /wallet/gettransactionlistfrompending: Get all transactions from the pending pool - /wallet/getpendingsize: Get the number of transactions in pending pool The optimization of transaction packaging logic of GreatVoyage-4.1.3(Thales) will effectively reduce low-cost attacks and greatly improve the security of the TRON public chain.","title":"1.Add new API to support transaction query in pending pool."},{"location":"releases/history/#great-voyage-v412","text":"GreatVoyage-version 4.1.2 is released with the following new features and modifications:","title":"Great Voyage - v4.1.2"},{"location":"releases/history/#i-core-protocol","text":"","title":"I. Core Protocol"},{"location":"releases/history/#1reward-srs-with-the-transaction-fees-charged-for-bandwidth-and-energy","text":"After this feature is turned on, the transaction fee from burning TRX which charged for bandwidth/energy (except OUT_OF_TIME) will be transferred to TRANSACTION_FEE_POOL. At the end of each block, the fee of all transactions in this block is rewarded to the block SR and its voters. At the same time, in \"transactioninfo\", the \"packingFee\" field is added to indicate the available fees to the current SR and SR voters. TIP: TIP-196 Source Code: #3532","title":"1\u3001Reward SRs with the transaction fees charged for bandwidth and energy."},{"location":"releases/history/#2support-account-history-balance-query","text":"The account historical balance query function can facilitate developers to query the account balance information at a specific block height. Developers can obtain the account historical balance information through the following two APIs. /wallet/getaccountbalance \uff1aquery account balance at a specific block. /wallet/getblockbalance \uff1a Query the balance-changing operations in a specific block. Note: 1. This function is disabled by default and can be enabled through the node configuration file. 2. After the function is enabled, users can only query the historical balance after the enabled time. If users need to query the complete historical balance information, they can use the data snapshot which contains the historical balance information to resynchronize the node. Source Code\uff1a #3538 Guide \uff1a https://github.com/tronprotocol/documentation-en/blob/master/docs/api/http.md","title":"2\u3001Support account history balance query."},{"location":"releases/history/#3optimized-the-blackhole-account-to-improve-transaction-execution-speed","text":"After the feature is turned on, the transaction fee from burning TRX which charged f for bandwidth and energy will no longer be transferred to the black hole address but will be directly accumulated and recorded in the database. Source code\uff1a #3617","title":"3\u3001Optimized the blackhole account to improve transaction execution speed"},{"location":"releases/history/#ii-tvm","text":"","title":"II. TVM"},{"location":"releases/history/#1adopt-to-solidity060","text":"After this upgrade, TRON will be fully compatible with the new features introduced by solidity 0.6.0, including the new virtual and override keywords, and supporting try/catch. For details, please refer to the TRON Solidity release note: https://github.com/tronprotocol/solidity/releases/tag/tv_0.6.0 TIP: TIP-209 Source Code\uff1a #3351","title":"1\u3001Adopt to solidity0.6.0."},{"location":"releases/history/#2make-max_fee_limit-configurable-as-a-chain-property","text":"After the new version, SR and SRP can initiate a voting request to modify MAX_FEE_LIMIT. The range of MAX_FEE_LIMIT is [0,10000000000]. TIP\uff1a TIP-204 Source code\uff1a #3534","title":"2\u3001Make MAX_FEE_LIMIT configurable as a chain property."},{"location":"releases/history/#iii-others-changes","text":"","title":"III. Others Changes"},{"location":"releases/history/#1use-the-jitpack-repository-to-provide-dependency-support-and-make-it-easy-for-developers-to-use-java-tron-as-a-dependency-for-their-projects","text":"Source code: #3554","title":"1\u3001Use the jitpack repository to provide dependency support and make it easy for developers to use java-tron as a dependency for their projects."},{"location":"releases/history/#greatvoyage-v411","text":"GreatVoyage-version 4.1.1 is released with the following new features and modifications:","title":"GreatVoyage-v4.1.1"},{"location":"releases/history/#i-core-protocol_1","text":"","title":"I. Core Protocol"},{"location":"releases/history/#1-new-consensus-protocol","text":"The new consensus mechanism combines TRON's existing DPoS consensus with the PBFT consensus mechanism. PBFT's three-phase voting mechanism is adopted to confirm whether a block should be solidified. It will take an average of 1-2 slots (a slot equals 3s) from creation to confirmation of a TRON block, much shorter than the previous 19 slots. This signifies a remarkable increase in the block confirmation speed. TIP: TICP-Optimized-PBFT Source code: #3082","title":"1. New Consensus Protocol"},{"location":"releases/history/#2-new-node-type","text":"We added another type of node to the existing FullNode: Lite FullNode. Lite FullNode executes the same code with the FullNode. What sets it apart is that its launch is based on the status data snapshot, which contains all the status data and data history of the latest 256 blocks. The status data snapshot can be acquired by executing LiteFullNodeTool.jar (please see: Use the LiteFullNode Tool ). - TIP: TIP-128 - Source code: #3031","title":"2. New Node Type"},{"location":"releases/history/#ii-tvm_1","text":"","title":"II. TVM"},{"location":"releases/history/#achieved-compatibility-with-ethereum-istanbul-upgrade","text":"a. Added new instruction CHAINID to fetch the genesis block ID of the current chain, which avoids possible replay attacks of one transaction being repeated on different chains. - TIP: TIP-174 - Source code: #3351 b. Added new instruction SELFBALANCE to fetch the balance of the current contract address in the smart contract. For obtaining the balance of any address, please stick with instruction BALANCE.SELFBALANCE is safer to use. Energy consumption of using BALANCE might rise in the future. - TIP: TIP-175 - Source code: #3351 c. Reduced Energy consumption of three precompiled contract instructions, namely BN128Addition, BN128Multiplication, and BN128Pairing. BN128Addition: from 500 Energy to 150 Energy BN128Multiplication: from 40000 Energy to 6000 Energy BN128Pairing: from (80000 * pairs + 100000) Energy to (34000 * pairs + 45000) Energy - TIP: TIP-176 - Source code: #3351","title":"Achieved compatibility with Ethereum Istanbul upgrade"},{"location":"releases/history/#iii-mechanism","text":"Added two new system contracts, namely MarketSellAssetContract and MarketCancelOrderContract, for on-chain TRX/TRC10 transactions in decentralized exchanges. TIP: TIP-127 Source code: #3302","title":"III. Mechanism"},{"location":"releases/history/#iv-other-modifications","text":"Added a few node performance indicators. Source code: #3350 Added market order detail in the original transactionInfo interface. TIP: TIP-127 Source code: #3302 Improved the script for docker deployment. Source code: #3330","title":"IV. Other Modifications"},{"location":"releases/history/#greatvoyage-v400","text":"Release 4.0.0 has implemented the shielded TRC-20 contract, which can hide the source address, destination address, and the token amount for TRC-20 transactions and provide users with better privacy. The shielded TRC-20 contract has three core functions: mint , transfer and burn . mint is used to transform the public TRC-20 token to shielded token; transfer is used for shielded token transactions; burn is used to transform the shielded token back to the public TRC-20 token. To support the shielded TRC-20 contract, four new zero-knowledge instructions ( verifyMintProof , verifyTransferProof , verifyBurnProof and pedersenHash ) are add in TVM, which make it convenient to provide privacy for arbitrary TRC-20 contract.","title":"GreatVoyage-v4.0.0"},{"location":"releases/history/#notices","text":"Forced upgrade","title":"Notices"},{"location":"releases/history/#new-features","text":"Add 4 new instructions ( verifyMintProof , verifyTransferProof , verifyBurnProof and pedersenHash ) in TVM to support TRC20 shielded transactions based on zk-SNARKs (#3172). verifyMintProof : used to validate the zero-knowledge proof for mint function. verifyTransferProof : used to validate the zero-knowledge proof for transfer function. verifyBurnProof : used to validate the zero-knowledge proof for burn function. pedersenHash : used to compute the Pedersen hash. Update the initial parameters of zk-SNARKs scheme generated by the MPC Torch (#3210). Add the APIs to support shielded TRC-20 contract transaction (#3172). 1. Create shielded contract parameters rpc CreateShieldedContractParameters ( PrivateShieldedTRC20Parameters ) returns ( ShieldedTRC20Parameters ) {} 2. Create shielded contract parameters without ask rpc CreateShieldedContractParametersWithoutAsk ( PrivateShieldedTRC20ParametersWithoutAsk ) returns ( ShieldedTRC20Parameters ) {} 3. Scan shielded TRC20 notes by ivk rpc ScanShieldedTRC20NotesByIvk ( IvkDecryptTRC20Parameters ) returns ( DecryptNotesTRC20 ) {} 4. Scan shielded TRC20 notes by ovk rpc ScanShieldedTRC20NotesByOvk ( OvkDecryptTRC20Parameters ) returns ( DecryptNotesTRC20 ) {} 5. Check if the shielded TRC20 note is spent rpc IsShieldedTRC20ContractNoteSpent ( NfTRC20Parameters ) returns ( NullifierResult ) {} 6. Get the trigger input for the shielded TRC20 contract rpc GetTriggerInputForShieldedTRC20Contract ( ShieldedTRC20TriggerContractParameters ) returns ( BytesMessage ) {} - Support the ovk to scan the transparent output of burn transaction (#3203). - Support the burn transaction with zero or one shielded output (#3224). - Add data field in transaction log trigger class for future memo note (#3200). The following TIPs are implemented in this release: - TIP-135 : Shielded TRC-20 contract standards, guarantee the privacy of the shielded transfer of TRC-20 tokens. - TIP-137 : Implements three zero-knowledge proof instructions in TVM to support the shielded TRC-20 contract (#3172). - TIP-138 : Implements the Pedersen hash computation instruction in TVM to support the shielded TRC-20 contract (#3172).","title":"New features"},{"location":"releases/history/#changes_2","text":"Check if null before getInstance when get transaction info from DB to fix exception of getTransactioninfoByBlkNum (#3165).","title":"Changes"},{"location":"releases/history/#odyssey-v37","text":"Odyssey-v3.7 is a non-mandatory upgrade, includes the following new features and improvements.","title":"Odyssey-v3.7"},{"location":"releases/history/#modularization","text":"Odyssey-v3.7 has modularized the code organization structure, making it much easier for developers to develop customized module\uff0cseveral mainly modules are listed as follows\uff1a","title":"Modularization"},{"location":"releases/history/#framework","text":"As the core module, Framework performs as both a gateway to the blockchain and an adhesive that effectively connects all other modules. In other words, the framework module initializes each module and facilitates communication between modules.","title":"Framework"},{"location":"releases/history/#protocol","text":"The decentralized TRON protocol can be implemented by any teams without limitation of programming languages. Any clients in accordance with the TRON protocol can communicate with each other. A concise and efficient data transfer protocol is essential to a distributed network, even more for the blockchain. So, the implementation of the protocol is based on the Protocol Buffers, an open-source and excellent software protocol maintained by Google. The specific business logic of the blockchain defined by the protocol includes: - the data format of message\uff0cincluding block, transaction, proposal, witness, vote, account, exchange and so on. - the communication protocols between blockchain nodes, including the node discovery protocol, the node data synchronization protocol, the node scoring protocol and so on. - the interface protocols that the blockchain provides to the external system or clients","title":"Protocol"},{"location":"releases/history/#consensus","text":"The consensus mechanism is an essential part of the blockchain. The TRON blockchain chooses the DPoS as the core consensus mechanism and it has been running steadily for a long time. But replaceable consensus module is essential if we want to redefine the java-tron as the powerful infrastructure for building application-specific blockchains. The developers of blockchain should determine to choose the consensus mechanism that considered to be most suitable to the specific application scenario. The ultimate goal of the replaceable consensus module is that the consensus mechanism can be determined by configuring some necessary parameters. In addition, the developers can implement a customized consensus module as long as several essential interfaces implemented.","title":"Consensus"},{"location":"releases/history/#crypto","text":"Encryption is also one of the core modules of the blockchain. It is the foundation of the blockchain data security. such as public and private key deduction, transaction verification, zero-knowledge proof, etc. The java-tron abstracts the encryption module and supports the replacement of encryption algorithms. A suitable encryption algorithm can be chosen according to different business needs.","title":"Crypto"},{"location":"releases/history/#actuator","text":"Actuator is the core module used for handling various kinds of transactions. As you know, every transaction in the TRON blockchain contains a contract. On a high level, there are two types of contracts in the TRON blockchain, the system contract and the smart contract. A large number of applications are implemented by the smart contracts and ran in an internal virtual machine of the blockchain. Unfortunately, smart contracts are constrained in terms of their functions and not flexible enough to accommodate the needs of complex applications. Customized actuators offer application developers a brand new way of development. They can choose to implant their application codes into the chain instead of running them on virtual machines.","title":"Actuator"},{"location":"releases/history/#chainbase","text":"Chainbase is specially designed for data storage in the blockchain. Nodes always consider the longest chain to be the correct one and will keep working on extending it. So switching to the longest chain is a common scenario for the blockchain unless it uses a deterministic consensus algorithm like PBFT. For this reason, supporting data rollback is the most distinctive feature of the chainbase module. Several well-designed abstract interfaces are defined in this module. So, the developers can choose the storage engine freely and then implement corresponding interfaces. The LevelDB and RocksDB are two existing implementation.","title":"Chainbase"},{"location":"releases/history/#new-event-subscription-trigger-for-solidified-block","text":"Added a subscription trigger for the updating a solidified block, which triggers the solidified block update event to the message queue, so that users can get the latest solidified block information on time. A solidified block is a block that regarded as can not be revocable. So, when the block becomes a solidified block, it means that the transactions packed in this block are accepted by the blockchain.","title":"New event subscription trigger for solidified block"},{"location":"releases/history/#two-new-http-apis-added","text":"gettransactioninfobyblocknum This api is both added in the context: /wallet & /walletsolidity. * Description: Query the list of information of transactions in a specific block. * Parameter num: the height of the block. * Return: The list of transaction information. broadcasthex /wallet/broadcasthex * Description: broadcast signed transaction with the format of the hex string * Parameter: signed transaction with the format of the hex string * Return: the result of the broadcast","title":"Two new HTTP APIs added"},{"location":"releases/history/#a-new-rpc-api-added","text":"Adding the GetTransactionInfoByBlockNum method both in Wallet WalletSolidity services\uff1a rpc GetTransactionInfoByBlockNum ( NumberMessage ) returns ( TransactionInfoList ) { } a code snippet\uff1a NumberMessage.Builder builder = NumberMessage.newBuilder(); builder.setNum(blockNum); TransactionInfoList transactionInfoList = blockingStubFull.getTransactionInfoByBlockNum(builder.build());","title":"A new RPC API added"},{"location":"releases/history/#odyssey-v365","text":"Odyssey v3.6.5 Update includes the following new features and improvements","title":"Odyssey-v3.6.5"},{"location":"releases/history/#1-new-delegation-mechanism","text":"The new delegation mechanism enables SRs to set commission rates by themselves, which will serve as a reference for users when they vote for SRs. Meanwhile, traceability of the SR\u2019s commission rate on the chain makes the amount of rewards that users receive through voting more transparent. Moreover, the new delegation mechanism lays a foundation for more complex consensus mechanisms and incentive schemes in the near future.","title":"1. New delegation mechanism"},{"location":"releases/history/#2-fairer-and-more-efficient-staking-rewards-mechanism","text":"Staking rewards are now distributed in a fully-decentralized way, a step forward from the old partially-decentralized mechanism. With this change, staking rewards are now distributed entirely through the blockchain, ensuring complete supervision from the chain and thus true decentralization. Moreover, the new mechanism cuts unnecessary reward distribution transactions, signaling lower bandwidth consumption and higher efficiency on the TRON network.","title":"2. Fairer and more efficient staking rewards mechanism"},{"location":"releases/history/#3-fairer-incentive-mechanism","text":"Block rewards decreased from 32 TRX to 16 TRX, while voting rewards increased from 16 TRX to 160 TRX. The adjustment will boost voter turnout in the community, with more TRX locked up by users in the TRON ecosystem. This move is accompanied by the new staking rewards mechanism to guarantee real staking revenues to users.","title":"3. Fairer incentive mechanism"},{"location":"releases/history/#4-improvement-and-optimization-of-tvm","text":"(1) Added a new VM instruction ISCONTRACT(0xd4), which has made smart contract development more flexible by allowing developers to identify the type of the target address in VMs when writing contracts. batchvalidatesign(bytes32 hash, bytes[] memory signatures, address[] memory addresses) (2) Adopted a multi-thread method for VMs to verify signatures, which is faster than ecrecover of Ethereum while cutting Energy consumption by half. Contract address: 0x09. To use it in solidity: batchvalidatesign(bytes32 hash, bytes[] memory signatures, address[] memory addresses) validatemultisign(address accountAddress, uint256 permissionId, bytes32 content, bytes[] signatures) (3) Added a new pre-compiled contract to boost multi-signature verification in TVM, speeding up the verification process and reducing Energy consumption. (4) Banned transfer TRX to smart contract address by two system contract TransferContract and TransferAssetContract. The transfer would fail if the target address is a smart address when using TransferContract and TransferAssetContract. This can prevent general users from transferring assets to smart contract address by mistake, avoiding users\u2019 asset loss. (5) Allowed automatic activation of inactive accounts when transferring TRX/ TRC10 tokens to accounts in smart contracts. (6) Added triggerConstantContract feature for SolidityNode and FullNode so as to improve the functionality of node APIs.","title":"4. Improvement and optimization of TVM"},{"location":"releases/history/#5-improvement-of-the-dynamic-adjustment-scheme-of-energy-upper-limit","text":"The method of calculating Energy consumed per unit of time shifted from only calculating the staked Energy consumed to all Energy consumed. With this change, statistics of Energy consumption will be more accurate and effective, providing reference for adjusting Energy upper limit, saving users\u2019 costs of using TRON blockchain network and improving network efficiency.","title":"5. Improvement of the dynamic adjustment scheme of Energy upper limit"},{"location":"releases/signature_verification/","text":"Signature Verification of java-tron Release Package \u00b6 java-tron integrity verification is to check the reliability and integrity of the obtained java-tron executable file through signature verification. Signature verification needs to know three pieces of information: the executable file to be verified, the signature of the file, and the public key corresponding to the private key that signed the file. Signature verification is to reversely deduce the public key corresponding to the signature based on the content and signature of the executable file, and then compare it with the public key issued by TRON. If they are consistent, it means that the java-tron executable file you get is a complete file released by TRON. The version of java-tron released after January 3, 2023 adopts the GPG method for signature and verification, and the version released before January 3, 2023 used the public-private key of a specified TRON account for signature and verification. Versions released after January 3, 2023: GPG Signature Verification Process Versions released before January 3, 2023: TRON Address Signature Verification Process GPG signature verification process \u00b6 The java-tron executable file and its signature file are released together, you can get it at here , please follow the below process to verify the signature of the java-tron which released after January 3, 2023. Install GPG \u00b6 If you have already installed GPG, please skip this step. If not, please refer to the following command to install it on MacOS: $ brew install gpg On Debian, Ubuntu and other Linux distributions: $ sudo apt install gpg Import public key \u00b6 If you have imported the public key before, please skip this step, just import the public key once. Please first obtain the public key Hash and uid of the GPG signature of the java-tron release package from here . pub: 1254 F859 D2B1 BD9F 66E7 107D F859 BCB4 4A28 290B uid: build@tron.network Import the public key from the GPG public key server to the local according to the public key Hash, the command is: $ gpg --keyserver hkp://keys.openpgp.org --recv-keys \"1254 F859 D2B1 BD9F 66E7 107D F859 BCB4 4A28 290B\" If the import was successful, you will see the return result like this: gpg: key 785FB96D2C7C3CA5: public key \u201cbuild_tron <build@tron.network>\u201d imported gpg: Total number processed: 1 gpg: imported: 1 Signature verification \u00b6 For example, if the executable file of a certain version is FullNode.jar and the signature file is FullNode.jar.sig , the signature verification command is: $ gpg --verify FullNode.jar.sig FullNode.jar If the signature verification is passed, the following will be returned: gpg: Signature made Fri. 1/ 6 12:21:51 2023 CST gpg: using RSA key 1254F859D2B1BD9F66E7107DF859BCB44A28290B gpg: Good signature from \u201cbuild_tron <build@tron.network>\u201d [unknown] gpg: WARNING: This key is not certified with a trusted signature! gpg: There is no indication that the signature belongs to the owner. Primary key fingerprint: 07B2 3298 AEA4 E006 BD9A 42DE 785F B96D 2C7C 3CA5 Subkey fingerprint: 1254 F859 D2B1 BD9F 66E7 107D F859 BCB4 4A28 290B If the verification fails, it will display the words gpg: BAD signature from \u201cbuild_tron <build@tron.network>\u201d . TRON address signature verification process \u00b6 The java-tron version released before January 3, 2023 is signed by the TRON account TKeAcHxgErbVXrG3N3TZiSV6AT566BHTj2 . The signing steps are as follows: first generate a sha256 hash value for the executable file of the release package, and then use the private key of the TRON account to sign the sha256 hash value. The sha256 hash value can be viewed in the Signatures of historical versions chapter, or in the https://github.com/tronprotocol/java-tron/releases page; the signature result please check in the Signatures of historical versions chapter. tronweb provides the Trx.verifySignature interface to verify the signature. If the verification is passed, it will return true, otherwise, it will return false. Please follow the below process to verify. Install tronweb \u00b6 If you have already installed tronweb, please skip this step, if not, please refer to the following command to install. npm install -g tronweb Verify the integrity of the release package \u00b6 Confirm the integrity of the release package by comparing the Hash value of the executable file and the hash value in the release information. Take Odyssey-3.7 version as an example: The release package file name: FullNode.jar The SHA256 value of the release package: 2fca93b09da4ac62641e03838e77fce99b4711ddb0c09aa91656c80fc9556d2e Signature\uff1a 21435e32131feb6d00ba8048df04e112e02569ec851064d8ecad2d4dd5da44b7628ddce16823dadfff6fd683fc58cee74964970621a845ee459e2c96a750de551b Execute the following command for verification under MacOS system: $ sha256sum FullNode.jar Execute the following command for verification under Debian, Ubuntu and other Linux distributions: $ shasum -a 256 FullNode.jar (macOS) Signature verification \u00b6 Execute the following command to verify the signature of the release package: # Trx . verifySignature ( SHA256 , ADDRESS , SIGNATURE )); node - e 'console.log(require(\"tronweb\").Trx.verifySignature( \"2fca93b09da4ac62641e03838e77fce99b4711ddb0c09aa91656c80fc9556d2e\", \"TKeAcHxgErbVXrG3N3TZiSV6AT566BHTj2\", \"21435e32131feb6d00ba8048df04e112e02569ec851064d8ecad2d4dd5da44b7628ddce16823dadfff6fd683fc58cee74964970621a845ee459e2c96a750de551b\" ))' Signatures of historical versions \u00b6 Odyssey-3.7 FullNode sha256sum: 2fca93b09da4ac62641e03838e77fce99b4711ddb0c09aa91656c80fc9556d2e FullNode signature: 21435e32131feb6d00ba8048df04e112e02569ec851064d8ecad2d4dd5da44b7628ddce16823dadfff6fd683fc58cee74964970621a845ee459e2c96a750de551b SolidityNode sha256sum: fcdea8b3e511306218ba442fb0828f0413574012d646c39c212a59f6ba5844bc SolidityNode signature: 6dcad6e02f17467e5cfebeefa0f9963da08e7da10feebefdec47d689fecc30f104c9b7f5e784b883e7ceb786fe55188356c42c306d727fb7819eed2a71f788361c GreatVoyage-4.0.0 FullNode sha256sum: d3f8f9fde64bdefaadae784d09de97172e5e8a3fe539217e12b89963983a530d FullNode signature: e788dbaf2fe35f099f65b2403cfb0d7cbe7f4611f8c5ff8151e4bd84ae468d2e541043c9cde9e74500003027ae9f25cdda81a9bcd60abb45ca7a69f965f4dcc71c SolidityNode sha256sum: adddf88423c6c31f1f25ed39b10779c24dd7cdcf37f2325c02b2f2ecfc97e1f6 SolidityNode signature: e3b9859f178f7851dedb7a0a8deb715e5f1e3af10b1064c36f2727ec2b8825510df4fd7b09d7d049204e5df3e8d5b87778e83a15ca96ce786f7977a6cb48bca91b GreatVoyage-4.1.1 FullNode sha256sum: 30e716b86b879af1e006c2b463903ae3835e239e32e2b01c2a1b903a153897fe FullNode signature: 5faee65a448bb9aa77835992ca3d24e50d8a76b7934f80664ad38e83179c8114278fdef4494de7231f8e40de86461676a7aa4a54c795f4c692e91d90e156ec471b SolidityNode sha256sum: 10a160181053b421109ecace74df5fc0f8860bc8a70181add65fd9a292c35a44 SolidityNode signature: 1d1413b13adf7778f9a720294eca066ac728ad636d166505276f5ff1f63973c100c04778f937f240f10107edb7de477604857867fc4dbdb68238169c978fc3da1b GreatVoyage-v4.1.2 FullNode sha256sum: 4ded44b6c1a3dbd25212e14ab413142b5463dcbf30a528f83ded529048542547 FullNode signature: 57a094c1b8a5ec301ef913eb718de2498b5695eb999530863df05252ba8919ba6866c8490e29d36f7dbf34537c898ece5ef0111efb134419c3a5fd6fc9ec03b81c SolidityNode sha256sum: 3db36cadbd1f7641aafc8164983f28df4b7ceff8174e090327ed407012cf12cb SolidityNode signature: d07604f6811cbed628dd6e5c07880c2fdd3025848fd5365925531c7748467d5228fea2e18326864acc27f3b51c73b364fa44c450d8ec4b5080a7ddb7566724701c GreatVoyage-v4.1.3(Thales) FullNode sha256sum: c5fb99ad5b024bb7877118f30fb6065f6e6febd11a3cfa241521cbed73cca181 FullNode signature: d80ec371e791c4316925d80ff3400cf51b14c8a4d4c696b7817c517eb094823622932b45b9b37f9e9657513c3eddb1134fbbb1ee56727c0957e8a3b40c67409b1c SolidityNode sha256sum: 4b941d71b561a8b2e0b97d7498823d900eaf287910eea1eaafc649f5aad14036 SolidityNode signature: f8a8e8d411b009d02986cad1e19e745f8107384a274f146bcae60c570111b13556ff9ab528eb5d1fb4734bd4ef488ade4038781d06ab6420e35f28be6135fe9b1c GreatVoyage-v4.2.0(Plato) FullNode sha256sum: bbf103432be016b582452137b4862140af15ccf7c5daa9be738450705317fdb8 FullNode signature: 326701699a5eb8d497eb454b5b74c1559961417fb6f262b4e6314052d73f5977312e0450937fa485236f51f706b434acf8659ce1325d704097c5748629e736ef1c SolidityNode sha256sum: 1db544cbca9dc814683ccf9bef28f7d6ca4469289052230394aaf4e3bcd08615 SolidityNode signature: 47fea27df940db0d2a4c0abf6d06969882c027bc4f17449205a28ae5cd25b8ba5339e21f105fe1c25e799d0f4ffea64a15046b9baf5b54341411b5180da439011b GreatVoyage-v4.2.1(Origen) FullNode sha256sum: 9888710c915a4027f1bc3dcb1d5d983e0c00d4c438f6fa307d412f62ff6862ea FullNode signature: 6e7d8ef9d033ebf9213118b7511f4ecc5def97442844fbd34de3ef76dd417a0d45da3e2e70fc213475d7fc0a44df1c54732874d858ec980159c5dbffc975680a1c SolidityNode sha256sum: c70edffa3022e9c25bf845ee978e3500c3ada89b473d895a715acf1738b83f10 SolidityNode signature: 0e366acce33bb7c6b02fa143a57d9380c94d3513a9fba8692efe2862a8f7df93156edbddd075f1844f2f81398b14f2db6a03e21f0f6b8ab25649fae4dc16ae731b GreatVoyage-v4.2.2(Lucretius) FullNode sha256sum: 8a7f8143b3351ea6b5d8e3dfc857b09256d363d4907ba3ab0288f67f77c2a58f FullNode signature: 71c6300ace5cbf16d78a32aa4602c3f129cb768e32acffaecd17b4134b5955bf37efda1d27025e894e521184a21174e5eddf4e7d1f86761657827795cbddfcfd1c SolidityNode sha256sum: 2d0d5334a232b7b74df8ed3211d9e0ac957894f81e9172010732f2159da261ad SolidityNode signature: 0696f8cb3c65324c4b04f9ecf89d939bf7e1b955144e3fe75eeca6bd4c639e463afbe24e31ae38a6889d4d0649ae03fafeeb7c337b34a36fbac33962f64651671b GreatVoyage-v4.2.2.1(Epictetus) FullNode sha256sum: 8bd040a8db16ccba3e957ed3558b82d145928153a53f9688302849658a72f9bc FullNode signature: 3137a8ba8fa5556e4c4a7597aec8f5f46ebb79a64edcf9e2925d2e3314afde3e0f42fd4080e5e4f4d3d1eff263d30478b0322e6dbcc71c43b534f614004b5c561b SolidityNode sha256sum: ee8abd39732e4901828a61124880f1d2eab62f7f3d97150f1e1921bf7da10e54 SolidityNode signature: 092b08184677449dd283a31cc486f994166cd9f5ad312a9c80d3e06689ec540774ac9a1334dffeb6412039ed70ee912ead39c4025dd69b688ea9df4dd831b5771c GreatVoyage-v4.3.0(Bacon) FullNode sha256sum: b5e993800cea5ca040758dd6b3c7438def03cbf1358468beb76ea45399a59298 FullNode signature: 8da6ac58129d78d948810e4bc7372dd8aef5232bfbc4c33ad8fb21e88314e3d97dd77509e0f03a98da32679495152ccd4a9d07541589822e5cf5d3d4f61877191b SolidityNode sha256sum: 446a4736901958a450e4e95aaca99a63957163854fb32d25eed84600e6996668 SolidityNode signature: c27ffde8ce88ee14689e15a9d5c3fb2d2a9d180ea43b45046131df8ac5481fae2588621b395ad7031ed49d65ddd020b3ce084537e3f527d8a5a979f8c65265561c GreatVoyage-v4.4.0(Rousseau) FullNode sha256sum: bf7f962846f75139dd89ac6da32074cad33b2e172c0749abbed8773cc1ab1a37 FullNode signature: 56ed97f3451e3d731f799bad952750d56aa78a9a91a2688b4d6b956328ede7e01bae78037ad6ef1f9c682b566e954dfb958271f006e5cf0dcace5768d76fda6e1b SolidityNode sha256sum: 9dac37763ddf75c07335ec070f837b63ee46b698066dd25c4756ad40f8750d5f SolidityNode signature: cc4325c085719e3e5045b5c6c2553d7adc9c735419618f7afad06c3a532da0ed46906ae9b2dadb15d7f94150268d5ecdc7fd2741693991586d50da30a8d917071b GreatVoyage-v4.4.1(Protagoras) FullNode sha256sum: 4a32918849dc8a7fedcb637ff4939389363726cb16c6a581e39253260668ee04 FullNode signature: fd747f61705ef045143bd2d55b278ca347904323711e2e86b11cf1dd203f198443ab1a399767a570005bd5b2ea283187ccc41557ffb79c959b018e8d798b96f81c SolidityNode sha256sum: b6a06d3b19f41591bd8c01f35e78b316ab8e9ad4c0740128fc95ba52d3106f34 SolidityNode signature: d2836bda30fd25c89494ae7a12b5357bc9e725c9e2c655fb0a9158a4bee881693ea869defe650b0b4f190458a5268f1c121e73c8305cc81a408e62fca0d234c51b GreatVoyage-v4.4.2(Augustinus) FullNode sha256sum: 70eba12350fa21e1b261927093090e7bdf0765592d19433c594149bd3707ef0a FullNode signature: 14430f463e6fab3dd247aca6267b6aaf2f1869b455d95aee297208bd1561c6c67559d9c535e63e74bbef604141cc4ceec78367a75e6ca4d4ceb6513019329c9b1b SolidityNode sha256sum: f08438e093cc1091859f0ee9dbc7e79b0d5d9068facd4e6485374baa3acf59d1 SolidityNode signature: f3935dfe4af9601cf102c975ed2eebbd4b42160e8746c0d0b21ffbd2fbd4b6f374257b1bc0e948909a9ef343d2cc70671961c8f7a992b6cd123f9ad3c8c323391c GreatVoyage-v4.4.3(Pythagoras) FullNode sha256sum: c07637a1a4a9a289218554f4714caef90032e267b068411c7dd818d4af45e39f FullNode signature: 2bf8d65adf556fe2c04b739c1f4e6e73058914cf642a7806ff85e57be2ff122e35cbf3d67b0bc8bad4fb827198ffd8e06f60111a167ecb0b3db0d8e571b8c67b1c SolidityNode sha256sum: 64f4614160b9330d0a9e984686b66fa16e9aecf7ae16e32b8cc7c32f52694eef SolidityNode signature: dc0f910555a23667d682a6775588de90592ede44f76a32b12ea8f89fa7dcc937274cc3a44b20da49726323cc9f476d42caa318c338858474f02bf98cc398bca81c GreatVoyage-v4.4.4(Plotinus) FullNode sha256sum: 0264d382489dae5bf1d340030c1892b0a7aeb9364cb9380c034e159c9eb9a269 FullNode signature: 70cdece8c3510ce4d7d84d5d2c8b53895397c0134d73d681b6b41d4de80d74ce2c2760fdf080ff0ce8c0989246377fca529cb1a2e85e1936755abef4be64f0971b SolidityNode sha256sum: b58e7b8b0f97eb2a7a0ce5c5aeb2ce070192ca82c96adc8568aabe4f3407d873 SolidityNode signature: 26da2e507bbd7e82e0170039cc1c0e42332fb2dfc755aeb385240f0a93125b6c0f1e943ccf1a4e9bfec7fdd4d8a26375a38e030e0b8b69af3e2c181bf08444111b GreatVoyage-v4.4.5(Cicero) FullNode sha256sum: 8115e887e5af5768e8ab967f8e7bc024af94bda31be7f3dbc30934b42489d988 FullNode signature: 1a02f26eb6065efe5697123528f32ea352d813f9e5acf5936407ad8899c4019539e31b257cafe34b9f8045602f5a4f381b3dd8252a30bb9daf52aeeb078b54711b SolidityNode sha256sum: 95884a07dcbb1531ec7ae20b7162cab3bb9c4bd2e300447c01c4772e02b24a20 SolidityNode signature: 8adab9501bbb2a3d9f3055c91e819f86081df9b92228a86afb7f0a27165a42690dbeb50f0f1fd1f7180b51809a291c5ff3860e49f888cf0ba87b401d3dda6e271c GreatVoyage-v4.4.6(David) FullNode sha256sum: eaf213f6e6cd9913f9f27bf72a42209c1a0f0fce9841c1d6bd680d879d7d6f85 FullNode signature: 064abe833436b3a2e9b66406abf81d12a20f9d28ef669abe7c87c0d750e58cf10c1e65de6fbd0fc368022f93e4c330b42ea9775ead91962480436985c90ad3b11c SolidityNode sha256sum: c3e9ccc1a4d2aac4c081ae01db86a0901b6f3506e3f8a953315e47ae274a98c1 SolidityNode signature: a03d5d6f0e6c6b869f2e545d8c3ff8a4fed569508e9abe4219271d8bf25dfb015e242add8fd2ab6b8b412dd6b393639517957877e8eb7c07ff43a1351a88d62f1b GreatVoyage-v4.5.1(Tertullian) FullNode sha256sum: db3c75d7854dcf241558c2942b9a582f478c00a88b6f7a7e5ff8a653a8d4c59a FullNode signature: 61ba205f28c3bc7fa228c27e4e3b4d460ef4fad75ca1d38d82540d45eea2d3d720196b607cd45c560db7a749d05bfe8089c61fba5843e98d61fec90f1591f2861b SolidityNode sha256sum: 537a81bd781d416229de5e0875247160f2569c378c8eed703203d0acca5be5f1 SolidityNode signature: a736f9de5425562a2af188c547245f9b4da6d793728bc767242e3df75fa104f61ce978b62fc5cea7f6008bdb51faa9510ff5633702cdb1ddca29cb06a18920d21c GreatVoyage-v4.5.2 (Aurelius) FullNode sha256sum: 60e959ccde3ff90c10b503bb25edf37684845e358df2ad64b2b330712b30c177 FullNode signature: f2f4b6050e639047857c5b5331eb006dcc9c1e0427bac4ae3d934f7436080785472ead691aa16e6a5aed3c2932fb279ce8ab3580449071b878e0d31fdf01f0371c SolidityNode sha256sum: 4783b8abef12a6c7b8319f3e8960c1d3126edcc521ac1fc3429fe2870cab91b0 SolidityNode signature: afb5db2467ce9f5445679df53e2fecfaed3c4a2d0ca2ba88b65e621aa2d37a9e6aab06b30052a9381087d0164cb5c347d710b2b1c59e6f7c7107deacfd1cfc961b GreatVoyage-v4.6.0 (Socrates) FullNode sha256sum: 598589d428085e25c838552970844b0ba00248ad92873bd2ad25b35f37db7a5b FullNode signature: d3bcfa1bea64b7e58cb94603563cb0c5e47bc20316f61b0dfc966fb64ae846f21b8f917a63328416993f524f4de55ddf5083f163b1fe1b811a9a6f4532725c8e1c SolidityNode sha256sum: ee37a425a84677063b6ea44ed073b8260e336586a61debc10ce0b1544bf7db6a SolidityNode signature: 332c273ef1cdae8dc39c76a83b38750a74b3dd1b915e49698e4ae6870cfed49a1449e8d8db995c7a6be2295e2603efedb0f3e8e906ac7681583c5023b28a521d1b","title":"Integrity Check"},{"location":"releases/signature_verification/#signature-verification-of-java-tron-release-package","text":"java-tron integrity verification is to check the reliability and integrity of the obtained java-tron executable file through signature verification. Signature verification needs to know three pieces of information: the executable file to be verified, the signature of the file, and the public key corresponding to the private key that signed the file. Signature verification is to reversely deduce the public key corresponding to the signature based on the content and signature of the executable file, and then compare it with the public key issued by TRON. If they are consistent, it means that the java-tron executable file you get is a complete file released by TRON. The version of java-tron released after January 3, 2023 adopts the GPG method for signature and verification, and the version released before January 3, 2023 used the public-private key of a specified TRON account for signature and verification. Versions released after January 3, 2023: GPG Signature Verification Process Versions released before January 3, 2023: TRON Address Signature Verification Process","title":"Signature Verification of java-tron Release Package"},{"location":"releases/signature_verification/#gpg-signature-verification-process","text":"The java-tron executable file and its signature file are released together, you can get it at here , please follow the below process to verify the signature of the java-tron which released after January 3, 2023.","title":"GPG signature verification process"},{"location":"releases/signature_verification/#install-gpg","text":"If you have already installed GPG, please skip this step. If not, please refer to the following command to install it on MacOS: $ brew install gpg On Debian, Ubuntu and other Linux distributions: $ sudo apt install gpg","title":"Install GPG"},{"location":"releases/signature_verification/#import-public-key","text":"If you have imported the public key before, please skip this step, just import the public key once. Please first obtain the public key Hash and uid of the GPG signature of the java-tron release package from here . pub: 1254 F859 D2B1 BD9F 66E7 107D F859 BCB4 4A28 290B uid: build@tron.network Import the public key from the GPG public key server to the local according to the public key Hash, the command is: $ gpg --keyserver hkp://keys.openpgp.org --recv-keys \"1254 F859 D2B1 BD9F 66E7 107D F859 BCB4 4A28 290B\" If the import was successful, you will see the return result like this: gpg: key 785FB96D2C7C3CA5: public key \u201cbuild_tron <build@tron.network>\u201d imported gpg: Total number processed: 1 gpg: imported: 1","title":"Import public key"},{"location":"releases/signature_verification/#signature-verification","text":"For example, if the executable file of a certain version is FullNode.jar and the signature file is FullNode.jar.sig , the signature verification command is: $ gpg --verify FullNode.jar.sig FullNode.jar If the signature verification is passed, the following will be returned: gpg: Signature made Fri. 1/ 6 12:21:51 2023 CST gpg: using RSA key 1254F859D2B1BD9F66E7107DF859BCB44A28290B gpg: Good signature from \u201cbuild_tron <build@tron.network>\u201d [unknown] gpg: WARNING: This key is not certified with a trusted signature! gpg: There is no indication that the signature belongs to the owner. Primary key fingerprint: 07B2 3298 AEA4 E006 BD9A 42DE 785F B96D 2C7C 3CA5 Subkey fingerprint: 1254 F859 D2B1 BD9F 66E7 107D F859 BCB4 4A28 290B If the verification fails, it will display the words gpg: BAD signature from \u201cbuild_tron <build@tron.network>\u201d .","title":"Signature verification"},{"location":"releases/signature_verification/#tron-address-signature-verification-process","text":"The java-tron version released before January 3, 2023 is signed by the TRON account TKeAcHxgErbVXrG3N3TZiSV6AT566BHTj2 . The signing steps are as follows: first generate a sha256 hash value for the executable file of the release package, and then use the private key of the TRON account to sign the sha256 hash value. The sha256 hash value can be viewed in the Signatures of historical versions chapter, or in the https://github.com/tronprotocol/java-tron/releases page; the signature result please check in the Signatures of historical versions chapter. tronweb provides the Trx.verifySignature interface to verify the signature. If the verification is passed, it will return true, otherwise, it will return false. Please follow the below process to verify.","title":"TRON address signature verification process"},{"location":"releases/signature_verification/#install-tronweb","text":"If you have already installed tronweb, please skip this step, if not, please refer to the following command to install. npm install -g tronweb","title":"Install tronweb"},{"location":"releases/signature_verification/#verify-the-integrity-of-the-release-package","text":"Confirm the integrity of the release package by comparing the Hash value of the executable file and the hash value in the release information. Take Odyssey-3.7 version as an example: The release package file name: FullNode.jar The SHA256 value of the release package: 2fca93b09da4ac62641e03838e77fce99b4711ddb0c09aa91656c80fc9556d2e Signature\uff1a 21435e32131feb6d00ba8048df04e112e02569ec851064d8ecad2d4dd5da44b7628ddce16823dadfff6fd683fc58cee74964970621a845ee459e2c96a750de551b Execute the following command for verification under MacOS system: $ sha256sum FullNode.jar Execute the following command for verification under Debian, Ubuntu and other Linux distributions: $ shasum -a 256 FullNode.jar (macOS)","title":"Verify the integrity of the release package"},{"location":"releases/signature_verification/#signature-verification_1","text":"Execute the following command to verify the signature of the release package: # Trx . verifySignature ( SHA256 , ADDRESS , SIGNATURE )); node - e 'console.log(require(\"tronweb\").Trx.verifySignature( \"2fca93b09da4ac62641e03838e77fce99b4711ddb0c09aa91656c80fc9556d2e\", \"TKeAcHxgErbVXrG3N3TZiSV6AT566BHTj2\", \"21435e32131feb6d00ba8048df04e112e02569ec851064d8ecad2d4dd5da44b7628ddce16823dadfff6fd683fc58cee74964970621a845ee459e2c96a750de551b\" ))'","title":"Signature verification"},{"location":"releases/signature_verification/#signatures-of-historical-versions","text":"Odyssey-3.7 FullNode sha256sum: 2fca93b09da4ac62641e03838e77fce99b4711ddb0c09aa91656c80fc9556d2e FullNode signature: 21435e32131feb6d00ba8048df04e112e02569ec851064d8ecad2d4dd5da44b7628ddce16823dadfff6fd683fc58cee74964970621a845ee459e2c96a750de551b SolidityNode sha256sum: fcdea8b3e511306218ba442fb0828f0413574012d646c39c212a59f6ba5844bc SolidityNode signature: 6dcad6e02f17467e5cfebeefa0f9963da08e7da10feebefdec47d689fecc30f104c9b7f5e784b883e7ceb786fe55188356c42c306d727fb7819eed2a71f788361c GreatVoyage-4.0.0 FullNode sha256sum: d3f8f9fde64bdefaadae784d09de97172e5e8a3fe539217e12b89963983a530d FullNode signature: e788dbaf2fe35f099f65b2403cfb0d7cbe7f4611f8c5ff8151e4bd84ae468d2e541043c9cde9e74500003027ae9f25cdda81a9bcd60abb45ca7a69f965f4dcc71c SolidityNode sha256sum: adddf88423c6c31f1f25ed39b10779c24dd7cdcf37f2325c02b2f2ecfc97e1f6 SolidityNode signature: e3b9859f178f7851dedb7a0a8deb715e5f1e3af10b1064c36f2727ec2b8825510df4fd7b09d7d049204e5df3e8d5b87778e83a15ca96ce786f7977a6cb48bca91b GreatVoyage-4.1.1 FullNode sha256sum: 30e716b86b879af1e006c2b463903ae3835e239e32e2b01c2a1b903a153897fe FullNode signature: 5faee65a448bb9aa77835992ca3d24e50d8a76b7934f80664ad38e83179c8114278fdef4494de7231f8e40de86461676a7aa4a54c795f4c692e91d90e156ec471b SolidityNode sha256sum: 10a160181053b421109ecace74df5fc0f8860bc8a70181add65fd9a292c35a44 SolidityNode signature: 1d1413b13adf7778f9a720294eca066ac728ad636d166505276f5ff1f63973c100c04778f937f240f10107edb7de477604857867fc4dbdb68238169c978fc3da1b GreatVoyage-v4.1.2 FullNode sha256sum: 4ded44b6c1a3dbd25212e14ab413142b5463dcbf30a528f83ded529048542547 FullNode signature: 57a094c1b8a5ec301ef913eb718de2498b5695eb999530863df05252ba8919ba6866c8490e29d36f7dbf34537c898ece5ef0111efb134419c3a5fd6fc9ec03b81c SolidityNode sha256sum: 3db36cadbd1f7641aafc8164983f28df4b7ceff8174e090327ed407012cf12cb SolidityNode signature: d07604f6811cbed628dd6e5c07880c2fdd3025848fd5365925531c7748467d5228fea2e18326864acc27f3b51c73b364fa44c450d8ec4b5080a7ddb7566724701c GreatVoyage-v4.1.3(Thales) FullNode sha256sum: c5fb99ad5b024bb7877118f30fb6065f6e6febd11a3cfa241521cbed73cca181 FullNode signature: d80ec371e791c4316925d80ff3400cf51b14c8a4d4c696b7817c517eb094823622932b45b9b37f9e9657513c3eddb1134fbbb1ee56727c0957e8a3b40c67409b1c SolidityNode sha256sum: 4b941d71b561a8b2e0b97d7498823d900eaf287910eea1eaafc649f5aad14036 SolidityNode signature: f8a8e8d411b009d02986cad1e19e745f8107384a274f146bcae60c570111b13556ff9ab528eb5d1fb4734bd4ef488ade4038781d06ab6420e35f28be6135fe9b1c GreatVoyage-v4.2.0(Plato) FullNode sha256sum: bbf103432be016b582452137b4862140af15ccf7c5daa9be738450705317fdb8 FullNode signature: 326701699a5eb8d497eb454b5b74c1559961417fb6f262b4e6314052d73f5977312e0450937fa485236f51f706b434acf8659ce1325d704097c5748629e736ef1c SolidityNode sha256sum: 1db544cbca9dc814683ccf9bef28f7d6ca4469289052230394aaf4e3bcd08615 SolidityNode signature: 47fea27df940db0d2a4c0abf6d06969882c027bc4f17449205a28ae5cd25b8ba5339e21f105fe1c25e799d0f4ffea64a15046b9baf5b54341411b5180da439011b GreatVoyage-v4.2.1(Origen) FullNode sha256sum: 9888710c915a4027f1bc3dcb1d5d983e0c00d4c438f6fa307d412f62ff6862ea FullNode signature: 6e7d8ef9d033ebf9213118b7511f4ecc5def97442844fbd34de3ef76dd417a0d45da3e2e70fc213475d7fc0a44df1c54732874d858ec980159c5dbffc975680a1c SolidityNode sha256sum: c70edffa3022e9c25bf845ee978e3500c3ada89b473d895a715acf1738b83f10 SolidityNode signature: 0e366acce33bb7c6b02fa143a57d9380c94d3513a9fba8692efe2862a8f7df93156edbddd075f1844f2f81398b14f2db6a03e21f0f6b8ab25649fae4dc16ae731b GreatVoyage-v4.2.2(Lucretius) FullNode sha256sum: 8a7f8143b3351ea6b5d8e3dfc857b09256d363d4907ba3ab0288f67f77c2a58f FullNode signature: 71c6300ace5cbf16d78a32aa4602c3f129cb768e32acffaecd17b4134b5955bf37efda1d27025e894e521184a21174e5eddf4e7d1f86761657827795cbddfcfd1c SolidityNode sha256sum: 2d0d5334a232b7b74df8ed3211d9e0ac957894f81e9172010732f2159da261ad SolidityNode signature: 0696f8cb3c65324c4b04f9ecf89d939bf7e1b955144e3fe75eeca6bd4c639e463afbe24e31ae38a6889d4d0649ae03fafeeb7c337b34a36fbac33962f64651671b GreatVoyage-v4.2.2.1(Epictetus) FullNode sha256sum: 8bd040a8db16ccba3e957ed3558b82d145928153a53f9688302849658a72f9bc FullNode signature: 3137a8ba8fa5556e4c4a7597aec8f5f46ebb79a64edcf9e2925d2e3314afde3e0f42fd4080e5e4f4d3d1eff263d30478b0322e6dbcc71c43b534f614004b5c561b SolidityNode sha256sum: ee8abd39732e4901828a61124880f1d2eab62f7f3d97150f1e1921bf7da10e54 SolidityNode signature: 092b08184677449dd283a31cc486f994166cd9f5ad312a9c80d3e06689ec540774ac9a1334dffeb6412039ed70ee912ead39c4025dd69b688ea9df4dd831b5771c GreatVoyage-v4.3.0(Bacon) FullNode sha256sum: b5e993800cea5ca040758dd6b3c7438def03cbf1358468beb76ea45399a59298 FullNode signature: 8da6ac58129d78d948810e4bc7372dd8aef5232bfbc4c33ad8fb21e88314e3d97dd77509e0f03a98da32679495152ccd4a9d07541589822e5cf5d3d4f61877191b SolidityNode sha256sum: 446a4736901958a450e4e95aaca99a63957163854fb32d25eed84600e6996668 SolidityNode signature: c27ffde8ce88ee14689e15a9d5c3fb2d2a9d180ea43b45046131df8ac5481fae2588621b395ad7031ed49d65ddd020b3ce084537e3f527d8a5a979f8c65265561c GreatVoyage-v4.4.0(Rousseau) FullNode sha256sum: bf7f962846f75139dd89ac6da32074cad33b2e172c0749abbed8773cc1ab1a37 FullNode signature: 56ed97f3451e3d731f799bad952750d56aa78a9a91a2688b4d6b956328ede7e01bae78037ad6ef1f9c682b566e954dfb958271f006e5cf0dcace5768d76fda6e1b SolidityNode sha256sum: 9dac37763ddf75c07335ec070f837b63ee46b698066dd25c4756ad40f8750d5f SolidityNode signature: cc4325c085719e3e5045b5c6c2553d7adc9c735419618f7afad06c3a532da0ed46906ae9b2dadb15d7f94150268d5ecdc7fd2741693991586d50da30a8d917071b GreatVoyage-v4.4.1(Protagoras) FullNode sha256sum: 4a32918849dc8a7fedcb637ff4939389363726cb16c6a581e39253260668ee04 FullNode signature: fd747f61705ef045143bd2d55b278ca347904323711e2e86b11cf1dd203f198443ab1a399767a570005bd5b2ea283187ccc41557ffb79c959b018e8d798b96f81c SolidityNode sha256sum: b6a06d3b19f41591bd8c01f35e78b316ab8e9ad4c0740128fc95ba52d3106f34 SolidityNode signature: d2836bda30fd25c89494ae7a12b5357bc9e725c9e2c655fb0a9158a4bee881693ea869defe650b0b4f190458a5268f1c121e73c8305cc81a408e62fca0d234c51b GreatVoyage-v4.4.2(Augustinus) FullNode sha256sum: 70eba12350fa21e1b261927093090e7bdf0765592d19433c594149bd3707ef0a FullNode signature: 14430f463e6fab3dd247aca6267b6aaf2f1869b455d95aee297208bd1561c6c67559d9c535e63e74bbef604141cc4ceec78367a75e6ca4d4ceb6513019329c9b1b SolidityNode sha256sum: f08438e093cc1091859f0ee9dbc7e79b0d5d9068facd4e6485374baa3acf59d1 SolidityNode signature: f3935dfe4af9601cf102c975ed2eebbd4b42160e8746c0d0b21ffbd2fbd4b6f374257b1bc0e948909a9ef343d2cc70671961c8f7a992b6cd123f9ad3c8c323391c GreatVoyage-v4.4.3(Pythagoras) FullNode sha256sum: c07637a1a4a9a289218554f4714caef90032e267b068411c7dd818d4af45e39f FullNode signature: 2bf8d65adf556fe2c04b739c1f4e6e73058914cf642a7806ff85e57be2ff122e35cbf3d67b0bc8bad4fb827198ffd8e06f60111a167ecb0b3db0d8e571b8c67b1c SolidityNode sha256sum: 64f4614160b9330d0a9e984686b66fa16e9aecf7ae16e32b8cc7c32f52694eef SolidityNode signature: dc0f910555a23667d682a6775588de90592ede44f76a32b12ea8f89fa7dcc937274cc3a44b20da49726323cc9f476d42caa318c338858474f02bf98cc398bca81c GreatVoyage-v4.4.4(Plotinus) FullNode sha256sum: 0264d382489dae5bf1d340030c1892b0a7aeb9364cb9380c034e159c9eb9a269 FullNode signature: 70cdece8c3510ce4d7d84d5d2c8b53895397c0134d73d681b6b41d4de80d74ce2c2760fdf080ff0ce8c0989246377fca529cb1a2e85e1936755abef4be64f0971b SolidityNode sha256sum: b58e7b8b0f97eb2a7a0ce5c5aeb2ce070192ca82c96adc8568aabe4f3407d873 SolidityNode signature: 26da2e507bbd7e82e0170039cc1c0e42332fb2dfc755aeb385240f0a93125b6c0f1e943ccf1a4e9bfec7fdd4d8a26375a38e030e0b8b69af3e2c181bf08444111b GreatVoyage-v4.4.5(Cicero) FullNode sha256sum: 8115e887e5af5768e8ab967f8e7bc024af94bda31be7f3dbc30934b42489d988 FullNode signature: 1a02f26eb6065efe5697123528f32ea352d813f9e5acf5936407ad8899c4019539e31b257cafe34b9f8045602f5a4f381b3dd8252a30bb9daf52aeeb078b54711b SolidityNode sha256sum: 95884a07dcbb1531ec7ae20b7162cab3bb9c4bd2e300447c01c4772e02b24a20 SolidityNode signature: 8adab9501bbb2a3d9f3055c91e819f86081df9b92228a86afb7f0a27165a42690dbeb50f0f1fd1f7180b51809a291c5ff3860e49f888cf0ba87b401d3dda6e271c GreatVoyage-v4.4.6(David) FullNode sha256sum: eaf213f6e6cd9913f9f27bf72a42209c1a0f0fce9841c1d6bd680d879d7d6f85 FullNode signature: 064abe833436b3a2e9b66406abf81d12a20f9d28ef669abe7c87c0d750e58cf10c1e65de6fbd0fc368022f93e4c330b42ea9775ead91962480436985c90ad3b11c SolidityNode sha256sum: c3e9ccc1a4d2aac4c081ae01db86a0901b6f3506e3f8a953315e47ae274a98c1 SolidityNode signature: a03d5d6f0e6c6b869f2e545d8c3ff8a4fed569508e9abe4219271d8bf25dfb015e242add8fd2ab6b8b412dd6b393639517957877e8eb7c07ff43a1351a88d62f1b GreatVoyage-v4.5.1(Tertullian) FullNode sha256sum: db3c75d7854dcf241558c2942b9a582f478c00a88b6f7a7e5ff8a653a8d4c59a FullNode signature: 61ba205f28c3bc7fa228c27e4e3b4d460ef4fad75ca1d38d82540d45eea2d3d720196b607cd45c560db7a749d05bfe8089c61fba5843e98d61fec90f1591f2861b SolidityNode sha256sum: 537a81bd781d416229de5e0875247160f2569c378c8eed703203d0acca5be5f1 SolidityNode signature: a736f9de5425562a2af188c547245f9b4da6d793728bc767242e3df75fa104f61ce978b62fc5cea7f6008bdb51faa9510ff5633702cdb1ddca29cb06a18920d21c GreatVoyage-v4.5.2 (Aurelius) FullNode sha256sum: 60e959ccde3ff90c10b503bb25edf37684845e358df2ad64b2b330712b30c177 FullNode signature: f2f4b6050e639047857c5b5331eb006dcc9c1e0427bac4ae3d934f7436080785472ead691aa16e6a5aed3c2932fb279ce8ab3580449071b878e0d31fdf01f0371c SolidityNode sha256sum: 4783b8abef12a6c7b8319f3e8960c1d3126edcc521ac1fc3429fe2870cab91b0 SolidityNode signature: afb5db2467ce9f5445679df53e2fecfaed3c4a2d0ca2ba88b65e621aa2d37a9e6aab06b30052a9381087d0164cb5c347d710b2b1c59e6f7c7107deacfd1cfc961b GreatVoyage-v4.6.0 (Socrates) FullNode sha256sum: 598589d428085e25c838552970844b0ba00248ad92873bd2ad25b35f37db7a5b FullNode signature: d3bcfa1bea64b7e58cb94603563cb0c5e47bc20316f61b0dfc966fb64ae846f21b8f917a63328416993f524f4de55ddf5083f163b1fe1b811a9a6f4532725c8e1c SolidityNode sha256sum: ee37a425a84677063b6ea44ed073b8260e336586a61debc10ce0b1544bf7db6a SolidityNode signature: 332c273ef1cdae8dc39c76a83b38750a74b3dd1b915e49698e4ae6870cfed49a1449e8d8db995c7a6be2295e2603efedb0f3e8e906ac7681583c5023b28a521d1b","title":"Signatures of historical versions"},{"location":"releases/upgrade-instruction/","text":"New Version Deployment Manual of java-tron \u00b6 For the mandatory upgrade versions, please strictly follow this guide to deploy the new version. For the non-mandatory upgrade ones, you can decide whether to deploy it according to your needs. Please directly refer to java-tron New version deployment Process to upgrade your node. If you have deployed 'Active and Backup nodes', please follow the process of Active and Backup Nodes Upgrade Guide . New version deployment Process \u00b6 Please follow the below steps to upgrade your FullNode, FullNode that produces blocks to the latest version. 1. Prepare the executable file of the new version \u00b6 You can directly download the java-tron executable file, or download the code of the latest version and compile it to get the executable file of the new version. Please download the latest version of the code or jar file to a file directory other than the java-tron running directory: Way 1: Download the published executable file Directly download the latest version of the executable file FullNode.jar from the release page https://github.com/tronprotocol/java-tron/releases . Before using it, please verify the file signature first to ensure the consistency and integrity of the jar file. For the verification steps, please refer to java-tron Consistency Verification . Way 2: Compile the source code Download the source code and switch to the branch of the new version. $ git clone https://github.com/tronprotocol/java-tron.git $ git checkout -b relase_vx.x.x Compile the project: In the code directory of the new version, execute the following command to compile the project, and the compiled executable file will be generated in the build/libs directory. $ ./gradlew clean build -x test 2. Shut down the java-tron process \u00b6 Shut down the node process. Note: If a java-tron node has not been deployed on this machine before, please skip to step 5. First, get the process ID of the java-tron node through the following command $ ps -ef | grep java Shut down the node process $ kill -15 the process id 3. Backup \u00b6 Please back up the executable file, database, and configuration file before the upgrade in sequence. The backup data is used to restore to the old version when a problem is encountered that leads to fail deploying during the upgrade. Backup the current executable jar file $ mv $JAVA_TRON.jar $JAVA_TRON.jar.`date \"+%Y%m%d%H%M%S\"` Backup the current database output-directory $ tar cvzf output-directory.`date \"+%Y%m%d%H%M%S\"`.etgz output-directory Backup the current configuration file $ mv $config.conf $config.conf.`date \"+%Y%m%d%H%M%S\"` 4. Replace old version files \u00b6 After preparing the executable file of the new version and backing up the original node data, please follow the steps below to replace the old files: Copy the newest jar package obtained in the previous step to the java-tron working directory to replace the old executable file. Replace the old configuration file with the latest configuration file. If you need to modify the configuration, such as adding a keystore file, private key, etc, please modify it yourself. Note: For the database file, you can use the original database file in the java-tron working directory, or you can choose to use database backup snapshot . 5. Start the nodes \u00b6 The startup commands of FullNode which produces blocks and ordinary FullNode are different, please choose the startup command according to the actual situation: For the super representative's FullNode, the startup command is: nohup java -Xmx24g -XX:+UseConcMarkSweepGC -jar FullNode.jar -p private key --witness -c main_net_config.conf </dev/null &>/dev/null & Note: It is not necessary to use the above command parameter to set the private key. If you use the keystore file or configure the private key in the configuration file, please set it up your way. For a FullNode, the startup command is: nohup java -Xmx24g -XX:+UseConcMarkSweepGC -jar FullNode.jar -c main_net_config.conf </dev/null &>/dev/null & 6. Wait for syncing completion \u00b6 After the node is successfully started, please wait patiently for the node block synchronization to complete. 7. Upgrade completed \u00b6 After the node is synchronized to the latest block of the network, it means that the deployment of the new version is completed. If you encounter any problems during the upgrade leading to fail deploying the new version, please use the data backed up in the third step to restore to the old version, and give your feedback in GitHub or the community in time to help you complete the deployment of the new version as soon as possible. Active and Backup Nodes Upgrade Guide \u00b6 To upgrade the active and backup nodes, please follow the steps below: Upgrade the backup node Upgrade the backup node according to the java-tron new version deployment Process . Shut down the master node After the backup node is successfully upgraded to the new version, please wait for the completion of synchronization of the backup node before shutting down the master node. At this time, the backup node will automatically take over from the master node and become the active node. Upgrade the master node If the backup node works normally, follow java-tron New Version Deployment Process to upgrade the master node. Otherwise, shut down the backup node and start the master node. If an error occurs during the upgrade, please contact TRON technical support team and send the node\u2019s log for root cause analysis. Shut down the backup node After the master node is upgraded and fully synchronized, shut down the backup node. After the backup node shuts down, the master node will take over as the active node again. Start the backup node","title":"Deployment Manual for the New Version"},{"location":"releases/upgrade-instruction/#new-version-deployment-manual-of-java-tron","text":"For the mandatory upgrade versions, please strictly follow this guide to deploy the new version. For the non-mandatory upgrade ones, you can decide whether to deploy it according to your needs. Please directly refer to java-tron New version deployment Process to upgrade your node. If you have deployed 'Active and Backup nodes', please follow the process of Active and Backup Nodes Upgrade Guide .","title":"New Version Deployment Manual of java-tron"},{"location":"releases/upgrade-instruction/#new-version-deployment-process","text":"Please follow the below steps to upgrade your FullNode, FullNode that produces blocks to the latest version.","title":"New version deployment Process"},{"location":"releases/upgrade-instruction/#1-prepare-the-executable-file-of-the-new-version","text":"You can directly download the java-tron executable file, or download the code of the latest version and compile it to get the executable file of the new version. Please download the latest version of the code or jar file to a file directory other than the java-tron running directory: Way 1: Download the published executable file Directly download the latest version of the executable file FullNode.jar from the release page https://github.com/tronprotocol/java-tron/releases . Before using it, please verify the file signature first to ensure the consistency and integrity of the jar file. For the verification steps, please refer to java-tron Consistency Verification . Way 2: Compile the source code Download the source code and switch to the branch of the new version. $ git clone https://github.com/tronprotocol/java-tron.git $ git checkout -b relase_vx.x.x Compile the project: In the code directory of the new version, execute the following command to compile the project, and the compiled executable file will be generated in the build/libs directory. $ ./gradlew clean build -x test","title":"1. Prepare the executable file of the new version"},{"location":"releases/upgrade-instruction/#2-shut-down-the-java-tron-process","text":"Shut down the node process. Note: If a java-tron node has not been deployed on this machine before, please skip to step 5. First, get the process ID of the java-tron node through the following command $ ps -ef | grep java Shut down the node process $ kill -15 the process id","title":"2. Shut down the java-tron process"},{"location":"releases/upgrade-instruction/#3-backup","text":"Please back up the executable file, database, and configuration file before the upgrade in sequence. The backup data is used to restore to the old version when a problem is encountered that leads to fail deploying during the upgrade. Backup the current executable jar file $ mv $JAVA_TRON.jar $JAVA_TRON.jar.`date \"+%Y%m%d%H%M%S\"` Backup the current database output-directory $ tar cvzf output-directory.`date \"+%Y%m%d%H%M%S\"`.etgz output-directory Backup the current configuration file $ mv $config.conf $config.conf.`date \"+%Y%m%d%H%M%S\"`","title":"3. Backup"},{"location":"releases/upgrade-instruction/#4-replace-old-version-files","text":"After preparing the executable file of the new version and backing up the original node data, please follow the steps below to replace the old files: Copy the newest jar package obtained in the previous step to the java-tron working directory to replace the old executable file. Replace the old configuration file with the latest configuration file. If you need to modify the configuration, such as adding a keystore file, private key, etc, please modify it yourself. Note: For the database file, you can use the original database file in the java-tron working directory, or you can choose to use database backup snapshot .","title":"4. Replace old version files"},{"location":"releases/upgrade-instruction/#5-start-the-nodes","text":"The startup commands of FullNode which produces blocks and ordinary FullNode are different, please choose the startup command according to the actual situation: For the super representative's FullNode, the startup command is: nohup java -Xmx24g -XX:+UseConcMarkSweepGC -jar FullNode.jar -p private key --witness -c main_net_config.conf </dev/null &>/dev/null & Note: It is not necessary to use the above command parameter to set the private key. If you use the keystore file or configure the private key in the configuration file, please set it up your way. For a FullNode, the startup command is: nohup java -Xmx24g -XX:+UseConcMarkSweepGC -jar FullNode.jar -c main_net_config.conf </dev/null &>/dev/null &","title":"5. Start the nodes"},{"location":"releases/upgrade-instruction/#6-wait-for-syncing-completion","text":"After the node is successfully started, please wait patiently for the node block synchronization to complete.","title":"6. Wait for syncing completion"},{"location":"releases/upgrade-instruction/#7-upgrade-completed","text":"After the node is synchronized to the latest block of the network, it means that the deployment of the new version is completed. If you encounter any problems during the upgrade leading to fail deploying the new version, please use the data backed up in the third step to restore to the old version, and give your feedback in GitHub or the community in time to help you complete the deployment of the new version as soon as possible.","title":"7. Upgrade completed"},{"location":"releases/upgrade-instruction/#active-and-backup-nodes-upgrade-guide","text":"To upgrade the active and backup nodes, please follow the steps below: Upgrade the backup node Upgrade the backup node according to the java-tron new version deployment Process . Shut down the master node After the backup node is successfully upgraded to the new version, please wait for the completion of synchronization of the backup node before shutting down the master node. At this time, the backup node will automatically take over from the master node and become the active node. Upgrade the master node If the backup node works normally, follow java-tron New Version Deployment Process to upgrade the master node. Otherwise, shut down the backup node and start the master node. If an error occurs during the upgrade, please contact TRON technical support team and send the node\u2019s log for root cause analysis. Shut down the backup node After the master node is upgraded and fully synchronized, shut down the backup node. After the backup node shuts down, the master node will take over as the active node again. Start the backup node","title":"Active and Backup Nodes Upgrade Guide"},{"location":"using_javatron/backup_restore/","text":"Data Backup & Restore \u00b6 Everything java-tron persists gets written inside its data directory. The default data directory is: /output-directory/ . If you need to specify other directories, you can add -d or --output-directory parameter to the java-tron node startup command to specify the data storage location. $ java -jar fullnode.jar -d ./outputdir Data Backup \u00b6 Please shut down the node process before backing up the node data, for details, please refer to the following steps: First, use the command $ ps -ef |grep FullNode.jar |grep -v grep |awk '{print $2}' to get the process id of java-tron, and then use the command kill -15 process id to kill the process. Or use a stop script like this: #!/bin/bash while true; do pid=`ps -ef |grep FullNode.jar |grep -v grep |awk '{print $2}'` if [ -n \"$pid\" ]; then kill -15 $pid echo \"The java-tron process is exiting, it may take some time, forcing the exit may cause damage to the database, please wait patiently...\" sleep 1 else echo \"java-tron killed successfully!\" break fi done Then, backup the data by the following command. $ tar cvzf output-directory.`date \"+%Y%m%d%H%M%S\"`.etgz output-directory Data Restore \u00b6 When restoring the data, just copy the corresponding backup data to the node directory. Take the database backup file name output-directory.20220628152402.etgz as an example, the command to restore the database file is: $ tar xzvf output-directory.20220628152402.etgz Public Backup Data \u00b6 For the TRON mainnet and Nile testnet, since the amount of data to be synchronized is large after the new node is started, it takes a long time to synchronize the data. In order to facilitate rapid node deployment for developers, the community provides data snapshots on a regular basis. A data snapshot is a compressed file of the database backup of a TRON network node at a certain time. Developers can download and use the data snapshot to speed up the node synchronization process. FullNode Data Snapshot \u00b6 The following table shows the download address of Fullnode data snapshots. Please select a suitable data snapshot according to the location and node database type, and whether you need to query historical internal transactions. Fullnode Data Source Download site Description Official data source (North America: Virginia) http://34.86.86.229/ LevelDB, exclude internal transactions (About 1821G on 6 Aug. 2024) Official data source (Singapore) http://34.143.247.77/ LevelDB, exclude internal transactions (About 1819G on 5 Aug. 2024) Official data source (North America: America) http://35.197.17.205/ RocksDB, exclude internal transactions (About 1799G on 6 Aug. 2024) Official data source (Singapore) http://35.247.128.170/ LevelDB, include internal transactions (About 2000G on 6 Aug. 2024) Official data source ((North America: Virginia)) http://34.48.6.163/ LevelDB, exclude internal transactions, include account history TRX balance (About 2288G on 6 Aug. 2024) Note \uff1aThe data of LevelDB and RocksDB are not allowed to be mixed. The database can be specified in the config file of the full node, set db.engine to LEVELDB or ROCKSDB. Lite FullNode Data Snapshot \u00b6 The TRON Public Chain has supported the type of the Lite FullNode since the version of GreatVoyage-v4.1.0 release. All the data required by the Lite FullNode for running is whole of the status data and a little essential block data, so, it is much more lightweight (smaller database and faster startup) than the normal FullNode. TRON officially offers database snapshots of the Lite FullNode. Lite Fullnode Data Source Download site Description Official data source (North America: Virginia) http://34.143.247.77/ LevelDB, About 41G on 5 Aug. 2024 Tips : You can split the data from the whole data with the help of the Lite FullNode Data Pruning Tool . Use the data snapshot \u00b6 The steps for using data snapshots are as follows: Download the corresponding compressed backup database according to your needs. Decompress the compressed file of the backup database to the output-directory directory or to the corresponding directory according to your needs. Startup the node. The node reads the output-directory directory by default. If you need to specify another directory\uff0cplease add the -d directory parameter when the node starts.","title":"Backup & Restore"},{"location":"using_javatron/backup_restore/#data-backup-restore","text":"Everything java-tron persists gets written inside its data directory. The default data directory is: /output-directory/ . If you need to specify other directories, you can add -d or --output-directory parameter to the java-tron node startup command to specify the data storage location. $ java -jar fullnode.jar -d ./outputdir","title":"Data Backup &amp; Restore"},{"location":"using_javatron/backup_restore/#data-backup","text":"Please shut down the node process before backing up the node data, for details, please refer to the following steps: First, use the command $ ps -ef |grep FullNode.jar |grep -v grep |awk '{print $2}' to get the process id of java-tron, and then use the command kill -15 process id to kill the process. Or use a stop script like this: #!/bin/bash while true; do pid=`ps -ef |grep FullNode.jar |grep -v grep |awk '{print $2}'` if [ -n \"$pid\" ]; then kill -15 $pid echo \"The java-tron process is exiting, it may take some time, forcing the exit may cause damage to the database, please wait patiently...\" sleep 1 else echo \"java-tron killed successfully!\" break fi done Then, backup the data by the following command. $ tar cvzf output-directory.`date \"+%Y%m%d%H%M%S\"`.etgz output-directory","title":"Data Backup"},{"location":"using_javatron/backup_restore/#data-restore","text":"When restoring the data, just copy the corresponding backup data to the node directory. Take the database backup file name output-directory.20220628152402.etgz as an example, the command to restore the database file is: $ tar xzvf output-directory.20220628152402.etgz","title":"Data Restore"},{"location":"using_javatron/backup_restore/#public-backup-data","text":"For the TRON mainnet and Nile testnet, since the amount of data to be synchronized is large after the new node is started, it takes a long time to synchronize the data. In order to facilitate rapid node deployment for developers, the community provides data snapshots on a regular basis. A data snapshot is a compressed file of the database backup of a TRON network node at a certain time. Developers can download and use the data snapshot to speed up the node synchronization process.","title":"Public Backup Data"},{"location":"using_javatron/backup_restore/#fullnode-data-snapshot","text":"The following table shows the download address of Fullnode data snapshots. Please select a suitable data snapshot according to the location and node database type, and whether you need to query historical internal transactions. Fullnode Data Source Download site Description Official data source (North America: Virginia) http://34.86.86.229/ LevelDB, exclude internal transactions (About 1821G on 6 Aug. 2024) Official data source (Singapore) http://34.143.247.77/ LevelDB, exclude internal transactions (About 1819G on 5 Aug. 2024) Official data source (North America: America) http://35.197.17.205/ RocksDB, exclude internal transactions (About 1799G on 6 Aug. 2024) Official data source (Singapore) http://35.247.128.170/ LevelDB, include internal transactions (About 2000G on 6 Aug. 2024) Official data source ((North America: Virginia)) http://34.48.6.163/ LevelDB, exclude internal transactions, include account history TRX balance (About 2288G on 6 Aug. 2024) Note \uff1aThe data of LevelDB and RocksDB are not allowed to be mixed. The database can be specified in the config file of the full node, set db.engine to LEVELDB or ROCKSDB.","title":"FullNode Data Snapshot"},{"location":"using_javatron/backup_restore/#lite-fullnode-data-snapshot","text":"The TRON Public Chain has supported the type of the Lite FullNode since the version of GreatVoyage-v4.1.0 release. All the data required by the Lite FullNode for running is whole of the status data and a little essential block data, so, it is much more lightweight (smaller database and faster startup) than the normal FullNode. TRON officially offers database snapshots of the Lite FullNode. Lite Fullnode Data Source Download site Description Official data source (North America: Virginia) http://34.143.247.77/ LevelDB, About 41G on 5 Aug. 2024 Tips : You can split the data from the whole data with the help of the Lite FullNode Data Pruning Tool .","title":"Lite FullNode Data Snapshot"},{"location":"using_javatron/backup_restore/#use-the-data-snapshot","text":"The steps for using data snapshots are as follows: Download the corresponding compressed backup database according to your needs. Decompress the compressed file of the backup database to the output-directory directory or to the corresponding directory according to your needs. Startup the node. The node reads the output-directory directory by default. If you need to specify another directory\uff0cplease add the -d directory parameter when the node starts.","title":"Use the data snapshot"},{"location":"using_javatron/connecting_to_tron/","text":"Connecting to the TRON network \u00b6 The TRON network is mainly divided into the main network, the Shasta test network, the Nile test network and the private network. Therefore, for the java-tron client software, it can be connected to any TRON network by modifying the configuration items in the configuration file. At present, the Shasta testnet does not support adding a new node, but the Nile testnet supports it. You need to set the following configuration items to connect java-tron to one of the TRON networks: node.p2p.version : It is used to set the P2P network id. Only nodes with the same network id can shake hands successfully. TRON mainnet: node.p2p.version=11111 Nile testnet: node.p2p.version = 201910292 Private network\uff1aset to other values seed.node : set seed node genesis.block : Genesis block settings. To join a network, please ensure that the settings of the genesis block are the same as those of other nodes in the network, otherwise you cannot join the network. Finding peers \u00b6 java-tron continuously attempts to connect to other nodes on the network until it has enough peers, at the same time, it will also accept connections from other nodes. java-tron finds peers using the discovery protocol. In the discovery protocol, nodes exchange connectivity details and then establish sessions and exchange TRON data. If you want java-tron node to do node discovery, you need to enable the node discovery service in the node configuration file first: node.discovery = { enable = true ... } Then, for the new node that joins the TRON network, you can configure the seed node to make it easier for the current node to connect to the peer node, and then obtain the address information of other nodes through the peer node. Generally, the seed nodes are set as stable online fullnodes. For the TRON main network, community public nodes can be used as seed nodes, for example: seed.node = { # List of the seed nodes # Seed nodes are stable full nodes ip.list = [ \"3.225.171.164:18888\", \"52.53.189.99:18888\", \"18.196.99.16:18888\", \"34.253.187.192:18888\", \"18.133.82.227:18888\", \"35.180.51.163:18888\", \"54.252.224.209:18888\", \"18.231.27.82:18888\", \"52.15.93.92:18888\", \"34.220.77.106:18888\", \"15.207.144.3:18888\", \"13.124.62.58:18888\", \"54.151.226.240:18888\", \"35.174.93.198:18888\", \"18.210.241.149:18888\", \"54.177.115.127:18888\", \"54.254.131.82:18888\", \"18.167.171.167:18888\", \"54.167.11.177:18888\", \"35.74.7.196:18888\", \"52.196.244.176:18888\", \"54.248.129.19:18888\", \"43.198.142.160:18888\", \"3.0.214.7:18888\", \"54.153.59.116:18888\", \"54.153.94.160:18888\", \"54.82.161.39:18888\", \"54.179.207.68:18888\", \"18.142.82.44:18888\", \"18.163.230.203:18888\" ] } There are scenarios where disabling the discovery process is useful, for example for running a local test node or an experimental test network with known, fixed nodes. This can be configured by node.discovery.enable = false to close the node discovery process. Connectivity problems \u00b6 There are occasions when java-tron simply fails to connect to peers. The common reasons for this are: Local time might be incorrect. An accurate clock is required to participate in the TRON network. The local clock can be resynchronized using commands such as sudo ntpdate -s time.nist.gov . Some firewall configurations can prohibit UDP traffic. But the node discovery service is based on the UDP protocol, so you can make it possible to let the node connect to the network by configuring node.active in the case of node discovery invalid. By configuring node.passive to accept active connections from trusted nodes. The Shasta testnet does not currently support nodes joining the network. If you need to run nodes to join the public testnet, you can choose the Nile testnet. Log and network connection verification \u00b6 The java-tron node log is /logs/tron.log in the java-tron installation directory. Under the java-tron installation directory, you can use the following commands to view the latest log of the node and check the block synchronization status of the node: $ tail -f /logs/tron.log/ You will see the below block synchronization logs if java-tron is running as expected. 15:41:48.033 INFO [nioEventLoopGroup-6-2] [DB](Manager.java:1208) pushBlock block number:76, cost/txs:13/0 false 15:41:48.033 INFO [nioEventLoopGroup-6-2] [net](TronNetDelegate.java:255) Success process block Num:76,ID:000000000000004c9e3899ee9952a7f0d9e4f692c7070a48390e6fea8099432f. For the super representative's fullnode, you will see the following producing blocks log: 02:31:33.008 INFO [DPosMiner] [DB](Manager.java:1383) Generate block 79336 begin 02:31:33.059 INFO [DPosMiner] [DB](SnapshotManager.java:315) flush cost:51, create checkpoint cost:49, refresh cost:2 02:31:33.060 INFO [DPosMiner] [DB](Manager.java:1492) Generate block 79336 success, trxs:0, pendingCount: 0, rePushCount: 0, postponedCount: 0 If no error messages are reported in the node logs, means everything is fine. You can also send an http request to check whether the node has been started, and to view the status of the node: including the node configuration information, the information about the machine where the node is located, the connection status of the node peers, etc. $ curl http://127.0.0.1:16887/wallet/getnodeinfo Returns\uff1a { \"activeConnectCount\": 3, \"beginSyncNum\": 42518346, \"block\": \"Num:42518365,ID:000000000288c75d1967232f1efe606ff90b9dd76660d7de8cc091849be6bf10\", \"cheatWitnessInfoMap\": { ... }, \"configNodeInfo\": { ... \"codeVersion\": \"4.5.1\", \"dbVersion\": 2, \"discoverEnable\": true, \"listenPort\": 18888, ... }, \"currentConnectCount\": 18, \"machineInfo\": { ... }, \"passiveConnectCount\": 15, \"peerList\": [ ... ], \"solidityBlock\": \"Num:42518347,ID:000000000288c74b723398aef104c585bad1c7cbade7793c5551466bd916feee\", \"totalFlow\": 8735314 } In order for users to interact with the TRON network, the java-tron node must be running and in a normal state of synchronization. Whether the node is synchronized with other nodes in the network, you can query the current block height in Tronscan and compare it with the result of /wallet/getnowblock queried from the local java-tron node. If they are equal, it means that the synchronization status of the local node is normal. Private network \u00b6 It is often useful for developers to connect to private test networks rather than public testnets or TRON mainnet. Because the private chain not only has no requirements for machine configuration, but also in the sandbox environment of the private chain network, it is easier to test various functions, and it gives freedom to break things without real-world consequences. The private chain network needs to configure the configuration item node.p2p.version in the private chain configuration file to a value which is not used by any other existing public network (TRON mainnet, testnet). For detailed instructions on private chain construction, please refer to Private Chain Network . Active and passive connections \u00b6 java-tron supports setting its actively connected nodes node.active as well as passively connected nodes node.passive . Configuring node.active and node.passive can greatly help improve the stability of the network connection of the node. When java-tron starts, it will actively establish a connection with the peer node in node.active . node { active = [ # Active establish connection in any case # Sample entries: # \"ip:port\", # \"ip:port\" ] } When a node in node.passive actively establishes a connection with the current node, the current node will accept it unconditionally. node { passive = [ # Passive accept connection in any case # Sample entries: # \"ip:port\", # \"ip:port\" ] } Peer limit \u00b6 node.maxActiveNodes indicates the maximum number of connections between the node and other nodes, the default value is 30. Setting a larger value can enable nodes to establish more connections, join the network more efficiently, and broadcast more efficiently. However, the bandwidth required to maintain the connection is also higher and the performance consumption is higher. Therefore, please set it according to the actual situation. node { maxActiveNodes = 30 }","title":"Network Configuration"},{"location":"using_javatron/connecting_to_tron/#connecting-to-the-tron-network","text":"The TRON network is mainly divided into the main network, the Shasta test network, the Nile test network and the private network. Therefore, for the java-tron client software, it can be connected to any TRON network by modifying the configuration items in the configuration file. At present, the Shasta testnet does not support adding a new node, but the Nile testnet supports it. You need to set the following configuration items to connect java-tron to one of the TRON networks: node.p2p.version : It is used to set the P2P network id. Only nodes with the same network id can shake hands successfully. TRON mainnet: node.p2p.version=11111 Nile testnet: node.p2p.version = 201910292 Private network\uff1aset to other values seed.node : set seed node genesis.block : Genesis block settings. To join a network, please ensure that the settings of the genesis block are the same as those of other nodes in the network, otherwise you cannot join the network.","title":"Connecting to the TRON network"},{"location":"using_javatron/connecting_to_tron/#finding-peers","text":"java-tron continuously attempts to connect to other nodes on the network until it has enough peers, at the same time, it will also accept connections from other nodes. java-tron finds peers using the discovery protocol. In the discovery protocol, nodes exchange connectivity details and then establish sessions and exchange TRON data. If you want java-tron node to do node discovery, you need to enable the node discovery service in the node configuration file first: node.discovery = { enable = true ... } Then, for the new node that joins the TRON network, you can configure the seed node to make it easier for the current node to connect to the peer node, and then obtain the address information of other nodes through the peer node. Generally, the seed nodes are set as stable online fullnodes. For the TRON main network, community public nodes can be used as seed nodes, for example: seed.node = { # List of the seed nodes # Seed nodes are stable full nodes ip.list = [ \"3.225.171.164:18888\", \"52.53.189.99:18888\", \"18.196.99.16:18888\", \"34.253.187.192:18888\", \"18.133.82.227:18888\", \"35.180.51.163:18888\", \"54.252.224.209:18888\", \"18.231.27.82:18888\", \"52.15.93.92:18888\", \"34.220.77.106:18888\", \"15.207.144.3:18888\", \"13.124.62.58:18888\", \"54.151.226.240:18888\", \"35.174.93.198:18888\", \"18.210.241.149:18888\", \"54.177.115.127:18888\", \"54.254.131.82:18888\", \"18.167.171.167:18888\", \"54.167.11.177:18888\", \"35.74.7.196:18888\", \"52.196.244.176:18888\", \"54.248.129.19:18888\", \"43.198.142.160:18888\", \"3.0.214.7:18888\", \"54.153.59.116:18888\", \"54.153.94.160:18888\", \"54.82.161.39:18888\", \"54.179.207.68:18888\", \"18.142.82.44:18888\", \"18.163.230.203:18888\" ] } There are scenarios where disabling the discovery process is useful, for example for running a local test node or an experimental test network with known, fixed nodes. This can be configured by node.discovery.enable = false to close the node discovery process.","title":"Finding peers"},{"location":"using_javatron/connecting_to_tron/#connectivity-problems","text":"There are occasions when java-tron simply fails to connect to peers. The common reasons for this are: Local time might be incorrect. An accurate clock is required to participate in the TRON network. The local clock can be resynchronized using commands such as sudo ntpdate -s time.nist.gov . Some firewall configurations can prohibit UDP traffic. But the node discovery service is based on the UDP protocol, so you can make it possible to let the node connect to the network by configuring node.active in the case of node discovery invalid. By configuring node.passive to accept active connections from trusted nodes. The Shasta testnet does not currently support nodes joining the network. If you need to run nodes to join the public testnet, you can choose the Nile testnet.","title":"Connectivity problems"},{"location":"using_javatron/connecting_to_tron/#log-and-network-connection-verification","text":"The java-tron node log is /logs/tron.log in the java-tron installation directory. Under the java-tron installation directory, you can use the following commands to view the latest log of the node and check the block synchronization status of the node: $ tail -f /logs/tron.log/ You will see the below block synchronization logs if java-tron is running as expected. 15:41:48.033 INFO [nioEventLoopGroup-6-2] [DB](Manager.java:1208) pushBlock block number:76, cost/txs:13/0 false 15:41:48.033 INFO [nioEventLoopGroup-6-2] [net](TronNetDelegate.java:255) Success process block Num:76,ID:000000000000004c9e3899ee9952a7f0d9e4f692c7070a48390e6fea8099432f. For the super representative's fullnode, you will see the following producing blocks log: 02:31:33.008 INFO [DPosMiner] [DB](Manager.java:1383) Generate block 79336 begin 02:31:33.059 INFO [DPosMiner] [DB](SnapshotManager.java:315) flush cost:51, create checkpoint cost:49, refresh cost:2 02:31:33.060 INFO [DPosMiner] [DB](Manager.java:1492) Generate block 79336 success, trxs:0, pendingCount: 0, rePushCount: 0, postponedCount: 0 If no error messages are reported in the node logs, means everything is fine. You can also send an http request to check whether the node has been started, and to view the status of the node: including the node configuration information, the information about the machine where the node is located, the connection status of the node peers, etc. $ curl http://127.0.0.1:16887/wallet/getnodeinfo Returns\uff1a { \"activeConnectCount\": 3, \"beginSyncNum\": 42518346, \"block\": \"Num:42518365,ID:000000000288c75d1967232f1efe606ff90b9dd76660d7de8cc091849be6bf10\", \"cheatWitnessInfoMap\": { ... }, \"configNodeInfo\": { ... \"codeVersion\": \"4.5.1\", \"dbVersion\": 2, \"discoverEnable\": true, \"listenPort\": 18888, ... }, \"currentConnectCount\": 18, \"machineInfo\": { ... }, \"passiveConnectCount\": 15, \"peerList\": [ ... ], \"solidityBlock\": \"Num:42518347,ID:000000000288c74b723398aef104c585bad1c7cbade7793c5551466bd916feee\", \"totalFlow\": 8735314 } In order for users to interact with the TRON network, the java-tron node must be running and in a normal state of synchronization. Whether the node is synchronized with other nodes in the network, you can query the current block height in Tronscan and compare it with the result of /wallet/getnowblock queried from the local java-tron node. If they are equal, it means that the synchronization status of the local node is normal.","title":"Log and network connection verification"},{"location":"using_javatron/connecting_to_tron/#private-network","text":"It is often useful for developers to connect to private test networks rather than public testnets or TRON mainnet. Because the private chain not only has no requirements for machine configuration, but also in the sandbox environment of the private chain network, it is easier to test various functions, and it gives freedom to break things without real-world consequences. The private chain network needs to configure the configuration item node.p2p.version in the private chain configuration file to a value which is not used by any other existing public network (TRON mainnet, testnet). For detailed instructions on private chain construction, please refer to Private Chain Network .","title":"Private network"},{"location":"using_javatron/connecting_to_tron/#active-and-passive-connections","text":"java-tron supports setting its actively connected nodes node.active as well as passively connected nodes node.passive . Configuring node.active and node.passive can greatly help improve the stability of the network connection of the node. When java-tron starts, it will actively establish a connection with the peer node in node.active . node { active = [ # Active establish connection in any case # Sample entries: # \"ip:port\", # \"ip:port\" ] } When a node in node.passive actively establishes a connection with the current node, the current node will accept it unconditionally. node { passive = [ # Passive accept connection in any case # Sample entries: # \"ip:port\", # \"ip:port\" ] }","title":"Active and passive connections"},{"location":"using_javatron/connecting_to_tron/#peer-limit","text":"node.maxActiveNodes indicates the maximum number of connections between the node and other nodes, the default value is 30. Setting a larger value can enable nodes to establish more connections, join the network more efficiently, and broadcast more efficiently. However, the bandwidth required to maintain the connection is also higher and the performance consumption is higher. Therefore, please set it according to the actual situation. node { maxActiveNodes = 30 }","title":"Peer limit"},{"location":"using_javatron/installing_javatron/","text":"Deploy a java-tron Node \u00b6 java-tron nodes support to be deployed on Linux or MacOS operating systems, and rely on Oracle JDK 1.8 , other versions of JDK are not supported. The minimum hardware configuration required to run a java-tron node is 8-core CPU , 16G memory , 2T SDD , the recommended configuration is: 16-core CPU , 32G memory , 2.5T+ SDD . The fullnode running by super representative to produce block recommends 32-core CPU and 64G memory . Compile the Source Code \u00b6 First, clone the java-tron repository to the local with the following git command, and switch to the master branch. Before executing the command, make sure you have installed the git tool. $ git clone https://github.com/tronprotocol/java-tron.git $ git checkout -t origin/master Then, compile the java-tron source code by executing the following command. The parameter -x test means to skip the execution of the test case. You can also remove this parameter to execute the test code during the compilation process, which will make the compilation time longer. After the compilation is complete, FullNode.jar will be generated in the java-tron/build/libs/ directory. $ cd java-tron $ ./gradlew clean build -x test Run a java-tron Node \u00b6 You can choose different configuration files to connect java-tron nodes to different networks. The mainnet configuration file is: main_net_config.conf , other network configuration files can be found here . Startup a fullnode \u00b6 Fullnode has full historical data, it is the entry point into the TRON network , it provides HTTP API and gRPC API for external query. You can interact with the TRON network through fullnode\uff1atransfer assets, deploy contracts, interact with contracts and so on. The mainnet fullnode startup command is as follows, and the configuration file of the fullnode is specified by the -c parameter: $ java -Xmx24g -XX:+UseConcMarkSweepGC -jar FullNode.jar -c main_net_config.conf -XX:+UseConcMarkSweepGC \uff1aSpecifies parallel garbage collection. To be placed before the -jar parameter, not at the end. -Xmx \uff1aThe maximum value of the JVM heap, which can be set to 80% of the physical memory. Startup a fullnode that produces blocks \u00b6 Adding the --witness parameter to the startup command, fullnode will run as a node which produces blocks. In addition to supporting all the functions of fullnode, the block-producing fullnode also supports block production and transaction packaging. Please make sure you have a super representative account and get the votes of others. If the votes ranks in the top 27, you need to start a full node that produces blocks to participate in block production. Fill in the private key of the super representative address into the localwitness list in the main_net_config.conf, below is an example. But if you don't want to use this way of specifying the private key in plain text, you can use the keystore + password method, please refer to Others chapter. localwitness = [ 650950B193DDDDB35B6E48912DD28F7AB0E7140C1BFDEFD493348F02295BD812 ] then run the following command to start the node: $ java -Xmx24g -XX:+UseConcMarkSweepGC -jar FullNode.jar --witness -c main_net_config.conf Note : For the mainnet and nile testnet, since the amount of data to be synchronized is large after the new node is started, it will take a long time to synchronize the data. You can use Data Snapshots to speed up node synchronization. First download the latest data snapshot and extract it to the output-directory directory of the TRON project, and then start the node, so that the node will synchronize on the basis of the data snapshot. Others \u00b6 How to use keystore + password to specify the privatekey of witness account \u00b6 You should not use the nohup command because the interaction is required when running the node. It is recommended to use session keeping tools such as screen, tmux, etc. Comment the localwitness item in main_net_config.conf and uncomment the localwitnesskeystore item. Fill in the path of the Keystore file. Note that the Keystore file needs to be placed in the current directory where the startup command is executed or its subdirectory. If the current directory is \"A\", the directory of the Keystore file is \"A/B/localwitnesskeystore.json\", it needs to be configured as: localwitnesskeystore = [ \"B/localwitnesskeystore.json\" ] Note : For keystore + password generation, you can use the register wallet command of the wallet-cli . Startup the fullnode which produces blocks $ java -Xmx24g -XX:+UseConcMarkSweepGC -jar FullNode.jar --witness -c main_net_config.conf Enter the password correctly to finish the node startup. Optimize Memory Allocation with tcmalloc \u00b6 Memory allocation of java-tron can be optimized with tcmalloc. The method is as follows: First install tcmalloc, then add the following two lines to the startup script, the path of tcmalloc is slightly different for different Linux distributions. #!/bin/bash export LD_PRELOAD=\"/usr/lib/libtcmalloc.so.4\" export TCMALLOC_RELEASE_RATE=10 # original start command java -jar ..... Instructions for each Linux distributions are as belows: Ubuntu 20.04 LTS / Ubuntu 18.04 LTS / Debian stable Install $ sudo apt install libgoogle-perftools4 In the startup script add the following: export LD_PRELOAD=\"/usr/lib/x86_64-linux-gnu/libtcmalloc.so.4\" export TCMALLOC_RELEASE_RATE=10 Ubuntu 16.04 LTS Same install command as above. In the startup script add the following: export LD_PRELOAD=\"/usr/lib/libtcmalloc.so.4\" export TCMALLOC_RELEASE_RATE=10 CentOS 7 Install $ sudo yum install gperftools-libs In the startup script add the following: export LD_PRELOAD=\"/usr/lib64/libtcmalloc.so.4\" export TCMALLOC_RELEASE_RATE=10","title":"Deploying java-tron"},{"location":"using_javatron/installing_javatron/#deploy-a-java-tron-node","text":"java-tron nodes support to be deployed on Linux or MacOS operating systems, and rely on Oracle JDK 1.8 , other versions of JDK are not supported. The minimum hardware configuration required to run a java-tron node is 8-core CPU , 16G memory , 2T SDD , the recommended configuration is: 16-core CPU , 32G memory , 2.5T+ SDD . The fullnode running by super representative to produce block recommends 32-core CPU and 64G memory .","title":"Deploy a java-tron Node"},{"location":"using_javatron/installing_javatron/#compile-the-source-code","text":"First, clone the java-tron repository to the local with the following git command, and switch to the master branch. Before executing the command, make sure you have installed the git tool. $ git clone https://github.com/tronprotocol/java-tron.git $ git checkout -t origin/master Then, compile the java-tron source code by executing the following command. The parameter -x test means to skip the execution of the test case. You can also remove this parameter to execute the test code during the compilation process, which will make the compilation time longer. After the compilation is complete, FullNode.jar will be generated in the java-tron/build/libs/ directory. $ cd java-tron $ ./gradlew clean build -x test","title":"Compile the Source Code"},{"location":"using_javatron/installing_javatron/#run-a-java-tron-node","text":"You can choose different configuration files to connect java-tron nodes to different networks. The mainnet configuration file is: main_net_config.conf , other network configuration files can be found here .","title":"Run a java-tron Node"},{"location":"using_javatron/installing_javatron/#startup-a-fullnode","text":"Fullnode has full historical data, it is the entry point into the TRON network , it provides HTTP API and gRPC API for external query. You can interact with the TRON network through fullnode\uff1atransfer assets, deploy contracts, interact with contracts and so on. The mainnet fullnode startup command is as follows, and the configuration file of the fullnode is specified by the -c parameter: $ java -Xmx24g -XX:+UseConcMarkSweepGC -jar FullNode.jar -c main_net_config.conf -XX:+UseConcMarkSweepGC \uff1aSpecifies parallel garbage collection. To be placed before the -jar parameter, not at the end. -Xmx \uff1aThe maximum value of the JVM heap, which can be set to 80% of the physical memory.","title":"Startup a fullnode"},{"location":"using_javatron/installing_javatron/#startup-a-fullnode-that-produces-blocks","text":"Adding the --witness parameter to the startup command, fullnode will run as a node which produces blocks. In addition to supporting all the functions of fullnode, the block-producing fullnode also supports block production and transaction packaging. Please make sure you have a super representative account and get the votes of others. If the votes ranks in the top 27, you need to start a full node that produces blocks to participate in block production. Fill in the private key of the super representative address into the localwitness list in the main_net_config.conf, below is an example. But if you don't want to use this way of specifying the private key in plain text, you can use the keystore + password method, please refer to Others chapter. localwitness = [ 650950B193DDDDB35B6E48912DD28F7AB0E7140C1BFDEFD493348F02295BD812 ] then run the following command to start the node: $ java -Xmx24g -XX:+UseConcMarkSweepGC -jar FullNode.jar --witness -c main_net_config.conf Note : For the mainnet and nile testnet, since the amount of data to be synchronized is large after the new node is started, it will take a long time to synchronize the data. You can use Data Snapshots to speed up node synchronization. First download the latest data snapshot and extract it to the output-directory directory of the TRON project, and then start the node, so that the node will synchronize on the basis of the data snapshot.","title":"Startup a fullnode that produces blocks"},{"location":"using_javatron/installing_javatron/#others","text":"","title":"Others"},{"location":"using_javatron/installing_javatron/#how-to-use-keystore-password-to-specify-the-privatekey-of-witness-account","text":"You should not use the nohup command because the interaction is required when running the node. It is recommended to use session keeping tools such as screen, tmux, etc. Comment the localwitness item in main_net_config.conf and uncomment the localwitnesskeystore item. Fill in the path of the Keystore file. Note that the Keystore file needs to be placed in the current directory where the startup command is executed or its subdirectory. If the current directory is \"A\", the directory of the Keystore file is \"A/B/localwitnesskeystore.json\", it needs to be configured as: localwitnesskeystore = [ \"B/localwitnesskeystore.json\" ] Note : For keystore + password generation, you can use the register wallet command of the wallet-cli . Startup the fullnode which produces blocks $ java -Xmx24g -XX:+UseConcMarkSweepGC -jar FullNode.jar --witness -c main_net_config.conf Enter the password correctly to finish the node startup.","title":"How to use keystore + password to specify the privatekey of witness account"},{"location":"using_javatron/installing_javatron/#optimize-memory-allocation-with-tcmalloc","text":"Memory allocation of java-tron can be optimized with tcmalloc. The method is as follows: First install tcmalloc, then add the following two lines to the startup script, the path of tcmalloc is slightly different for different Linux distributions. #!/bin/bash export LD_PRELOAD=\"/usr/lib/libtcmalloc.so.4\" export TCMALLOC_RELEASE_RATE=10 # original start command java -jar ..... Instructions for each Linux distributions are as belows: Ubuntu 20.04 LTS / Ubuntu 18.04 LTS / Debian stable Install $ sudo apt install libgoogle-perftools4 In the startup script add the following: export LD_PRELOAD=\"/usr/lib/x86_64-linux-gnu/libtcmalloc.so.4\" export TCMALLOC_RELEASE_RATE=10 Ubuntu 16.04 LTS Same install command as above. In the startup script add the following: export LD_PRELOAD=\"/usr/lib/libtcmalloc.so.4\" export TCMALLOC_RELEASE_RATE=10 CentOS 7 Install $ sudo yum install gperftools-libs In the startup script add the following: export LD_PRELOAD=\"/usr/lib64/libtcmalloc.so.4\" export TCMALLOC_RELEASE_RATE=10","title":"Optimize Memory Allocation with tcmalloc"},{"location":"using_javatron/metrics/","text":"java-tron Node Metrics Monitoring \u00b6 Starting from the GreatVoyage-4.5.1 (Tertullian) version, the node provides a series of interfaces compatible with the prometheus protocol, so that the node deployer can monitor the health status of the node more conveniently. If you want to monitor various indicators of the node, you first need to deploy a prometheus service to communicate with the java-tron node, and obtain the indicator data of the node through the node interface. Then you need to deploy a visualization tool, such as Grafana, to display the node data obtained by prometheus in the form of a graphical interface. The following will introduce the deployment process of the java-tron node monitoring system in detail. Configure java-tron \u00b6 To use the Prometheus tool to monitor the java-tron node, you first need to enable prometheus metric monitoring in the node configuration file and set the http port: node { ... ... p2p { version = 11111 # 11111: mainnet; 20180622: testnet } ####### add for prometheus start. metrics{ prometheus{ enable=true port=\"9527\" } } ####### add for prometheus end. } Start java-tron node \u00b6 Start java-tron node using below command\uff1a $ java -Xmx24g -XX:+UseConcMarkSweepGC -jar FullNode.jar -c main_net_config.conf Deploy prometheus service \u00b6 prometheus officially provides precompiled binaries and docker images, you can download them directly from the official website or pull the docker images on dockerhub. For more detailed installation and configuration instructions, Please refer to the prometheus documentation . As a simple deployment instruction, this article will adopt the docker image deployment: After installing docker, enter the following command to pull the prometheus image: $ docker pull prom/prometheus Download the prometheus configuration file The following is a prometheus configuration file template prometheus.yaml : global: scrape_interval: 30s scrape_timeout: 10s evaluation_interval: 30s scrape_configs: - job_name: java-tron honor_timestamps: true scrape_interval: 3s scrape_timeout: 2s metrics_path: /metrics scheme: http follow_redirects: true static_configs: - targets: - 127.0.0.1:9527 labels: group: group-xxx instance: xxx-01 - targets: - 172.0.0.2:9527 labels: group: group-xxx instance: xxx-02 You can download and use this template and modify the configuration items targets , it is used to configure the ip and prometheus port of the java-tron node. If you deploy multiple java-tron nodes, you can configure multiple targets to monitor multiple nodes. Start a Prometheus container Start a Prometheus container with the following command and specify to use the user-defined configuration file in the previous step: /Users/test/deploy/prometheus/prometheus.yaml $ docker run --name prometheus \\ -d -p :9090:9090 \\ -v /Users/test/deploy/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml \\ prom/prometheus:latest After the container starts, you can view the running status of the prometheus service through http://localhost:9090/ . Click \"Status\" -> \"Configuration\" to check whether the configuration file used by the container is correct: Click \"Status\" -> \"Targets\" to view the status of each monitored java-tron node: In this example, the status of the first endpoint is UP , which means that Prometheus can fetch the data of this node normally. The second endpoint, whose status is DOWN , indicates an exception. For details, please refer to the description in \"Error\". When the status of the monitored java-tron nodes is normal, you can monitor the indicator data through visualization tools such as Grafana or Promdash, etc. This article will use grafana to display the data: Deploy Grafana \u00b6 The deployment process of the Grafana visualization tool is as follows: Install Grafana Please refer to the official documentation to install Grafana . This article will adopt the docker image deployment, and the pulled image version is the open source version: $ docker pull grafana/grafana-oss Start Grafana You can use the below command to start Grafana: $ docker run -d --name=grafana -p 3000:3000 grafana/grafana-oss Log in to the Grafana web UI After startup, you can login the Grafana web UI through http://localhost:3000/ . The initial user name and password are both admin . After login, change the password according to the prompts, and then you can enter the main interface. Click the settings icon on the left side of the main page and select \"Data Sources\" to configure Grafana's data sources: Enter the ip and port of the prometheus service in URL : Then click the \"Save & test\" button at the bottom of the page to save the settings. After clicking save, Grafana will detect the connection with the data source, and if the connection is successful, you will find the words Data source is working . Import Dashboard Grafana's dashboard needs to be configured. For the convenience of java-tron node deployers, the TRON community provides a comprehensive dashboard configuration file java-tron-template_rev1.json , which you can download directly and then import into Grafana. Click the Dashboards icon on the left, then select \"+Import\", then click \"Upload JSON file\" to import the downloaded dashboard configuration file: Then you can see the following types of monitoring metrics on the dashboard, and monitor the running status of the nodes in real time:","title":"Node Monitoring"},{"location":"using_javatron/metrics/#java-tron-node-metrics-monitoring","text":"Starting from the GreatVoyage-4.5.1 (Tertullian) version, the node provides a series of interfaces compatible with the prometheus protocol, so that the node deployer can monitor the health status of the node more conveniently. If you want to monitor various indicators of the node, you first need to deploy a prometheus service to communicate with the java-tron node, and obtain the indicator data of the node through the node interface. Then you need to deploy a visualization tool, such as Grafana, to display the node data obtained by prometheus in the form of a graphical interface. The following will introduce the deployment process of the java-tron node monitoring system in detail.","title":"java-tron Node Metrics Monitoring"},{"location":"using_javatron/metrics/#configure-java-tron","text":"To use the Prometheus tool to monitor the java-tron node, you first need to enable prometheus metric monitoring in the node configuration file and set the http port: node { ... ... p2p { version = 11111 # 11111: mainnet; 20180622: testnet } ####### add for prometheus start. metrics{ prometheus{ enable=true port=\"9527\" } } ####### add for prometheus end. }","title":"Configure java-tron"},{"location":"using_javatron/metrics/#start-java-tron-node","text":"Start java-tron node using below command\uff1a $ java -Xmx24g -XX:+UseConcMarkSweepGC -jar FullNode.jar -c main_net_config.conf","title":"Start java-tron node"},{"location":"using_javatron/metrics/#deploy-prometheus-service","text":"prometheus officially provides precompiled binaries and docker images, you can download them directly from the official website or pull the docker images on dockerhub. For more detailed installation and configuration instructions, Please refer to the prometheus documentation . As a simple deployment instruction, this article will adopt the docker image deployment: After installing docker, enter the following command to pull the prometheus image: $ docker pull prom/prometheus Download the prometheus configuration file The following is a prometheus configuration file template prometheus.yaml : global: scrape_interval: 30s scrape_timeout: 10s evaluation_interval: 30s scrape_configs: - job_name: java-tron honor_timestamps: true scrape_interval: 3s scrape_timeout: 2s metrics_path: /metrics scheme: http follow_redirects: true static_configs: - targets: - 127.0.0.1:9527 labels: group: group-xxx instance: xxx-01 - targets: - 172.0.0.2:9527 labels: group: group-xxx instance: xxx-02 You can download and use this template and modify the configuration items targets , it is used to configure the ip and prometheus port of the java-tron node. If you deploy multiple java-tron nodes, you can configure multiple targets to monitor multiple nodes. Start a Prometheus container Start a Prometheus container with the following command and specify to use the user-defined configuration file in the previous step: /Users/test/deploy/prometheus/prometheus.yaml $ docker run --name prometheus \\ -d -p :9090:9090 \\ -v /Users/test/deploy/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml \\ prom/prometheus:latest After the container starts, you can view the running status of the prometheus service through http://localhost:9090/ . Click \"Status\" -> \"Configuration\" to check whether the configuration file used by the container is correct: Click \"Status\" -> \"Targets\" to view the status of each monitored java-tron node: In this example, the status of the first endpoint is UP , which means that Prometheus can fetch the data of this node normally. The second endpoint, whose status is DOWN , indicates an exception. For details, please refer to the description in \"Error\". When the status of the monitored java-tron nodes is normal, you can monitor the indicator data through visualization tools such as Grafana or Promdash, etc. This article will use grafana to display the data:","title":"Deploy prometheus service"},{"location":"using_javatron/metrics/#deploy-grafana","text":"The deployment process of the Grafana visualization tool is as follows: Install Grafana Please refer to the official documentation to install Grafana . This article will adopt the docker image deployment, and the pulled image version is the open source version: $ docker pull grafana/grafana-oss Start Grafana You can use the below command to start Grafana: $ docker run -d --name=grafana -p 3000:3000 grafana/grafana-oss Log in to the Grafana web UI After startup, you can login the Grafana web UI through http://localhost:3000/ . The initial user name and password are both admin . After login, change the password according to the prompts, and then you can enter the main interface. Click the settings icon on the left side of the main page and select \"Data Sources\" to configure Grafana's data sources: Enter the ip and port of the prometheus service in URL : Then click the \"Save & test\" button at the bottom of the page to save the settings. After clicking save, Grafana will detect the connection with the data source, and if the connection is successful, you will find the words Data source is working . Import Dashboard Grafana's dashboard needs to be configured. For the convenience of java-tron node deployers, the TRON community provides a comprehensive dashboard configuration file java-tron-template_rev1.json , which you can download directly and then import into Grafana. Click the Dashboards icon on the left, then select \"+Import\", then click \"Upload JSON file\" to import the downloaded dashboard configuration file: Then you can see the following types of monitoring metrics on the dashboard, and monitor the running status of the nodes in real time:","title":"Deploy Grafana"},{"location":"using_javatron/private_network/","text":"Private Network \u00b6 To build a private chain, it is necessary to deploy at least one fullnode running by SR to produces blocks, and any number of fullnodes to synchronize blocks and broadcast transactions. Only one SR node and one fullnode are set up in this example. Before the deployment, please install the Oracle JDK 1.8 first, and then you need to prepare at least two TRON network address and save the address and private key. You can use wallet-cli or Tronlink to create address. Deployment Guide \u00b6 The process of building a node on private chain is the same as that on mainnet. The difference is the content of the node configuration file. The most important step to build a private chain is to modify the configuration items in the configuration file, so that the nodes can form a private network for node discovery, block synchronization and broadcast transactions. Create deployment directory Create deployment directory, it is recommended to put the two fullnodes in different directories. $ mkdir SR $ mkdir FullNode Obtain FullNode.jar Obtain FullNode.jar, then put it into the SR and FullNode directories respectively. $ cp FullNode.jar ./SR $ cp FullNode.jar ./FullNode Obtain the node's config file private_net_config.conf Obtain the node's config file private_net_config.conf, then put it into the SR and FullNode directories respectively, and modify the file names respectively to supernode.conf, fullnode.conf. $ cp private_net_config.conf ./SR/supernode.conf $ cp private_net_config.conf ./FullNode/fullnode.conf Modify the configuration file of each node Please modify each configuration item of the node in turn according to the instructions in the following table: Config Item SR Fullnode FullNode Description localwitness The private key of witness address Please do not fill in data Generating blocks requires signing with a private key genesis.block.witnesses Witness address The same as SR node's Genesis block related configuration genesis.block.Assets Preset TRX for specific accounts. Add the pre-prepared address to the end and specify its TRX balance as needed The same as SR node's Genesis block related configuration p2p.version any positive integer except for 11111 the same as SR node's Only nodes of the same p2p version can shake hands successfully seed.node Please do not fill in data Change the seed.node ip.list in the configuration file to the IP address and the port ( listen.port ) of the SR Enables fullnode to establish connection with SR node and synchronize data needSyncCheck false true Set the first SR\u2019s needSyncCheck to false, other SRs true node.discovery.enable true true If it is false, the current node will not be discovered by other nodes block.proposalExpireTime 600000 The same as SR node's The default proposal effective time is 3 days: 259200000 (ms), if you want to quickly pass the proposal, you can set this item to a smaller value, such as 10 minutes, that is, 600000ms block.maintenanceTimeInterval 300000 The same as SR node's The default maintenance time interval is 6 hours: 21600000 (ms), if you want to pass the proposal quickly, you can set this item to a smaller value, such as five minutes, that is, 300000ms. committee.allowSameTokenName 1 1 Allow same token name committee.allowTvmTransferTrc10 1 1 Allow tvm transfer TRC10 Modify the port in the configuration file, and configure the SR and FullNode with different port numbers. Note , this step is only required if SR and FullNode are running on the same machine, otherwise, this step can be skipped. listen.port \uff1a p2p listen port http port\uff1a Http listen port rpc port\uff1a rpc listen port Startup the node The fullnode that produces blocks has the different startup command with the fullnodes that do not produce blocks: Fullnode that produces blocks $ java -Xmx6g -XX:+HeapDumpOnOutOfMemoryError -jar FullNode.jar --witness -c supernode.conf Fullnode $ java -Xmx6g -XX:+HeapDumpOnOutOfMemoryError -jar FullNode.jar -c fullnode.conf Modify the dynamic parameters of the private chain In order to be the same as the main network environment, the dynamic parameters of the private chain need to be modified to be consistent with those of the main network. The modification of dynamic parameters can be done through proposals. The SR account can use wallet-cli or fullnode http API wallet/proposalcreate to create proposals, wallet/proposalapprove to approve proposals. The following are the dynamic parameters and values sorted out according to the proposals passed by the mainnet successively. SR can directly use the following commands to create proposals to complete the modification of all the dynamic parameters of the private chain. Due to the dependencies between some parameters, according to the current parameter values on the main network, the modification of all parameters of the private chain can be divided into two proposals. The first step, SR creates and votes the first proposal according to the following code: var TronWeb = require('tronweb'); var tronWeb = new TronWeb({ fullHost: 'http://localhost:16887', privateKey: 'c741f5c0224020d7ccaf4617a33cc099ac13240f150cf35f496db5bfc7d220dc' }) // First proposal: \"key\":30 and \"key\":70 must be modified first var parametersForProposal1 = [{\"key\":9,\"value\":1},{\"key\":10,\"value\":1},{\"key\":11,\"value\":420},{\"key\":19,\"value\":90000000000},{\"key\":15,\"value\":1},{\"key\":18,\"value\":1},{\"key\":16,\"value\":1},{\"key\":20,\"value\":1},{\"key\":26,\"value\":1},{\"key\":30,\"value\":1},{\"key\":5,\"value\":16000000},{\"key\":31,\"value\":160000000},{\"key\":32,\"value\":1},{\"key\":39,\"value\":1},{\"key\":41,\"value\":1},{\"key\":3,\"value\":1000},{\"key\":47,\"value\":10000000000},{\"key\":49,\"value\":1},{\"key\":13,\"value\":80},{\"key\":7,\"value\":1000000},{\"key\":61,\"value\":600},{\"key\":63,\"value\":1},{\"key\":65,\"value\":1},{\"key\":66,\"value\":1},{\"key\":67,\"value\":1},{\"key\":68,\"value\":1000000},{\"key\":69,\"value\":1},{\"key\":70,\"value\":14},{\"key\":71,\"value\":1},{\"key\":76,\"value\":1}]; var parametersForProposal2 = [{\"key\":47,\"value\":15000000000},{\"key\":59,\"value\":1},{\"key\":72,\"value\":1},{\"key\":73,\"value\":3000000000},{\"key\":74,\"value\":2000},{\"key\":75,\"value\":12000},{\"key\":77,\"value\":1},{\"key\":78,\"value\":864000}]; async function modifyChainParameters(parameters,proposalID){ parameters.sort((a, b) => { return a.key.toString() > b.key.toString() ? 1 : a.key.toString() === b.key.toString() ? 0 : -1; }) var unsignedProposal1Txn = await tronWeb.transactionBuilder.createProposal(parameters,\"41D0B69631440F0A494BB51F7EEE68FF5C593C00F0\") var signedProposal1Txn = await tronWeb.trx.sign(unsignedProposal1Txn); var receipt1 = await tronWeb.trx.sendRawTransaction(signedProposal1Txn); setTimeout(async function() { console.log(receipt1) console.log(\"Vote proposal 1 !\") var unsignedVoteP1Txn = await tronWeb.transactionBuilder.voteProposal(proposalID, true, tronWeb.defaultAddress.hex) var signedVoteP1Txn = await tronWeb.trx.sign(unsignedVoteP1Txn); var rtn1 = await tronWeb.trx.sendRawTransaction(signedVoteP1Txn); }, 1000) } modifyChainParameters(parametersForProposal1, 1) After creating the proposal through the above code, you can query the proposal's effective time: \"expiration_time\" through the http://127.0.0.1:xxxx/wallet/listproposals interface. The timestamp is in milliseconds. After the effective time has passed, if the \"state\" in the return value of the interface is \"APPROVED\", it means that the proposal has been passed, and you can continue to the next step and create the second proposal. The sample code is as follows: modifyChainParameters(parametersForProposal2, 2) After the proposal takes effect, the dynamic parameters of the private chain will be consistent with the main network. You can query the chain parameters through the /wallet/getchainparameters API.","title":"Private Network"},{"location":"using_javatron/private_network/#private-network","text":"To build a private chain, it is necessary to deploy at least one fullnode running by SR to produces blocks, and any number of fullnodes to synchronize blocks and broadcast transactions. Only one SR node and one fullnode are set up in this example. Before the deployment, please install the Oracle JDK 1.8 first, and then you need to prepare at least two TRON network address and save the address and private key. You can use wallet-cli or Tronlink to create address.","title":"Private Network"},{"location":"using_javatron/private_network/#deployment-guide","text":"The process of building a node on private chain is the same as that on mainnet. The difference is the content of the node configuration file. The most important step to build a private chain is to modify the configuration items in the configuration file, so that the nodes can form a private network for node discovery, block synchronization and broadcast transactions. Create deployment directory Create deployment directory, it is recommended to put the two fullnodes in different directories. $ mkdir SR $ mkdir FullNode Obtain FullNode.jar Obtain FullNode.jar, then put it into the SR and FullNode directories respectively. $ cp FullNode.jar ./SR $ cp FullNode.jar ./FullNode Obtain the node's config file private_net_config.conf Obtain the node's config file private_net_config.conf, then put it into the SR and FullNode directories respectively, and modify the file names respectively to supernode.conf, fullnode.conf. $ cp private_net_config.conf ./SR/supernode.conf $ cp private_net_config.conf ./FullNode/fullnode.conf Modify the configuration file of each node Please modify each configuration item of the node in turn according to the instructions in the following table: Config Item SR Fullnode FullNode Description localwitness The private key of witness address Please do not fill in data Generating blocks requires signing with a private key genesis.block.witnesses Witness address The same as SR node's Genesis block related configuration genesis.block.Assets Preset TRX for specific accounts. Add the pre-prepared address to the end and specify its TRX balance as needed The same as SR node's Genesis block related configuration p2p.version any positive integer except for 11111 the same as SR node's Only nodes of the same p2p version can shake hands successfully seed.node Please do not fill in data Change the seed.node ip.list in the configuration file to the IP address and the port ( listen.port ) of the SR Enables fullnode to establish connection with SR node and synchronize data needSyncCheck false true Set the first SR\u2019s needSyncCheck to false, other SRs true node.discovery.enable true true If it is false, the current node will not be discovered by other nodes block.proposalExpireTime 600000 The same as SR node's The default proposal effective time is 3 days: 259200000 (ms), if you want to quickly pass the proposal, you can set this item to a smaller value, such as 10 minutes, that is, 600000ms block.maintenanceTimeInterval 300000 The same as SR node's The default maintenance time interval is 6 hours: 21600000 (ms), if you want to pass the proposal quickly, you can set this item to a smaller value, such as five minutes, that is, 300000ms. committee.allowSameTokenName 1 1 Allow same token name committee.allowTvmTransferTrc10 1 1 Allow tvm transfer TRC10 Modify the port in the configuration file, and configure the SR and FullNode with different port numbers. Note , this step is only required if SR and FullNode are running on the same machine, otherwise, this step can be skipped. listen.port \uff1a p2p listen port http port\uff1a Http listen port rpc port\uff1a rpc listen port Startup the node The fullnode that produces blocks has the different startup command with the fullnodes that do not produce blocks: Fullnode that produces blocks $ java -Xmx6g -XX:+HeapDumpOnOutOfMemoryError -jar FullNode.jar --witness -c supernode.conf Fullnode $ java -Xmx6g -XX:+HeapDumpOnOutOfMemoryError -jar FullNode.jar -c fullnode.conf Modify the dynamic parameters of the private chain In order to be the same as the main network environment, the dynamic parameters of the private chain need to be modified to be consistent with those of the main network. The modification of dynamic parameters can be done through proposals. The SR account can use wallet-cli or fullnode http API wallet/proposalcreate to create proposals, wallet/proposalapprove to approve proposals. The following are the dynamic parameters and values sorted out according to the proposals passed by the mainnet successively. SR can directly use the following commands to create proposals to complete the modification of all the dynamic parameters of the private chain. Due to the dependencies between some parameters, according to the current parameter values on the main network, the modification of all parameters of the private chain can be divided into two proposals. The first step, SR creates and votes the first proposal according to the following code: var TronWeb = require('tronweb'); var tronWeb = new TronWeb({ fullHost: 'http://localhost:16887', privateKey: 'c741f5c0224020d7ccaf4617a33cc099ac13240f150cf35f496db5bfc7d220dc' }) // First proposal: \"key\":30 and \"key\":70 must be modified first var parametersForProposal1 = [{\"key\":9,\"value\":1},{\"key\":10,\"value\":1},{\"key\":11,\"value\":420},{\"key\":19,\"value\":90000000000},{\"key\":15,\"value\":1},{\"key\":18,\"value\":1},{\"key\":16,\"value\":1},{\"key\":20,\"value\":1},{\"key\":26,\"value\":1},{\"key\":30,\"value\":1},{\"key\":5,\"value\":16000000},{\"key\":31,\"value\":160000000},{\"key\":32,\"value\":1},{\"key\":39,\"value\":1},{\"key\":41,\"value\":1},{\"key\":3,\"value\":1000},{\"key\":47,\"value\":10000000000},{\"key\":49,\"value\":1},{\"key\":13,\"value\":80},{\"key\":7,\"value\":1000000},{\"key\":61,\"value\":600},{\"key\":63,\"value\":1},{\"key\":65,\"value\":1},{\"key\":66,\"value\":1},{\"key\":67,\"value\":1},{\"key\":68,\"value\":1000000},{\"key\":69,\"value\":1},{\"key\":70,\"value\":14},{\"key\":71,\"value\":1},{\"key\":76,\"value\":1}]; var parametersForProposal2 = [{\"key\":47,\"value\":15000000000},{\"key\":59,\"value\":1},{\"key\":72,\"value\":1},{\"key\":73,\"value\":3000000000},{\"key\":74,\"value\":2000},{\"key\":75,\"value\":12000},{\"key\":77,\"value\":1},{\"key\":78,\"value\":864000}]; async function modifyChainParameters(parameters,proposalID){ parameters.sort((a, b) => { return a.key.toString() > b.key.toString() ? 1 : a.key.toString() === b.key.toString() ? 0 : -1; }) var unsignedProposal1Txn = await tronWeb.transactionBuilder.createProposal(parameters,\"41D0B69631440F0A494BB51F7EEE68FF5C593C00F0\") var signedProposal1Txn = await tronWeb.trx.sign(unsignedProposal1Txn); var receipt1 = await tronWeb.trx.sendRawTransaction(signedProposal1Txn); setTimeout(async function() { console.log(receipt1) console.log(\"Vote proposal 1 !\") var unsignedVoteP1Txn = await tronWeb.transactionBuilder.voteProposal(proposalID, true, tronWeb.defaultAddress.hex) var signedVoteP1Txn = await tronWeb.trx.sign(unsignedVoteP1Txn); var rtn1 = await tronWeb.trx.sendRawTransaction(signedVoteP1Txn); }, 1000) } modifyChainParameters(parametersForProposal1, 1) After creating the proposal through the above code, you can query the proposal's effective time: \"expiration_time\" through the http://127.0.0.1:xxxx/wallet/listproposals interface. The timestamp is in milliseconds. After the effective time has passed, if the \"state\" in the return value of the interface is \"APPROVED\", it means that the proposal has been passed, and you can continue to the next step and create the second proposal. The sample code is as follows: modifyChainParameters(parametersForProposal2, 2) After the proposal takes effect, the dynamic parameters of the private chain will be consistent with the main network. You can query the chain parameters through the /wallet/getchainparameters API.","title":"Deployment Guide"},{"location":"using_javatron/toolkit/","text":"java-tron Node Maintenance Tool - Toolkit \u00b6 The Toolkit integrates a series of tools of java-tron, and more functions will be added into it in the future for the convenience of developers. Currently Toolkit includes the following functions: Database Partition Tool Lite Fullnode Data Pruning Data Copy Data Conversion LevelDB Startup Optimization The following describes the acquisition and use of the Toolkit toolbox in detail. Obtain Toolkit.jar \u00b6 Toolkit.jar can be obtained from the released version directly or by compiling the java-tron source code. Compile the source code: Obtain java-tron source code $ git clone https://github.com/tronprotocol/java-tron.git $ git checkout -t origin/master Compile $ cd java-tron $ ./gradlew clean build -x test You will find the Toolkit.jar under ./java-tron/build/libs/ folder if build is successful. Database Partition Tool \u00b6 As the data on the chain continues to grow, the pressure on data storage will increase. At present, the FullNode data of the TRON public chain has reached 1T, and the daily data growth is about 1.2G. According to the current data growth rate, the annual growth rate is about 450G. A single disk capacity may be insufficient and need to be replaced by a larger disk. To this end the Toolkit toolbox introduces the database storage partitioning tool. The tool can migrate some databases to other storage disks. When the user encounters insufficient disk space, he only needs to add another disk according to the capacity requirement and does not need to replace the original disk. Commands and parameters \u00b6 To use the data partition function provided by Toolkit through the db mv command: # full command java -jar Toolkit.jar db mv [-h] [-c=<config>] [-d=<database>] # examples java -jar Toolkit.jar db mv -c main_net_config.conf -d /data/tron/output-directory Optional command parameters are as follows: -c | --config : [ string ] This option is used to specify the FullNode configuration file. If not specified, the default value will be config.conf. -d | --database-directory : [ string ] This option is used to specify the FullNode database directory. If not specified, the default value will be output-directory. -h | --help : [ bool ] This option is used to view help description, default value: false. Usage Instructions \u00b6 Follow the following steps to use the database partition tool: Stop FullNode service Configure for database storage migration Perform database migration Restart FullNode service Stop FullNode Service \u00b6 Use the command kill -15 pid to close FullNode.jar, below is the FullNode process pid lookup command: $ ps -ef |grep FullNode.jar |grep -v grep |awk '{print $2}'` Configure For Database Storage Migration \u00b6 The configuration of database migration is in the storage.properties field in the java-tron node configuration file. The following is an example of migrating only the block and trans databases to illustrate how to migrate some databases to other storage disks: storage { ...... properties = [ { name = \"block\", path = \"/data1/tron\", }, { name = \"trans\", path = \"/data1/tron\", } ] ...... } name is the database name which you want to migrate, and path is the destination directory for database migration. The tool will migrate the database specified by name to the directory specified by path , and then create a soft link under the original path pointing to path directory. After FullNode starts, it will find the path directory according to the soft link. Perform Database Migration \u00b6 When executed, the current migration progress will be shown. $ java -jar Toolkit.jar db mv -c main_net_config.conf -d /data/tron/output-directory Restart FullNode Service \u00b6 After the migration is complete, restart the java-tron node. # FullNode $ nohup java -Xms9G -Xmx9G -XX:ReservedCodeCacheSize=256m \\ -XX:MetaspaceSize=256m -XX:MaxMetaspaceSize=512m \\ -XX:MaxDirectMemorySize=1G -XX:+PrintGCDetails \\ -XX:+PrintGCDateStamps -Xloggc:gc.log \\ -XX:+UseConcMarkSweepGC -XX:NewRatio=2 \\ -XX:+CMSScavengeBeforeRemark -XX:+ParallelRefProcEnabled \\ -XX:+HeapDumpOnOutOfMemoryError \\ -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70 \\ -jar FullNode.jar -c main_net_config.conf >> start.log 2>&1 & # Super representative's FullNode $ nohup java -Xms9G -Xmx9G -XX:ReservedCodeCacheSize=256m \\ -XX:MetaspaceSize=256m -XX:MaxMetaspaceSize=512m \\ -XX:MaxDirectMemorySize=1G -XX:+PrintGCDetails \\ -XX:+PrintGCDateStamps -Xloggc:gc.log \\ -XX:+UseConcMarkSweepGC -XX:NewRatio=2 \\ -XX:+CMSScavengeBeforeRemark -XX:+ParallelRefProcEnabled \\ -XX:+HeapDumpOnOutOfMemoryError \\ -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70 \\ -jar FullNode.jar --witness -c main_net_config.conf >> start.log 2>&1 & Lite Fullnode Data Pruning \u00b6 Toolkit provides data pruning tool, which is mainly used for generating or pruning Lite Fullnode data. The data pruning tool can divide the complete FullNode data into a snapshot dataset (Snapshot dataset) or a historical dataset (History dataset) according to the current latest_block_number , the snapshot dataset is used to start the Lite Fullnode (That is the Lite fullnode database), and the historical dataset is used for historical data query. Lite Fullnode started with a snapshot data set do not support querying historical data prior to the latest block height at the time of pruning. The data pruning tool also provides the function of merging historical data set with snapshot data set. The usage scenarios are as follows: Convert FullNode data into Lite Fullnode data The Lite Fullnode starts only based on the snapshot data set, use the data pruning tool to convert the full node data into the snapshot data set, and that will get the Lite Fullnode data Prune Lite Fullnode data regularly Since the Lite Fullnode saves the same data as the FullNode after startup, although the data volume of the Lite Fullnode is very small at startup, the data expansion rate in the later period is the same as that of the FullNode, so it may be necessary to periodically prune the data. Clipping the Lite Fullnode data is also to use this tool to cut the Lite Fullnode data into snapshot data set, that is, to obtain the Pruned Lite Fullnode data Convert Lite Fullnode data back to FullNode data Since Lite Fullnode does not support historical data query, if you want to support it, you need to change Lite Fullnode data into FullNode data, then the node will change from Lite Fullnode to FullNode. You can directly download the snapshot of the FullNode database, or you can use the data pruning tool: first, convert the FullNode data into historical data set, and then merge the historical data set and the snapshot data set of the Lite Fullnode to obtain the FullNode data. Note: Before using this tool for any operation, you need to stop the currently running node first. Command and parameters \u00b6 To use the data pruning tool provided by Toolkit through the db lite command: # full command java -jar Toolkit.jar db lite [-h] -ds=<datasetPath> -fn=<fnDataPath> [-o=<operate>] [-t=<type>] # examples #split and get a snapshot dataset java -jar Toolkit.jar db lite -o split -t snapshot --fn-data-path output-directory/database --dataset-path /tmp #split and get a history dataset java -jar Toolkit.jar db lite -o split -t history --fn-data-path output-directory/database --dataset-path /tmp #merge history dataset and snapshot dataset java -jar Toolkit.jar db lite -o merge --fn-data-path /tmp/snapshot --dataset-path /tmp/history Optional command parameters are as follows: --operation | -o : [ split | merge ], this parameter specifies the operation as either to split or to merge, default is split. --type | -t : [ snapshot | history ], this parameter is used only when the operation is split . snapshot means clip to Snapshot Dataset and history means clip to History Dataset. Default is snapshot . --fn-data-path | -fn : The database path to be split or merged. When the operation type is split , fn-data-path is used to indicate the directory of the data to be pruned; when the operation type is merge , fn-data-path indicates the database directory of the Lite Fullnode or the directory of the snapshot dataset. --dataset-path | -ds : When operation is split , dataset-path is the path that store the snapshot or history, when operation is merge , dataset-path is the history data path. Usage Instructions \u00b6 The node database is stored in the output-directory/database directory by default. The examples in this chapter will be explained with the default database directory. The following three examples illustrate how to use the data pruning tool: Split and get a Snapshot Dataset This function can split FullNode data into Lite Fullnode data, and can also be used to regularly trim Lite Fullnode data. The steps are as follows: First, stop the FullNode and execute: # just for simplify, save the snapshot into /tmp directory java -jar Toolkit.jar db lite -o split -t snapshot --fn-data-path output-directory/database --dataset-path /tmp --fn-data-path\uff1a The data directory to be trimmed, that is, the node data directory --dataset-path\uff1a The directory where the output snapshot dataset is stored After the command is executed, a snapshot directory will be generated in /tmp , the data in this directory is the Lite Fullnode data, then rename the directory from snapshot to database (the default value of the storage.db.directory is database , make sure rename the snapshot directory to the specified value) and copy the database directory to the Lite Fullnode database directory to finish the splitting. Finally start the Lite Fullnode. Split and get a History Dataset The command to split the historical data set is as follows: # just for simplify, save the history into `/tmp` directory, java -jar Toolkit.jar db lite -o split -t history --fn-data-path output-directory/database --dataset-path /tmp --fn-data-path\uff1a FullNode data directory --dataset-path\uff1a The directory where the output historical dataset is stored After the command is executed, the history directory will be generated under the /tmp directory, and the data in it is the historical dataset. Merge History Dataset and Snapshot Dataset Both History Dataset and Snapshot Dataset have an info.properties file to identify the block height when they are split. Make sure that the split_block_num in History Dataset is not less than the corresponding value in the Snapshot Dataset . After the historical dataset is merged with the snapshot dataset through the merge operation, the Lite Fullnode will become a real FullNode. The command to merge the historical dataset and the snapshot dataset is as follows: # just for simplify, assume `History dataset` is locate in /tmp java -jar Toolkit.jar db lite -o merge --fn-data-path /tmp/snapshot --dataset-path /tmp/history --fn-data-path\uff1a snapshot dataset directory --dataset-path\uff1a history dataset directory After the command is executed, the merged data will overwrite the directory where the snapshot data set is located, that is, the directory specified by --fn-data-path , copy the merged data to the node database directory, and the Lite Fullnode becomes a FullNode. Data Copy \u00b6 The node database is large, and the database copy operation is time-consuming. The Toolkit provides a fast database copy function, which can quickly copy the LevelDB or RocksDB database in the same file system by creating a hard link. Command and parameters \u00b6 To use the data copy function provided by Toolkit through db copy : # full command java -jar Toolkit.jar db cp [-h] <src> <dest> # examples java -jar Toolkit.jar db cp output-directory/database /tmp/database Optional command parameters are as follows: <src> : Source path for database. Default: output-directory/database <dest> : Output path for database. Default: output-directory-cp/database -h | --help \uff1a[ bool ] provide the help info. Default: false Note: Before using this tool for any operation, you need to stop the currently running node first. Data Conversion \u00b6 Toolkit supports database data conversion function, which can convert LevelDB data into RocksDB data. Command and parameters \u00b6 To use the data conversion function provided by Toolkit through db convert command: # full command java -jar Toolkit.jar db convert [-h] [--safe] <src> <dest> # examples java -jar Toolkit.jar db convert output-directory/database /tmp/database Optional command parameters are as follows: <src> : Input path for leveldb, default: output-directory/database. <dest> : Output path for rocksdb, default: output-directory-dst/database. --safe \uff1aIn safe mode, read data from leveldb then put into rocksdb, it's a very time-consuming procedure. If not, just change engine.properties from leveldb to rocksdb, rocksdb is compatible with leveldb for the current version. This may not be the case in the future, default: false. -h | --help \uff1a[ bool ] Provide the help info, default: false\u3002 Note: Before using this tool for any operation, you need to stop the currently running node first. LevelDB Startup Optimization \u00b6 with the running of levedb, the manifest file will continue to grow. Excessive manifest file will not only affect the startup speed of the node, moreover, there may be an issue that the service is terminated abnormally due to the continuous growth of memory. To solve this issue, toolkit provides the leveldb startup optimization tool. The tool optimizes the file size of the manifest and the startup process of LevelDB, reduces memory usage, and improves node startup speed. Command and parameters \u00b6 To use the LevelDB startup optimization function provided by Toolkit through db archive command: # full command java -jar Toolkit.jar db archive [-h] [-b=<maxBatchSize>] [-d=<databaseDirectory>] [-m=<maxManifestSize>] # examples #1. use default settings java -jar Toolkit.jar db archive #2. specify the database directory as /tmp/db/database java -jar Toolkit.jar db archive -d /tmp/db/database #3. specify the batch size to 64000 when optimizing manifest java -jar Toolkit.jar db archive -b 64000 #4. specify optimization only when Manifest exceeds 128M java -jar Toolkit.jar db archive -m 128 Optional command parameters are as follows: -b | --batch-size : Specify the batch manifest size, default: 80000. -d | --database-directory : Specify the database directory to be processed, default: output-directory/database. -m | --manifest-size : Specify the minimum required manifest file size, unit: M, default: 0. -h | --help \uff1a[ bool ] Provide the help info, default: false. Note: Before using this tool for any operation, you need to stop the currently running node first. Usage instructions, please refer to Leveldb Startup Optimization Plugins .","title":"Node Maintenance Tool"},{"location":"using_javatron/toolkit/#java-tron-node-maintenance-tool-toolkit","text":"The Toolkit integrates a series of tools of java-tron, and more functions will be added into it in the future for the convenience of developers. Currently Toolkit includes the following functions: Database Partition Tool Lite Fullnode Data Pruning Data Copy Data Conversion LevelDB Startup Optimization The following describes the acquisition and use of the Toolkit toolbox in detail.","title":"java-tron Node Maintenance Tool - Toolkit"},{"location":"using_javatron/toolkit/#obtain-toolkitjar","text":"Toolkit.jar can be obtained from the released version directly or by compiling the java-tron source code. Compile the source code: Obtain java-tron source code $ git clone https://github.com/tronprotocol/java-tron.git $ git checkout -t origin/master Compile $ cd java-tron $ ./gradlew clean build -x test You will find the Toolkit.jar under ./java-tron/build/libs/ folder if build is successful.","title":"Obtain Toolkit.jar"},{"location":"using_javatron/toolkit/#database-partition-tool","text":"As the data on the chain continues to grow, the pressure on data storage will increase. At present, the FullNode data of the TRON public chain has reached 1T, and the daily data growth is about 1.2G. According to the current data growth rate, the annual growth rate is about 450G. A single disk capacity may be insufficient and need to be replaced by a larger disk. To this end the Toolkit toolbox introduces the database storage partitioning tool. The tool can migrate some databases to other storage disks. When the user encounters insufficient disk space, he only needs to add another disk according to the capacity requirement and does not need to replace the original disk.","title":"Database Partition Tool"},{"location":"using_javatron/toolkit/#commands-and-parameters","text":"To use the data partition function provided by Toolkit through the db mv command: # full command java -jar Toolkit.jar db mv [-h] [-c=<config>] [-d=<database>] # examples java -jar Toolkit.jar db mv -c main_net_config.conf -d /data/tron/output-directory Optional command parameters are as follows: -c | --config : [ string ] This option is used to specify the FullNode configuration file. If not specified, the default value will be config.conf. -d | --database-directory : [ string ] This option is used to specify the FullNode database directory. If not specified, the default value will be output-directory. -h | --help : [ bool ] This option is used to view help description, default value: false.","title":"Commands and parameters"},{"location":"using_javatron/toolkit/#usage-instructions","text":"Follow the following steps to use the database partition tool: Stop FullNode service Configure for database storage migration Perform database migration Restart FullNode service","title":"Usage Instructions"},{"location":"using_javatron/toolkit/#stop-fullnode-service","text":"Use the command kill -15 pid to close FullNode.jar, below is the FullNode process pid lookup command: $ ps -ef |grep FullNode.jar |grep -v grep |awk '{print $2}'`","title":"Stop FullNode Service"},{"location":"using_javatron/toolkit/#configure-for-database-storage-migration","text":"The configuration of database migration is in the storage.properties field in the java-tron node configuration file. The following is an example of migrating only the block and trans databases to illustrate how to migrate some databases to other storage disks: storage { ...... properties = [ { name = \"block\", path = \"/data1/tron\", }, { name = \"trans\", path = \"/data1/tron\", } ] ...... } name is the database name which you want to migrate, and path is the destination directory for database migration. The tool will migrate the database specified by name to the directory specified by path , and then create a soft link under the original path pointing to path directory. After FullNode starts, it will find the path directory according to the soft link.","title":"Configure For Database Storage Migration"},{"location":"using_javatron/toolkit/#perform-database-migration","text":"When executed, the current migration progress will be shown. $ java -jar Toolkit.jar db mv -c main_net_config.conf -d /data/tron/output-directory","title":"Perform Database Migration"},{"location":"using_javatron/toolkit/#restart-fullnode-service","text":"After the migration is complete, restart the java-tron node. # FullNode $ nohup java -Xms9G -Xmx9G -XX:ReservedCodeCacheSize=256m \\ -XX:MetaspaceSize=256m -XX:MaxMetaspaceSize=512m \\ -XX:MaxDirectMemorySize=1G -XX:+PrintGCDetails \\ -XX:+PrintGCDateStamps -Xloggc:gc.log \\ -XX:+UseConcMarkSweepGC -XX:NewRatio=2 \\ -XX:+CMSScavengeBeforeRemark -XX:+ParallelRefProcEnabled \\ -XX:+HeapDumpOnOutOfMemoryError \\ -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70 \\ -jar FullNode.jar -c main_net_config.conf >> start.log 2>&1 & # Super representative's FullNode $ nohup java -Xms9G -Xmx9G -XX:ReservedCodeCacheSize=256m \\ -XX:MetaspaceSize=256m -XX:MaxMetaspaceSize=512m \\ -XX:MaxDirectMemorySize=1G -XX:+PrintGCDetails \\ -XX:+PrintGCDateStamps -Xloggc:gc.log \\ -XX:+UseConcMarkSweepGC -XX:NewRatio=2 \\ -XX:+CMSScavengeBeforeRemark -XX:+ParallelRefProcEnabled \\ -XX:+HeapDumpOnOutOfMemoryError \\ -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70 \\ -jar FullNode.jar --witness -c main_net_config.conf >> start.log 2>&1 &","title":"Restart FullNode Service"},{"location":"using_javatron/toolkit/#lite-fullnode-data-pruning","text":"Toolkit provides data pruning tool, which is mainly used for generating or pruning Lite Fullnode data. The data pruning tool can divide the complete FullNode data into a snapshot dataset (Snapshot dataset) or a historical dataset (History dataset) according to the current latest_block_number , the snapshot dataset is used to start the Lite Fullnode (That is the Lite fullnode database), and the historical dataset is used for historical data query. Lite Fullnode started with a snapshot data set do not support querying historical data prior to the latest block height at the time of pruning. The data pruning tool also provides the function of merging historical data set with snapshot data set. The usage scenarios are as follows: Convert FullNode data into Lite Fullnode data The Lite Fullnode starts only based on the snapshot data set, use the data pruning tool to convert the full node data into the snapshot data set, and that will get the Lite Fullnode data Prune Lite Fullnode data regularly Since the Lite Fullnode saves the same data as the FullNode after startup, although the data volume of the Lite Fullnode is very small at startup, the data expansion rate in the later period is the same as that of the FullNode, so it may be necessary to periodically prune the data. Clipping the Lite Fullnode data is also to use this tool to cut the Lite Fullnode data into snapshot data set, that is, to obtain the Pruned Lite Fullnode data Convert Lite Fullnode data back to FullNode data Since Lite Fullnode does not support historical data query, if you want to support it, you need to change Lite Fullnode data into FullNode data, then the node will change from Lite Fullnode to FullNode. You can directly download the snapshot of the FullNode database, or you can use the data pruning tool: first, convert the FullNode data into historical data set, and then merge the historical data set and the snapshot data set of the Lite Fullnode to obtain the FullNode data. Note: Before using this tool for any operation, you need to stop the currently running node first.","title":"Lite Fullnode Data Pruning"},{"location":"using_javatron/toolkit/#command-and-parameters","text":"To use the data pruning tool provided by Toolkit through the db lite command: # full command java -jar Toolkit.jar db lite [-h] -ds=<datasetPath> -fn=<fnDataPath> [-o=<operate>] [-t=<type>] # examples #split and get a snapshot dataset java -jar Toolkit.jar db lite -o split -t snapshot --fn-data-path output-directory/database --dataset-path /tmp #split and get a history dataset java -jar Toolkit.jar db lite -o split -t history --fn-data-path output-directory/database --dataset-path /tmp #merge history dataset and snapshot dataset java -jar Toolkit.jar db lite -o merge --fn-data-path /tmp/snapshot --dataset-path /tmp/history Optional command parameters are as follows: --operation | -o : [ split | merge ], this parameter specifies the operation as either to split or to merge, default is split. --type | -t : [ snapshot | history ], this parameter is used only when the operation is split . snapshot means clip to Snapshot Dataset and history means clip to History Dataset. Default is snapshot . --fn-data-path | -fn : The database path to be split or merged. When the operation type is split , fn-data-path is used to indicate the directory of the data to be pruned; when the operation type is merge , fn-data-path indicates the database directory of the Lite Fullnode or the directory of the snapshot dataset. --dataset-path | -ds : When operation is split , dataset-path is the path that store the snapshot or history, when operation is merge , dataset-path is the history data path.","title":"Command and parameters"},{"location":"using_javatron/toolkit/#usage-instructions_1","text":"The node database is stored in the output-directory/database directory by default. The examples in this chapter will be explained with the default database directory. The following three examples illustrate how to use the data pruning tool: Split and get a Snapshot Dataset This function can split FullNode data into Lite Fullnode data, and can also be used to regularly trim Lite Fullnode data. The steps are as follows: First, stop the FullNode and execute: # just for simplify, save the snapshot into /tmp directory java -jar Toolkit.jar db lite -o split -t snapshot --fn-data-path output-directory/database --dataset-path /tmp --fn-data-path\uff1a The data directory to be trimmed, that is, the node data directory --dataset-path\uff1a The directory where the output snapshot dataset is stored After the command is executed, a snapshot directory will be generated in /tmp , the data in this directory is the Lite Fullnode data, then rename the directory from snapshot to database (the default value of the storage.db.directory is database , make sure rename the snapshot directory to the specified value) and copy the database directory to the Lite Fullnode database directory to finish the splitting. Finally start the Lite Fullnode. Split and get a History Dataset The command to split the historical data set is as follows: # just for simplify, save the history into `/tmp` directory, java -jar Toolkit.jar db lite -o split -t history --fn-data-path output-directory/database --dataset-path /tmp --fn-data-path\uff1a FullNode data directory --dataset-path\uff1a The directory where the output historical dataset is stored After the command is executed, the history directory will be generated under the /tmp directory, and the data in it is the historical dataset. Merge History Dataset and Snapshot Dataset Both History Dataset and Snapshot Dataset have an info.properties file to identify the block height when they are split. Make sure that the split_block_num in History Dataset is not less than the corresponding value in the Snapshot Dataset . After the historical dataset is merged with the snapshot dataset through the merge operation, the Lite Fullnode will become a real FullNode. The command to merge the historical dataset and the snapshot dataset is as follows: # just for simplify, assume `History dataset` is locate in /tmp java -jar Toolkit.jar db lite -o merge --fn-data-path /tmp/snapshot --dataset-path /tmp/history --fn-data-path\uff1a snapshot dataset directory --dataset-path\uff1a history dataset directory After the command is executed, the merged data will overwrite the directory where the snapshot data set is located, that is, the directory specified by --fn-data-path , copy the merged data to the node database directory, and the Lite Fullnode becomes a FullNode.","title":"Usage Instructions"},{"location":"using_javatron/toolkit/#data-copy","text":"The node database is large, and the database copy operation is time-consuming. The Toolkit provides a fast database copy function, which can quickly copy the LevelDB or RocksDB database in the same file system by creating a hard link.","title":"Data Copy"},{"location":"using_javatron/toolkit/#command-and-parameters_1","text":"To use the data copy function provided by Toolkit through db copy : # full command java -jar Toolkit.jar db cp [-h] <src> <dest> # examples java -jar Toolkit.jar db cp output-directory/database /tmp/database Optional command parameters are as follows: <src> : Source path for database. Default: output-directory/database <dest> : Output path for database. Default: output-directory-cp/database -h | --help \uff1a[ bool ] provide the help info. Default: false Note: Before using this tool for any operation, you need to stop the currently running node first.","title":"Command and parameters"},{"location":"using_javatron/toolkit/#data-conversion","text":"Toolkit supports database data conversion function, which can convert LevelDB data into RocksDB data.","title":"Data Conversion"},{"location":"using_javatron/toolkit/#command-and-parameters_2","text":"To use the data conversion function provided by Toolkit through db convert command: # full command java -jar Toolkit.jar db convert [-h] [--safe] <src> <dest> # examples java -jar Toolkit.jar db convert output-directory/database /tmp/database Optional command parameters are as follows: <src> : Input path for leveldb, default: output-directory/database. <dest> : Output path for rocksdb, default: output-directory-dst/database. --safe \uff1aIn safe mode, read data from leveldb then put into rocksdb, it's a very time-consuming procedure. If not, just change engine.properties from leveldb to rocksdb, rocksdb is compatible with leveldb for the current version. This may not be the case in the future, default: false. -h | --help \uff1a[ bool ] Provide the help info, default: false\u3002 Note: Before using this tool for any operation, you need to stop the currently running node first.","title":"Command and parameters"},{"location":"using_javatron/toolkit/#leveldb-startup-optimization","text":"with the running of levedb, the manifest file will continue to grow. Excessive manifest file will not only affect the startup speed of the node, moreover, there may be an issue that the service is terminated abnormally due to the continuous growth of memory. To solve this issue, toolkit provides the leveldb startup optimization tool. The tool optimizes the file size of the manifest and the startup process of LevelDB, reduces memory usage, and improves node startup speed.","title":"LevelDB Startup Optimization"},{"location":"using_javatron/toolkit/#command-and-parameters_3","text":"To use the LevelDB startup optimization function provided by Toolkit through db archive command: # full command java -jar Toolkit.jar db archive [-h] [-b=<maxBatchSize>] [-d=<databaseDirectory>] [-m=<maxManifestSize>] # examples #1. use default settings java -jar Toolkit.jar db archive #2. specify the database directory as /tmp/db/database java -jar Toolkit.jar db archive -d /tmp/db/database #3. specify the batch size to 64000 when optimizing manifest java -jar Toolkit.jar db archive -b 64000 #4. specify optimization only when Manifest exceeds 128M java -jar Toolkit.jar db archive -m 128 Optional command parameters are as follows: -b | --batch-size : Specify the batch manifest size, default: 80000. -d | --database-directory : Specify the database directory to be processed, default: output-directory/database. -m | --manifest-size : Specify the minimum required manifest file size, unit: M, default: 0. -h | --help \uff1a[ bool ] Provide the help info, default: false. Note: Before using this tool for any operation, you need to stop the currently running node first. Usage instructions, please refer to Leveldb Startup Optimization Plugins .","title":"Command and parameters"}]}